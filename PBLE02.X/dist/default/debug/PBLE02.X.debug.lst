

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Mon Jul 01 00:28:05 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    80                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    81                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    82   000000                     
    83                           ; Generated 17/10/2023 GMT
    84                           ; 
    85                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    86                           ; All rights reserved.
    87                           ; 
    88                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    89                           ; 
    90                           ; Redistribution and use in source and binary forms, with or without modification, are
    91                           ; permitted provided that the following conditions are met:
    92                           ; 
    93                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    94                           ;        conditions and the following disclaimer.
    95                           ; 
    96                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    97                           ;        of conditions and the following disclaimer in the documentation and/or other
    98                           ;        materials provided with the distribution. Publication is not required when
    99                           ;        this file is used in an embedded application.
   100                           ; 
   101                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   102                           ;        software without specific prior written permission.
   103                           ; 
   104                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   105                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   106                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   107                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   108                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   109                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   110                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   111                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   112                           ; 
   113                           ; 
   114                           ; Code-generator required, PIC18F4550 Definitions
   115                           ; 
   116                           ; SFR Addresses
   117   000000                     
   118                           	psect	idataCOMRAM
   119   00596D                     __pidataCOMRAM:
   120                           	callstack 0
   121                           
   122                           ;initializer for kpDebounce@teclaOld
   123   00596D  01                 	db	1
   124                           
   125                           	psect	idataBANK0
   126   005AC8                     __pidataBANK0:
   127                           	callstack 0
   128                           
   129                           ;initializer for _msgs
   130   005AC8  E0                 	db	low STR_4
   131   005AC9  7C                 	db	high STR_4
   132   005ACA  7A                 	db	low STR_5
   133   005ACB  7C                 	db	high STR_5
   134   005ACC  CF                 	db	low STR_6
   135   005ACD  7C                 	db	high STR_6
   136   005ACE  8B                 	db	low STR_7
   137   005ACF  7C                 	db	high STR_7
   138   005AD0  9C                 	db	low STR_8
   139   005AD1  7C                 	db	high STR_8
   140   005AD2  69                 	db	low STR_9
   141   005AD3  7C                 	db	high STR_9
   142   005AD4  58                 	db	low STR_10
   143   005AD5  7C                 	db	high STR_10
   144   005AD6  36                 	db	low STR_11
   145   005AD7  7C                 	db	high STR_11
   146   005AD8  47                 	db	low STR_12
   147   005AD9  7C                 	db	high STR_12
   148   005ADA  25                 	db	low STR_13
   149   005ADB  7C                 	db	high STR_13
   150   005ADC  AD                 	db	low STR_14
   151   005ADD  7C                 	db	high STR_14
   152   005ADE  BE                 	db	low STR_15
   153   005ADF  7C                 	db	high STR_15
   154   005AE0  02                 	db	low STR_16
   155   005AE1  7D                 	db	high STR_16
   156   005AE2  F1                 	db	low STR_17
   157   005AE3  7C                 	db	high STR_17
   158                           
   159                           ;initializer for _serial_out
   160   005AE4  31                 	db	low STR_2
   161   005AE5  7D                 	db	high STR_2
   162   005AE6  23                 	db	low STR_3
   163   005AE7  7D                 	db	high STR_3
   164   000000                     _ADRESL	set	4035
   165   000000                     _ADRESH	set	4036
   166   000000                     _ADCON0	set	4034
   167   000000                     _PORTC	set	3970
   168   000000                     _SPBRG	set	4015
   169   000000                     _SPBRGH	set	4016
   170   000000                     _BAUDCON	set	4024
   171   000000                     _TXSTA	set	4012
   172   000000                     _RCREG	set	4014
   173   000000                     _ADCON0bits	set	4034
   174   000000                     _PORTA	set	3968
   175   000000                     _PORTB	set	3969
   176   000000                     _PORTD	set	3971
   177   000000                     _TRISC	set	3988
   178   000000                     _PIR1	set	3998
   179   000000                     _RCSTA	set	4011
   180   000000                     _TXREG	set	4013
   181   000000                     _ADCON2	set	4032
   182   000000                     _ADCON1	set	4033
   183   000000                     _TRISE	set	3990
   184   000000                     _TRISD	set	3989
   185   000000                     _TRISA	set	3986
   186   000000                     _PORTE	set	3972
   187   000000                     _TRISB	set	3987
   188                           
   189                           	psect	mediumconst
   190   007C02                     __pmediumconst:
   191                           	callstack 0
   192   007C02  00                 	db	0
   193   007C03                     STR_21:
   194   007C03  45                 	db	69	;'E'
   195   007C04  6E                 	db	110	;'n'
   196   007C05  67                 	db	103	;'g'
   197   007C06  6C                 	db	108	;'l'
   198   007C07  69                 	db	105	;'i'
   199   007C08  73                 	db	115	;'s'
   200   007C09  68                 	db	104	;'h'
   201   007C0A  20                 	db	32
   202   007C0B  20                 	db	32
   203   007C0C  20                 	db	32
   204   007C0D  20                 	db	32
   205   007C0E  20                 	db	32
   206   007C0F  20                 	db	32
   207   007C10  20                 	db	32
   208   007C11  20                 	db	32
   209   007C12  20                 	db	32
   210   007C13  00                 	db	0
   211   007C14                     STR_20:
   212   007C14  50                 	db	80	;'P'
   213   007C15  6F                 	db	111	;'o'
   214   007C16  72                 	db	114	;'r'
   215   007C17  74                 	db	116	;'t'
   216   007C18  75                 	db	117	;'u'
   217   007C19  67                 	db	103	;'g'
   218   007C1A  75                 	db	117	;'u'
   219   007C1B  65                 	db	101	;'e'
   220   007C1C  73                 	db	115	;'s'
   221   007C1D  20                 	db	32
   222   007C1E  20                 	db	32
   223   007C1F  20                 	db	32
   224   007C20  20                 	db	32
   225   007C21  20                 	db	32
   226   007C22  20                 	db	32
   227   007C23  20                 	db	32
   228   007C24  00                 	db	0
   229   007C25                     STR_13:
   230   007C25  43                 	db	67	;'C'
   231   007C26  68                 	db	104	;'h'
   232   007C27  61                 	db	97	;'a'
   233   007C28  6E                 	db	110	;'n'
   234   007C29  67                 	db	103	;'g'
   235   007C2A  65                 	db	101	;'e'
   236   007C2B  20                 	db	32
   237   007C2C  53                 	db	83	;'S'
   238   007C2D  45                 	db	69	;'E'
   239   007C2E  43                 	db	67	;'C'
   240   007C2F  20                 	db	32
   241   007C30  20                 	db	32
   242   007C31  20                 	db	32
   243   007C32  20                 	db	32
   244   007C33  20                 	db	32
   245   007C34  20                 	db	32
   246   007C35  00                 	db	0
   247   007C36                     STR_11:
   248   007C36  43                 	db	67	;'C'
   249   007C37  68                 	db	104	;'h'
   250   007C38  61                 	db	97	;'a'
   251   007C39  6E                 	db	110	;'n'
   252   007C3A  67                 	db	103	;'g'
   253   007C3B  65                 	db	101	;'e'
   254   007C3C  20                 	db	32
   255   007C3D  4D                 	db	77	;'M'
   256   007C3E  49                 	db	73	;'I'
   257   007C3F  4E                 	db	78	;'N'
   258   007C40  20                 	db	32
   259   007C41  20                 	db	32
   260   007C42  20                 	db	32
   261   007C43  20                 	db	32
   262   007C44  20                 	db	32
   263   007C45  20                 	db	32
   264   007C46  00                 	db	0
   265   007C47                     STR_12:
   266   007C47  41                 	db	65	;'A'
   267   007C48  6C                 	db	108	;'l'
   268   007C49  74                 	db	116	;'t'
   269   007C4A  65                 	db	101	;'e'
   270   007C4B  72                 	db	114	;'r'
   271   007C4C  61                 	db	97	;'a'
   272   007C4D  72                 	db	114	;'r'
   273   007C4E  20                 	db	32
   274   007C4F  53                 	db	83	;'S'
   275   007C50  45                 	db	69	;'E'
   276   007C51  43                 	db	67	;'C'
   277   007C52  20                 	db	32
   278   007C53  20                 	db	32
   279   007C54  20                 	db	32
   280   007C55  20                 	db	32
   281   007C56  20                 	db	32
   282   007C57  00                 	db	0
   283   007C58                     STR_10:
   284   007C58  41                 	db	65	;'A'
   285   007C59  6C                 	db	108	;'l'
   286   007C5A  74                 	db	116	;'t'
   287   007C5B  65                 	db	101	;'e'
   288   007C5C  72                 	db	114	;'r'
   289   007C5D  61                 	db	97	;'a'
   290   007C5E  72                 	db	114	;'r'
   291   007C5F  20                 	db	32
   292   007C60  4D                 	db	77	;'M'
   293   007C61  49                 	db	73	;'I'
   294   007C62  4E                 	db	78	;'N'
   295   007C63  20                 	db	32
   296   007C64  20                 	db	32
   297   007C65  20                 	db	32
   298   007C66  20                 	db	32
   299   007C67  20                 	db	32
   300   007C68  00                 	db	0
   301   007C69                     STR_9:
   302   007C69  43                 	db	67	;'C'
   303   007C6A  68                 	db	104	;'h'
   304   007C6B  61                 	db	97	;'a'
   305   007C6C  6E                 	db	110	;'n'
   306   007C6D  67                 	db	103	;'g'
   307   007C6E  65                 	db	101	;'e'
   308   007C6F  20                 	db	32
   309   007C70  48                 	db	72	;'H'
   310   007C71  4F                 	db	79	;'O'
   311   007C72  55                 	db	85	;'U'
   312   007C73  52                 	db	82	;'R'
   313   007C74  20                 	db	32
   314   007C75  20                 	db	32
   315   007C76  20                 	db	32
   316   007C77  20                 	db	32
   317   007C78  20                 	db	32
   318   007C79  00                 	db	0
   319   007C7A                     STR_5:
   320   007C7A  55                 	db	85	;'U'
   321   007C7B  70                 	db	112	;'p'
   322   007C7C  70                 	db	112	;'p'
   323   007C7D  65                 	db	101	;'e'
   324   007C7E  72                 	db	114	;'r'
   325   007C7F  20                 	db	32
   326   007C80  41                 	db	65	;'A'
   327   007C81  6C                 	db	108	;'l'
   328   007C82  61                 	db	97	;'a'
   329   007C83  72                 	db	114	;'r'
   330   007C84  6D                 	db	109	;'m'
   331   007C85  20                 	db	32
   332   007C86  20                 	db	32
   333   007C87  20                 	db	32
   334   007C88  20                 	db	32
   335   007C89  20                 	db	32
   336   007C8A  00                 	db	0
   337   007C8B                     STR_7:
   338   007C8B  4C                 	db	76	;'L'
   339   007C8C  6F                 	db	111	;'o'
   340   007C8D  77                 	db	119	;'w'
   341   007C8E  65                 	db	101	;'e'
   342   007C8F  72                 	db	114	;'r'
   343   007C90  20                 	db	32
   344   007C91  41                 	db	65	;'A'
   345   007C92  6C                 	db	108	;'l'
   346   007C93  61                 	db	97	;'a'
   347   007C94  72                 	db	114	;'r'
   348   007C95  6D                 	db	109	;'m'
   349   007C96  20                 	db	32
   350   007C97  20                 	db	32
   351   007C98  20                 	db	32
   352   007C99  20                 	db	32
   353   007C9A  20                 	db	32
   354   007C9B  00                 	db	0
   355   007C9C                     STR_8:
   356   007C9C  41                 	db	65	;'A'
   357   007C9D  6C                 	db	108	;'l'
   358   007C9E  74                 	db	116	;'t'
   359   007C9F  65                 	db	101	;'e'
   360   007CA0  72                 	db	114	;'r'
   361   007CA1  61                 	db	97	;'a'
   362   007CA2  72                 	db	114	;'r'
   363   007CA3  20                 	db	32
   364   007CA4  48                 	db	72	;'H'
   365   007CA5  4F                 	db	79	;'O'
   366   007CA6  52                 	db	82	;'R'
   367   007CA7  41                 	db	65	;'A'
   368   007CA8  53                 	db	83	;'S'
   369   007CA9  20                 	db	32
   370   007CAA  20                 	db	32
   371   007CAB  20                 	db	32
   372   007CAC  00                 	db	0
   373   007CAD                     STR_14:
   374   007CAD  41                 	db	65	;'A'
   375   007CAE  6C                 	db	108	;'l'
   376   007CAF  74                 	db	116	;'t'
   377   007CB0  65                 	db	101	;'e'
   378   007CB1  72                 	db	114	;'r'
   379   007CB2  61                 	db	97	;'a'
   380   007CB3  72                 	db	114	;'r'
   381   007CB4  20                 	db	32
   382   007CB5  69                 	db	105	;'i'
   383   007CB6  64                 	db	100	;'d'
   384   007CB7  69                 	db	105	;'i'
   385   007CB8  6F                 	db	111	;'o'
   386   007CB9  6D                 	db	109	;'m'
   387   007CBA  61                 	db	97	;'a'
   388   007CBB  20                 	db	32
   389   007CBC  20                 	db	32
   390   007CBD  00                 	db	0
   391   007CBE                     STR_15:
   392   007CBE  43                 	db	67	;'C'
   393   007CBF  68                 	db	104	;'h'
   394   007CC0  61                 	db	97	;'a'
   395   007CC1  6E                 	db	110	;'n'
   396   007CC2  67                 	db	103	;'g'
   397   007CC3  65                 	db	101	;'e'
   398   007CC4  20                 	db	32
   399   007CC5  6C                 	db	108	;'l'
   400   007CC6  61                 	db	97	;'a'
   401   007CC7  6E                 	db	110	;'n'
   402   007CC8  67                 	db	103	;'g'
   403   007CC9  75                 	db	117	;'u'
   404   007CCA  61                 	db	97	;'a'
   405   007CCB  67                 	db	103	;'g'
   406   007CCC  65                 	db	101	;'e'
   407   007CCD  20                 	db	32
   408   007CCE  00                 	db	0
   409   007CCF                     STR_6:
   410   007CCF  41                 	db	65	;'A'
   411   007CD0  6C                 	db	108	;'l'
   412   007CD1  61                 	db	97	;'a'
   413   007CD2  72                 	db	114	;'r'
   414   007CD3  6D                 	db	109	;'m'
   415   007CD4  65                 	db	101	;'e'
   416   007CD5  20                 	db	32
   417   007CD6  49                 	db	73	;'I'
   418   007CD7  6E                 	db	110	;'n'
   419   007CD8  66                 	db	102	;'f'
   420   007CD9  65                 	db	101	;'e'
   421   007CDA  72                 	db	114	;'r'
   422   007CDB  69                 	db	105	;'i'
   423   007CDC  6F                 	db	111	;'o'
   424   007CDD  72                 	db	114	;'r'
   425   007CDE  20                 	db	32
   426   007CDF  00                 	db	0
   427   007CE0                     STR_4:
   428   007CE0  41                 	db	65	;'A'
   429   007CE1  6C                 	db	108	;'l'
   430   007CE2  61                 	db	97	;'a'
   431   007CE3  72                 	db	114	;'r'
   432   007CE4  6D                 	db	109	;'m'
   433   007CE5  65                 	db	101	;'e'
   434   007CE6  20                 	db	32
   435   007CE7  53                 	db	83	;'S'
   436   007CE8  75                 	db	117	;'u'
   437   007CE9  70                 	db	112	;'p'
   438   007CEA  65                 	db	101	;'e'
   439   007CEB  72                 	db	114	;'r'
   440   007CEC  69                 	db	105	;'i'
   441   007CED  6F                 	db	111	;'o'
   442   007CEE  72                 	db	114	;'r'
   443   007CEF  20                 	db	32
   444   007CF0  00                 	db	0
   445   007CF1                     STR_17:
   446   007CF1  41                 	db	65	;'A'
   447   007CF2  4C                 	db	76	;'L'
   448   007CF3  41                 	db	65	;'A'
   449   007CF4  52                 	db	82	;'R'
   450   007CF5  4D                 	db	77	;'M'
   451   007CF6  20                 	db	32
   452   007CF7  41                 	db	65	;'A'
   453   007CF8  43                 	db	67	;'C'
   454   007CF9  54                 	db	84	;'T'
   455   007CFA  49                 	db	73	;'I'
   456   007CFB  56                 	db	86	;'V'
   457   007CFC  41                 	db	65	;'A'
   458   007CFD  54                 	db	84	;'T'
   459   007CFE  45                 	db	69	;'E'
   460   007CFF  44                 	db	68	;'D'
   461   007D00  21                 	db	33
   462   007D01  00                 	db	0
   463   007D02                     STR_16:
   464   007D02  41                 	db	65	;'A'
   465   007D03  4C                 	db	76	;'L'
   466   007D04  41                 	db	65	;'A'
   467   007D05  52                 	db	82	;'R'
   468   007D06  4D                 	db	77	;'M'
   469   007D07  45                 	db	69	;'E'
   470   007D08  20                 	db	32
   471   007D09  41                 	db	65	;'A'
   472   007D0A  43                 	db	67	;'C'
   473   007D0B  49                 	db	73	;'I'
   474   007D0C  4F                 	db	79	;'O'
   475   007D0D  4E                 	db	78	;'N'
   476   007D0E  41                 	db	65	;'A'
   477   007D0F  44                 	db	68	;'D'
   478   007D10  4F                 	db	79	;'O'
   479   007D11  21                 	db	33
   480   007D12  00                 	db	0
   481   007D13                     STR_22:
   482   007D13  20                 	db	32
   483   007D14  20                 	db	32
   484   007D15  20                 	db	32
   485   007D16  20                 	db	32
   486   007D17  20                 	db	32
   487   007D18  20                 	db	32
   488   007D19  20                 	db	32
   489   007D1A  20                 	db	32
   490   007D1B  20                 	db	32
   491   007D1C  20                 	db	32
   492   007D1D  20                 	db	32
   493   007D1E  20                 	db	32
   494   007D1F  20                 	db	32
   495   007D20  20                 	db	32
   496   007D21  20                 	db	32
   497   007D22  00                 	db	0
   498   007D23                     STR_3:
   499   007D23  41                 	db	65	;'A'
   500   007D24  43                 	db	67	;'C'
   501   007D25  54                 	db	84	;'T'
   502   007D26  49                 	db	73	;'I'
   503   007D27  56                 	db	86	;'V'
   504   007D28  41                 	db	65	;'A'
   505   007D29  54                 	db	84	;'T'
   506   007D2A  45                 	db	69	;'E'
   507   007D2B  44                 	db	68	;'D'
   508   007D2C  20                 	db	32
   509   007D2D  41                 	db	65	;'A'
   510   007D2E  54                 	db	84	;'T'
   511   007D2F  20                 	db	32
   512   007D30  00                 	db	0
   513   007D31                     STR_2:
   514   007D31  41                 	db	65	;'A'
   515   007D32  43                 	db	67	;'C'
   516   007D33  49                 	db	73	;'I'
   517   007D34  4F                 	db	79	;'O'
   518   007D35  4E                 	db	78	;'N'
   519   007D36  41                 	db	65	;'A'
   520   007D37  44                 	db	68	;'D'
   521   007D38  4F                 	db	79	;'O'
   522   007D39  20                 	db	32
   523   007D3A  45                 	db	69	;'E'
   524   007D3B  4D                 	db	77	;'M'
   525   007D3C  20                 	db	32
   526   007D3D  00                 	db	0
   527   007D3E  00                 	db	0	; dummy byte at the end
   528   000000                     
   529                           ; #config settings
   530                           
   531                           	psect	cinit
   532   005FB0                     __pcinit:
   533                           	callstack 0
   534   005FB0                     start_initialization:
   535                           	callstack 0
   536   005FB0                     __initialization:
   537                           	callstack 0
   538                           
   539                           ; Initialize objects allocated to BANK0 (32 bytes)
   540                           ; load TBLPTR registers with __pidataBANK0
   541   005FB0  0EC8               	movlw	low __pidataBANK0
   542   005FB2  6EF6               	movwf	tblptrl,c
   543   005FB4  0E5A               	movlw	high __pidataBANK0
   544   005FB6  6EF7               	movwf	tblptrh,c
   545   005FB8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   546   005FBA  6EF8               	movwf	tblptru,c
   547   005FBC  EE00  F060         	lfsr	0,__pdataBANK0
   548   005FC0  EE10 F020          	lfsr	1,32
   549   005FC4                     copy_data0:
   550   005FC4  0009               	tblrd		*+
   551   005FC6  CFF5 FFEE          	movff	tablat,postinc0
   552   005FCA  50E5               	movf	postdec1,w,c
   553   005FCC  50E1               	movf	fsr1l,w,c
   554   005FCE  E1FA               	bnz	copy_data0
   555                           
   556                           ; Initialize objects allocated to COMRAM (1 bytes)
   557                           ; load TBLPTR registers with __pidataCOMRAM
   558   005FD0  0E6D               	movlw	low __pidataCOMRAM
   559   005FD2  6EF6               	movwf	tblptrl,c
   560   005FD4  0E59               	movlw	high __pidataCOMRAM
   561   005FD6  6EF7               	movwf	tblptrh,c
   562   005FD8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   563   005FDA  6EF8               	movwf	tblptru,c
   564   005FDC  0009               	tblrd		*+	;fetch initializer
   565   005FDE  CFF5 F05F          	movff	tablat,__pdataCOMRAM
   566                           
   567                           ; Clear objects allocated to BANK0 (21 bytes)
   568   005FE2  EE00  F080         	lfsr	0,__pbssBANK0
   569   005FE6  0E15               	movlw	21
   570   005FE8                     clear_0:
   571   005FE8  6AEE               	clrf	postinc0,c
   572   005FEA  06E8               	decf	wreg,f,c
   573   005FEC  E1FD               	bnz	clear_0
   574                           
   575                           ; Clear objects allocated to COMRAM (24 bytes)
   576   005FEE  EE00  F047         	lfsr	0,__pbssCOMRAM
   577   005FF2  0E18               	movlw	24
   578   005FF4                     clear_1:
   579   005FF4  6AEE               	clrf	postinc0,c
   580   005FF6  06E8               	decf	wreg,f,c
   581   005FF8  E1FD               	bnz	clear_1
   582   005FFA                     end_of_initialization:
   583                           	callstack 0
   584   005FFA                     __end_of__initialization:
   585                           	callstack 0
   586   005FFA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   587   005FFC  6EF8               	movwf	tblptru,c
   588   005FFE  0100               	movlb	0
   589   006000  EFE6  F02D         	goto	_main	;jump to C main() function
   590                           
   591                           	psect	bssCOMRAM
   592   000047                     __pbssCOMRAM:
   593                           	callstack 0
   594   000047                     eventRead@msg:
   595                           	callstack 0
   596   000047                     	ds	6
   597   00004D                     _timer:
   598                           	callstack 0
   599   00004D                     	ds	2
   600   00004F                     setAlarmLowerLevel@b:
   601                           	callstack 0
   602   00004F                     	ds	1
   603   000050                     setAlarmLowerLevel@a:
   604                           	callstack 0
   605   000050                     	ds	1
   606   000051                     getAlarmLowerLevel@b:
   607                           	callstack 0
   608   000051                     	ds	1
   609   000052                     getAlarmLowerLevel@a:
   610                           	callstack 0
   611   000052                     	ds	1
   612   000053                     setAlarmUpperLevel@b:
   613                           	callstack 0
   614   000053                     	ds	1
   615   000054                     setAlarmUpperLevel@a:
   616                           	callstack 0
   617   000054                     	ds	1
   618   000055                     getAlarmUpperLevel@b:
   619                           	callstack 0
   620   000055                     	ds	1
   621   000056                     getAlarmUpperLevel@a:
   622                           	callstack 0
   623   000056                     	ds	1
   624   000057                     _language:
   625                           	callstack 0
   626   000057                     	ds	1
   627   000058                     _state:
   628                           	callstack 0
   629   000058                     	ds	1
   630   000059                     eventRead@data:
   631                           	callstack 0
   632   000059                     	ds	1
   633   00005A                     _reading_protocol:
   634                           	callstack 0
   635   00005A                     	ds	1
   636   00005B                     _started:
   637                           	callstack 0
   638   00005B                     	ds	1
   639   00005C                     kpDebounce@teclaNew:
   640                           	callstack 0
   641   00005C                     	ds	1
   642   00005D                     kpDebounce@tempo:
   643                           	callstack 0
   644   00005D                     	ds	1
   645   00005E                     _tecla:
   646                           	callstack 0
   647   00005E                     	ds	1
   648                           
   649                           	psect	dataCOMRAM
   650   00005F                     __pdataCOMRAM:
   651                           	callstack 0
   652   00005F                     kpDebounce@teclaOld:
   653                           	callstack 0
   654   00005F                     	ds	1
   655                           
   656                           	psect	bssBANK0
   657   000080                     __pbssBANK0:
   658                           	callstack 0
   659   000080                     _level@var$F512:
   660                           	callstack 0
   661   000080                     	ds	2
   662   000082                     	ds	2
   663   000084                     	ds	2
   664   000086                     _send:
   665                           	callstack 0
   666   000086                     	ds	2
   667   000088                     _level:
   668                           	callstack 0
   669   000088                     	ds	2
   670   00008A                     _flag:
   671                           	callstack 0
   672   00008A                     	ds	2
   673   00008C                     _key_ant:
   674                           	callstack 0
   675   00008C                     	ds	2
   676   00008E                     eventRead@envio:
   677                           	callstack 0
   678   00008E                     	ds	7
   679                           
   680                           	psect	dataBANK0
   681   000060                     __pdataBANK0:
   682                           	callstack 0
   683   000060                     _msgs:
   684                           	callstack 0
   685   000060                     	ds	28
   686   00007C                     _serial_out:
   687                           	callstack 0
   688   00007C                     	ds	4
   689                           
   690                           	psect	cstackCOMRAM
   691   000001                     __pcstackCOMRAM:
   692                           	callstack 0
   693   000001                     ?_digitalRead:
   694                           	callstack 0
   695   000001                     ?_getLevel:
   696                           	callstack 0
   697   000001                     ?_ADC_Read:
   698                           	callstack 0
   699   000001                     ?___wmul:
   700                           	callstack 0
   701   000001                     ?___awdiv:
   702                           	callstack 0
   703   000001                     serialSend@c:
   704                           	callstack 0
   705   000001                     serialRead@resp:
   706                           	callstack 0
   707   000001                     Delay40us@j:
   708                           	callstack 0
   709   000001                     Delay2ms@j:
   710                           	callstack 0
   711   000001                     lcdCommand4bits@data:
   712                           	callstack 0
   713   000001                     setState@newState:
   714                           	callstack 0
   715   000001                     digitalWrite@pin:
   716                           	callstack 0
   717   000001                     digitalRead@pin:
   718                           	callstack 0
   719   000001                     pinMode@pin:
   720                           	callstack 0
   721   000001                     ___wmul@multiplier:
   722                           	callstack 0
   723   000001                     ___awdiv@dividend:
   724                           	callstack 0
   725                           
   726                           ; 2 bytes @ 0x0
   727   000001                     	ds	1
   728   000002                     Delay2ms@k:
   729                           	callstack 0
   730   000002                     lcdCommand4bits@cmd:
   731                           	callstack 0
   732                           
   733                           ; 1 bytes @ 0x1
   734   000002                     	ds	1
   735   000003                     ??_digitalRead:
   736   000003                     ??_ADC_Read:
   737   000003                     lcdCommand@cmd:
   738                           	callstack 0
   739   000003                     lcdData@valor:
   740                           	callstack 0
   741   000003                     digitalWrite@value:
   742                           	callstack 0
   743   000003                     pinMode@type:
   744                           	callstack 0
   745   000003                     ___wmul@multiplicand:
   746                           	callstack 0
   747   000003                     ___awdiv@divisor:
   748                           	callstack 0
   749                           
   750                           ; 2 bytes @ 0x2
   751   000003                     	ds	1
   752   000004                     lcdInit@i:
   753                           	callstack 0
   754   000004                     lcdString@msg:
   755                           	callstack 0
   756                           
   757                           ; 2 bytes @ 0x3
   758   000004                     	ds	1
   759   000005                     ??_pinMode:
   760   000005                     ??_digitalWrite:
   761   000005                     ADC_Read@channel:
   762                           	callstack 0
   763   000005                     ___awdiv@counter:
   764                           	callstack 0
   765   000005                     ___wmul@product:
   766                           	callstack 0
   767                           
   768                           ; 2 bytes @ 0x4
   769   000005                     	ds	1
   770   000006                     ??_lcdString:
   771   000006                     ___awdiv@sign:
   772                           	callstack 0
   773                           
   774                           ; 1 bytes @ 0x5
   775   000006                     	ds	1
   776   000007                     ?_pow10:
   777                           	callstack 0
   778   000007                     i2c_write_bit@bit:
   779                           	callstack 0
   780   000007                     i2c_read_bit@bit:
   781                           	callstack 0
   782   000007                     pow10@expoent:
   783                           	callstack 0
   784   000007                     ___awdiv@quotient:
   785                           	callstack 0
   786                           
   787                           ; 2 bytes @ 0x6
   788   000007                     	ds	1
   789   000008                     i2cWriteByte@send_stop:
   790                           	callstack 0
   791   000008                     i2cReadByte@send_stop:
   792                           	callstack 0
   793   000008                     lcdString@i:
   794                           	callstack 0
   795                           
   796                           ; 2 bytes @ 0x7
   797   000008                     	ds	1
   798   000009                     ??_i2cReadByte:
   799   000009                     ??_pow10:
   800   000009                     ?___awmod:
   801                           	callstack 0
   802   000009                     i2cWriteByte@byte:
   803                           	callstack 0
   804   000009                     ___awmod@dividend:
   805                           	callstack 0
   806                           
   807                           ; 2 bytes @ 0x8
   808   000009                     	ds	1
   809   00000A                     i2cWriteByte@send_start:
   810                           	callstack 0
   811   00000A                     i2cReadByte@nack:
   812                           	callstack 0
   813   00000A                     pow10@i:
   814                           	callstack 0
   815                           
   816                           ; 2 bytes @ 0x9
   817   00000A                     	ds	1
   818   00000B                     i2cWriteByte@bit:
   819                           	callstack 0
   820   00000B                     i2cReadByte@bit:
   821                           	callstack 0
   822   00000B                     ___awmod@divisor:
   823                           	callstack 0
   824                           
   825                           ; 2 bytes @ 0xA
   826   00000B                     	ds	1
   827   00000C                     dsWriteData@address:
   828                           	callstack 0
   829   00000C                     pow10@result:
   830                           	callstack 0
   831                           
   832                           ; 2 bytes @ 0xB
   833   00000C                     	ds	1
   834   00000D                     i2cReadByte@byte:
   835                           	callstack 0
   836   00000D                     ___awmod@counter:
   837                           	callstack 0
   838                           
   839                           ; 1 bytes @ 0xC
   840   00000D                     	ds	1
   841   00000E                     ?_dsReadData:
   842                           	callstack 0
   843   00000E                     dsWriteData@value:
   844                           	callstack 0
   845   00000E                     ___awmod@sign:
   846                           	callstack 0
   847   00000E                     dsReadData@address:
   848                           	callstack 0
   849                           
   850                           ; 2 bytes @ 0xD
   851   00000E                     	ds	1
   852   00000F                     setSEC@value:
   853                           	callstack 0
   854   00000F                     setMIN@value:
   855                           	callstack 0
   856   00000F                     setHOUR@value:
   857                           	callstack 0
   858   00000F                     setLanguage@newLanguage:
   859                           	callstack 0
   860   00000F                     intToStr@value:
   861                           	callstack 0
   862                           
   863                           ; 2 bytes @ 0xE
   864   00000F                     	ds	1
   865   000010                     ??_dsReadData:
   866                           
   867                           ; 1 bytes @ 0xF
   868   000010                     	ds	1
   869   000011                     intToStr@buffer:
   870                           	callstack 0
   871   000011                     dsReadData@result:
   872                           	callstack 0
   873                           
   874                           ; 2 bytes @ 0x10
   875   000011                     	ds	1
   876   000012                     ??_intToStr:
   877                           
   878                           ; 1 bytes @ 0x11
   879   000012                     	ds	1
   880   000013                     ?_getAlarmUpperLevel:
   881                           	callstack 0
   882   000013                     ?_getAlarmLowerLevel:
   883                           	callstack 0
   884   000013                     serialSendString@str:
   885                           	callstack 0
   886   000013                     intToStr@digit:
   887                           	callstack 0
   888                           
   889                           ; 2 bytes @ 0x12
   890   000013                     	ds	2
   891   000015                     ??_getAlarmUpperLevel:
   892   000015                     ??_getAlarmLowerLevel:
   893   000015                     intToStr@isNegative:
   894                           	callstack 0
   895                           
   896                           ; 2 bytes @ 0x14
   897   000015                     	ds	2
   898   000017                     intToStr@temp:
   899                           	callstack 0
   900   000017                     lcdInt@val:
   901                           	callstack 0
   902   000017                     setAlarmUpperLevel@newAlarmLevel:
   903                           	callstack 0
   904   000017                     setAlarmLowerLevel@newAlarmLevel:
   905                           	callstack 0
   906                           
   907                           ; 2 bytes @ 0x16
   908   000017                     	ds	1
   909   000018                     intToStr@start:
   910                           	callstack 0
   911                           
   912                           ; 2 bytes @ 0x17
   913   000018                     	ds	1
   914   000019                     outputPrint@numTela:
   915                           	callstack 0
   916                           
   917                           ; 2 bytes @ 0x18
   918   000019                     	ds	1
   919   00001A                     intToStr@end:
   920                           	callstack 0
   921                           
   922                           ; 2 bytes @ 0x19
   923   00001A                     	ds	1
   924   00001B                     outputPrint@idioma:
   925                           	callstack 0
   926                           
   927                           ; 2 bytes @ 0x1A
   928   00001B                     	ds	1
   929   00001C                     intToStr@i:
   930                           	callstack 0
   931                           
   932                           ; 2 bytes @ 0x1B
   933   00001C                     	ds	1
   934   00001D                     ??_outputPrint:
   935                           
   936                           ; 1 bytes @ 0x1C
   937   00001D                     	ds	1
   938   00001E                     outputPrint@hour:
   939                           	callstack 0
   940   00001E                     serialSendInt@value:
   941                           	callstack 0
   942                           
   943                           ; 2 bytes @ 0x1D
   944   00001E                     	ds	1
   945   00001F                     outputPrint@min:
   946                           	callstack 0
   947                           
   948                           ; 1 bytes @ 0x1E
   949   00001F                     	ds	1
   950   000020                     outputPrint@sec:
   951                           	callstack 0
   952   000020                     serialSendInt@buffer:
   953                           	callstack 0
   954                           
   955                           ; 12 bytes @ 0x1F
   956   000020                     	ds	1
   957   000021                     outputPrint@hour_482:
   958                           	callstack 0
   959                           
   960                           ; 1 bytes @ 0x20
   961   000021                     	ds	1
   962   000022                     outputPrint@min_483:
   963                           	callstack 0
   964                           
   965                           ; 1 bytes @ 0x21
   966   000022                     	ds	1
   967   000023                     outputPrint@sec_484:
   968                           	callstack 0
   969                           
   970                           ; 1 bytes @ 0x22
   971   000023                     	ds	1
   972   000024                     outputPrint@hour_485:
   973                           	callstack 0
   974                           
   975                           ; 1 bytes @ 0x23
   976   000024                     	ds	1
   977   000025                     outputPrint@min_486:
   978                           	callstack 0
   979                           
   980                           ; 1 bytes @ 0x24
   981   000025                     	ds	1
   982   000026                     outputPrint@sec_487:
   983                           	callstack 0
   984                           
   985                           ; 1 bytes @ 0x25
   986   000026                     	ds	6
   987   00002C                     ?_eventRead:
   988                           	callstack 0
   989                           
   990                           ; 2 bytes @ 0x2B
   991   00002C                     	ds	2
   992   00002E                     ??_eventRead:
   993                           
   994                           ; 1 bytes @ 0x2D
   995   00002E                     	ds	10
   996   000038                     eventRead@value:
   997                           	callstack 0
   998                           
   999                           ; 2 bytes @ 0x37
  1000   000038                     	ds	2
  1001   00003A                     _eventRead$1298:
  1002                           	callstack 0
  1003                           
  1004                           ; 2 bytes @ 0x39
  1005   00003A                     	ds	2
  1006   00003C                     eventRead@ev:
  1007                           	callstack 0
  1008                           
  1009                           ; 2 bytes @ 0x3B
  1010   00003C                     	ds	2
  1011   00003E                     eventRead@i:
  1012                           	callstack 0
  1013                           
  1014                           ; 1 bytes @ 0x3D
  1015   00003E                     	ds	1
  1016   00003F                     eventRead@i_352:
  1017                           	callstack 0
  1018                           
  1019                           ; 1 bytes @ 0x3E
  1020   00003F                     	ds	1
  1021   000040                     eventRead@key:
  1022                           	callstack 0
  1023                           
  1024                           ; 2 bytes @ 0x3F
  1025   000040                     	ds	2
  1026   000042                     eventRead@i_347:
  1027                           	callstack 0
  1028                           
  1029                           ; 1 bytes @ 0x41
  1030   000042                     	ds	1
  1031   000043                     ??_smLoop:
  1032                           
  1033                           ; 1 bytes @ 0x42
  1034   000043                     	ds	1
  1035   000044                     _smLoop$1299:
  1036                           	callstack 0
  1037                           
  1038                           ; 2 bytes @ 0x43
  1039   000044                     	ds	2
  1040   000046                     smLoop@evento:
  1041                           	callstack 0
  1042                           
  1043                           ; 1 bytes @ 0x45
  1044   000046                     	ds	1
  1045   000047                     
  1046                           ; 1 bytes @ 0x46
  1047 ;;
  1048 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1049 ;;
  1050 ;; *************** function _main *****************
  1051 ;; Defined at:
  1052 ;;		line 11 in file "main.c"
  1053 ;; Parameters:    Size  Location     Type
  1054 ;;		None
  1055 ;; Auto vars:     Size  Location     Type
  1056 ;;		None
  1057 ;; Return value:  Size  Location     Type
  1058 ;;                  1    wreg      void 
  1059 ;; Registers used:
  1060 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1061 ;; Tracked objects:
  1062 ;;		On entry : 0/0
  1063 ;;		On exit  : 0/0
  1064 ;;		Unchanged: 0/0
  1065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1066 ;;      Params:         0       0       0       0       0       0       0       0       0
  1067 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1068 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1069 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1070 ;;Total ram usage:        0 bytes
  1071 ;; Hardware stack levels required when called: 8
  1072 ;; This function calls:
  1073 ;;		_eventInit
  1074 ;;		_kpDebounce
  1075 ;;		_kpInit
  1076 ;;		_lcdInit
  1077 ;;		_outputInit
  1078 ;;		_serialInit
  1079 ;;		_smLoop
  1080 ;;		_varInit
  1081 ;; This function is called by:
  1082 ;;		Startup code after reset
  1083 ;; This function uses a non-reentrant model
  1084 ;;
  1085                           
  1086                           	psect	text0
  1087   005BCC                     __ptext0:
  1088                           	callstack 0
  1089   005BCC                     _main:
  1090                           	callstack 23
  1091   005BCC                     
  1092                           ;main.c: 14:     serialInit();
  1093   005BCC  EC3A  F02D         	call	_serialInit	;wreg free
  1094                           
  1095                           ;main.c: 15:     kpInit();
  1096   005BD0  ECC9  F02C         	call	_kpInit	;wreg free
  1097                           
  1098                           ;main.c: 16:     lcdInit();
  1099   005BD4  EC22  F031         	call	_lcdInit	;wreg free
  1100                           
  1101                           ;main.c: 17:     varInit();
  1102   005BD8  EC0D  F02D         	call	_varInit	;wreg free
  1103                           
  1104                           ;main.c: 18:     eventInit();
  1105   005BDC  ECD3  F02C         	call	_eventInit	;wreg free
  1106                           
  1107                           ;main.c: 19:     outputInit();
  1108   005BE0  ECBF  F02C         	call	_outputInit	;wreg free
  1109   005BE4                     l21:
  1110                           
  1111                           ;main.c: 26:         kpDebounce();
  1112   005BE4  EC5E  F031         	call	_kpDebounce	;wreg free
  1113   005BE8                     
  1114                           ;main.c: 29:         smLoop();
  1115   005BE8  ECF5  F038         	call	_smLoop	;wreg free
  1116                           
  1117                           ;main.c: 30:     }
  1118   005BEC  EFF2  F02D         	goto	l21
  1119   005BF0  EF01  F000         	goto	start
  1120   005BF4                     __end_of_main:
  1121                           	callstack 0
  1122                           
  1123 ;; *************** function _varInit *****************
  1124 ;; Defined at:
  1125 ;;		line 21 in file "var.c"
  1126 ;; Parameters:    Size  Location     Type
  1127 ;;		None
  1128 ;; Auto vars:     Size  Location     Type
  1129 ;;		None
  1130 ;; Return value:  Size  Location     Type
  1131 ;;                  1    wreg      void 
  1132 ;; Registers used:
  1133 ;;		wreg, status,2, status,0, cstack
  1134 ;; Tracked objects:
  1135 ;;		On entry : 0/0
  1136 ;;		On exit  : 0/0
  1137 ;;		Unchanged: 0/0
  1138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1139 ;;      Params:         0       0       0       0       0       0       0       0       0
  1140 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1141 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1142 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1143 ;;Total ram usage:        0 bytes
  1144 ;; Hardware stack levels used: 1
  1145 ;; Hardware stack levels required when called: 6
  1146 ;; This function calls:
  1147 ;;		_dsInit
  1148 ;;		_getLanguage
  1149 ;;		_setLanguage
  1150 ;; This function is called by:
  1151 ;;		_main
  1152 ;; This function uses a non-reentrant model
  1153 ;;
  1154                           
  1155                           	psect	text1
  1156   005A1A                     __ptext1:
  1157                           	callstack 0
  1158   005A1A                     _varInit:
  1159                           	callstack 24
  1160   005A1A                     
  1161                           ;var.c: 22:     dsInit();
  1162   005A1A  ECC2  F02C         	call	_dsInit	;wreg free
  1163   005A1E                     
  1164                           ;var.c: 23:     state = 0;
  1165   005A1E  0E00               	movlw	0
  1166   005A20  6E58               	movwf	_state^0,c
  1167   005A22                     
  1168                           ;var.c: 24:     setLanguage(getLanguage() % 2);
  1169   005A22  ECE3  F02C         	call	_getLanguage	;wreg free
  1170   005A26  0B01               	andlw	1
  1171   005A28  EC2E  F02D         	call	_setLanguage
  1172   005A2C  0012               	return		;funcret
  1173   005A2E                     __end_of_varInit:
  1174                           	callstack 0
  1175                           
  1176 ;; *************** function _dsInit *****************
  1177 ;; Defined at:
  1178 ;;		line 17 in file "ds1307.c"
  1179 ;; Parameters:    Size  Location     Type
  1180 ;;		None
  1181 ;; Auto vars:     Size  Location     Type
  1182 ;;		None
  1183 ;; Return value:  Size  Location     Type
  1184 ;;                  1    wreg      void 
  1185 ;; Registers used:
  1186 ;;		wreg, status,2, status,0, cstack
  1187 ;; Tracked objects:
  1188 ;;		On entry : 0/0
  1189 ;;		On exit  : 0/0
  1190 ;;		Unchanged: 0/0
  1191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1192 ;;      Params:         0       0       0       0       0       0       0       0       0
  1193 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1194 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1195 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1196 ;;Total ram usage:        0 bytes
  1197 ;; Hardware stack levels used: 1
  1198 ;; Hardware stack levels required when called: 2
  1199 ;; This function calls:
  1200 ;;		_i2cInit
  1201 ;; This function is called by:
  1202 ;;		_varInit
  1203 ;; This function uses a non-reentrant model
  1204 ;;
  1205                           
  1206                           	psect	text2
  1207   005984                     __ptext2:
  1208                           	callstack 0
  1209   005984                     _dsInit:
  1210                           	callstack 27
  1211   005984                     
  1212                           ;ds1307.c: 18:  i2cInit();
  1213   005984  EC24  F02E         	call	_i2cInit	;wreg free
  1214   005988  0012               	return		;funcret
  1215   00598A                     __end_of_dsInit:
  1216                           	callstack 0
  1217                           
  1218 ;; *************** function _i2cInit *****************
  1219 ;; Defined at:
  1220 ;;		line 14 in file "i2c.c"
  1221 ;; Parameters:    Size  Location     Type
  1222 ;;		None
  1223 ;; Auto vars:     Size  Location     Type
  1224 ;;		None
  1225 ;; Return value:  Size  Location     Type
  1226 ;;                  1    wreg      void 
  1227 ;; Registers used:
  1228 ;;		wreg, status,2, status,0, cstack
  1229 ;; Tracked objects:
  1230 ;;		On entry : 0/0
  1231 ;;		On exit  : 0/0
  1232 ;;		Unchanged: 0/0
  1233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1234 ;;      Params:         0       0       0       0       0       0       0       0       0
  1235 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1236 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1237 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1238 ;;Total ram usage:        0 bytes
  1239 ;; Hardware stack levels used: 1
  1240 ;; Hardware stack levels required when called: 1
  1241 ;; This function calls:
  1242 ;;		_pinMode
  1243 ;; This function is called by:
  1244 ;;		_dsInit
  1245 ;; This function uses a non-reentrant model
  1246 ;;
  1247                           
  1248                           	psect	text3
  1249   005C48                     __ptext3:
  1250                           	callstack 0
  1251   005C48                     _i2cInit:
  1252                           	callstack 27
  1253   005C48                     
  1254                           ;i2c.c: 16:  pinMode(PIN_B0,1);
  1255   005C48  0E00               	movlw	0
  1256   005C4A  6E02               	movwf	(pinMode@pin+1)^0,c
  1257   005C4C  0E08               	movlw	8
  1258   005C4E  6E01               	movwf	pinMode@pin^0,c
  1259   005C50  0E00               	movlw	0
  1260   005C52  6E04               	movwf	(pinMode@type+1)^0,c
  1261   005C54  0E01               	movlw	1
  1262   005C56  6E03               	movwf	pinMode@type^0,c
  1263   005C58  EC6E  F035         	call	_pinMode	;wreg free
  1264                           
  1265                           ;i2c.c: 17:  pinMode(PIN_B1,1);
  1266   005C5C  0E00               	movlw	0
  1267   005C5E  6E02               	movwf	(pinMode@pin+1)^0,c
  1268   005C60  0E09               	movlw	9
  1269   005C62  6E01               	movwf	pinMode@pin^0,c
  1270   005C64  0E00               	movlw	0
  1271   005C66  6E04               	movwf	(pinMode@type+1)^0,c
  1272   005C68  0E01               	movlw	1
  1273   005C6A  6E03               	movwf	pinMode@type^0,c
  1274   005C6C  EC6E  F035         	call	_pinMode	;wreg free
  1275   005C70  0012               	return		;funcret
  1276   005C72                     __end_of_i2cInit:
  1277                           	callstack 0
  1278                           
  1279 ;; *************** function _smLoop *****************
  1280 ;; Defined at:
  1281 ;;		line 23 in file "stateMachine.c"
  1282 ;; Parameters:    Size  Location     Type
  1283 ;;		None
  1284 ;; Auto vars:     Size  Location     Type
  1285 ;;  evento          1   69[COMRAM] unsigned char 
  1286 ;; Return value:  Size  Location     Type
  1287 ;;                  1    wreg      void 
  1288 ;; Registers used:
  1289 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1290 ;; Tracked objects:
  1291 ;;		On entry : 0/0
  1292 ;;		On exit  : 0/0
  1293 ;;		Unchanged: 0/0
  1294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1295 ;;      Params:         0       0       0       0       0       0       0       0       0
  1296 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1297 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1298 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1299 ;;Total ram usage:        4 bytes
  1300 ;; Hardware stack levels used: 1
  1301 ;; Hardware stack levels required when called: 7
  1302 ;; This function calls:
  1303 ;;		_eventRead
  1304 ;;		_getAlarmLowerLevel
  1305 ;;		_getAlarmUpperLevel
  1306 ;;		_getHOUR
  1307 ;;		_getLanguage
  1308 ;;		_getLevel
  1309 ;;		_getMIN
  1310 ;;		_getSEC
  1311 ;;		_getState
  1312 ;;		_outputPrint
  1313 ;;		_serialSend
  1314 ;;		_serialSendInt
  1315 ;;		_serialSendString
  1316 ;;		_setAlarmLowerLevel
  1317 ;;		_setAlarmUpperLevel
  1318 ;;		_setHOUR
  1319 ;;		_setLanguage
  1320 ;;		_setMIN
  1321 ;;		_setSEC
  1322 ;;		_setState
  1323 ;;		_updateLevel
  1324 ;; This function is called by:
  1325 ;;		_main
  1326 ;; This function uses a non-reentrant model
  1327 ;;
  1328                           
  1329                           	psect	text4
  1330   0071EA                     __ptext4:
  1331                           	callstack 0
  1332   0071EA                     _smLoop:
  1333                           	callstack 23
  1334   0071EA                     
  1335                           ;stateMachine.c: 24:     unsigned char evento;;stateMachine.c: 26:     updateLevel();
  1336   0071EA  EC03  F02D         	call	_updateLevel	;wreg free
  1337   0071EE                     
  1338                           ;stateMachine.c: 27:     level = getLevel();
  1339   0071EE  ECCE  F02C         	call	_getLevel	;wreg free
  1340   0071F2  C001  F088         	movff	?_getLevel,_level
  1341   0071F6  C002  F089         	movff	?_getLevel+1,_level+1
  1342   0071FA                     
  1343                           ;stateMachine.c: 30:     evento = eventRead();
  1344   0071FA  EC95  F036         	call	_eventRead	;wreg free
  1345   0071FE  502C               	movf	?_eventRead^0,w,c
  1346   007200  6E46               	movwf	smLoop@evento^0,c
  1347                           
  1348                           ;stateMachine.c: 32:     switch (getState()) {
  1349   007202  EF5A  F03A         	goto	l3622
  1350   007206                     l3526:
  1351                           
  1352                           ;stateMachine.c: 35:             if (evento == EV_RIGHT) {
  1353   007206  0E03               	movlw	3
  1354   007208  1846               	xorwf	smLoop@evento^0,w,c
  1355   00720A  A4D8               	btfss	status,2,c
  1356   00720C  EF0A  F039         	goto	u3161
  1357   007210  EF0C  F039         	goto	u3160
  1358   007214                     u3161:
  1359   007214  EF16  F039         	goto	l3530
  1360   007218                     u3160:
  1361   007218                     
  1362                           ;stateMachine.c: 36:                 setAlarmUpperLevel(getAlarmUpperLevel() + 1);
  1363   007218  EC01  F02F         	call	_getAlarmUpperLevel	;wreg free
  1364   00721C  0E01               	movlw	1
  1365   00721E  2413               	addwf	?_getAlarmUpperLevel^0,w,c
  1366   007220  6E17               	movwf	setAlarmUpperLevel@newAlarmLevel^0,c
  1367   007222  0E00               	movlw	0
  1368   007224  2014               	addwfc	(?_getAlarmUpperLevel+1)^0,w,c
  1369   007226  6E18               	movwf	(setAlarmUpperLevel@newAlarmLevel+1)^0,c
  1370   007228  EC9A  F02D         	call	_setAlarmUpperLevel	;wreg free
  1371   00722C                     l3530:
  1372                           
  1373                           ;stateMachine.c: 38:             if (evento == EV_LEFT) {
  1374   00722C  0E02               	movlw	2
  1375   00722E  1846               	xorwf	smLoop@evento^0,w,c
  1376   007230  A4D8               	btfss	status,2,c
  1377   007232  EF1D  F039         	goto	u3171
  1378   007236  EF1F  F039         	goto	u3170
  1379   00723A                     u3171:
  1380   00723A  EF29  F039         	goto	l3534
  1381   00723E                     u3170:
  1382   00723E                     
  1383                           ;stateMachine.c: 39:                 setAlarmUpperLevel(getAlarmUpperLevel() - 1);
  1384   00723E  EC01  F02F         	call	_getAlarmUpperLevel	;wreg free
  1385   007242  0EFF               	movlw	255
  1386   007244  2413               	addwf	?_getAlarmUpperLevel^0,w,c
  1387   007246  6E17               	movwf	setAlarmUpperLevel@newAlarmLevel^0,c
  1388   007248  0EFF               	movlw	255
  1389   00724A  2014               	addwfc	(?_getAlarmUpperLevel+1)^0,w,c
  1390   00724C  6E18               	movwf	(setAlarmUpperLevel@newAlarmLevel+1)^0,c
  1391   00724E  EC9A  F02D         	call	_setAlarmUpperLevel	;wreg free
  1392   007252                     l3534:
  1393                           
  1394                           ;stateMachine.c: 43:             if (evento == EV_ENTER) {
  1395   007252  0E04               	movlw	4
  1396   007254  1846               	xorwf	smLoop@evento^0,w,c
  1397   007256  A4D8               	btfss	status,2,c
  1398   007258  EF30  F039         	goto	u3181
  1399   00725C  EF32  F039         	goto	u3180
  1400   007260                     u3181:
  1401   007260  EF7A  F03A         	goto	l3624
  1402   007264                     u3180:
  1403   007264                     
  1404                           ;stateMachine.c: 44:                 setState(STATE_ALARM_LOWER);
  1405   007264  0E01               	movlw	1
  1406   007266  ECC5  F02C         	call	_setState
  1407   00726A  EF7A  F03A         	goto	l3624
  1408   00726E                     l3538:
  1409                           
  1410                           ;stateMachine.c: 49:             if (evento == EV_RIGHT) {
  1411   00726E  0E03               	movlw	3
  1412   007270  1846               	xorwf	smLoop@evento^0,w,c
  1413   007272  A4D8               	btfss	status,2,c
  1414   007274  EF3E  F039         	goto	u3191
  1415   007278  EF40  F039         	goto	u3190
  1416   00727C                     u3191:
  1417   00727C  EF4A  F039         	goto	l3542
  1418   007280                     u3190:
  1419   007280                     
  1420                           ;stateMachine.c: 50:                 setAlarmLowerLevel(getAlarmLowerLevel() + 1);
  1421   007280  ECE5  F02E         	call	_getAlarmLowerLevel	;wreg free
  1422   007284  0E01               	movlw	1
  1423   007286  2413               	addwf	?_getAlarmLowerLevel^0,w,c
  1424   007288  6E17               	movwf	setAlarmLowerLevel@newAlarmLevel^0,c
  1425   00728A  0E00               	movlw	0
  1426   00728C  2014               	addwfc	(?_getAlarmLowerLevel+1)^0,w,c
  1427   00728E  6E18               	movwf	(setAlarmLowerLevel@newAlarmLevel+1)^0,c
  1428   007290  EC87  F02D         	call	_setAlarmLowerLevel	;wreg free
  1429   007294                     l3542:
  1430                           
  1431                           ;stateMachine.c: 52:             if (evento == EV_LEFT) {
  1432   007294  0E02               	movlw	2
  1433   007296  1846               	xorwf	smLoop@evento^0,w,c
  1434   007298  A4D8               	btfss	status,2,c
  1435   00729A  EF51  F039         	goto	u3201
  1436   00729E  EF53  F039         	goto	u3200
  1437   0072A2                     u3201:
  1438   0072A2  EF5D  F039         	goto	l3546
  1439   0072A6                     u3200:
  1440   0072A6                     
  1441                           ;stateMachine.c: 53:                 setAlarmLowerLevel(getAlarmLowerLevel() - 1);
  1442   0072A6  ECE5  F02E         	call	_getAlarmLowerLevel	;wreg free
  1443   0072AA  0EFF               	movlw	255
  1444   0072AC  2413               	addwf	?_getAlarmLowerLevel^0,w,c
  1445   0072AE  6E17               	movwf	setAlarmLowerLevel@newAlarmLevel^0,c
  1446   0072B0  0EFF               	movlw	255
  1447   0072B2  2014               	addwfc	(?_getAlarmLowerLevel+1)^0,w,c
  1448   0072B4  6E18               	movwf	(setAlarmLowerLevel@newAlarmLevel+1)^0,c
  1449   0072B6  EC87  F02D         	call	_setAlarmLowerLevel	;wreg free
  1450   0072BA                     l3546:
  1451                           
  1452                           ;stateMachine.c: 57:             if (evento == EV_ENTER) {
  1453   0072BA  0E04               	movlw	4
  1454   0072BC  1846               	xorwf	smLoop@evento^0,w,c
  1455   0072BE  A4D8               	btfss	status,2,c
  1456   0072C0  EF64  F039         	goto	u3211
  1457   0072C4  EF66  F039         	goto	u3210
  1458   0072C8                     u3211:
  1459   0072C8  EF7A  F03A         	goto	l3624
  1460   0072CC                     u3210:
  1461   0072CC                     
  1462                           ;stateMachine.c: 58:                 setState(STATE_HOUR);
  1463   0072CC  0E02               	movlw	2
  1464   0072CE  ECC5  F02C         	call	_setState
  1465   0072D2  EF7A  F03A         	goto	l3624
  1466   0072D6                     l3550:
  1467                           
  1468                           ;stateMachine.c: 64:             if (evento == EV_RIGHT) {
  1469   0072D6  0E03               	movlw	3
  1470   0072D8  1846               	xorwf	smLoop@evento^0,w,c
  1471   0072DA  A4D8               	btfss	status,2,c
  1472   0072DC  EF72  F039         	goto	u3221
  1473   0072E0  EF74  F039         	goto	u3220
  1474   0072E4                     u3221:
  1475   0072E4  EF7A  F039         	goto	l3554
  1476   0072E8                     u3220:
  1477   0072E8                     
  1478                           ;stateMachine.c: 65:                 setHOUR(getHOUR() + 1);
  1479   0072E8  ECDB  F02C         	call	_getHOUR	;wreg free
  1480   0072EC  6E43               	movwf	??_smLoop^0,c
  1481   0072EE  2843               	incf	??_smLoop^0,w,c
  1482   0072F0  ECAD  F02D         	call	_setHOUR
  1483   0072F4                     l3554:
  1484                           
  1485                           ;stateMachine.c: 67:             if (evento == EV_LEFT) {
  1486   0072F4  0E02               	movlw	2
  1487   0072F6  1846               	xorwf	smLoop@evento^0,w,c
  1488   0072F8  A4D8               	btfss	status,2,c
  1489   0072FA  EF81  F039         	goto	u3231
  1490   0072FE  EF83  F039         	goto	u3230
  1491   007302                     u3231:
  1492   007302  EF89  F039         	goto	l3558
  1493   007306                     u3230:
  1494   007306                     
  1495                           ;stateMachine.c: 68:                 setHOUR(getHOUR() - 1);
  1496   007306  ECDB  F02C         	call	_getHOUR	;wreg free
  1497   00730A  6E43               	movwf	??_smLoop^0,c
  1498   00730C  0443               	decf	??_smLoop^0,w,c
  1499   00730E  ECAD  F02D         	call	_setHOUR
  1500   007312                     l3558:
  1501                           
  1502                           ;stateMachine.c: 72:             if (evento == EV_ENTER) {
  1503   007312  0E04               	movlw	4
  1504   007314  1846               	xorwf	smLoop@evento^0,w,c
  1505   007316  A4D8               	btfss	status,2,c
  1506   007318  EF90  F039         	goto	u3241
  1507   00731C  EF92  F039         	goto	u3240
  1508   007320                     u3241:
  1509   007320  EF7A  F03A         	goto	l3624
  1510   007324                     u3240:
  1511   007324                     
  1512                           ;stateMachine.c: 73:                 setState(STATE_MIN);
  1513   007324  0E03               	movlw	3
  1514   007326  ECC5  F02C         	call	_setState
  1515   00732A  EF7A  F03A         	goto	l3624
  1516   00732E                     l3562:
  1517                           
  1518                           ;stateMachine.c: 80:             if (evento == EV_RIGHT) {
  1519   00732E  0E03               	movlw	3
  1520   007330  1846               	xorwf	smLoop@evento^0,w,c
  1521   007332  A4D8               	btfss	status,2,c
  1522   007334  EF9E  F039         	goto	u3251
  1523   007338  EFA0  F039         	goto	u3250
  1524   00733C                     u3251:
  1525   00733C  EFA6  F039         	goto	l3566
  1526   007340                     u3250:
  1527   007340                     
  1528                           ;stateMachine.c: 81:                 setMIN(getMIN() + 1);
  1529   007340  ECEB  F02C         	call	_getMIN	;wreg free
  1530   007344  6E43               	movwf	??_smLoop^0,c
  1531   007346  2843               	incf	??_smLoop^0,w,c
  1532   007348  ECC0  F02D         	call	_setMIN
  1533   00734C                     l3566:
  1534                           
  1535                           ;stateMachine.c: 83:             if (evento == EV_LEFT) {
  1536   00734C  0E02               	movlw	2
  1537   00734E  1846               	xorwf	smLoop@evento^0,w,c
  1538   007350  A4D8               	btfss	status,2,c
  1539   007352  EFAD  F039         	goto	u3261
  1540   007356  EFAF  F039         	goto	u3260
  1541   00735A                     u3261:
  1542   00735A  EFB5  F039         	goto	l3570
  1543   00735E                     u3260:
  1544   00735E                     
  1545                           ;stateMachine.c: 84:                 setMIN(getMIN() - 1);
  1546   00735E  ECEB  F02C         	call	_getMIN	;wreg free
  1547   007362  6E43               	movwf	??_smLoop^0,c
  1548   007364  0443               	decf	??_smLoop^0,w,c
  1549   007366  ECC0  F02D         	call	_setMIN
  1550   00736A                     l3570:
  1551                           
  1552                           ;stateMachine.c: 88:             if (evento == EV_ENTER) {
  1553   00736A  0E04               	movlw	4
  1554   00736C  1846               	xorwf	smLoop@evento^0,w,c
  1555   00736E  A4D8               	btfss	status,2,c
  1556   007370  EFBC  F039         	goto	u3271
  1557   007374  EFBE  F039         	goto	u3270
  1558   007378                     u3271:
  1559   007378  EF7A  F03A         	goto	l3624
  1560   00737C                     u3270:
  1561   00737C                     
  1562                           ;stateMachine.c: 89:                 setState(STATE_SEC);
  1563   00737C  0E04               	movlw	4
  1564   00737E  ECC5  F02C         	call	_setState
  1565   007382  EF7A  F03A         	goto	l3624
  1566   007386                     l3574:
  1567                           
  1568                           ;stateMachine.c: 96:             if (evento == EV_RIGHT) {
  1569   007386  0E03               	movlw	3
  1570   007388  1846               	xorwf	smLoop@evento^0,w,c
  1571   00738A  A4D8               	btfss	status,2,c
  1572   00738C  EFCA  F039         	goto	u3281
  1573   007390  EFCC  F039         	goto	u3280
  1574   007394                     u3281:
  1575   007394  EFD2  F039         	goto	l3578
  1576   007398                     u3280:
  1577   007398                     
  1578                           ;stateMachine.c: 97:                 setSEC(getSEC() + 1);
  1579   007398  ECF3  F02C         	call	_getSEC	;wreg free
  1580   00739C  6E43               	movwf	??_smLoop^0,c
  1581   00739E  2843               	incf	??_smLoop^0,w,c
  1582   0073A0  ECD3  F02D         	call	_setSEC
  1583   0073A4                     l3578:
  1584                           
  1585                           ;stateMachine.c: 99:             if (evento == EV_LEFT) {
  1586   0073A4  0E02               	movlw	2
  1587   0073A6  1846               	xorwf	smLoop@evento^0,w,c
  1588   0073A8  A4D8               	btfss	status,2,c
  1589   0073AA  EFD9  F039         	goto	u3291
  1590   0073AE  EFDB  F039         	goto	u3290
  1591   0073B2                     u3291:
  1592   0073B2  EFE1  F039         	goto	l3582
  1593   0073B6                     u3290:
  1594   0073B6                     
  1595                           ;stateMachine.c: 100:                 setSEC(getSEC() - 1);
  1596   0073B6  ECF3  F02C         	call	_getSEC	;wreg free
  1597   0073BA  6E43               	movwf	??_smLoop^0,c
  1598   0073BC  0443               	decf	??_smLoop^0,w,c
  1599   0073BE  ECD3  F02D         	call	_setSEC
  1600   0073C2                     l3582:
  1601                           
  1602                           ;stateMachine.c: 104:             if (evento == EV_ENTER) {
  1603   0073C2  0E04               	movlw	4
  1604   0073C4  1846               	xorwf	smLoop@evento^0,w,c
  1605   0073C6  A4D8               	btfss	status,2,c
  1606   0073C8  EFE8  F039         	goto	u3301
  1607   0073CC  EFEA  F039         	goto	u3300
  1608   0073D0                     u3301:
  1609   0073D0  EF7A  F03A         	goto	l3624
  1610   0073D4                     u3300:
  1611   0073D4                     
  1612                           ;stateMachine.c: 105:                 setState(STATE_IDIOMA);
  1613   0073D4  0E05               	movlw	5
  1614   0073D6  ECC5  F02C         	call	_setState
  1615   0073DA  EF7A  F03A         	goto	l3624
  1616   0073DE                     l3586:
  1617                           
  1618                           ;stateMachine.c: 112:             if (evento == EV_RIGHT) {
  1619   0073DE  0E03               	movlw	3
  1620   0073E0  1846               	xorwf	smLoop@evento^0,w,c
  1621   0073E2  A4D8               	btfss	status,2,c
  1622   0073E4  EFF6  F039         	goto	u3311
  1623   0073E8  EFF8  F039         	goto	u3310
  1624   0073EC                     u3311:
  1625   0073EC  EFFE  F039         	goto	l3590
  1626   0073F0                     u3310:
  1627   0073F0                     
  1628                           ;stateMachine.c: 113:                 setLanguage(getLanguage() + 1);
  1629   0073F0  ECE3  F02C         	call	_getLanguage	;wreg free
  1630   0073F4  6E43               	movwf	??_smLoop^0,c
  1631   0073F6  2843               	incf	??_smLoop^0,w,c
  1632   0073F8  EC2E  F02D         	call	_setLanguage
  1633   0073FC                     l3590:
  1634                           
  1635                           ;stateMachine.c: 115:             if (evento == EV_LEFT) {
  1636   0073FC  0E02               	movlw	2
  1637   0073FE  1846               	xorwf	smLoop@evento^0,w,c
  1638   007400  A4D8               	btfss	status,2,c
  1639   007402  EF05  F03A         	goto	u3321
  1640   007406  EF07  F03A         	goto	u3320
  1641   00740A                     u3321:
  1642   00740A  EF0D  F03A         	goto	l3594
  1643   00740E                     u3320:
  1644   00740E                     
  1645                           ;stateMachine.c: 116:                 setLanguage(getLanguage() - 1);
  1646   00740E  ECE3  F02C         	call	_getLanguage	;wreg free
  1647   007412  6E43               	movwf	??_smLoop^0,c
  1648   007414  0443               	decf	??_smLoop^0,w,c
  1649   007416  EC2E  F02D         	call	_setLanguage
  1650   00741A                     l3594:
  1651                           
  1652                           ;stateMachine.c: 120:             if (evento == EV_ENTER) {
  1653   00741A  0E04               	movlw	4
  1654   00741C  1846               	xorwf	smLoop@evento^0,w,c
  1655   00741E  A4D8               	btfss	status,2,c
  1656   007420  EF14  F03A         	goto	u3331
  1657   007424  EF16  F03A         	goto	u3330
  1658   007428                     u3331:
  1659   007428  EF7A  F03A         	goto	l3624
  1660   00742C                     u3330:
  1661   00742C                     
  1662                           ;stateMachine.c: 121:                 setState(STATE_ALARM_UPPER);
  1663   00742C  0E00               	movlw	0
  1664   00742E  ECC5  F02C         	call	_setState
  1665   007432  EF7A  F03A         	goto	l3624
  1666   007436                     l3598:
  1667                           
  1668                           ;stateMachine.c: 126:             if ((evento != EV_NOEVENT) && (flag > 0)) {
  1669   007436  0E05               	movlw	5
  1670   007438  1846               	xorwf	smLoop@evento^0,w,c
  1671   00743A  B4D8               	btfsc	status,2,c
  1672   00743C  EF22  F03A         	goto	u3341
  1673   007440  EF24  F03A         	goto	u3340
  1674   007444                     u3341:
  1675   007444  EF44  F03A         	goto	l3610
  1676   007448                     u3340:
  1677   007448  0100               	movlb	0	; () banked
  1678   00744A  BF8B               	btfsc	(_flag+1)& (0+255),7,b
  1679   00744C  EF30  F03A         	goto	u3351
  1680   007450  518B               	movf	(_flag+1)& (0+255),w,b
  1681   007452  E108               	bnz	u3350
  1682   007454  058A               	decf	_flag& (0+255),w,b
  1683   007456  A0D8               	btfss	status,0,c
  1684   007458  EF30  F03A         	goto	u3351
  1685   00745C  EF32  F03A         	goto	u3350
  1686   007460                     u3351:
  1687   007460  EF44  F03A         	goto	l3610
  1688   007464                     u3350:
  1689   007464                     
  1690                           ; BSR set to: 0
  1691                           ;stateMachine.c: 127:                 setState(STATE_ALARM_UPPER);
  1692   007464  0E00               	movlw	0
  1693   007466  ECC5  F02C         	call	_setState
  1694   00746A                     l3604:
  1695                           
  1696                           ;stateMachine.c: 128:                 flag = 0;
  1697   00746A  0E00               	movlw	0
  1698   00746C  0100               	movlb	0	; () banked
  1699   00746E  6F8B               	movwf	(_flag+1)& (0+255),b
  1700   007470  0E00               	movlw	0
  1701   007472  6F8A               	movwf	_flag& (0+255),b
  1702   007474                     
  1703                           ; BSR set to: 0
  1704                           ;stateMachine.c: 129:                 send = 0;
  1705   007474  0E00               	movlw	0
  1706   007476  6F87               	movwf	(_send+1)& (0+255),b
  1707   007478  0E00               	movlw	0
  1708   00747A  6F86               	movwf	_send& (0+255),b
  1709   00747C                     
  1710                           ; BSR set to: 0
  1711                           ;stateMachine.c: 130:                 timer = 700;
  1712   00747C  0E02               	movlw	2
  1713   00747E  6E4E               	movwf	(_timer+1)^0,c
  1714   007480  0EBC               	movlw	188
  1715   007482  6E4D               	movwf	_timer^0,c
  1716                           
  1717                           ;stateMachine.c: 131:             } else if ((evento != EV_NOEVENT) && (flag < 0)) {
  1718   007484  EF7A  F03A         	goto	l3624
  1719   007488                     l3610:
  1720   007488  0E05               	movlw	5
  1721   00748A  1846               	xorwf	smLoop@evento^0,w,c
  1722   00748C  B4D8               	btfsc	status,2,c
  1723   00748E  EF4B  F03A         	goto	u3361
  1724   007492  EF4D  F03A         	goto	u3360
  1725   007496                     u3361:
  1726   007496  EF7A  F03A         	goto	l3624
  1727   00749A                     u3360:
  1728   00749A  0100               	movlb	0	; () banked
  1729   00749C  BF8B               	btfsc	(_flag+1)& (0+255),7,b
  1730   00749E  EF55  F03A         	goto	u3370
  1731   0074A2  EF53  F03A         	goto	u3371
  1732   0074A6                     u3371:
  1733   0074A6  EF7A  F03A         	goto	l3624
  1734   0074AA                     u3370:
  1735   0074AA                     
  1736                           ; BSR set to: 0
  1737                           ;stateMachine.c: 132:                 setState(STATE_ALARM_LOWER);
  1738   0074AA  0E01               	movlw	1
  1739   0074AC  ECC5  F02C         	call	_setState
  1740   0074B0  EF35  F03A         	goto	l3604
  1741   0074B4                     l3622:
  1742   0074B4  ECBA  F02C         	call	_getState	;wreg free
  1743                           
  1744                           ; Switch size 1, requested type "simple"
  1745                           ; Number of cases is 7, Range of values is 0 to 6
  1746                           ; switch strategies available:
  1747                           ; Name         Instructions Cycles
  1748                           ; simple_byte           22    12 (average)
  1749                           ;	Chosen strategy is simple_byte
  1750   0074B8  0A00               	xorlw	0	; case 0
  1751   0074BA  B4D8               	btfsc	status,2,c
  1752   0074BC  EF03  F039         	goto	l3526
  1753   0074C0  0A01               	xorlw	1	; case 1
  1754   0074C2  B4D8               	btfsc	status,2,c
  1755   0074C4  EF37  F039         	goto	l3538
  1756   0074C8  0A03               	xorlw	3	; case 2
  1757   0074CA  B4D8               	btfsc	status,2,c
  1758   0074CC  EF6B  F039         	goto	l3550
  1759   0074D0  0A01               	xorlw	1	; case 3
  1760   0074D2  B4D8               	btfsc	status,2,c
  1761   0074D4  EF97  F039         	goto	l3562
  1762   0074D8  0A07               	xorlw	7	; case 4
  1763   0074DA  B4D8               	btfsc	status,2,c
  1764   0074DC  EFC3  F039         	goto	l3574
  1765   0074E0  0A01               	xorlw	1	; case 5
  1766   0074E2  B4D8               	btfsc	status,2,c
  1767   0074E4  EFEF  F039         	goto	l3586
  1768   0074E8  0A03               	xorlw	3	; case 6
  1769   0074EA  B4D8               	btfsc	status,2,c
  1770   0074EC  EF1B  F03A         	goto	l3598
  1771   0074F0  EF7A  F03A         	goto	l3624
  1772   0074F4                     l3624:
  1773                           
  1774                           ;stateMachine.c: 138:     outputPrint(getState(), getLanguage());
  1775   0074F4  ECE3  F02C         	call	_getLanguage	;wreg free
  1776   0074F8  6E43               	movwf	??_smLoop^0,c
  1777   0074FA  5043               	movf	??_smLoop^0,w,c
  1778   0074FC  6E44               	movwf	_smLoop$1299^0,c
  1779   0074FE  6A45               	clrf	(_smLoop$1299+1)^0,c
  1780   007500                     
  1781                           ;stateMachine.c: 138:     outputPrint(getState(), getLanguage());
  1782   007500  ECBA  F02C         	call	_getState	;wreg free
  1783   007504  6E43               	movwf	??_smLoop^0,c
  1784   007506  5043               	movf	??_smLoop^0,w,c
  1785   007508  6E19               	movwf	outputPrint@numTela^0,c
  1786   00750A  6A1A               	clrf	(outputPrint@numTela+1)^0,c
  1787   00750C  C044  F01B         	movff	_smLoop$1299,outputPrint@idioma
  1788   007510  C045  F01C         	movff	_smLoop$1299+1,outputPrint@idioma+1
  1789   007514  EC58  F03B         	call	_outputPrint	;wreg free
  1790   007518                     
  1791                           ;stateMachine.c: 141:     if ((level <= getAlarmLowerLevel()) && (timer == 0)) {
  1792   007518  ECE5  F02E         	call	_getAlarmLowerLevel	;wreg free
  1793   00751C  0100               	movlb	0	; () banked
  1794   00751E  5188               	movf	_level& (0+255),w,b
  1795   007520  5C13               	subwf	?_getAlarmLowerLevel^0,w,c
  1796   007522  5014               	movf	(?_getAlarmLowerLevel+1)^0,w,c
  1797   007524  0A80               	xorlw	128
  1798   007526  6E43               	movwf	??_smLoop^0,c
  1799   007528  5189               	movf	(_level+1)& (0+255),w,b
  1800   00752A  0A80               	xorlw	128
  1801   00752C  5843               	subwfb	??_smLoop^0,w,c
  1802   00752E  A0D8               	btfss	status,0,c
  1803   007530  EF9C  F03A         	goto	u3381
  1804   007534  EF9E  F03A         	goto	u3380
  1805   007538                     u3381:
  1806   007538  EFEC  F03A         	goto	l3654
  1807   00753C                     u3380:
  1808   00753C                     
  1809                           ; BSR set to: 0
  1810   00753C  504D               	movf	_timer^0,w,c
  1811   00753E  104E               	iorwf	(_timer+1)^0,w,c
  1812   007540  A4D8               	btfss	status,2,c
  1813   007542  EFA5  F03A         	goto	u3391
  1814   007546  EFA7  F03A         	goto	u3390
  1815   00754A                     u3391:
  1816   00754A  EFEC  F03A         	goto	l3654
  1817   00754E                     u3390:
  1818   00754E                     
  1819                           ; BSR set to: 0
  1820                           ;stateMachine.c: 142:         setState(STATE_OVER_LIMIT);
  1821   00754E  0E06               	movlw	6
  1822   007550  ECC5  F02C         	call	_setState
  1823   007554                     
  1824                           ;stateMachine.c: 143:         flag = -1;
  1825   007554  0100               	movlb	0	; () banked
  1826   007556  698A               	setf	_flag& (0+255),b
  1827   007558  698B               	setf	(_flag+1)& (0+255),b
  1828   00755A                     
  1829                           ; BSR set to: 0
  1830                           ;stateMachine.c: 144:         timer = 700;
  1831   00755A  0E02               	movlw	2
  1832   00755C  6E4E               	movwf	(_timer+1)^0,c
  1833   00755E  0EBC               	movlw	188
  1834   007560  6E4D               	movwf	_timer^0,c
  1835   007562                     
  1836                           ; BSR set to: 0
  1837                           ;stateMachine.c: 145:         if (!send) {
  1838   007562  5186               	movf	_send& (0+255),w,b
  1839   007564  1187               	iorwf	(_send+1)& (0+255),w,b
  1840   007566  A4D8               	btfss	status,2,c
  1841   007568  EFB8  F03A         	goto	u3401
  1842   00756C  EFBA  F03A         	goto	u3400
  1843   007570                     u3401:
  1844   007570  EF41  F03B         	goto	l3680
  1845   007574                     u3400:
  1846   007574                     
  1847                           ; BSR set to: 0
  1848                           ;stateMachine.c: 146:             serialSendString(serial_out[getLanguage()]);
  1849   007574  ECE3  F02C         	call	_getLanguage	;wreg free
  1850   007578  0D02               	mullw	2
  1851   00757A  50F3               	movf	243,w,c
  1852   00757C  0F7C               	addlw	low _serial_out
  1853   00757E  6ED9               	movwf	fsr2l,c
  1854   007580  6ADA               	clrf	fsr2h,c
  1855   007582  CFDE F013          	movff	postinc2,serialSendString@str
  1856   007586  CFDD F014          	movff	postdec2,serialSendString@str+1
  1857   00758A  EC87  F030         	call	_serialSendString	;wreg free
  1858   00758E                     
  1859                           ;stateMachine.c: 147:             serialSendInt(getHOUR());
  1860   00758E  ECDB  F02C         	call	_getHOUR	;wreg free
  1861   007592  6E43               	movwf	??_smLoop^0,c
  1862   007594  5043               	movf	??_smLoop^0,w,c
  1863   007596  6E1E               	movwf	serialSendInt@value^0,c
  1864   007598  6A1F               	clrf	(serialSendInt@value+1)^0,c
  1865   00759A  EC47  F02D         	call	_serialSendInt	;wreg free
  1866   00759E                     
  1867                           ;stateMachine.c: 148:             serialSend(':');
  1868   00759E  0E3A               	movlw	58
  1869   0075A0  EC17  F02D         	call	_serialSend
  1870   0075A4                     
  1871                           ;stateMachine.c: 149:             serialSendInt(getMIN());
  1872   0075A4  ECEB  F02C         	call	_getMIN	;wreg free
  1873   0075A8  6E43               	movwf	??_smLoop^0,c
  1874   0075AA  5043               	movf	??_smLoop^0,w,c
  1875   0075AC  6E1E               	movwf	serialSendInt@value^0,c
  1876   0075AE  6A1F               	clrf	(serialSendInt@value+1)^0,c
  1877   0075B0  EC47  F02D         	call	_serialSendInt	;wreg free
  1878   0075B4                     
  1879                           ;stateMachine.c: 150:             serialSend(':');
  1880   0075B4  0E3A               	movlw	58
  1881   0075B6  EC17  F02D         	call	_serialSend
  1882   0075BA                     l3650:
  1883                           
  1884                           ;stateMachine.c: 151:             serialSendInt(getSEC());
  1885   0075BA  ECF3  F02C         	call	_getSEC	;wreg free
  1886   0075BE  6E43               	movwf	??_smLoop^0,c
  1887   0075C0  5043               	movf	??_smLoop^0,w,c
  1888   0075C2  6E1E               	movwf	serialSendInt@value^0,c
  1889   0075C4  6A1F               	clrf	(serialSendInt@value+1)^0,c
  1890   0075C6  EC47  F02D         	call	_serialSendInt	;wreg free
  1891   0075CA                     
  1892                           ;stateMachine.c: 152:             send = 1;
  1893   0075CA  0E00               	movlw	0
  1894   0075CC  0100               	movlb	0	; () banked
  1895   0075CE  6F87               	movwf	(_send+1)& (0+255),b
  1896   0075D0  0E01               	movlw	1
  1897   0075D2  6F86               	movwf	_send& (0+255),b
  1898   0075D4  EF41  F03B         	goto	l3680
  1899   0075D8                     l3654:
  1900                           
  1901                           ; BSR set to: 0
  1902   0075D8  EC01  F02F         	call	_getAlarmUpperLevel	;wreg free
  1903   0075DC  5013               	movf	?_getAlarmUpperLevel^0,w,c
  1904   0075DE  0100               	movlb	0	; () banked
  1905   0075E0  5D88               	subwf	_level& (0+255),w,b
  1906   0075E2  5189               	movf	(_level+1)& (0+255),w,b
  1907   0075E4  0A80               	xorlw	128
  1908   0075E6  6E43               	movwf	??_smLoop^0,c
  1909   0075E8  5014               	movf	(?_getAlarmUpperLevel+1)^0,w,c
  1910   0075EA  0A80               	xorlw	128
  1911   0075EC  5843               	subwfb	??_smLoop^0,w,c
  1912   0075EE  A0D8               	btfss	status,0,c
  1913   0075F0  EFFC  F03A         	goto	u3411
  1914   0075F4  EFFE  F03A         	goto	u3410
  1915   0075F8                     u3411:
  1916   0075F8  EF41  F03B         	goto	l3680
  1917   0075FC                     u3410:
  1918   0075FC                     
  1919                           ; BSR set to: 0
  1920   0075FC  504D               	movf	_timer^0,w,c
  1921   0075FE  104E               	iorwf	(_timer+1)^0,w,c
  1922   007600  A4D8               	btfss	status,2,c
  1923   007602  EF05  F03B         	goto	u3421
  1924   007606  EF07  F03B         	goto	u3420
  1925   00760A                     u3421:
  1926   00760A  EF41  F03B         	goto	l3680
  1927   00760E                     u3420:
  1928   00760E                     
  1929                           ; BSR set to: 0
  1930                           ;stateMachine.c: 155:         setState(STATE_OVER_LIMIT);
  1931   00760E  0E06               	movlw	6
  1932   007610  ECC5  F02C         	call	_setState
  1933   007614                     
  1934                           ;stateMachine.c: 156:         flag = 1;
  1935   007614  0E00               	movlw	0
  1936   007616  0100               	movlb	0	; () banked
  1937   007618  6F8B               	movwf	(_flag+1)& (0+255),b
  1938   00761A  0E01               	movlw	1
  1939   00761C  6F8A               	movwf	_flag& (0+255),b
  1940   00761E                     
  1941                           ; BSR set to: 0
  1942                           ;stateMachine.c: 157:         timer = 700;
  1943   00761E  0E02               	movlw	2
  1944   007620  6E4E               	movwf	(_timer+1)^0,c
  1945   007622  0EBC               	movlw	188
  1946   007624  6E4D               	movwf	_timer^0,c
  1947   007626                     
  1948                           ; BSR set to: 0
  1949                           ;stateMachine.c: 158:         if (!send) {
  1950   007626  5186               	movf	_send& (0+255),w,b
  1951   007628  1187               	iorwf	(_send+1)& (0+255),w,b
  1952   00762A  A4D8               	btfss	status,2,c
  1953   00762C  EF1A  F03B         	goto	u3431
  1954   007630  EF1C  F03B         	goto	u3430
  1955   007634                     u3431:
  1956   007634  EF41  F03B         	goto	l3680
  1957   007638                     u3430:
  1958   007638                     
  1959                           ; BSR set to: 0
  1960                           ;stateMachine.c: 159:             serialSendString(serial_out[getLanguage()]);
  1961   007638  ECE3  F02C         	call	_getLanguage	;wreg free
  1962   00763C  0D02               	mullw	2
  1963   00763E  50F3               	movf	243,w,c
  1964   007640  0F7C               	addlw	low _serial_out
  1965   007642  6ED9               	movwf	fsr2l,c
  1966   007644  6ADA               	clrf	fsr2h,c
  1967   007646  CFDE F013          	movff	postinc2,serialSendString@str
  1968   00764A  CFDD F014          	movff	postdec2,serialSendString@str+1
  1969   00764E  EC87  F030         	call	_serialSendString	;wreg free
  1970   007652                     
  1971                           ;stateMachine.c: 160:             serialSendInt(getHOUR());
  1972   007652  ECDB  F02C         	call	_getHOUR	;wreg free
  1973   007656  6E43               	movwf	??_smLoop^0,c
  1974   007658  5043               	movf	??_smLoop^0,w,c
  1975   00765A  6E1E               	movwf	serialSendInt@value^0,c
  1976   00765C  6A1F               	clrf	(serialSendInt@value+1)^0,c
  1977   00765E  EC47  F02D         	call	_serialSendInt	;wreg free
  1978   007662                     
  1979                           ;stateMachine.c: 161:             serialSend(':');
  1980   007662  0E3A               	movlw	58
  1981   007664  EC17  F02D         	call	_serialSend
  1982   007668                     
  1983                           ;stateMachine.c: 162:             serialSendInt(getMIN());
  1984   007668  ECEB  F02C         	call	_getMIN	;wreg free
  1985   00766C  6E43               	movwf	??_smLoop^0,c
  1986   00766E  5043               	movf	??_smLoop^0,w,c
  1987   007670  6E1E               	movwf	serialSendInt@value^0,c
  1988   007672  6A1F               	clrf	(serialSendInt@value+1)^0,c
  1989   007674  EC47  F02D         	call	_serialSendInt	;wreg free
  1990   007678                     
  1991                           ;stateMachine.c: 163:             serialSend(':');
  1992   007678  0E3A               	movlw	58
  1993   00767A  EC17  F02D         	call	_serialSend
  1994   00767E  EFDD  F03A         	goto	l3650
  1995   007682                     l3680:
  1996                           
  1997                           ; BSR set to: 0
  1998                           ;stateMachine.c: 168:     if (timer > 0) {
  1999   007682  BE4E               	btfsc	(_timer+1)^0,7,c
  2000   007684  EF4C  F03B         	goto	u3441
  2001   007688  504E               	movf	(_timer+1)^0,w,c
  2002   00768A  E108               	bnz	u3440
  2003   00768C  044D               	decf	_timer^0,w,c
  2004   00768E  A0D8               	btfss	status,0,c
  2005   007690  EF4C  F03B         	goto	u3441
  2006   007694  EF4E  F03B         	goto	u3440
  2007   007698                     u3441:
  2008   007698  EF53  F03B         	goto	l3684
  2009   00769C                     u3440:
  2010   00769C                     
  2011                           ; BSR set to: 0
  2012                           ;stateMachine.c: 169:         timer--;
  2013   00769C  064D               	decf	_timer^0,f,c
  2014   00769E  A0D8               	btfss	status,0,c
  2015   0076A0  064E               	decf	(_timer+1)^0,f,c
  2016                           
  2017                           ;stateMachine.c: 170:     } else {
  2018   0076A2  EF57  F03B         	goto	l520
  2019   0076A6                     l3684:
  2020                           
  2021                           ; BSR set to: 0
  2022                           ;stateMachine.c: 171:         send = 0;
  2023   0076A6  0E00               	movlw	0
  2024   0076A8  6F87               	movwf	(_send+1)& (0+255),b
  2025   0076AA  0E00               	movlw	0
  2026   0076AC  6F86               	movwf	_send& (0+255),b
  2027   0076AE                     l520:
  2028                           
  2029                           ; BSR set to: 0
  2030   0076AE  0012               	return		;funcret
  2031   0076B0                     __end_of_smLoop:
  2032                           	callstack 0
  2033                           
  2034 ;; *************** function _updateLevel *****************
  2035 ;; Defined at:
  2036 ;;		line 32 in file "var.c"
  2037 ;; Parameters:    Size  Location     Type
  2038 ;;		None
  2039 ;; Auto vars:     Size  Location     Type
  2040 ;;		None
  2041 ;; Return value:  Size  Location     Type
  2042 ;;                  1    wreg      void 
  2043 ;; Registers used:
  2044 ;;		wreg, status,2, status,0, cstack
  2045 ;; Tracked objects:
  2046 ;;		On entry : 0/0
  2047 ;;		On exit  : 0/0
  2048 ;;		Unchanged: 0/0
  2049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2050 ;;      Params:         0       0       0       0       0       0       0       0       0
  2051 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2052 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2053 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2054 ;;Total ram usage:        0 bytes
  2055 ;; Hardware stack levels used: 1
  2056 ;; Hardware stack levels required when called: 1
  2057 ;; This function calls:
  2058 ;;		_ADC_Init
  2059 ;;		_ADC_Read
  2060 ;; This function is called by:
  2061 ;;		_smLoop
  2062 ;; This function uses a non-reentrant model
  2063 ;;
  2064                           
  2065                           	psect	text5
  2066   005A06                     __ptext5:
  2067                           	callstack 0
  2068   005A06                     _updateLevel:
  2069                           	callstack 28
  2070   005A06                     
  2071                           ;var.c: 34:     ADC_Init();
  2072   005A06  ECFB  F02C         	call	_ADC_Init	;wreg free
  2073   005A0A                     
  2074                           ;var.c: 35:     level = ADC_Read(3);
  2075   005A0A  0E03               	movlw	3
  2076   005A0C  EC87  F02F         	call	_ADC_Read
  2077   005A10  C001  F080         	movff	?_ADC_Read,_level@var$F512
  2078   005A14  C002  F081         	movff	?_ADC_Read+1,_level@var$F512+1
  2079   005A18  0012               	return		;funcret
  2080   005A1A                     __end_of_updateLevel:
  2081                           	callstack 0
  2082                           
  2083 ;; *************** function _ADC_Read *****************
  2084 ;; Defined at:
  2085 ;;		line 11 in file "adc.c"
  2086 ;; Parameters:    Size  Location     Type
  2087 ;;  channel         1    wreg     unsigned char 
  2088 ;; Auto vars:     Size  Location     Type
  2089 ;;  channel         1    4[COMRAM] unsigned char 
  2090 ;; Return value:  Size  Location     Type
  2091 ;;                  2    0[COMRAM] unsigned int 
  2092 ;; Registers used:
  2093 ;;		wreg, status,2, status,0
  2094 ;; Tracked objects:
  2095 ;;		On entry : 0/0
  2096 ;;		On exit  : 0/0
  2097 ;;		Unchanged: 0/0
  2098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2099 ;;      Params:         2       0       0       0       0       0       0       0       0
  2100 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2101 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2102 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2103 ;;Total ram usage:        5 bytes
  2104 ;; Hardware stack levels used: 1
  2105 ;; This function calls:
  2106 ;;		Nothing
  2107 ;; This function is called by:
  2108 ;;		_updateLevel
  2109 ;; This function uses a non-reentrant model
  2110 ;;
  2111                           
  2112                           	psect	text6
  2113   005F0E                     __ptext6:
  2114                           	callstack 0
  2115   005F0E                     _ADC_Read:
  2116                           	callstack 28
  2117                           
  2118                           ;incstack = 0
  2119                           ;ADC_Read@channel stored from wreg
  2120   005F0E  6E05               	movwf	ADC_Read@channel^0,c
  2121   005F10                     
  2122                           ;adc.c: 12:     if(channel > 12) return 0;
  2123   005F10  0E0C               	movlw	12
  2124   005F12  6405               	cpfsgt	ADC_Read@channel^0,c
  2125   005F14  EF8E  F02F         	goto	u2841
  2126   005F18  EF90  F02F         	goto	u2840
  2127   005F1C                     u2841:
  2128   005F1C  EF96  F02F         	goto	l3182
  2129   005F20                     u2840:
  2130   005F20  0E00               	movlw	0
  2131   005F22  6E02               	movwf	(?_ADC_Read+1)^0,c
  2132   005F24  0E00               	movlw	0
  2133   005F26  6E01               	movwf	?_ADC_Read^0,c
  2134   005F28  EFAD  F02F         	goto	l677
  2135   005F2C                     l3182:
  2136                           
  2137                           ;adc.c: 13:     ADCON0 &= 0xC5;
  2138   005F2C  0EC5               	movlw	197
  2139   005F2E  16C2               	andwf	194,f,c	;volatile
  2140                           
  2141                           ;adc.c: 14:     ADCON0 |= channel << 3;
  2142   005F30  3805               	swapf	ADC_Read@channel^0,w,c	;volatile
  2143   005F32  42E8               	rrncf	wreg,f,c
  2144   005F34  0BF8               	andlw	248
  2145   005F36  12C2               	iorwf	194,f,c	;volatile
  2146   005F38                     
  2147                           ;adc.c: 15:     ADCON0bits.GO_nDONE = 1;
  2148   005F38  82C2               	bsf	194,1,c	;volatile
  2149   005F3A                     l678:
  2150   005F3A  B2C2               	btfsc	194,1,c	;volatile
  2151   005F3C  EFA2  F02F         	goto	u2851
  2152   005F40  EFA4  F02F         	goto	u2850
  2153   005F44                     u2851:
  2154   005F44  EF9D  F02F         	goto	l678
  2155   005F48                     u2850:
  2156   005F48                     
  2157                           ;adc.c: 17:     return ((ADRESH << 8) + ADRESL);
  2158   005F48  50C4               	movf	196,w,c	;volatile
  2159   005F4A  6E04               	movwf	(??_ADC_Read+1)^0,c
  2160   005F4C  6A03               	clrf	??_ADC_Read^0,c
  2161   005F4E  50C3               	movf	195,w,c	;volatile
  2162   005F50  2403               	addwf	??_ADC_Read^0,w,c
  2163   005F52  6E01               	movwf	?_ADC_Read^0,c
  2164   005F54  0E00               	movlw	0
  2165   005F56  2004               	addwfc	(??_ADC_Read+1)^0,w,c
  2166   005F58  6E02               	movwf	(?_ADC_Read+1)^0,c
  2167   005F5A                     l677:
  2168   005F5A  0012               	return		;funcret
  2169   005F5C                     __end_of_ADC_Read:
  2170                           	callstack 0
  2171                           
  2172 ;; *************** function _ADC_Init *****************
  2173 ;; Defined at:
  2174 ;;		line 4 in file "adc.c"
  2175 ;; Parameters:    Size  Location     Type
  2176 ;;		None
  2177 ;; Auto vars:     Size  Location     Type
  2178 ;;		None
  2179 ;; Return value:  Size  Location     Type
  2180 ;;                  1    wreg      void 
  2181 ;; Registers used:
  2182 ;;		wreg, status,2
  2183 ;; Tracked objects:
  2184 ;;		On entry : 0/0
  2185 ;;		On exit  : 0/0
  2186 ;;		Unchanged: 0/0
  2187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2188 ;;      Params:         0       0       0       0       0       0       0       0       0
  2189 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2190 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2191 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2192 ;;Total ram usage:        0 bytes
  2193 ;; Hardware stack levels used: 1
  2194 ;; This function calls:
  2195 ;;		Nothing
  2196 ;; This function is called by:
  2197 ;;		_updateLevel
  2198 ;; This function uses a non-reentrant model
  2199 ;;
  2200                           
  2201                           	psect	text7
  2202   0059F6                     __ptext7:
  2203                           	callstack 0
  2204   0059F6                     _ADC_Init:
  2205                           	callstack 28
  2206   0059F6                     
  2207                           ;adc.c: 5:     ADCON0 = 0x00;
  2208   0059F6  0E00               	movlw	0
  2209   0059F8  6EC2               	movwf	194,c	;volatile
  2210                           
  2211                           ;adc.c: 6:     ADCON1 = 0x0A;
  2212   0059FA  0E0A               	movlw	10
  2213   0059FC  6EC1               	movwf	193,c	;volatile
  2214                           
  2215                           ;adc.c: 7:     ADCON2 = 0xA9;
  2216   0059FE  0EA9               	movlw	169
  2217   005A00  6EC0               	movwf	192,c	;volatile
  2218   005A02                     
  2219                           ;adc.c: 8:     ADCON0bits.ADON = 1;
  2220   005A02  80C2               	bsf	194,0,c	;volatile
  2221   005A04  0012               	return		;funcret
  2222   005A06                     __end_of_ADC_Init:
  2223                           	callstack 0
  2224                           
  2225 ;; *************** function _setState *****************
  2226 ;; Defined at:
  2227 ;;		line 41 in file "var.c"
  2228 ;; Parameters:    Size  Location     Type
  2229 ;;  newState        1    wreg     unsigned char 
  2230 ;; Auto vars:     Size  Location     Type
  2231 ;;  newState        1    0[COMRAM] unsigned char 
  2232 ;; Return value:  Size  Location     Type
  2233 ;;                  1    wreg      void 
  2234 ;; Registers used:
  2235 ;;		wreg
  2236 ;; Tracked objects:
  2237 ;;		On entry : 0/0
  2238 ;;		On exit  : 0/0
  2239 ;;		Unchanged: 0/0
  2240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2241 ;;      Params:         0       0       0       0       0       0       0       0       0
  2242 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2243 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2244 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2245 ;;Total ram usage:        1 bytes
  2246 ;; Hardware stack levels used: 1
  2247 ;; This function calls:
  2248 ;;		Nothing
  2249 ;; This function is called by:
  2250 ;;		_smLoop
  2251 ;;		_smInit
  2252 ;; This function uses a non-reentrant model
  2253 ;;
  2254                           
  2255                           	psect	text8
  2256   00598A                     __ptext8:
  2257                           	callstack 0
  2258   00598A                     _setState:
  2259                           	callstack 29
  2260                           
  2261                           ;incstack = 0
  2262                           ;setState@newState stored from wreg
  2263   00598A  6E01               	movwf	setState@newState^0,c
  2264   00598C                     
  2265                           ;var.c: 42:     state = newState;
  2266   00598C  C001  F058         	movff	setState@newState,_state
  2267   005990  0012               	return		;funcret
  2268   005992                     __end_of_setState:
  2269                           	callstack 0
  2270                           
  2271 ;; *************** function _outputPrint *****************
  2272 ;; Defined at:
  2273 ;;		line 23 in file "output.c"
  2274 ;; Parameters:    Size  Location     Type
  2275 ;;  numTela         2   24[COMRAM] int 
  2276 ;;  idioma          2   26[COMRAM] int 
  2277 ;; Auto vars:     Size  Location     Type
  2278 ;;  sec             1   37[COMRAM] unsigned char 
  2279 ;;  min             1   36[COMRAM] unsigned char 
  2280 ;;  hour            1   35[COMRAM] unsigned char 
  2281 ;;  sec             1   34[COMRAM] unsigned char 
  2282 ;;  min             1   33[COMRAM] unsigned char 
  2283 ;;  hour            1   32[COMRAM] unsigned char 
  2284 ;;  sec             1   31[COMRAM] unsigned char 
  2285 ;;  min             1   30[COMRAM] unsigned char 
  2286 ;;  hour            1   29[COMRAM] unsigned char 
  2287 ;; Return value:  Size  Location     Type
  2288 ;;                  1    wreg      void 
  2289 ;; Registers used:
  2290 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2291 ;; Tracked objects:
  2292 ;;		On entry : 0/0
  2293 ;;		On exit  : 0/0
  2294 ;;		Unchanged: 0/0
  2295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2296 ;;      Params:         4       0       0       0       0       0       0       0       0
  2297 ;;      Locals:         9       0       0       0       0       0       0       0       0
  2298 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2299 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2300 ;;Total ram usage:       14 bytes
  2301 ;; Hardware stack levels used: 1
  2302 ;; Hardware stack levels required when called: 6
  2303 ;; This function calls:
  2304 ;;		___awdiv
  2305 ;;		___awmod
  2306 ;;		_getAlarmLowerLevel
  2307 ;;		_getAlarmUpperLevel
  2308 ;;		_getHOUR
  2309 ;;		_getLanguage
  2310 ;;		_getLevel
  2311 ;;		_getMIN
  2312 ;;		_getSEC
  2313 ;;		_lcdCommand
  2314 ;;		_lcdData
  2315 ;;		_lcdInt
  2316 ;;		_lcdString
  2317 ;; This function is called by:
  2318 ;;		_smLoop
  2319 ;; This function uses a non-reentrant model
  2320 ;;
  2321                           
  2322                           	psect	text9
  2323   0076B0                     __ptext9:
  2324                           	callstack 0
  2325   0076B0                     _outputPrint:
  2326                           	callstack 23
  2327   0076B0                     
  2328                           ;output.c: 25:     if (numTela == STATE_HOUR) {
  2329   0076B0  0E02               	movlw	2
  2330   0076B2  1819               	xorwf	outputPrint@numTela^0,w,c
  2331   0076B4  101A               	iorwf	(outputPrint@numTela+1)^0,w,c
  2332   0076B6  A4D8               	btfss	status,2,c
  2333   0076B8  EF60  F03B         	goto	u3071
  2334   0076BC  EF62  F03B         	goto	u3070
  2335   0076C0                     u3071:
  2336   0076C0  EFF4  F03B         	goto	l3394
  2337   0076C4                     u3070:
  2338   0076C4                     
  2339                           ;output.c: 26:         lcdCommand(0x80);
  2340   0076C4  0E80               	movlw	128
  2341   0076C6  EC63  F02F         	call	_lcdCommand
  2342   0076CA                     
  2343                           ;output.c: 27:         lcdString(msgs[numTela][idioma]);
  2344   0076CA  501B               	movf	outputPrint@idioma^0,w,c
  2345   0076CC  0D02               	mullw	2
  2346   0076CE  CFF3 F01D          	movff	prodl,??_outputPrint
  2347   0076D2  5019               	movf	outputPrint@numTela^0,w,c
  2348   0076D4  0D04               	mullw	4
  2349   0076D6  50F3               	movf	243,w,c
  2350   0076D8  0F60               	addlw	low _msgs
  2351   0076DA  241D               	addwf	??_outputPrint^0,w,c
  2352   0076DC  6ED9               	movwf	fsr2l,c
  2353   0076DE  6ADA               	clrf	fsr2h,c
  2354   0076E0  CFDE F004          	movff	postinc2,lcdString@msg
  2355   0076E4  CFDD F005          	movff	postdec2,lcdString@msg+1
  2356   0076E8  EC02  F030         	call	_lcdString	;wreg free
  2357   0076EC                     
  2358                           ;output.c: 28:         lcdCommand(0xC0);
  2359   0076EC  0EC0               	movlw	192
  2360   0076EE  EC63  F02F         	call	_lcdCommand
  2361   0076F2                     
  2362                           ;output.c: 29:         char hour, min, sec;;output.c: 30:         hour = getHOUR();
  2363   0076F2  ECDB  F02C         	call	_getHOUR	;wreg free
  2364   0076F6  6E1E               	movwf	outputPrint@hour^0,c
  2365   0076F8                     
  2366                           ;output.c: 31:         min = getMIN();
  2367   0076F8  ECEB  F02C         	call	_getMIN	;wreg free
  2368   0076FC  6E1F               	movwf	outputPrint@min^0,c
  2369   0076FE                     
  2370                           ;output.c: 32:         sec = getSEC();
  2371   0076FE  ECF3  F02C         	call	_getSEC	;wreg free
  2372   007702  6E20               	movwf	outputPrint@sec^0,c
  2373   007704                     
  2374                           ;output.c: 33:         lcdData((hour / 10) % 10 + 48);
  2375   007704  0E00               	movlw	0
  2376   007706  6E04               	movwf	(___awdiv@divisor+1)^0,c
  2377   007708  0E0A               	movlw	10
  2378   00770A  6E03               	movwf	___awdiv@divisor^0,c
  2379   00770C  C01E  F001         	movff	outputPrint@hour,___awdiv@dividend
  2380   007710  6A02               	clrf	(___awdiv@dividend+1)^0,c
  2381   007712  EC08  F032         	call	___awdiv	;wreg free
  2382   007716  C001  F009         	movff	?___awdiv,___awmod@dividend
  2383   00771A  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  2384   00771E  0E00               	movlw	0
  2385   007720  6E0C               	movwf	(___awmod@divisor+1)^0,c
  2386   007722  0E0A               	movlw	10
  2387   007724  6E0B               	movwf	___awmod@divisor^0,c
  2388   007726  ECB0  F031         	call	___awmod	;wreg free
  2389   00772A  5009               	movf	?___awmod^0,w,c
  2390   00772C  0F30               	addlw	48
  2391   00772E  EC55  F02D         	call	_lcdData
  2392   007732                     
  2393                           ;output.c: 34:         lcdData(hour % 10 + 48);
  2394   007732  C01E  F009         	movff	outputPrint@hour,___awmod@dividend
  2395   007736  6A0A               	clrf	(___awmod@dividend+1)^0,c
  2396   007738  0E00               	movlw	0
  2397   00773A  6E0C               	movwf	(___awmod@divisor+1)^0,c
  2398   00773C  0E0A               	movlw	10
  2399   00773E  6E0B               	movwf	___awmod@divisor^0,c
  2400   007740  ECB0  F031         	call	___awmod	;wreg free
  2401   007744  5009               	movf	?___awmod^0,w,c
  2402   007746  0F30               	addlw	48
  2403   007748  EC55  F02D         	call	_lcdData
  2404   00774C                     
  2405                           ;output.c: 35:         lcdData(':');
  2406   00774C  0E3A               	movlw	58
  2407   00774E  EC55  F02D         	call	_lcdData
  2408   007752                     
  2409                           ;output.c: 36:         lcdData((min / 10) % 10 + 48);
  2410   007752  0E00               	movlw	0
  2411   007754  6E04               	movwf	(___awdiv@divisor+1)^0,c
  2412   007756  0E0A               	movlw	10
  2413   007758  6E03               	movwf	___awdiv@divisor^0,c
  2414   00775A  C01F  F001         	movff	outputPrint@min,___awdiv@dividend
  2415   00775E  6A02               	clrf	(___awdiv@dividend+1)^0,c
  2416   007760  EC08  F032         	call	___awdiv	;wreg free
  2417   007764  C001  F009         	movff	?___awdiv,___awmod@dividend
  2418   007768  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  2419   00776C  0E00               	movlw	0
  2420   00776E  6E0C               	movwf	(___awmod@divisor+1)^0,c
  2421   007770  0E0A               	movlw	10
  2422   007772  6E0B               	movwf	___awmod@divisor^0,c
  2423   007774  ECB0  F031         	call	___awmod	;wreg free
  2424   007778  5009               	movf	?___awmod^0,w,c
  2425   00777A  0F30               	addlw	48
  2426   00777C  EC55  F02D         	call	_lcdData
  2427   007780                     
  2428                           ;output.c: 37:         lcdData(min % 10 + 48);
  2429   007780  C01F  F009         	movff	outputPrint@min,___awmod@dividend
  2430   007784  6A0A               	clrf	(___awmod@dividend+1)^0,c
  2431   007786  0E00               	movlw	0
  2432   007788  6E0C               	movwf	(___awmod@divisor+1)^0,c
  2433   00778A  0E0A               	movlw	10
  2434   00778C  6E0B               	movwf	___awmod@divisor^0,c
  2435   00778E  ECB0  F031         	call	___awmod	;wreg free
  2436   007792  5009               	movf	?___awmod^0,w,c
  2437   007794  0F30               	addlw	48
  2438   007796  EC55  F02D         	call	_lcdData
  2439   00779A                     
  2440                           ;output.c: 38:         lcdData(':');
  2441   00779A  0E3A               	movlw	58
  2442   00779C  EC55  F02D         	call	_lcdData
  2443   0077A0                     
  2444                           ;output.c: 39:         lcdData((sec / 10) % 10 + 48);
  2445   0077A0  0E00               	movlw	0
  2446   0077A2  6E04               	movwf	(___awdiv@divisor+1)^0,c
  2447   0077A4  0E0A               	movlw	10
  2448   0077A6  6E03               	movwf	___awdiv@divisor^0,c
  2449   0077A8  C020  F001         	movff	outputPrint@sec,___awdiv@dividend
  2450   0077AC  6A02               	clrf	(___awdiv@dividend+1)^0,c
  2451   0077AE  EC08  F032         	call	___awdiv	;wreg free
  2452   0077B2  C001  F009         	movff	?___awdiv,___awmod@dividend
  2453   0077B6  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  2454   0077BA  0E00               	movlw	0
  2455   0077BC  6E0C               	movwf	(___awmod@divisor+1)^0,c
  2456   0077BE  0E0A               	movlw	10
  2457   0077C0  6E0B               	movwf	___awmod@divisor^0,c
  2458   0077C2  ECB0  F031         	call	___awmod	;wreg free
  2459   0077C6  5009               	movf	?___awmod^0,w,c
  2460   0077C8  0F30               	addlw	48
  2461   0077CA  EC55  F02D         	call	_lcdData
  2462   0077CE                     
  2463                           ;output.c: 40:         lcdData(sec % 10 + 48);
  2464   0077CE  C020  F009         	movff	outputPrint@sec,___awmod@dividend
  2465   0077D2  6A0A               	clrf	(___awmod@dividend+1)^0,c
  2466   0077D4  0E00               	movlw	0
  2467   0077D6  6E0C               	movwf	(___awmod@divisor+1)^0,c
  2468   0077D8  0E0A               	movlw	10
  2469   0077DA  6E0B               	movwf	___awmod@divisor^0,c
  2470   0077DC  ECB0  F031         	call	___awmod	;wreg free
  2471   0077E0  5009               	movf	?___awmod^0,w,c
  2472   0077E2  0F30               	addlw	48
  2473   0077E4  EC55  F02D         	call	_lcdData
  2474   0077E8                     l3394:
  2475                           
  2476                           ;output.c: 43:     if (numTela == STATE_MIN) {
  2477   0077E8  0E03               	movlw	3
  2478   0077EA  1819               	xorwf	outputPrint@numTela^0,w,c
  2479   0077EC  101A               	iorwf	(outputPrint@numTela+1)^0,w,c
  2480   0077EE  A4D8               	btfss	status,2,c
  2481   0077F0  EFFC  F03B         	goto	u3081
  2482   0077F4  EFFE  F03B         	goto	u3080
  2483   0077F8                     u3081:
  2484   0077F8  EF90  F03C         	goto	l3424
  2485   0077FC                     u3080:
  2486   0077FC                     
  2487                           ;output.c: 44:         lcdCommand(0x80);
  2488   0077FC  0E80               	movlw	128
  2489   0077FE  EC63  F02F         	call	_lcdCommand
  2490   007802                     
  2491                           ;output.c: 45:         lcdString(msgs[numTela][idioma]);
  2492   007802  501B               	movf	outputPrint@idioma^0,w,c
  2493   007804  0D02               	mullw	2
  2494   007806  CFF3 F01D          	movff	prodl,??_outputPrint
  2495   00780A  5019               	movf	outputPrint@numTela^0,w,c
  2496   00780C  0D04               	mullw	4
  2497   00780E  50F3               	movf	243,w,c
  2498   007810  0F60               	addlw	low _msgs
  2499   007812  241D               	addwf	??_outputPrint^0,w,c
  2500   007814  6ED9               	movwf	fsr2l,c
  2501   007816  6ADA               	clrf	fsr2h,c
  2502   007818  CFDE F004          	movff	postinc2,lcdString@msg
  2503   00781C  CFDD F005          	movff	postdec2,lcdString@msg+1
  2504   007820  EC02  F030         	call	_lcdString	;wreg free
  2505   007824                     
  2506                           ;output.c: 46:         lcdCommand(0xC0);
  2507   007824  0EC0               	movlw	192
  2508   007826  EC63  F02F         	call	_lcdCommand
  2509   00782A                     
  2510                           ;output.c: 47:         char hour, min, sec;;output.c: 48:         hour = getHOUR();
  2511   00782A  ECDB  F02C         	call	_getHOUR	;wreg free
  2512   00782E  6E21               	movwf	outputPrint@hour_482^0,c
  2513   007830                     
  2514                           ;output.c: 49:         min = getMIN();
  2515   007830  ECEB  F02C         	call	_getMIN	;wreg free
  2516   007834  6E22               	movwf	outputPrint@min_483^0,c
  2517   007836                     
  2518                           ;output.c: 50:         sec = getSEC();
  2519   007836  ECF3  F02C         	call	_getSEC	;wreg free
  2520   00783A  6E23               	movwf	outputPrint@sec_484^0,c
  2521   00783C                     
  2522                           ;output.c: 51:         lcdData((hour / 10) % 10 + 48);
  2523   00783C  0E00               	movlw	0
  2524   00783E  6E04               	movwf	(___awdiv@divisor+1)^0,c
  2525   007840  0E0A               	movlw	10
  2526   007842  6E03               	movwf	___awdiv@divisor^0,c
  2527   007844  C021  F001         	movff	outputPrint@hour_482,___awdiv@dividend
  2528   007848  6A02               	clrf	(___awdiv@dividend+1)^0,c
  2529   00784A  EC08  F032         	call	___awdiv	;wreg free
  2530   00784E  C001  F009         	movff	?___awdiv,___awmod@dividend
  2531   007852  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  2532   007856  0E00               	movlw	0
  2533   007858  6E0C               	movwf	(___awmod@divisor+1)^0,c
  2534   00785A  0E0A               	movlw	10
  2535   00785C  6E0B               	movwf	___awmod@divisor^0,c
  2536   00785E  ECB0  F031         	call	___awmod	;wreg free
  2537   007862  5009               	movf	?___awmod^0,w,c
  2538   007864  0F30               	addlw	48
  2539   007866  EC55  F02D         	call	_lcdData
  2540   00786A                     
  2541                           ;output.c: 52:         lcdData(hour % 10 + 48);
  2542   00786A  C021  F009         	movff	outputPrint@hour_482,___awmod@dividend
  2543   00786E  6A0A               	clrf	(___awmod@dividend+1)^0,c
  2544   007870  0E00               	movlw	0
  2545   007872  6E0C               	movwf	(___awmod@divisor+1)^0,c
  2546   007874  0E0A               	movlw	10
  2547   007876  6E0B               	movwf	___awmod@divisor^0,c
  2548   007878  ECB0  F031         	call	___awmod	;wreg free
  2549   00787C  5009               	movf	?___awmod^0,w,c
  2550   00787E  0F30               	addlw	48
  2551   007880  EC55  F02D         	call	_lcdData
  2552   007884                     
  2553                           ;output.c: 53:         lcdData(':');
  2554   007884  0E3A               	movlw	58
  2555   007886  EC55  F02D         	call	_lcdData
  2556   00788A                     
  2557                           ;output.c: 54:         lcdData((min / 10) % 10 + 48);
  2558   00788A  0E00               	movlw	0
  2559   00788C  6E04               	movwf	(___awdiv@divisor+1)^0,c
  2560   00788E  0E0A               	movlw	10
  2561   007890  6E03               	movwf	___awdiv@divisor^0,c
  2562   007892  C022  F001         	movff	outputPrint@min_483,___awdiv@dividend
  2563   007896  6A02               	clrf	(___awdiv@dividend+1)^0,c
  2564   007898  EC08  F032         	call	___awdiv	;wreg free
  2565   00789C  C001  F009         	movff	?___awdiv,___awmod@dividend
  2566   0078A0  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  2567   0078A4  0E00               	movlw	0
  2568   0078A6  6E0C               	movwf	(___awmod@divisor+1)^0,c
  2569   0078A8  0E0A               	movlw	10
  2570   0078AA  6E0B               	movwf	___awmod@divisor^0,c
  2571   0078AC  ECB0  F031         	call	___awmod	;wreg free
  2572   0078B0  5009               	movf	?___awmod^0,w,c
  2573   0078B2  0F30               	addlw	48
  2574   0078B4  EC55  F02D         	call	_lcdData
  2575   0078B8                     
  2576                           ;output.c: 55:         lcdData(min % 10 + 48);
  2577   0078B8  C022  F009         	movff	outputPrint@min_483,___awmod@dividend
  2578   0078BC  6A0A               	clrf	(___awmod@dividend+1)^0,c
  2579   0078BE  0E00               	movlw	0
  2580   0078C0  6E0C               	movwf	(___awmod@divisor+1)^0,c
  2581   0078C2  0E0A               	movlw	10
  2582   0078C4  6E0B               	movwf	___awmod@divisor^0,c
  2583   0078C6  ECB0  F031         	call	___awmod	;wreg free
  2584   0078CA  5009               	movf	?___awmod^0,w,c
  2585   0078CC  0F30               	addlw	48
  2586   0078CE  EC55  F02D         	call	_lcdData
  2587   0078D2                     
  2588                           ;output.c: 56:         lcdData(':');
  2589   0078D2  0E3A               	movlw	58
  2590   0078D4  EC55  F02D         	call	_lcdData
  2591   0078D8                     
  2592                           ;output.c: 57:         lcdData((sec / 10) % 10 + 48);
  2593   0078D8  0E00               	movlw	0
  2594   0078DA  6E04               	movwf	(___awdiv@divisor+1)^0,c
  2595   0078DC  0E0A               	movlw	10
  2596   0078DE  6E03               	movwf	___awdiv@divisor^0,c
  2597   0078E0  C023  F001         	movff	outputPrint@sec_484,___awdiv@dividend
  2598   0078E4  6A02               	clrf	(___awdiv@dividend+1)^0,c
  2599   0078E6  EC08  F032         	call	___awdiv	;wreg free
  2600   0078EA  C001  F009         	movff	?___awdiv,___awmod@dividend
  2601   0078EE  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  2602   0078F2  0E00               	movlw	0
  2603   0078F4  6E0C               	movwf	(___awmod@divisor+1)^0,c
  2604   0078F6  0E0A               	movlw	10
  2605   0078F8  6E0B               	movwf	___awmod@divisor^0,c
  2606   0078FA  ECB0  F031         	call	___awmod	;wreg free
  2607   0078FE  5009               	movf	?___awmod^0,w,c
  2608   007900  0F30               	addlw	48
  2609   007902  EC55  F02D         	call	_lcdData
  2610   007906                     
  2611                           ;output.c: 58:         lcdData(sec % 10 + 48);
  2612   007906  C023  F009         	movff	outputPrint@sec_484,___awmod@dividend
  2613   00790A  6A0A               	clrf	(___awmod@dividend+1)^0,c
  2614   00790C  0E00               	movlw	0
  2615   00790E  6E0C               	movwf	(___awmod@divisor+1)^0,c
  2616   007910  0E0A               	movlw	10
  2617   007912  6E0B               	movwf	___awmod@divisor^0,c
  2618   007914  ECB0  F031         	call	___awmod	;wreg free
  2619   007918  5009               	movf	?___awmod^0,w,c
  2620   00791A  0F30               	addlw	48
  2621   00791C  EC55  F02D         	call	_lcdData
  2622   007920                     l3424:
  2623                           
  2624                           ;output.c: 61:     if (numTela == STATE_SEC) {
  2625   007920  0E04               	movlw	4
  2626   007922  1819               	xorwf	outputPrint@numTela^0,w,c
  2627   007924  101A               	iorwf	(outputPrint@numTela+1)^0,w,c
  2628   007926  A4D8               	btfss	status,2,c
  2629   007928  EF98  F03C         	goto	u3091
  2630   00792C  EF9A  F03C         	goto	u3090
  2631   007930                     u3091:
  2632   007930  EF2C  F03D         	goto	l3454
  2633   007934                     u3090:
  2634   007934                     
  2635                           ;output.c: 62:         lcdCommand(0x80);
  2636   007934  0E80               	movlw	128
  2637   007936  EC63  F02F         	call	_lcdCommand
  2638   00793A                     
  2639                           ;output.c: 63:         lcdString(msgs[numTela][idioma]);
  2640   00793A  501B               	movf	outputPrint@idioma^0,w,c
  2641   00793C  0D02               	mullw	2
  2642   00793E  CFF3 F01D          	movff	prodl,??_outputPrint
  2643   007942  5019               	movf	outputPrint@numTela^0,w,c
  2644   007944  0D04               	mullw	4
  2645   007946  50F3               	movf	243,w,c
  2646   007948  0F60               	addlw	low _msgs
  2647   00794A  241D               	addwf	??_outputPrint^0,w,c
  2648   00794C  6ED9               	movwf	fsr2l,c
  2649   00794E  6ADA               	clrf	fsr2h,c
  2650   007950  CFDE F004          	movff	postinc2,lcdString@msg
  2651   007954  CFDD F005          	movff	postdec2,lcdString@msg+1
  2652   007958  EC02  F030         	call	_lcdString	;wreg free
  2653   00795C                     
  2654                           ;output.c: 64:         lcdCommand(0xC0);
  2655   00795C  0EC0               	movlw	192
  2656   00795E  EC63  F02F         	call	_lcdCommand
  2657   007962                     
  2658                           ;output.c: 65:         char hour, min, sec;;output.c: 66:         hour = getHOUR();
  2659   007962  ECDB  F02C         	call	_getHOUR	;wreg free
  2660   007966  6E24               	movwf	outputPrint@hour_485^0,c
  2661   007968                     
  2662                           ;output.c: 67:         min = getMIN();
  2663   007968  ECEB  F02C         	call	_getMIN	;wreg free
  2664   00796C  6E25               	movwf	outputPrint@min_486^0,c
  2665   00796E                     
  2666                           ;output.c: 68:         sec = getSEC();
  2667   00796E  ECF3  F02C         	call	_getSEC	;wreg free
  2668   007972  6E26               	movwf	outputPrint@sec_487^0,c
  2669   007974                     
  2670                           ;output.c: 69:         lcdData((hour / 10) % 10 + 48);
  2671   007974  0E00               	movlw	0
  2672   007976  6E04               	movwf	(___awdiv@divisor+1)^0,c
  2673   007978  0E0A               	movlw	10
  2674   00797A  6E03               	movwf	___awdiv@divisor^0,c
  2675   00797C  C024  F001         	movff	outputPrint@hour_485,___awdiv@dividend
  2676   007980  6A02               	clrf	(___awdiv@dividend+1)^0,c
  2677   007982  EC08  F032         	call	___awdiv	;wreg free
  2678   007986  C001  F009         	movff	?___awdiv,___awmod@dividend
  2679   00798A  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  2680   00798E  0E00               	movlw	0
  2681   007990  6E0C               	movwf	(___awmod@divisor+1)^0,c
  2682   007992  0E0A               	movlw	10
  2683   007994  6E0B               	movwf	___awmod@divisor^0,c
  2684   007996  ECB0  F031         	call	___awmod	;wreg free
  2685   00799A  5009               	movf	?___awmod^0,w,c
  2686   00799C  0F30               	addlw	48
  2687   00799E  EC55  F02D         	call	_lcdData
  2688   0079A2                     
  2689                           ;output.c: 70:         lcdData(hour % 10 + 48);
  2690   0079A2  C024  F009         	movff	outputPrint@hour_485,___awmod@dividend
  2691   0079A6  6A0A               	clrf	(___awmod@dividend+1)^0,c
  2692   0079A8  0E00               	movlw	0
  2693   0079AA  6E0C               	movwf	(___awmod@divisor+1)^0,c
  2694   0079AC  0E0A               	movlw	10
  2695   0079AE  6E0B               	movwf	___awmod@divisor^0,c
  2696   0079B0  ECB0  F031         	call	___awmod	;wreg free
  2697   0079B4  5009               	movf	?___awmod^0,w,c
  2698   0079B6  0F30               	addlw	48
  2699   0079B8  EC55  F02D         	call	_lcdData
  2700   0079BC                     
  2701                           ;output.c: 71:         lcdData(':');
  2702   0079BC  0E3A               	movlw	58
  2703   0079BE  EC55  F02D         	call	_lcdData
  2704   0079C2                     
  2705                           ;output.c: 72:         lcdData((min / 10) % 10 + 48);
  2706   0079C2  0E00               	movlw	0
  2707   0079C4  6E04               	movwf	(___awdiv@divisor+1)^0,c
  2708   0079C6  0E0A               	movlw	10
  2709   0079C8  6E03               	movwf	___awdiv@divisor^0,c
  2710   0079CA  C025  F001         	movff	outputPrint@min_486,___awdiv@dividend
  2711   0079CE  6A02               	clrf	(___awdiv@dividend+1)^0,c
  2712   0079D0  EC08  F032         	call	___awdiv	;wreg free
  2713   0079D4  C001  F009         	movff	?___awdiv,___awmod@dividend
  2714   0079D8  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  2715   0079DC  0E00               	movlw	0
  2716   0079DE  6E0C               	movwf	(___awmod@divisor+1)^0,c
  2717   0079E0  0E0A               	movlw	10
  2718   0079E2  6E0B               	movwf	___awmod@divisor^0,c
  2719   0079E4  ECB0  F031         	call	___awmod	;wreg free
  2720   0079E8  5009               	movf	?___awmod^0,w,c
  2721   0079EA  0F30               	addlw	48
  2722   0079EC  EC55  F02D         	call	_lcdData
  2723   0079F0                     
  2724                           ;output.c: 73:         lcdData(min % 10 + 48);
  2725   0079F0  C025  F009         	movff	outputPrint@min_486,___awmod@dividend
  2726   0079F4  6A0A               	clrf	(___awmod@dividend+1)^0,c
  2727   0079F6  0E00               	movlw	0
  2728   0079F8  6E0C               	movwf	(___awmod@divisor+1)^0,c
  2729   0079FA  0E0A               	movlw	10
  2730   0079FC  6E0B               	movwf	___awmod@divisor^0,c
  2731   0079FE  ECB0  F031         	call	___awmod	;wreg free
  2732   007A02  5009               	movf	?___awmod^0,w,c
  2733   007A04  0F30               	addlw	48
  2734   007A06  EC55  F02D         	call	_lcdData
  2735   007A0A                     
  2736                           ;output.c: 74:         lcdData(':');
  2737   007A0A  0E3A               	movlw	58
  2738   007A0C  EC55  F02D         	call	_lcdData
  2739   007A10                     
  2740                           ;output.c: 75:         lcdData((sec / 10) % 10 + 48);
  2741   007A10  0E00               	movlw	0
  2742   007A12  6E04               	movwf	(___awdiv@divisor+1)^0,c
  2743   007A14  0E0A               	movlw	10
  2744   007A16  6E03               	movwf	___awdiv@divisor^0,c
  2745   007A18  C026  F001         	movff	outputPrint@sec_487,___awdiv@dividend
  2746   007A1C  6A02               	clrf	(___awdiv@dividend+1)^0,c
  2747   007A1E  EC08  F032         	call	___awdiv	;wreg free
  2748   007A22  C001  F009         	movff	?___awdiv,___awmod@dividend
  2749   007A26  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  2750   007A2A  0E00               	movlw	0
  2751   007A2C  6E0C               	movwf	(___awmod@divisor+1)^0,c
  2752   007A2E  0E0A               	movlw	10
  2753   007A30  6E0B               	movwf	___awmod@divisor^0,c
  2754   007A32  ECB0  F031         	call	___awmod	;wreg free
  2755   007A36  5009               	movf	?___awmod^0,w,c
  2756   007A38  0F30               	addlw	48
  2757   007A3A  EC55  F02D         	call	_lcdData
  2758   007A3E                     
  2759                           ;output.c: 76:         lcdData(sec % 10 + 48);
  2760   007A3E  C026  F009         	movff	outputPrint@sec_487,___awmod@dividend
  2761   007A42  6A0A               	clrf	(___awmod@dividend+1)^0,c
  2762   007A44  0E00               	movlw	0
  2763   007A46  6E0C               	movwf	(___awmod@divisor+1)^0,c
  2764   007A48  0E0A               	movlw	10
  2765   007A4A  6E0B               	movwf	___awmod@divisor^0,c
  2766   007A4C  ECB0  F031         	call	___awmod	;wreg free
  2767   007A50  5009               	movf	?___awmod^0,w,c
  2768   007A52  0F30               	addlw	48
  2769   007A54  EC55  F02D         	call	_lcdData
  2770   007A58                     l3454:
  2771                           
  2772                           ;output.c: 79:     if (numTela == STATE_ALARM_UPPER) {
  2773   007A58  5019               	movf	outputPrint@numTela^0,w,c
  2774   007A5A  101A               	iorwf	(outputPrint@numTela+1)^0,w,c
  2775   007A5C  A4D8               	btfss	status,2,c
  2776   007A5E  EF33  F03D         	goto	u3101
  2777   007A62  EF35  F03D         	goto	u3100
  2778   007A66                     u3101:
  2779   007A66  EF62  F03D         	goto	l3468
  2780   007A6A                     u3100:
  2781   007A6A                     
  2782                           ;output.c: 80:         lcdCommand(0x80);
  2783   007A6A  0E80               	movlw	128
  2784   007A6C  EC63  F02F         	call	_lcdCommand
  2785   007A70                     
  2786                           ;output.c: 81:         lcdString(msgs[numTela][idioma]);
  2787   007A70  501B               	movf	outputPrint@idioma^0,w,c
  2788   007A72  0D02               	mullw	2
  2789   007A74  CFF3 F01D          	movff	prodl,??_outputPrint
  2790   007A78  5019               	movf	outputPrint@numTela^0,w,c
  2791   007A7A  0D04               	mullw	4
  2792   007A7C  50F3               	movf	243,w,c
  2793   007A7E  0F60               	addlw	low _msgs
  2794   007A80  241D               	addwf	??_outputPrint^0,w,c
  2795   007A82  6ED9               	movwf	fsr2l,c
  2796   007A84  6ADA               	clrf	fsr2h,c
  2797   007A86  CFDE F004          	movff	postinc2,lcdString@msg
  2798   007A8A  CFDD F005          	movff	postdec2,lcdString@msg+1
  2799   007A8E  EC02  F030         	call	_lcdString	;wreg free
  2800   007A92                     
  2801                           ;output.c: 82:         lcdCommand(0xC0);
  2802   007A92  0EC0               	movlw	192
  2803   007A94  EC63  F02F         	call	_lcdCommand
  2804   007A98                     
  2805                           ;output.c: 83:         lcdInt(getAlarmUpperLevel());
  2806   007A98  EC01  F02F         	call	_getAlarmUpperLevel	;wreg free
  2807   007A9C  C013  F017         	movff	?_getAlarmUpperLevel,lcdInt@val
  2808   007AA0  C014  F018         	movff	?_getAlarmUpperLevel+1,lcdInt@val+1
  2809   007AA4  EC6A  F032         	call	_lcdInt	;wreg free
  2810   007AA8                     
  2811                           ;output.c: 84:         lcdString("     ");
  2812   007AA8  0E1D               	movlw	low (STR_22+10)
  2813   007AAA  6E04               	movwf	lcdString@msg^0,c
  2814   007AAC  0E7D               	movlw	high (STR_22+10)
  2815   007AAE  6E05               	movwf	(lcdString@msg+1)^0,c
  2816   007AB0  EC02  F030         	call	_lcdString	;wreg free
  2817   007AB4                     
  2818                           ;output.c: 85:         lcdInt(getLevel());
  2819   007AB4  ECCE  F02C         	call	_getLevel	;wreg free
  2820   007AB8  C001  F017         	movff	?_getLevel,lcdInt@val
  2821   007ABC  C002  F018         	movff	?_getLevel+1,lcdInt@val+1
  2822   007AC0  EC6A  F032         	call	_lcdInt	;wreg free
  2823   007AC4                     l3468:
  2824                           
  2825                           ;output.c: 87:     if (numTela == STATE_ALARM_LOWER) {
  2826   007AC4  0419               	decf	outputPrint@numTela^0,w,c
  2827   007AC6  101A               	iorwf	(outputPrint@numTela+1)^0,w,c
  2828   007AC8  A4D8               	btfss	status,2,c
  2829   007ACA  EF69  F03D         	goto	u3111
  2830   007ACE  EF6B  F03D         	goto	u3110
  2831   007AD2                     u3111:
  2832   007AD2  EF98  F03D         	goto	l3482
  2833   007AD6                     u3110:
  2834   007AD6                     
  2835                           ;output.c: 88:         lcdCommand(0x80);
  2836   007AD6  0E80               	movlw	128
  2837   007AD8  EC63  F02F         	call	_lcdCommand
  2838   007ADC                     
  2839                           ;output.c: 89:         lcdString(msgs[numTela][idioma]);
  2840   007ADC  501B               	movf	outputPrint@idioma^0,w,c
  2841   007ADE  0D02               	mullw	2
  2842   007AE0  CFF3 F01D          	movff	prodl,??_outputPrint
  2843   007AE4  5019               	movf	outputPrint@numTela^0,w,c
  2844   007AE6  0D04               	mullw	4
  2845   007AE8  50F3               	movf	243,w,c
  2846   007AEA  0F60               	addlw	low _msgs
  2847   007AEC  241D               	addwf	??_outputPrint^0,w,c
  2848   007AEE  6ED9               	movwf	fsr2l,c
  2849   007AF0  6ADA               	clrf	fsr2h,c
  2850   007AF2  CFDE F004          	movff	postinc2,lcdString@msg
  2851   007AF6  CFDD F005          	movff	postdec2,lcdString@msg+1
  2852   007AFA  EC02  F030         	call	_lcdString	;wreg free
  2853   007AFE                     
  2854                           ;output.c: 90:         lcdCommand(0xC0);
  2855   007AFE  0EC0               	movlw	192
  2856   007B00  EC63  F02F         	call	_lcdCommand
  2857   007B04                     
  2858                           ;output.c: 91:         lcdInt(getAlarmLowerLevel());
  2859   007B04  ECE5  F02E         	call	_getAlarmLowerLevel	;wreg free
  2860   007B08  C013  F017         	movff	?_getAlarmLowerLevel,lcdInt@val
  2861   007B0C  C014  F018         	movff	?_getAlarmLowerLevel+1,lcdInt@val+1
  2862   007B10  EC6A  F032         	call	_lcdInt	;wreg free
  2863   007B14                     
  2864                           ;output.c: 92:         lcdString("     ");
  2865   007B14  0E1D               	movlw	low (STR_22+10)
  2866   007B16  6E04               	movwf	lcdString@msg^0,c
  2867   007B18  0E7D               	movlw	high (STR_22+10)
  2868   007B1A  6E05               	movwf	(lcdString@msg+1)^0,c
  2869   007B1C  EC02  F030         	call	_lcdString	;wreg free
  2870   007B20                     
  2871                           ;output.c: 93:         lcdInt(getLevel());
  2872   007B20  ECCE  F02C         	call	_getLevel	;wreg free
  2873   007B24  C001  F017         	movff	?_getLevel,lcdInt@val
  2874   007B28  C002  F018         	movff	?_getLevel+1,lcdInt@val+1
  2875   007B2C  EC6A  F032         	call	_lcdInt	;wreg free
  2876   007B30                     l3482:
  2877                           
  2878                           ;output.c: 95:     if (numTela == STATE_IDIOMA) {
  2879   007B30  0E05               	movlw	5
  2880   007B32  1819               	xorwf	outputPrint@numTela^0,w,c
  2881   007B34  101A               	iorwf	(outputPrint@numTela+1)^0,w,c
  2882   007B36  A4D8               	btfss	status,2,c
  2883   007B38  EFA0  F03D         	goto	u3121
  2884   007B3C  EFA2  F03D         	goto	u3120
  2885   007B40                     u3121:
  2886   007B40  EFD9  F03D         	goto	l3498
  2887   007B44                     u3120:
  2888   007B44                     
  2889                           ;output.c: 96:         lcdCommand(0x80);
  2890   007B44  0E80               	movlw	128
  2891   007B46  EC63  F02F         	call	_lcdCommand
  2892   007B4A                     
  2893                           ;output.c: 97:         lcdString(msgs[numTela][idioma]);
  2894   007B4A  501B               	movf	outputPrint@idioma^0,w,c
  2895   007B4C  0D02               	mullw	2
  2896   007B4E  CFF3 F01D          	movff	prodl,??_outputPrint
  2897   007B52  5019               	movf	outputPrint@numTela^0,w,c
  2898   007B54  0D04               	mullw	4
  2899   007B56  50F3               	movf	243,w,c
  2900   007B58  0F60               	addlw	low _msgs
  2901   007B5A  241D               	addwf	??_outputPrint^0,w,c
  2902   007B5C  6ED9               	movwf	fsr2l,c
  2903   007B5E  6ADA               	clrf	fsr2h,c
  2904   007B60  CFDE F004          	movff	postinc2,lcdString@msg
  2905   007B64  CFDD F005          	movff	postdec2,lcdString@msg+1
  2906   007B68  EC02  F030         	call	_lcdString	;wreg free
  2907   007B6C                     
  2908                           ;output.c: 98:         lcdCommand(0xC0);
  2909   007B6C  0EC0               	movlw	192
  2910   007B6E  EC63  F02F         	call	_lcdCommand
  2911   007B72                     
  2912                           ;output.c: 99:         if (getLanguage() == 0) {
  2913   007B72  ECE3  F02C         	call	_getLanguage	;wreg free
  2914   007B76  0900               	iorlw	0
  2915   007B78  A4D8               	btfss	status,2,c
  2916   007B7A  EFC1  F03D         	goto	u3131
  2917   007B7E  EFC3  F03D         	goto	u3130
  2918   007B82                     u3131:
  2919   007B82  EFC9  F03D         	goto	l3494
  2920   007B86                     u3130:
  2921   007B86                     
  2922                           ;output.c: 100:             lcdString("Portugues       ");
  2923   007B86  0E14               	movlw	low STR_20
  2924   007B88  6E04               	movwf	lcdString@msg^0,c
  2925   007B8A  0E7C               	movlw	high STR_20
  2926   007B8C  6E05               	movwf	(lcdString@msg+1)^0,c
  2927   007B8E  EC02  F030         	call	_lcdString	;wreg free
  2928   007B92                     l3494:
  2929                           
  2930                           ;output.c: 102:         if (getLanguage() == 1) {
  2931   007B92  ECE3  F02C         	call	_getLanguage	;wreg free
  2932   007B96  06E8               	decf	wreg,f,c
  2933   007B98  A4D8               	btfss	status,2,c
  2934   007B9A  EFD1  F03D         	goto	u3141
  2935   007B9E  EFD3  F03D         	goto	u3140
  2936   007BA2                     u3141:
  2937   007BA2  EFD9  F03D         	goto	l3498
  2938   007BA6                     u3140:
  2939   007BA6                     
  2940                           ;output.c: 103:             lcdString("English         ");
  2941   007BA6  0E03               	movlw	low STR_21
  2942   007BA8  6E04               	movwf	lcdString@msg^0,c
  2943   007BAA  0E7C               	movlw	high STR_21
  2944   007BAC  6E05               	movwf	(lcdString@msg+1)^0,c
  2945   007BAE  EC02  F030         	call	_lcdString	;wreg free
  2946   007BB2                     l3498:
  2947                           
  2948                           ;output.c: 107:     if (numTela == STATE_OVER_LIMIT) {
  2949   007BB2  0E06               	movlw	6
  2950   007BB4  1819               	xorwf	outputPrint@numTela^0,w,c
  2951   007BB6  101A               	iorwf	(outputPrint@numTela+1)^0,w,c
  2952   007BB8  A4D8               	btfss	status,2,c
  2953   007BBA  EFE1  F03D         	goto	u3151
  2954   007BBE  EFE3  F03D         	goto	u3150
  2955   007BC2                     u3151:
  2956   007BC2  EF00  F03E         	goto	l561
  2957   007BC6                     u3150:
  2958   007BC6                     
  2959                           ;output.c: 108:         lcdCommand(0x80);
  2960   007BC6  0E80               	movlw	128
  2961   007BC8  EC63  F02F         	call	_lcdCommand
  2962   007BCC                     
  2963                           ;output.c: 109:         lcdString(msgs[numTela][idioma]);
  2964   007BCC  501B               	movf	outputPrint@idioma^0,w,c
  2965   007BCE  0D02               	mullw	2
  2966   007BD0  CFF3 F01D          	movff	prodl,??_outputPrint
  2967   007BD4  5019               	movf	outputPrint@numTela^0,w,c
  2968   007BD6  0D04               	mullw	4
  2969   007BD8  50F3               	movf	243,w,c
  2970   007BDA  0F60               	addlw	low _msgs
  2971   007BDC  241D               	addwf	??_outputPrint^0,w,c
  2972   007BDE  6ED9               	movwf	fsr2l,c
  2973   007BE0  6ADA               	clrf	fsr2h,c
  2974   007BE2  CFDE F004          	movff	postinc2,lcdString@msg
  2975   007BE6  CFDD F005          	movff	postdec2,lcdString@msg+1
  2976   007BEA  EC02  F030         	call	_lcdString	;wreg free
  2977   007BEE                     
  2978                           ;output.c: 110:         lcdCommand(0xC0);
  2979   007BEE  0EC0               	movlw	192
  2980   007BF0  EC63  F02F         	call	_lcdCommand
  2981   007BF4                     
  2982                           ;output.c: 111:         lcdString("               ");
  2983   007BF4  0E13               	movlw	low STR_22
  2984   007BF6  6E04               	movwf	lcdString@msg^0,c
  2985   007BF8  0E7D               	movlw	high STR_22
  2986   007BFA  6E05               	movwf	(lcdString@msg+1)^0,c
  2987   007BFC  EC02  F030         	call	_lcdString	;wreg free
  2988   007C00                     l561:
  2989   007C00  0012               	return		;funcret
  2990   007C02                     __end_of_outputPrint:
  2991                           	callstack 0
  2992                           
  2993 ;; *************** function _lcdString *****************
  2994 ;; Defined at:
  2995 ;;		line 151 in file "lcd.c"
  2996 ;; Parameters:    Size  Location     Type
  2997 ;;  msg             2    3[COMRAM] PTR unsigned char 
  2998 ;;		 -> STR_22(16), STR_21(17), STR_20(17), STR_19(6), 
  2999 ;;		 -> STR_18(6), STR_17(17), STR_16(17), STR_15(17), 
  3000 ;;		 -> STR_14(17), STR_13(17), STR_12(17), STR_11(17), 
  3001 ;;		 -> STR_10(17), STR_9(17), STR_8(17), STR_7(17), 
  3002 ;;		 -> STR_6(17), STR_5(17), STR_4(17), 
  3003 ;; Auto vars:     Size  Location     Type
  3004 ;;  i               2    7[COMRAM] int 
  3005 ;; Return value:  Size  Location     Type
  3006 ;;                  1    wreg      void 
  3007 ;; Registers used:
  3008 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3009 ;; Tracked objects:
  3010 ;;		On entry : 0/0
  3011 ;;		On exit  : 0/0
  3012 ;;		Unchanged: 0/0
  3013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3014 ;;      Params:         2       0       0       0       0       0       0       0       0
  3015 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3016 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3017 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3018 ;;Total ram usage:        6 bytes
  3019 ;; Hardware stack levels used: 1
  3020 ;; Hardware stack levels required when called: 3
  3021 ;; This function calls:
  3022 ;;		_lcdData
  3023 ;; This function is called by:
  3024 ;;		_outputPrint
  3025 ;; This function uses a non-reentrant model
  3026 ;;
  3027                           
  3028                           	psect	text10
  3029   006004                     __ptext10:
  3030                           	callstack 0
  3031   006004                     _lcdString:
  3032                           	callstack 25
  3033   006004                     
  3034                           ;lcd.c: 151: void lcdString(char msg[]);lcd.c: 152: {;lcd.c: 153:     int i=0;
  3035   006004  0E00               	movlw	0
  3036   006006  6E09               	movwf	(lcdString@i+1)^0,c
  3037   006008  0E00               	movlw	0
  3038   00600A  6E08               	movwf	lcdString@i^0,c
  3039                           
  3040                           ;lcd.c: 154:     while(msg[i] != 0)
  3041   00600C  EF18  F030         	goto	l3066
  3042   006010                     l3062:
  3043                           
  3044                           ;lcd.c: 155:     {;lcd.c: 156:         lcdData(msg[i]);
  3045   006010  5008               	movf	lcdString@i^0,w,c
  3046   006012  2404               	addwf	lcdString@msg^0,w,c
  3047   006014  6E06               	movwf	??_lcdString^0,c
  3048   006016  5009               	movf	(lcdString@i+1)^0,w,c
  3049   006018  2005               	addwfc	(lcdString@msg+1)^0,w,c
  3050   00601A  6E07               	movwf	(??_lcdString+1)^0,c
  3051   00601C  C006  FFF6         	movff	??_lcdString,tblptrl
  3052   006020  C007  FFF7         	movff	??_lcdString+1,tblptrh
  3053   006024                     	if	0	;tblptru may be non-zero
  3054   006024                     	endif
  3055   006024                     	if	0	;tblptru may be non-zero
  3056   006024                     	endif
  3057   006024  0008               	tblrd		*
  3058   006026  50F5               	movf	tablat,w,c
  3059   006028  EC55  F02D         	call	_lcdData
  3060   00602C                     
  3061                           ;lcd.c: 157:         i++;
  3062   00602C  4A08               	infsnz	lcdString@i^0,f,c
  3063   00602E  2A09               	incf	(lcdString@i+1)^0,f,c
  3064   006030                     l3066:
  3065                           
  3066                           ;lcd.c: 154:     while(msg[i] != 0)
  3067   006030  5008               	movf	lcdString@i^0,w,c
  3068   006032  2404               	addwf	lcdString@msg^0,w,c
  3069   006034  6E06               	movwf	??_lcdString^0,c
  3070   006036  5009               	movf	(lcdString@i+1)^0,w,c
  3071   006038  2005               	addwfc	(lcdString@msg+1)^0,w,c
  3072   00603A  6E07               	movwf	(??_lcdString+1)^0,c
  3073   00603C  C006  FFF6         	movff	??_lcdString,tblptrl
  3074   006040  C007  FFF7         	movff	??_lcdString+1,tblptrh
  3075   006044                     	if	0	;tblptru may be non-zero
  3076   006044                     	endif
  3077   006044                     	if	0	;tblptru may be non-zero
  3078   006044                     	endif
  3079   006044  0008               	tblrd		*
  3080   006046  50F5               	movf	tablat,w,c
  3081   006048  0900               	iorlw	0
  3082   00604A  A4D8               	btfss	status,2,c
  3083   00604C  EF2A  F030         	goto	u2781
  3084   006050  EF2C  F030         	goto	u2780
  3085   006054                     u2781:
  3086   006054  EF08  F030         	goto	l3062
  3087   006058                     u2780:
  3088   006058  0012               	return		;funcret
  3089   00605A                     __end_of_lcdString:
  3090                           	callstack 0
  3091                           
  3092 ;; *************** function _lcdInt *****************
  3093 ;; Defined at:
  3094 ;;		line 161 in file "lcd.c"
  3095 ;; Parameters:    Size  Location     Type
  3096 ;;  val             2   22[COMRAM] int 
  3097 ;; Auto vars:     Size  Location     Type
  3098 ;;		None
  3099 ;; Return value:  Size  Location     Type
  3100 ;;                  1    wreg      void 
  3101 ;; Registers used:
  3102 ;;		wreg, status,2, status,0, cstack
  3103 ;; Tracked objects:
  3104 ;;		On entry : 0/0
  3105 ;;		On exit  : 0/0
  3106 ;;		Unchanged: 0/0
  3107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3108 ;;      Params:         2       0       0       0       0       0       0       0       0
  3109 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3110 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3111 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3112 ;;Total ram usage:        2 bytes
  3113 ;; Hardware stack levels used: 1
  3114 ;; Hardware stack levels required when called: 3
  3115 ;; This function calls:
  3116 ;;		___awdiv
  3117 ;;		___awmod
  3118 ;;		_lcdData
  3119 ;; This function is called by:
  3120 ;;		_outputPrint
  3121 ;; This function uses a non-reentrant model
  3122 ;;
  3123                           
  3124                           	psect	text11
  3125   0064D4                     __ptext11:
  3126                           	callstack 0
  3127   0064D4                     _lcdInt:
  3128                           	callstack 25
  3129   0064D4                     
  3130                           ;lcd.c: 162:     if (val < 0) {
  3131   0064D4  BE18               	btfsc	(lcdInt@val+1)^0,7,c
  3132   0064D6  EF71  F032         	goto	u2790
  3133   0064DA  EF6F  F032         	goto	u2791
  3134   0064DE                     u2791:
  3135   0064DE  EF78  F032         	goto	l3074
  3136   0064E2                     u2790:
  3137   0064E2                     
  3138                           ;lcd.c: 163:         val = val * (-1);
  3139   0064E2  6C17               	negf	lcdInt@val^0,c
  3140   0064E4  1E18               	comf	(lcdInt@val+1)^0,f,c
  3141   0064E6  B0D8               	btfsc	status,0,c
  3142   0064E8  2A18               	incf	(lcdInt@val+1)^0,f,c
  3143   0064EA                     
  3144                           ;lcd.c: 164:         lcdData('-');
  3145   0064EA  0E2D               	movlw	45
  3146   0064EC  EC55  F02D         	call	_lcdData
  3147   0064F0                     l3074:
  3148                           
  3149                           ;lcd.c: 166:     lcdData((val / 10000) % 10 + 48);
  3150   0064F0  0E27               	movlw	39
  3151   0064F2  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3152   0064F4  0E10               	movlw	16
  3153   0064F6  6E03               	movwf	___awdiv@divisor^0,c
  3154   0064F8  C017  F001         	movff	lcdInt@val,___awdiv@dividend
  3155   0064FC  C018  F002         	movff	lcdInt@val+1,___awdiv@dividend+1
  3156   006500  EC08  F032         	call	___awdiv	;wreg free
  3157   006504  C001  F009         	movff	?___awdiv,___awmod@dividend
  3158   006508  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  3159   00650C  0E00               	movlw	0
  3160   00650E  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3161   006510  0E0A               	movlw	10
  3162   006512  6E0B               	movwf	___awmod@divisor^0,c
  3163   006514  ECB0  F031         	call	___awmod	;wreg free
  3164   006518  5009               	movf	?___awmod^0,w,c
  3165   00651A  0F30               	addlw	48
  3166   00651C  EC55  F02D         	call	_lcdData
  3167   006520                     
  3168                           ;lcd.c: 167:     lcdData((val / 1000) % 10 + 48);
  3169   006520  0E03               	movlw	3
  3170   006522  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3171   006524  0EE8               	movlw	232
  3172   006526  6E03               	movwf	___awdiv@divisor^0,c
  3173   006528  C017  F001         	movff	lcdInt@val,___awdiv@dividend
  3174   00652C  C018  F002         	movff	lcdInt@val+1,___awdiv@dividend+1
  3175   006530  EC08  F032         	call	___awdiv	;wreg free
  3176   006534  C001  F009         	movff	?___awdiv,___awmod@dividend
  3177   006538  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  3178   00653C  0E00               	movlw	0
  3179   00653E  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3180   006540  0E0A               	movlw	10
  3181   006542  6E0B               	movwf	___awmod@divisor^0,c
  3182   006544  ECB0  F031         	call	___awmod	;wreg free
  3183   006548  5009               	movf	?___awmod^0,w,c
  3184   00654A  0F30               	addlw	48
  3185   00654C  EC55  F02D         	call	_lcdData
  3186   006550                     
  3187                           ;lcd.c: 168:     lcdData((val / 100) % 10 + 48);
  3188   006550  0E00               	movlw	0
  3189   006552  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3190   006554  0E64               	movlw	100
  3191   006556  6E03               	movwf	___awdiv@divisor^0,c
  3192   006558  C017  F001         	movff	lcdInt@val,___awdiv@dividend
  3193   00655C  C018  F002         	movff	lcdInt@val+1,___awdiv@dividend+1
  3194   006560  EC08  F032         	call	___awdiv	;wreg free
  3195   006564  C001  F009         	movff	?___awdiv,___awmod@dividend
  3196   006568  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  3197   00656C  0E00               	movlw	0
  3198   00656E  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3199   006570  0E0A               	movlw	10
  3200   006572  6E0B               	movwf	___awmod@divisor^0,c
  3201   006574  ECB0  F031         	call	___awmod	;wreg free
  3202   006578  5009               	movf	?___awmod^0,w,c
  3203   00657A  0F30               	addlw	48
  3204   00657C  EC55  F02D         	call	_lcdData
  3205   006580                     
  3206                           ;lcd.c: 169:     lcdData((val / 10) % 10 + 48);
  3207   006580  0E00               	movlw	0
  3208   006582  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3209   006584  0E0A               	movlw	10
  3210   006586  6E03               	movwf	___awdiv@divisor^0,c
  3211   006588  C017  F001         	movff	lcdInt@val,___awdiv@dividend
  3212   00658C  C018  F002         	movff	lcdInt@val+1,___awdiv@dividend+1
  3213   006590  EC08  F032         	call	___awdiv	;wreg free
  3214   006594  C001  F009         	movff	?___awdiv,___awmod@dividend
  3215   006598  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  3216   00659C  0E00               	movlw	0
  3217   00659E  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3218   0065A0  0E0A               	movlw	10
  3219   0065A2  6E0B               	movwf	___awmod@divisor^0,c
  3220   0065A4  ECB0  F031         	call	___awmod	;wreg free
  3221   0065A8  5009               	movf	?___awmod^0,w,c
  3222   0065AA  0F30               	addlw	48
  3223   0065AC  EC55  F02D         	call	_lcdData
  3224   0065B0                     
  3225                           ;lcd.c: 170:     lcdData((val / 1) % 10 + 48);
  3226   0065B0  C017  F009         	movff	lcdInt@val,___awmod@dividend
  3227   0065B4  C018  F00A         	movff	lcdInt@val+1,___awmod@dividend+1
  3228   0065B8  0E00               	movlw	0
  3229   0065BA  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3230   0065BC  0E0A               	movlw	10
  3231   0065BE  6E0B               	movwf	___awmod@divisor^0,c
  3232   0065C0  ECB0  F031         	call	___awmod	;wreg free
  3233   0065C4  5009               	movf	?___awmod^0,w,c
  3234   0065C6  0F30               	addlw	48
  3235   0065C8  EC55  F02D         	call	_lcdData
  3236   0065CC  0012               	return		;funcret
  3237   0065CE                     __end_of_lcdInt:
  3238                           	callstack 0
  3239                           
  3240 ;; *************** function _lcdData *****************
  3241 ;; Defined at:
  3242 ;;		line 102 in file "lcd.c"
  3243 ;; Parameters:    Size  Location     Type
  3244 ;;  valor           1    wreg     unsigned char 
  3245 ;; Auto vars:     Size  Location     Type
  3246 ;;  valor           1    2[COMRAM] unsigned char 
  3247 ;; Return value:  Size  Location     Type
  3248 ;;                  1    wreg      void 
  3249 ;; Registers used:
  3250 ;;		wreg, status,2, status,0, cstack
  3251 ;; Tracked objects:
  3252 ;;		On entry : 0/0
  3253 ;;		On exit  : 0/0
  3254 ;;		Unchanged: 0/0
  3255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3256 ;;      Params:         0       0       0       0       0       0       0       0       0
  3257 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3258 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3259 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3260 ;;Total ram usage:        1 bytes
  3261 ;; Hardware stack levels used: 1
  3262 ;; Hardware stack levels required when called: 2
  3263 ;; This function calls:
  3264 ;;		_Delay40us
  3265 ;;		_lcdCommand4bits
  3266 ;; This function is called by:
  3267 ;;		_lcdString
  3268 ;;		_lcdInt
  3269 ;;		_outputPrint
  3270 ;;		_lcd_write_string
  3271 ;; This function uses a non-reentrant model
  3272 ;;
  3273                           
  3274                           	psect	text12
  3275   005AAA                     __ptext12:
  3276                           	callstack 0
  3277   005AAA                     _lcdData:
  3278                           	callstack 25
  3279                           
  3280                           ;incstack = 0
  3281                           ;lcdData@valor stored from wreg
  3282   005AAA  6E03               	movwf	lcdData@valor^0,c
  3283   005AAC                     
  3284                           ;lcd.c: 103:     lcdCommand4bits(valor, 1);
  3285   005AAC  0E01               	movlw	1
  3286   005AAE  6E01               	movwf	lcdCommand4bits@data^0,c
  3287   005AB0  5003               	movf	lcdData@valor^0,w,c
  3288   005AB2  ECE6  F030         	call	_lcdCommand4bits
  3289                           
  3290                           ;lcd.c: 104:     lcdCommand4bits(valor << 4, 1);
  3291   005AB6  0E01               	movlw	1
  3292   005AB8  6E01               	movwf	lcdCommand4bits@data^0,c
  3293   005ABA  3803               	swapf	lcdData@valor^0,w,c
  3294   005ABC  0BF0               	andlw	240
  3295   005ABE  ECE6  F030         	call	_lcdCommand4bits
  3296                           
  3297                           ;lcd.c: 107:     Delay40us();
  3298   005AC2  EC22  F02D         	call	_Delay40us	;wreg free
  3299   005AC6  0012               	return		;funcret
  3300   005AC8                     __end_of_lcdData:
  3301                           	callstack 0
  3302                           
  3303 ;; *************** function _getSEC *****************
  3304 ;; Defined at:
  3305 ;;		line 45 in file "var.c"
  3306 ;; Parameters:    Size  Location     Type
  3307 ;;		None
  3308 ;; Auto vars:     Size  Location     Type
  3309 ;;		None
  3310 ;; Return value:  Size  Location     Type
  3311 ;;                  1    wreg      unsigned char 
  3312 ;; Registers used:
  3313 ;;		wreg, status,2, status,0, cstack
  3314 ;; Tracked objects:
  3315 ;;		On entry : 0/0
  3316 ;;		On exit  : 0/0
  3317 ;;		Unchanged: 0/0
  3318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3319 ;;      Params:         0       0       0       0       0       0       0       0       0
  3320 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3321 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3322 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3323 ;;Total ram usage:        0 bytes
  3324 ;; Hardware stack levels used: 1
  3325 ;; Hardware stack levels required when called: 5
  3326 ;; This function calls:
  3327 ;;		_dsReadData
  3328 ;; This function is called by:
  3329 ;;		_smLoop
  3330 ;;		_outputPrint
  3331 ;; This function uses a non-reentrant model
  3332 ;;
  3333                           
  3334                           	psect	text13
  3335   0059E6                     __ptext13:
  3336                           	callstack 0
  3337   0059E6                     _getSEC:
  3338                           	callstack 23
  3339   0059E6                     
  3340                           ;var.c: 47:     return dsReadData(0);
  3341   0059E6  0E00               	movlw	0
  3342   0059E8  6E0F               	movwf	(dsReadData@address+1)^0,c
  3343   0059EA  0E00               	movlw	0
  3344   0059EC  6E0E               	movwf	dsReadData@address^0,c
  3345   0059EE  EC40  F02F         	call	_dsReadData	;wreg free
  3346   0059F2  500E               	movf	?_dsReadData^0,w,c
  3347   0059F4  0012               	return		;funcret
  3348   0059F6                     __end_of_getSEC:
  3349                           	callstack 0
  3350                           
  3351 ;; *************** function _getMIN *****************
  3352 ;; Defined at:
  3353 ;;		line 50 in file "var.c"
  3354 ;; Parameters:    Size  Location     Type
  3355 ;;		None
  3356 ;; Auto vars:     Size  Location     Type
  3357 ;;		None
  3358 ;; Return value:  Size  Location     Type
  3359 ;;                  1    wreg      unsigned char 
  3360 ;; Registers used:
  3361 ;;		wreg, status,2, status,0, cstack
  3362 ;; Tracked objects:
  3363 ;;		On entry : 0/0
  3364 ;;		On exit  : 0/0
  3365 ;;		Unchanged: 0/0
  3366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3367 ;;      Params:         0       0       0       0       0       0       0       0       0
  3368 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3369 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3370 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3371 ;;Total ram usage:        0 bytes
  3372 ;; Hardware stack levels used: 1
  3373 ;; Hardware stack levels required when called: 5
  3374 ;; This function calls:
  3375 ;;		_dsReadData
  3376 ;; This function is called by:
  3377 ;;		_smLoop
  3378 ;;		_outputPrint
  3379 ;; This function uses a non-reentrant model
  3380 ;;
  3381                           
  3382                           	psect	text14
  3383   0059D6                     __ptext14:
  3384                           	callstack 0
  3385   0059D6                     _getMIN:
  3386                           	callstack 23
  3387   0059D6                     
  3388                           ;var.c: 52:     return dsReadData(1);
  3389   0059D6  0E00               	movlw	0
  3390   0059D8  6E0F               	movwf	(dsReadData@address+1)^0,c
  3391   0059DA  0E01               	movlw	1
  3392   0059DC  6E0E               	movwf	dsReadData@address^0,c
  3393   0059DE  EC40  F02F         	call	_dsReadData	;wreg free
  3394   0059E2  500E               	movf	?_dsReadData^0,w,c
  3395   0059E4  0012               	return		;funcret
  3396   0059E6                     __end_of_getMIN:
  3397                           	callstack 0
  3398                           
  3399 ;; *************** function _getLevel *****************
  3400 ;; Defined at:
  3401 ;;		line 27 in file "var.c"
  3402 ;; Parameters:    Size  Location     Type
  3403 ;;		None
  3404 ;; Auto vars:     Size  Location     Type
  3405 ;;		None
  3406 ;; Return value:  Size  Location     Type
  3407 ;;                  2    0[COMRAM] int 
  3408 ;; Registers used:
  3409 ;;		None
  3410 ;; Tracked objects:
  3411 ;;		On entry : 0/0
  3412 ;;		On exit  : 0/0
  3413 ;;		Unchanged: 0/0
  3414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3415 ;;      Params:         2       0       0       0       0       0       0       0       0
  3416 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3417 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3418 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3419 ;;Total ram usage:        2 bytes
  3420 ;; Hardware stack levels used: 1
  3421 ;; This function calls:
  3422 ;;		Nothing
  3423 ;; This function is called by:
  3424 ;;		_smLoop
  3425 ;;		_outputPrint
  3426 ;; This function uses a non-reentrant model
  3427 ;;
  3428                           
  3429                           	psect	text15
  3430   00599C                     __ptext15:
  3431                           	callstack 0
  3432   00599C                     _getLevel:
  3433                           	callstack 28
  3434   00599C                     
  3435                           ;var.c: 29:     return level;
  3436   00599C  C080  F001         	movff	_level@var$F512,?_getLevel
  3437   0059A0  C081  F002         	movff	_level@var$F512+1,?_getLevel+1
  3438   0059A4  0012               	return		;funcret
  3439   0059A6                     __end_of_getLevel:
  3440                           	callstack 0
  3441                           
  3442 ;; *************** function _getLanguage *****************
  3443 ;; Defined at:
  3444 ;;		line 111 in file "var.c"
  3445 ;; Parameters:    Size  Location     Type
  3446 ;;		None
  3447 ;; Auto vars:     Size  Location     Type
  3448 ;;		None
  3449 ;; Return value:  Size  Location     Type
  3450 ;;                  1    wreg      unsigned char 
  3451 ;; Registers used:
  3452 ;;		wreg, status,2, status,0, cstack
  3453 ;; Tracked objects:
  3454 ;;		On entry : 0/0
  3455 ;;		On exit  : 0/0
  3456 ;;		Unchanged: 0/0
  3457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3458 ;;      Params:         0       0       0       0       0       0       0       0       0
  3459 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3460 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3461 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3462 ;;Total ram usage:        0 bytes
  3463 ;; Hardware stack levels used: 1
  3464 ;; Hardware stack levels required when called: 5
  3465 ;; This function calls:
  3466 ;;		_dsReadData
  3467 ;; This function is called by:
  3468 ;;		_smLoop
  3469 ;;		_outputPrint
  3470 ;;		_varInit
  3471 ;; This function uses a non-reentrant model
  3472 ;;
  3473                           
  3474                           	psect	text16
  3475   0059C6                     __ptext16:
  3476                           	callstack 0
  3477   0059C6                     _getLanguage:
  3478                           	callstack 24
  3479   0059C6                     
  3480                           ;var.c: 112:     return dsReadData(0x26);
  3481   0059C6  0E00               	movlw	0
  3482   0059C8  6E0F               	movwf	(dsReadData@address+1)^0,c
  3483   0059CA  0E26               	movlw	38
  3484   0059CC  6E0E               	movwf	dsReadData@address^0,c
  3485   0059CE  EC40  F02F         	call	_dsReadData	;wreg free
  3486   0059D2  500E               	movf	?_dsReadData^0,w,c
  3487   0059D4  0012               	return		;funcret
  3488   0059D6                     __end_of_getLanguage:
  3489                           	callstack 0
  3490                           
  3491 ;; *************** function _getHOUR *****************
  3492 ;; Defined at:
  3493 ;;		line 55 in file "var.c"
  3494 ;; Parameters:    Size  Location     Type
  3495 ;;		None
  3496 ;; Auto vars:     Size  Location     Type
  3497 ;;		None
  3498 ;; Return value:  Size  Location     Type
  3499 ;;                  1    wreg      unsigned char 
  3500 ;; Registers used:
  3501 ;;		wreg, status,2, status,0, cstack
  3502 ;; Tracked objects:
  3503 ;;		On entry : 0/0
  3504 ;;		On exit  : 0/0
  3505 ;;		Unchanged: 0/0
  3506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3507 ;;      Params:         0       0       0       0       0       0       0       0       0
  3508 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3509 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3510 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3511 ;;Total ram usage:        0 bytes
  3512 ;; Hardware stack levels used: 1
  3513 ;; Hardware stack levels required when called: 5
  3514 ;; This function calls:
  3515 ;;		_dsReadData
  3516 ;; This function is called by:
  3517 ;;		_smLoop
  3518 ;;		_outputPrint
  3519 ;; This function uses a non-reentrant model
  3520 ;;
  3521                           
  3522                           	psect	text17
  3523   0059B6                     __ptext17:
  3524                           	callstack 0
  3525   0059B6                     _getHOUR:
  3526                           	callstack 23
  3527   0059B6                     
  3528                           ;var.c: 57:     return dsReadData(2);
  3529   0059B6  0E00               	movlw	0
  3530   0059B8  6E0F               	movwf	(dsReadData@address+1)^0,c
  3531   0059BA  0E02               	movlw	2
  3532   0059BC  6E0E               	movwf	dsReadData@address^0,c
  3533   0059BE  EC40  F02F         	call	_dsReadData	;wreg free
  3534   0059C2  500E               	movf	?_dsReadData^0,w,c
  3535   0059C4  0012               	return		;funcret
  3536   0059C6                     __end_of_getHOUR:
  3537                           	callstack 0
  3538                           
  3539 ;; *************** function _getAlarmUpperLevel *****************
  3540 ;; Defined at:
  3541 ;;		line 81 in file "var.c"
  3542 ;; Parameters:    Size  Location     Type
  3543 ;;		None
  3544 ;; Auto vars:     Size  Location     Type
  3545 ;;		None
  3546 ;; Return value:  Size  Location     Type
  3547 ;;                  2   18[COMRAM] int 
  3548 ;; Registers used:
  3549 ;;		wreg, status,2, status,0, cstack
  3550 ;; Tracked objects:
  3551 ;;		On entry : 0/0
  3552 ;;		On exit  : 0/0
  3553 ;;		Unchanged: 0/0
  3554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3555 ;;      Params:         2       0       0       0       0       0       0       0       0
  3556 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3557 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3558 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3559 ;;Total ram usage:        4 bytes
  3560 ;; Hardware stack levels used: 1
  3561 ;; Hardware stack levels required when called: 5
  3562 ;; This function calls:
  3563 ;;		_dsReadData
  3564 ;; This function is called by:
  3565 ;;		_smLoop
  3566 ;;		_outputPrint
  3567 ;; This function uses a non-reentrant model
  3568 ;;
  3569                           
  3570                           	psect	text18
  3571   005E02                     __ptext18:
  3572                           	callstack 0
  3573   005E02                     _getAlarmUpperLevel:
  3574                           	callstack 23
  3575   005E02                     
  3576                           ;var.c: 82:     unsigned static char a, b;;var.c: 83:     a = dsReadData(0x22);
  3577   005E02  0E00               	movlw	0
  3578   005E04  6E0F               	movwf	(dsReadData@address+1)^0,c
  3579   005E06  0E22               	movlw	34
  3580   005E08  6E0E               	movwf	dsReadData@address^0,c
  3581   005E0A  EC40  F02F         	call	_dsReadData	;wreg free
  3582   005E0E  500E               	movf	?_dsReadData^0,w,c
  3583   005E10  6E56               	movwf	getAlarmUpperLevel@a^0,c
  3584                           
  3585                           ;var.c: 84:     b = dsReadData(0x23);
  3586   005E12  0E00               	movlw	0
  3587   005E14  6E0F               	movwf	(dsReadData@address+1)^0,c
  3588   005E16  0E23               	movlw	35
  3589   005E18  6E0E               	movwf	dsReadData@address^0,c
  3590   005E1A  EC40  F02F         	call	_dsReadData	;wreg free
  3591   005E1E  500E               	movf	?_dsReadData^0,w,c
  3592   005E20  6E55               	movwf	getAlarmUpperLevel@b^0,c
  3593   005E22                     
  3594                           ;var.c: 85:     return (a<<8) | b;
  3595   005E22  5055               	movf	getAlarmUpperLevel@b^0,w,c
  3596   005E24  C056  F015         	movff	getAlarmUpperLevel@a,??_getAlarmUpperLevel
  3597   005E28  6A16               	clrf	(??_getAlarmUpperLevel+1)^0,c
  3598   005E2A  C015  F016         	movff	??_getAlarmUpperLevel,??_getAlarmUpperLevel+1
  3599   005E2E  6A15               	clrf	??_getAlarmUpperLevel^0,c
  3600   005E30  1015               	iorwf	??_getAlarmUpperLevel^0,w,c
  3601   005E32  6E13               	movwf	?_getAlarmUpperLevel^0,c
  3602   005E34  5016               	movf	(??_getAlarmUpperLevel+1)^0,w,c
  3603   005E36  6E14               	movwf	(?_getAlarmUpperLevel+1)^0,c
  3604   005E38  0012               	return		;funcret
  3605   005E3A                     __end_of_getAlarmUpperLevel:
  3606                           	callstack 0
  3607                           
  3608 ;; *************** function _getAlarmLowerLevel *****************
  3609 ;; Defined at:
  3610 ;;		line 95 in file "var.c"
  3611 ;; Parameters:    Size  Location     Type
  3612 ;;		None
  3613 ;; Auto vars:     Size  Location     Type
  3614 ;;		None
  3615 ;; Return value:  Size  Location     Type
  3616 ;;                  2   18[COMRAM] int 
  3617 ;; Registers used:
  3618 ;;		wreg, status,2, status,0, cstack
  3619 ;; Tracked objects:
  3620 ;;		On entry : 0/0
  3621 ;;		On exit  : 0/0
  3622 ;;		Unchanged: 0/0
  3623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3624 ;;      Params:         2       0       0       0       0       0       0       0       0
  3625 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3626 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3627 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3628 ;;Total ram usage:        4 bytes
  3629 ;; Hardware stack levels used: 1
  3630 ;; Hardware stack levels required when called: 5
  3631 ;; This function calls:
  3632 ;;		_dsReadData
  3633 ;; This function is called by:
  3634 ;;		_smLoop
  3635 ;;		_outputPrint
  3636 ;; This function uses a non-reentrant model
  3637 ;;
  3638                           
  3639                           	psect	text19
  3640   005DCA                     __ptext19:
  3641                           	callstack 0
  3642   005DCA                     _getAlarmLowerLevel:
  3643                           	callstack 23
  3644   005DCA                     
  3645                           ;var.c: 96:     unsigned static char a, b;;var.c: 97:     a = dsReadData(0x24);
  3646   005DCA  0E00               	movlw	0
  3647   005DCC  6E0F               	movwf	(dsReadData@address+1)^0,c
  3648   005DCE  0E24               	movlw	36
  3649   005DD0  6E0E               	movwf	dsReadData@address^0,c
  3650   005DD2  EC40  F02F         	call	_dsReadData	;wreg free
  3651   005DD6  500E               	movf	?_dsReadData^0,w,c
  3652   005DD8  6E52               	movwf	getAlarmLowerLevel@a^0,c
  3653                           
  3654                           ;var.c: 98:     b = dsReadData(0x25);
  3655   005DDA  0E00               	movlw	0
  3656   005DDC  6E0F               	movwf	(dsReadData@address+1)^0,c
  3657   005DDE  0E25               	movlw	37
  3658   005DE0  6E0E               	movwf	dsReadData@address^0,c
  3659   005DE2  EC40  F02F         	call	_dsReadData	;wreg free
  3660   005DE6  500E               	movf	?_dsReadData^0,w,c
  3661   005DE8  6E51               	movwf	getAlarmLowerLevel@b^0,c
  3662   005DEA                     
  3663                           ;var.c: 99:     return (a<<8) | b;
  3664   005DEA  5051               	movf	getAlarmLowerLevel@b^0,w,c
  3665   005DEC  C052  F015         	movff	getAlarmLowerLevel@a,??_getAlarmLowerLevel
  3666   005DF0  6A16               	clrf	(??_getAlarmLowerLevel+1)^0,c
  3667   005DF2  C015  F016         	movff	??_getAlarmLowerLevel,??_getAlarmLowerLevel+1
  3668   005DF6  6A15               	clrf	??_getAlarmLowerLevel^0,c
  3669   005DF8  1015               	iorwf	??_getAlarmLowerLevel^0,w,c
  3670   005DFA  6E13               	movwf	?_getAlarmLowerLevel^0,c
  3671   005DFC  5016               	movf	(??_getAlarmLowerLevel+1)^0,w,c
  3672   005DFE  6E14               	movwf	(?_getAlarmLowerLevel+1)^0,c
  3673   005E00  0012               	return		;funcret
  3674   005E02                     __end_of_getAlarmLowerLevel:
  3675                           	callstack 0
  3676                           
  3677 ;; *************** function _dsReadData *****************
  3678 ;; Defined at:
  3679 ;;		line 31 in file "ds1307.c"
  3680 ;; Parameters:    Size  Location     Type
  3681 ;;  address         2   13[COMRAM] int 
  3682 ;; Auto vars:     Size  Location     Type
  3683 ;;  result          2   16[COMRAM] int 
  3684 ;; Return value:  Size  Location     Type
  3685 ;;                  2   13[COMRAM] int 
  3686 ;; Registers used:
  3687 ;;		wreg, status,2, status,0, cstack
  3688 ;; Tracked objects:
  3689 ;;		On entry : 0/0
  3690 ;;		On exit  : 0/0
  3691 ;;		Unchanged: 0/0
  3692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3693 ;;      Params:         2       0       0       0       0       0       0       0       0
  3694 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3695 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3696 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3697 ;;Total ram usage:        5 bytes
  3698 ;; Hardware stack levels used: 1
  3699 ;; Hardware stack levels required when called: 4
  3700 ;; This function calls:
  3701 ;;		_i2cReadByte
  3702 ;;		_i2cWriteByte
  3703 ;; This function is called by:
  3704 ;;		_getSEC
  3705 ;;		_getMIN
  3706 ;;		_getHOUR
  3707 ;;		_getAlarmUpperLevel
  3708 ;;		_getAlarmLowerLevel
  3709 ;;		_getLanguage
  3710 ;;		_dsStartClock
  3711 ;; This function uses a non-reentrant model
  3712 ;;
  3713                           
  3714                           	psect	text20
  3715   005E80                     __ptext20:
  3716                           	callstack 0
  3717   005E80                     _dsReadData:
  3718                           	callstack 24
  3719   005E80                     
  3720                           ;ds1307.c: 32:  int result;;ds1307.c: 33:  i2cWriteByte(1,0,(0x6f<<1) | 0);
  3721   005E80  0E00               	movlw	0
  3722   005E82  6E08               	movwf	i2cWriteByte@send_stop^0,c
  3723   005E84  0EDE               	movlw	222
  3724   005E86  6E09               	movwf	i2cWriteByte@byte^0,c
  3725   005E88  0E01               	movlw	1
  3726   005E8A  ECB6  F030         	call	_i2cWriteByte
  3727                           
  3728                           ;ds1307.c: 34:  i2cWriteByte(0,0,address);
  3729   005E8E  0E00               	movlw	0
  3730   005E90  6E08               	movwf	i2cWriteByte@send_stop^0,c
  3731   005E92  C00E  F009         	movff	dsReadData@address,i2cWriteByte@byte
  3732   005E96  0E00               	movlw	0
  3733   005E98  ECB6  F030         	call	_i2cWriteByte
  3734                           
  3735                           ;ds1307.c: 35:  i2cWriteByte(1,0, (0x6f<<1) | 1);
  3736   005E9C  0E00               	movlw	0
  3737   005E9E  6E08               	movwf	i2cWriteByte@send_stop^0,c
  3738   005EA0  0EDF               	movlw	223
  3739   005EA2  6E09               	movwf	i2cWriteByte@byte^0,c
  3740   005EA4  0E01               	movlw	1
  3741   005EA6  ECB6  F030         	call	_i2cWriteByte
  3742                           
  3743                           ;ds1307.c: 36:  result = i2cReadByte(1,1 );
  3744   005EAA  0E01               	movlw	1
  3745   005EAC  6E08               	movwf	i2cReadByte@send_stop^0,c
  3746   005EAE  0E01               	movlw	1
  3747   005EB0  ECAE  F02F         	call	_i2cReadByte
  3748   005EB4  6E10               	movwf	??_dsReadData^0,c
  3749   005EB6  5010               	movf	??_dsReadData^0,w,c
  3750   005EB8  6E11               	movwf	dsReadData@result^0,c
  3751   005EBA  6A12               	clrf	(dsReadData@result+1)^0,c
  3752   005EBC                     
  3753                           ;ds1307.c: 37:  return result;
  3754   005EBC  C011  F00E         	movff	dsReadData@result,?_dsReadData
  3755   005EC0  C012  F00F         	movff	dsReadData@result+1,?_dsReadData+1
  3756   005EC4  0012               	return		;funcret
  3757   005EC6                     __end_of_dsReadData:
  3758                           	callstack 0
  3759                           
  3760 ;; *************** function _i2cReadByte *****************
  3761 ;; Defined at:
  3762 ;;		line 131 in file "i2c.c"
  3763 ;; Parameters:    Size  Location     Type
  3764 ;;  nack            1    wreg     unsigned char 
  3765 ;;  send_stop       1    7[COMRAM] unsigned char 
  3766 ;; Auto vars:     Size  Location     Type
  3767 ;;  nack            1    9[COMRAM] unsigned char 
  3768 ;;  bit             2   10[COMRAM] unsigned int 
  3769 ;;  byte            1   12[COMRAM] unsigned char 
  3770 ;; Return value:  Size  Location     Type
  3771 ;;                  1    wreg      unsigned char 
  3772 ;; Registers used:
  3773 ;;		wreg, status,2, status,0, cstack
  3774 ;; Tracked objects:
  3775 ;;		On entry : 0/0
  3776 ;;		On exit  : 0/0
  3777 ;;		Unchanged: 0/0
  3778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3779 ;;      Params:         1       0       0       0       0       0       0       0       0
  3780 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3781 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3782 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3783 ;;Total ram usage:        6 bytes
  3784 ;; Hardware stack levels used: 1
  3785 ;; Hardware stack levels required when called: 3
  3786 ;; This function calls:
  3787 ;;		_i2c_read_bit
  3788 ;;		_i2c_stop
  3789 ;;		_i2c_write_bit
  3790 ;; This function is called by:
  3791 ;;		_dsReadData
  3792 ;; This function uses a non-reentrant model
  3793 ;;
  3794                           
  3795                           	psect	text21
  3796   005F5C                     __ptext21:
  3797                           	callstack 0
  3798   005F5C                     _i2cReadByte:
  3799                           	callstack 24
  3800                           
  3801                           ;incstack = 0
  3802                           ;i2cReadByte@nack stored from wreg
  3803   005F5C  6E0A               	movwf	i2cReadByte@nack^0,c
  3804   005F5E                     
  3805                           ;i2c.c: 132:  unsigned char byte = 0;
  3806   005F5E  0E00               	movlw	0
  3807   005F60  6E0D               	movwf	i2cReadByte@byte^0,c
  3808                           
  3809                           ;i2c.c: 133:  unsigned bit;;i2c.c: 134:  for (bit = 0; bit < 8; bit++) {
  3810   005F62  0E00               	movlw	0
  3811   005F64  6E0C               	movwf	(i2cReadByte@bit+1)^0,c
  3812   005F66  0E00               	movlw	0
  3813   005F68  6E0B               	movwf	i2cReadByte@bit^0,c
  3814   005F6A                     l2840:
  3815                           
  3816                           ;i2c.c: 135:   byte = (byte << 1) | i2c_read_bit();
  3817   005F6A  EC94  F02E         	call	_i2c_read_bit	;wreg free
  3818   005F6E  6E09               	movwf	??_i2cReadByte^0,c
  3819   005F70  500D               	movf	i2cReadByte@byte^0,w,c
  3820   005F72  240D               	addwf	i2cReadByte@byte^0,w,c
  3821   005F74  1009               	iorwf	??_i2cReadByte^0,w,c
  3822   005F76  6E0D               	movwf	i2cReadByte@byte^0,c
  3823   005F78                     
  3824                           ;i2c.c: 136:  }
  3825   005F78  4A0B               	infsnz	i2cReadByte@bit^0,f,c
  3826   005F7A  2A0C               	incf	(i2cReadByte@bit+1)^0,f,c
  3827   005F7C  500C               	movf	(i2cReadByte@bit+1)^0,w,c
  3828   005F7E  E109               	bnz	u2500
  3829   005F80  0E08               	movlw	8
  3830   005F82  5C0B               	subwf	i2cReadByte@bit^0,w,c
  3831   005F84  A0D8               	btfss	status,0,c
  3832   005F86  EFC7  F02F         	goto	u2501
  3833   005F8A  EFC9  F02F         	goto	u2500
  3834   005F8E                     u2501:
  3835   005F8E  EFB5  F02F         	goto	l2840
  3836   005F92                     u2500:
  3837   005F92                     
  3838                           ;i2c.c: 137:  i2c_write_bit(nack);
  3839   005F92  500A               	movf	i2cReadByte@nack^0,w,c
  3840   005F94  EC2D  F030         	call	_i2c_write_bit
  3841   005F98                     
  3842                           ;i2c.c: 138:  if (send_stop) {
  3843   005F98  5008               	movf	i2cReadByte@send_stop^0,w,c
  3844   005F9A  B4D8               	btfsc	status,2,c
  3845   005F9C  EFD2  F02F         	goto	u2511
  3846   005FA0  EFD4  F02F         	goto	u2510
  3847   005FA4                     u2511:
  3848   005FA4  EFD6  F02F         	goto	l2852
  3849   005FA8                     u2510:
  3850   005FA8                     
  3851                           ;i2c.c: 139:   i2c_stop();
  3852   005FA8  EC66  F02E         	call	_i2c_stop	;wreg free
  3853   005FAC                     l2852:
  3854                           
  3855                           ;i2c.c: 141:  return byte;
  3856   005FAC  500D               	movf	i2cReadByte@byte^0,w,c
  3857   005FAE  0012               	return		;funcret
  3858   005FB0                     __end_of_i2cReadByte:
  3859                           	callstack 0
  3860                           
  3861 ;; *************** function _getState *****************
  3862 ;; Defined at:
  3863 ;;		line 38 in file "var.c"
  3864 ;; Parameters:    Size  Location     Type
  3865 ;;		None
  3866 ;; Auto vars:     Size  Location     Type
  3867 ;;		None
  3868 ;; Return value:  Size  Location     Type
  3869 ;;                  1    wreg      unsigned char 
  3870 ;; Registers used:
  3871 ;;		wreg, status,2
  3872 ;; Tracked objects:
  3873 ;;		On entry : 0/0
  3874 ;;		On exit  : 0/0
  3875 ;;		Unchanged: 0/0
  3876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3877 ;;      Params:         0       0       0       0       0       0       0       0       0
  3878 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3879 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3880 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3881 ;;Total ram usage:        0 bytes
  3882 ;; Hardware stack levels used: 1
  3883 ;; This function calls:
  3884 ;;		Nothing
  3885 ;; This function is called by:
  3886 ;;		_smLoop
  3887 ;; This function uses a non-reentrant model
  3888 ;;
  3889                           
  3890                           	psect	text22
  3891   005974                     __ptext22:
  3892                           	callstack 0
  3893   005974                     _getState:
  3894                           	callstack 29
  3895   005974                     
  3896                           ;var.c: 39:     return state;
  3897   005974  5058               	movf	_state^0,w,c
  3898   005976  0012               	return		;funcret
  3899   005978                     __end_of_getState:
  3900                           	callstack 0
  3901                           
  3902 ;; *************** function _eventRead *****************
  3903 ;; Defined at:
  3904 ;;		line 25 in file "event.c"
  3905 ;; Parameters:    Size  Location     Type
  3906 ;;		None
  3907 ;; Auto vars:     Size  Location     Type
  3908 ;;  i               1   62[COMRAM] unsigned char 
  3909 ;;  i               1   65[COMRAM] unsigned char 
  3910 ;;  i               1   61[COMRAM] unsigned char 
  3911 ;;  value           2   55[COMRAM] unsigned int 
  3912 ;;  key             2   63[COMRAM] int 
  3913 ;;  ev              2   59[COMRAM] int 
  3914 ;; Return value:  Size  Location     Type
  3915 ;;                  2   43[COMRAM] unsigned int 
  3916 ;; Registers used:
  3917 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3918 ;; Tracked objects:
  3919 ;;		On entry : 0/0
  3920 ;;		On exit  : 0/0
  3921 ;;		Unchanged: 0/0
  3922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3923 ;;      Params:         2       0       0       0       0       0       0       0       0
  3924 ;;      Locals:        11       0       0       0       0       0       0       0       0
  3925 ;;      Temps:         10       0       0       0       0       0       0       0       0
  3926 ;;      Totals:        23       0       0       0       0       0       0       0       0
  3927 ;;Total ram usage:       23 bytes
  3928 ;; Hardware stack levels used: 1
  3929 ;; Hardware stack levels required when called: 6
  3930 ;; This function calls:
  3931 ;;		___wmul
  3932 ;;		_kpRead
  3933 ;;		_pow10
  3934 ;;		_serialRead
  3935 ;;		_serialSend
  3936 ;;		_serialSendInt
  3937 ;;		_serialSendString
  3938 ;;		_setAlarmLowerLevel
  3939 ;;		_setAlarmUpperLevel
  3940 ;;		_setHOUR
  3941 ;;		_setLanguage
  3942 ;;		_setMIN
  3943 ;;		_setSEC
  3944 ;; This function is called by:
  3945 ;;		_smLoop
  3946 ;; This function uses a non-reentrant model
  3947 ;;
  3948                           
  3949                           	psect	text23
  3950   006D2A                     __ptext23:
  3951                           	callstack 0
  3952   006D2A                     _eventRead:
  3953                           	callstack 23
  3954   006D2A                     
  3955                           ;event.c: 26:     int key;;event.c: 27:     int ev = EV_NOEVENT;
  3956   006D2A  0E00               	movlw	0
  3957   006D2C  6E3D               	movwf	(eventRead@ev+1)^0,c
  3958   006D2E  0E05               	movlw	5
  3959   006D30  6E3C               	movwf	eventRead@ev^0,c
  3960   006D32                     
  3961                           ;event.c: 28:     key = kpRead();
  3962   006D32  ECB8  F02C         	call	_kpRead	;wreg free
  3963   006D36  6E2E               	movwf	??_eventRead^0,c
  3964   006D38  502E               	movf	??_eventRead^0,w,c
  3965   006D3A  6E40               	movwf	eventRead@key^0,c
  3966   006D3C  6A41               	clrf	(eventRead@key+1)^0,c
  3967   006D3E                     
  3968                           ;event.c: 29:     if (key != key_ant) {
  3969   006D3E  0100               	movlb	0	; () banked
  3970   006D40  518C               	movf	_key_ant& (0+255),w,b
  3971   006D42  1840               	xorwf	eventRead@key^0,w,c
  3972   006D44  E109               	bnz	u2870
  3973   006D46  518D               	movf	(_key_ant+1)& (0+255),w,b
  3974   006D48  1841               	xorwf	(eventRead@key+1)^0,w,c
  3975   006D4A  B4D8               	btfsc	status,2,c
  3976   006D4C  EFAA  F036         	goto	u2871
  3977   006D50  EFAC  F036         	goto	u2870
  3978   006D54                     u2871:
  3979   006D54  EFCD  F036         	goto	l3232
  3980   006D58                     u2870:
  3981   006D58                     
  3982                           ; BSR set to: 0
  3983                           ;event.c: 30:         if (((key) & (1<<(0)))) {
  3984   006D58  A040               	btfss	eventRead@key^0,0,c
  3985   006D5A  EFB1  F036         	goto	u2881
  3986   006D5E  EFB3  F036         	goto	u2880
  3987   006D62                     u2881:
  3988   006D62  EFB7  F036         	goto	l3224
  3989   006D66                     u2880:
  3990   006D66                     
  3991                           ; BSR set to: 0
  3992                           ;event.c: 31:             ev = EV_RIGHT;
  3993   006D66  0E00               	movlw	0
  3994   006D68  6E3D               	movwf	(eventRead@ev+1)^0,c
  3995   006D6A  0E03               	movlw	3
  3996   006D6C  6E3C               	movwf	eventRead@ev^0,c
  3997   006D6E                     l3224:
  3998                           
  3999                           ; BSR set to: 0
  4000                           ;event.c: 34:         if (((key) & (1<<(1)))) {
  4001   006D6E  A240               	btfss	eventRead@key^0,1,c
  4002   006D70  EFBC  F036         	goto	u2891
  4003   006D74  EFBE  F036         	goto	u2890
  4004   006D78                     u2891:
  4005   006D78  EFC2  F036         	goto	l3228
  4006   006D7C                     u2890:
  4007   006D7C                     
  4008                           ; BSR set to: 0
  4009                           ;event.c: 35:             ev = EV_LEFT;
  4010   006D7C  0E00               	movlw	0
  4011   006D7E  6E3D               	movwf	(eventRead@ev+1)^0,c
  4012   006D80  0E02               	movlw	2
  4013   006D82  6E3C               	movwf	eventRead@ev^0,c
  4014   006D84                     l3228:
  4015                           
  4016                           ; BSR set to: 0
  4017                           ;event.c: 38:         if (((key) & (1<<(2)))) {
  4018   006D84  A440               	btfss	eventRead@key^0,2,c
  4019   006D86  EFC7  F036         	goto	u2901
  4020   006D8A  EFC9  F036         	goto	u2900
  4021   006D8E                     u2901:
  4022   006D8E  EFCD  F036         	goto	l3232
  4023   006D92                     u2900:
  4024   006D92                     
  4025                           ; BSR set to: 0
  4026                           ;event.c: 39:             ev = EV_ENTER;
  4027   006D92  0E00               	movlw	0
  4028   006D94  6E3D               	movwf	(eventRead@ev+1)^0,c
  4029   006D96  0E04               	movlw	4
  4030   006D98  6E3C               	movwf	eventRead@ev^0,c
  4031   006D9A                     l3232:
  4032                           
  4033                           ; BSR set to: 0
  4034                           ;event.c: 42:     key_ant = key;
  4035   006D9A  C040  F08C         	movff	eventRead@key,_key_ant
  4036   006D9E  C041  F08D         	movff	eventRead@key+1,_key_ant+1
  4037   006DA2                     
  4038                           ; BSR set to: 0
  4039                           ;event.c: 45:     static unsigned char msg[6];;event.c: 46:     unsigned char static dat
      +                          a;;event.c: 47:     data = serialRead();
  4040   006DA2  EC39  F02E         	call	_serialRead	;wreg free
  4041   006DA6  6E59               	movwf	eventRead@data^0,c
  4042   006DA8                     
  4043                           ;event.c: 48:     if (data != 0) {
  4044   006DA8  5059               	movf	eventRead@data^0,w,c
  4045   006DAA  B4D8               	btfsc	status,2,c
  4046   006DAC  EFDA  F036         	goto	u2911
  4047   006DB0  EFDC  F036         	goto	u2910
  4048   006DB4                     u2911:
  4049   006DB4  EFF0  F038         	goto	l3350
  4050   006DB8                     u2910:
  4051   006DB8                     
  4052                           ;event.c: 49:         if (reading_protocol) {
  4053   006DB8  505A               	movf	_reading_protocol^0,w,c
  4054   006DBA  B4D8               	btfsc	status,2,c
  4055   006DBC  EFE2  F036         	goto	u2921
  4056   006DC0  EFE4  F036         	goto	u2920
  4057   006DC4                     u2921:
  4058   006DC4  EFED  F036         	goto	l3244
  4059   006DC8                     u2920:
  4060   006DC8                     
  4061                           ;event.c: 50:             msg[reading_protocol - 1] = data;
  4062   006DC8  505A               	movf	_reading_protocol^0,w,c
  4063   006DCA  0F46               	addlw	low (eventRead@msg+255)
  4064   006DCC  6ED9               	movwf	fsr2l,c
  4065   006DCE  6ADA               	clrf	fsr2h,c
  4066   006DD0  C059  FFDF         	movff	eventRead@data,indf2
  4067   006DD4                     
  4068                           ;event.c: 51:             reading_protocol++;
  4069   006DD4  2A5A               	incf	_reading_protocol^0,f,c
  4070                           
  4071                           ;event.c: 52:         } else if (data == 'w') ev = EV_ENTER;
  4072   006DD6  EF1A  F037         	goto	l3256
  4073   006DDA                     l3244:
  4074   006DDA  0E77               	movlw	119
  4075   006DDC  1859               	xorwf	eventRead@data^0,w,c
  4076   006DDE  A4D8               	btfss	status,2,c
  4077   006DE0  EFF4  F036         	goto	u2931
  4078   006DE4  EFF6  F036         	goto	u2930
  4079   006DE8                     u2931:
  4080   006DE8  EFFC  F036         	goto	l3248
  4081   006DEC                     u2930:
  4082   006DEC  0E00               	movlw	0
  4083   006DEE  6E3D               	movwf	(eventRead@ev+1)^0,c
  4084   006DF0  0E04               	movlw	4
  4085   006DF2  6E3C               	movwf	eventRead@ev^0,c
  4086   006DF4  EF1A  F037         	goto	l3256
  4087   006DF8                     l3248:
  4088   006DF8  0E61               	movlw	97
  4089   006DFA  1859               	xorwf	eventRead@data^0,w,c
  4090   006DFC  A4D8               	btfss	status,2,c
  4091   006DFE  EF03  F037         	goto	u2941
  4092   006E02  EF05  F037         	goto	u2940
  4093   006E06                     u2941:
  4094   006E06  EF0B  F037         	goto	l3252
  4095   006E0A                     u2940:
  4096   006E0A  0E00               	movlw	0
  4097   006E0C  6E3D               	movwf	(eventRead@ev+1)^0,c
  4098   006E0E  0E02               	movlw	2
  4099   006E10  6E3C               	movwf	eventRead@ev^0,c
  4100   006E12  EF1A  F037         	goto	l3256
  4101   006E16                     l3252:
  4102   006E16  0E64               	movlw	100
  4103   006E18  1859               	xorwf	eventRead@data^0,w,c
  4104   006E1A  A4D8               	btfss	status,2,c
  4105   006E1C  EF12  F037         	goto	u2951
  4106   006E20  EF14  F037         	goto	u2950
  4107   006E24                     u2951:
  4108   006E24  EF1A  F037         	goto	l404
  4109   006E28                     u2950:
  4110   006E28  0E00               	movlw	0
  4111   006E2A  6E3D               	movwf	(eventRead@ev+1)^0,c
  4112   006E2C  0E03               	movlw	3
  4113   006E2E  6E3C               	movwf	eventRead@ev^0,c
  4114   006E30  EF1A  F037         	goto	l3256
  4115   006E34                     l404:
  4116   006E34                     l3256:
  4117                           
  4118                           ;event.c: 56:         if (data == 'p') {
  4119   006E34  0E70               	movlw	112
  4120   006E36  1859               	xorwf	eventRead@data^0,w,c
  4121   006E38  A4D8               	btfss	status,2,c
  4122   006E3A  EF21  F037         	goto	u2961
  4123   006E3E  EF23  F037         	goto	u2960
  4124   006E42                     u2961:
  4125   006E42  EFF0  F038         	goto	l3350
  4126   006E46                     u2960:
  4127   006E46                     
  4128                           ;event.c: 57:             if (reading_protocol == 0) {
  4129   006E46  505A               	movf	_reading_protocol^0,w,c
  4130   006E48  A4D8               	btfss	status,2,c
  4131   006E4A  EF29  F037         	goto	u2971
  4132   006E4E  EF2B  F037         	goto	u2970
  4133   006E52                     u2971:
  4134   006E52  EF40  F037         	goto	l3272
  4135   006E56                     u2970:
  4136   006E56                     
  4137                           ;event.c: 58:                 reading_protocol = 1;
  4138   006E56  0E01               	movlw	1
  4139   006E58  6E5A               	movwf	_reading_protocol^0,c
  4140                           
  4141                           ;event.c: 59:                 for (char i = 0; i < 6; i++) {
  4142   006E5A  0E00               	movlw	0
  4143   006E5C  6E3E               	movwf	eventRead@i^0,c
  4144   006E5E                     l3266:
  4145                           
  4146                           ;event.c: 60:                     msg[i] = '0';
  4147   006E5E  503E               	movf	eventRead@i^0,w,c
  4148   006E60  0F47               	addlw	low eventRead@msg
  4149   006E62  6ED9               	movwf	fsr2l,c
  4150   006E64  6ADA               	clrf	fsr2h,c
  4151   006E66  0E30               	movlw	48
  4152   006E68  6EDF               	movwf	indf2,c
  4153   006E6A                     
  4154                           ;event.c: 61:                 }
  4155   006E6A  2A3E               	incf	eventRead@i^0,f,c
  4156   006E6C  0E05               	movlw	5
  4157   006E6E  643E               	cpfsgt	eventRead@i^0,c
  4158   006E70  EF3C  F037         	goto	u2981
  4159   006E74  EF3E  F037         	goto	u2980
  4160   006E78                     u2981:
  4161   006E78  EF2F  F037         	goto	l3266
  4162   006E7C                     u2980:
  4163   006E7C  EFF0  F038         	goto	l3350
  4164   006E80                     l3272:
  4165                           
  4166                           ;event.c: 63:                 unsigned int value = 0;
  4167   006E80  0E00               	movlw	0
  4168   006E82  6E39               	movwf	(eventRead@value+1)^0,c
  4169   006E84  0E00               	movlw	0
  4170   006E86  6E38               	movwf	eventRead@value^0,c
  4171   006E88                     
  4172                           ;event.c: 64:                 for (char i = reading_protocol - 3; i > 0; i--) {
  4173   006E88  505A               	movf	_reading_protocol^0,w,c
  4174   006E8A  0FFD               	addlw	253
  4175   006E8C  6E42               	movwf	eventRead@i_347^0,c
  4176   006E8E                     l3276:
  4177   006E8E  5042               	movf	eventRead@i_347^0,w,c
  4178   006E90  A4D8               	btfss	status,2,c
  4179   006E92  EF4D  F037         	goto	u2991
  4180   006E96  EF4F  F037         	goto	u2990
  4181   006E9A                     u2991:
  4182   006E9A  EF51  F037         	goto	l3280
  4183   006E9E                     u2990:
  4184   006E9E  EFB2  F037         	goto	l3296
  4185   006EA2                     l3280:
  4186                           
  4187                           ;event.c: 65:                     value += (msg[i] - '0') * pow10(reading_protocol - 3 -
      +                           i);
  4188   006EA2  5042               	movf	eventRead@i_347^0,w,c
  4189   006EA4  C05A  F02E         	movff	_reading_protocol,??_eventRead
  4190   006EA8  6A2F               	clrf	(??_eventRead+1)^0,c
  4191   006EAA  5E2E               	subwf	??_eventRead^0,f,c
  4192   006EAC  0E00               	movlw	0
  4193   006EAE  5A2F               	subwfb	(??_eventRead+1)^0,f,c
  4194   006EB0  0EFD               	movlw	253
  4195   006EB2  242E               	addwf	??_eventRead^0,w,c
  4196   006EB4  6E07               	movwf	pow10@expoent^0,c
  4197   006EB6  0EFF               	movlw	255
  4198   006EB8  202F               	addwfc	(??_eventRead+1)^0,w,c
  4199   006EBA  6E08               	movwf	(pow10@expoent+1)^0,c
  4200   006EBC  EC59  F030         	call	_pow10	;wreg free
  4201   006EC0  C007  F03A         	movff	?_pow10,_eventRead$1298
  4202   006EC4  C008  F03B         	movff	?_pow10+1,_eventRead$1298+1
  4203   006EC8                     
  4204                           ;event.c: 65:                     value += (msg[i] - '0') * pow10(reading_protocol - 3 -
      +                           i);
  4205   006EC8  5042               	movf	eventRead@i_347^0,w,c
  4206   006ECA  0F47               	addlw	low eventRead@msg
  4207   006ECC  6ED9               	movwf	fsr2l,c
  4208   006ECE  6ADA               	clrf	fsr2h,c
  4209   006ED0  50DF               	movf	indf2,w,c
  4210   006ED2  6E2E               	movwf	??_eventRead^0,c
  4211   006ED4  0ED0               	movlw	208
  4212   006ED6  242E               	addwf	??_eventRead^0,w,c
  4213   006ED8  6E01               	movwf	___wmul@multiplier^0,c
  4214   006EDA  6A02               	clrf	(___wmul@multiplier+1)^0,c
  4215   006EDC  0EFF               	movlw	255
  4216   006EDE  2202               	addwfc	(___wmul@multiplier+1)^0,f,c
  4217   006EE0  C03A  F003         	movff	_eventRead$1298,___wmul@multiplicand
  4218   006EE4  C03B  F004         	movff	_eventRead$1298+1,___wmul@multiplicand+1
  4219   006EE8  EC74  F02D         	call	___wmul	;wreg free
  4220   006EEC  5001               	movf	?___wmul^0,w,c
  4221   006EEE  2638               	addwf	eventRead@value^0,f,c
  4222   006EF0  5002               	movf	(?___wmul+1)^0,w,c
  4223   006EF2  2239               	addwfc	(eventRead@value+1)^0,f,c
  4224   006EF4                     
  4225                           ;event.c: 66:                     serialSend(i + '0');
  4226   006EF4  5042               	movf	eventRead@i_347^0,w,c
  4227   006EF6  0F30               	addlw	48
  4228   006EF8  EC17  F02D         	call	_serialSend
  4229   006EFC                     
  4230                           ;event.c: 67:                     serialSendInt((msg[i] - '0') * pow10(reading_protocol 
      +                          - 3 - i));
  4231   006EFC  5042               	movf	eventRead@i_347^0,w,c
  4232   006EFE  C05A  F02E         	movff	_reading_protocol,??_eventRead
  4233   006F02  6A2F               	clrf	(??_eventRead+1)^0,c
  4234   006F04  5E2E               	subwf	??_eventRead^0,f,c
  4235   006F06  0E00               	movlw	0
  4236   006F08  5A2F               	subwfb	(??_eventRead+1)^0,f,c
  4237   006F0A  0EFD               	movlw	253
  4238   006F0C  242E               	addwf	??_eventRead^0,w,c
  4239   006F0E  6E07               	movwf	pow10@expoent^0,c
  4240   006F10  0EFF               	movlw	255
  4241   006F12  202F               	addwfc	(??_eventRead+1)^0,w,c
  4242   006F14  6E08               	movwf	(pow10@expoent+1)^0,c
  4243   006F16  EC59  F030         	call	_pow10	;wreg free
  4244   006F1A  C007  F03A         	movff	?_pow10,_eventRead$1298
  4245   006F1E  C008  F03B         	movff	?_pow10+1,_eventRead$1298+1
  4246   006F22                     
  4247                           ;event.c: 67:                     serialSendInt((msg[i] - '0') * pow10(reading_protocol 
      +                          - 3 - i));
  4248   006F22  5042               	movf	eventRead@i_347^0,w,c
  4249   006F24  0F47               	addlw	low eventRead@msg
  4250   006F26  6ED9               	movwf	fsr2l,c
  4251   006F28  6ADA               	clrf	fsr2h,c
  4252   006F2A  50DF               	movf	indf2,w,c
  4253   006F2C  6E2E               	movwf	??_eventRead^0,c
  4254   006F2E  0ED0               	movlw	208
  4255   006F30  242E               	addwf	??_eventRead^0,w,c
  4256   006F32  6E01               	movwf	___wmul@multiplier^0,c
  4257   006F34  6A02               	clrf	(___wmul@multiplier+1)^0,c
  4258   006F36  0EFF               	movlw	255
  4259   006F38  2202               	addwfc	(___wmul@multiplier+1)^0,f,c
  4260   006F3A  C03A  F003         	movff	_eventRead$1298,___wmul@multiplicand
  4261   006F3E  C03B  F004         	movff	_eventRead$1298+1,___wmul@multiplicand+1
  4262   006F42  EC74  F02D         	call	___wmul	;wreg free
  4263   006F46  C001  F01E         	movff	?___wmul,serialSendInt@value
  4264   006F4A  C002  F01F         	movff	?___wmul+1,serialSendInt@value+1
  4265   006F4E  EC47  F02D         	call	_serialSendInt	;wreg free
  4266   006F52                     
  4267                           ;event.c: 68:                     serialSendString("     ");
  4268   006F52  0E1D               	movlw	low (STR_22+10)
  4269   006F54  6E13               	movwf	serialSendString@str^0,c
  4270   006F56  0E7D               	movlw	high (STR_22+10)
  4271   006F58  6E14               	movwf	(serialSendString@str+1)^0,c
  4272   006F5A  EC87  F030         	call	_serialSendString	;wreg free
  4273   006F5E                     
  4274                           ;event.c: 69:                 }
  4275   006F5E  0642               	decf	eventRead@i_347^0,f,c
  4276   006F60  EF47  F037         	goto	l3276
  4277   006F64                     l3296:
  4278                           
  4279                           ;event.c: 70:                 msg[reading_protocol - 2] = '0';
  4280   006F64  505A               	movf	_reading_protocol^0,w,c
  4281   006F66  0F45               	addlw	low (eventRead@msg+254)
  4282   006F68  6ED9               	movwf	fsr2l,c
  4283   006F6A  6ADA               	clrf	fsr2h,c
  4284   006F6C  0E30               	movlw	48
  4285   006F6E  6EDF               	movwf	indf2,c
  4286   006F70                     
  4287                           ;event.c: 71:                 if (msg[0] == 'H') {
  4288   006F70  0E48               	movlw	72
  4289   006F72  1847               	xorwf	eventRead@msg^0,w,c
  4290   006F74  A4D8               	btfss	status,2,c
  4291   006F76  EFBF  F037         	goto	u3001
  4292   006F7A  EFC1  F037         	goto	u3000
  4293   006F7E                     u3001:
  4294   006F7E  EFD7  F037         	goto	l3302
  4295   006F82                     u3000:
  4296   006F82                     
  4297                           ;event.c: 72:                     setHOUR((msg[5] - 48)*10000 + (msg[4] - 48)*1000 + (ms
      +                          g[3] - 48)*100 + (msg[2] - 48)*10 + (msg[1] - 48));
  4298   006F82  5049               	movf	(eventRead@msg+2)^0,w,c
  4299   006F84  0D0A               	mullw	10
  4300   006F86  CFF3 F02E          	movff	prodl,??_eventRead
  4301   006F8A  504C               	movf	(eventRead@msg+5)^0,w,c
  4302   006F8C  0D10               	mullw	16
  4303   006F8E  CFF3 F02F          	movff	prodl,??_eventRead+1
  4304   006F92  504A               	movf	(eventRead@msg+3)^0,w,c
  4305   006F94  0D64               	mullw	100
  4306   006F96  CFF3 F030          	movff	prodl,??_eventRead+2
  4307   006F9A  504B               	movf	(eventRead@msg+4)^0,w,c
  4308   006F9C  0DE8               	mullw	232
  4309   006F9E  50F3               	movf	243,w,c
  4310   006FA0  2430               	addwf	(??_eventRead+2)^0,w,c
  4311   006FA2  242F               	addwf	(??_eventRead+1)^0,w,c
  4312   006FA4  242E               	addwf	??_eventRead^0,w,c
  4313   006FA6  2448               	addwf	(eventRead@msg+1)^0,w,c
  4314   006FA8  0FB0               	addlw	176
  4315   006FAA  ECAD  F02D         	call	_setHOUR
  4316   006FAE                     l3302:
  4317                           
  4318                           ;event.c: 75:                 if (msg[0] == 'M') {
  4319   006FAE  0E4D               	movlw	77
  4320   006FB0  1847               	xorwf	eventRead@msg^0,w,c
  4321   006FB2  A4D8               	btfss	status,2,c
  4322   006FB4  EFDE  F037         	goto	u3011
  4323   006FB8  EFE0  F037         	goto	u3010
  4324   006FBC                     u3011:
  4325   006FBC  EFF6  F037         	goto	l3306
  4326   006FC0                     u3010:
  4327   006FC0                     
  4328                           ;event.c: 76:                     setMIN((msg[5] - 48)*10000 + (msg[4] - 48)*1000 + (msg
      +                          [3] - 48)*100 + (msg[2] - 48)*10 + (msg[1] - 48));
  4329   006FC0  5049               	movf	(eventRead@msg+2)^0,w,c
  4330   006FC2  0D0A               	mullw	10
  4331   006FC4  CFF3 F02E          	movff	prodl,??_eventRead
  4332   006FC8  504C               	movf	(eventRead@msg+5)^0,w,c
  4333   006FCA  0D10               	mullw	16
  4334   006FCC  CFF3 F02F          	movff	prodl,??_eventRead+1
  4335   006FD0  504A               	movf	(eventRead@msg+3)^0,w,c
  4336   006FD2  0D64               	mullw	100
  4337   006FD4  CFF3 F030          	movff	prodl,??_eventRead+2
  4338   006FD8  504B               	movf	(eventRead@msg+4)^0,w,c
  4339   006FDA  0DE8               	mullw	232
  4340   006FDC  50F3               	movf	243,w,c
  4341   006FDE  2430               	addwf	(??_eventRead+2)^0,w,c
  4342   006FE0  242F               	addwf	(??_eventRead+1)^0,w,c
  4343   006FE2  242E               	addwf	??_eventRead^0,w,c
  4344   006FE4  2448               	addwf	(eventRead@msg+1)^0,w,c
  4345   006FE6  0FB0               	addlw	176
  4346   006FE8  ECC0  F02D         	call	_setMIN
  4347   006FEC                     l3306:
  4348                           
  4349                           ;event.c: 79:                 if (msg[0] == 'S') {
  4350   006FEC  0E53               	movlw	83
  4351   006FEE  1847               	xorwf	eventRead@msg^0,w,c
  4352   006FF0  A4D8               	btfss	status,2,c
  4353   006FF2  EFFD  F037         	goto	u3021
  4354   006FF6  EFFF  F037         	goto	u3020
  4355   006FFA                     u3021:
  4356   006FFA  EF15  F038         	goto	l3310
  4357   006FFE                     u3020:
  4358   006FFE                     
  4359                           ;event.c: 80:                     setSEC((msg[5] - 48)*10000 + (msg[4] - 48)*1000 + (msg
      +                          [3] - 48)*100 + (msg[2] - 48)*10 + (msg[1] - 48));
  4360   006FFE  5049               	movf	(eventRead@msg+2)^0,w,c
  4361   007000  0D0A               	mullw	10
  4362   007002  CFF3 F02E          	movff	prodl,??_eventRead
  4363   007006  504C               	movf	(eventRead@msg+5)^0,w,c
  4364   007008  0D10               	mullw	16
  4365   00700A  CFF3 F02F          	movff	prodl,??_eventRead+1
  4366   00700E  504A               	movf	(eventRead@msg+3)^0,w,c
  4367   007010  0D64               	mullw	100
  4368   007012  CFF3 F030          	movff	prodl,??_eventRead+2
  4369   007016  504B               	movf	(eventRead@msg+4)^0,w,c
  4370   007018  0DE8               	mullw	232
  4371   00701A  50F3               	movf	243,w,c
  4372   00701C  2430               	addwf	(??_eventRead+2)^0,w,c
  4373   00701E  242F               	addwf	(??_eventRead+1)^0,w,c
  4374   007020  242E               	addwf	??_eventRead^0,w,c
  4375   007022  2448               	addwf	(eventRead@msg+1)^0,w,c
  4376   007024  0FB0               	addlw	176
  4377   007026  ECD3  F02D         	call	_setSEC
  4378   00702A                     l3310:
  4379                           
  4380                           ;event.c: 83:                 if (msg[0] == 'L') {
  4381   00702A  0E4C               	movlw	76
  4382   00702C  1847               	xorwf	eventRead@msg^0,w,c
  4383   00702E  A4D8               	btfss	status,2,c
  4384   007030  EF1C  F038         	goto	u3031
  4385   007034  EF1E  F038         	goto	u3030
  4386   007038                     u3031:
  4387   007038  EF35  F038         	goto	l3314
  4388   00703C                     u3030:
  4389   00703C                     
  4390                           ;event.c: 84:                     setLanguage(((msg[1] - 48)*10000 + (msg[2] - 48)*1000 
      +                          + (msg[3] - 48)*100 + (msg[4] - 48)*10 + (msg[5] - 48)) % 2);
  4391   00703C  504B               	movf	(eventRead@msg+4)^0,w,c
  4392   00703E  0D0A               	mullw	10
  4393   007040  CFF3 F02E          	movff	prodl,??_eventRead
  4394   007044  5048               	movf	(eventRead@msg+1)^0,w,c
  4395   007046  0D10               	mullw	16
  4396   007048  CFF3 F02F          	movff	prodl,??_eventRead+1
  4397   00704C  504A               	movf	(eventRead@msg+3)^0,w,c
  4398   00704E  0D64               	mullw	100
  4399   007050  CFF3 F030          	movff	prodl,??_eventRead+2
  4400   007054  5049               	movf	(eventRead@msg+2)^0,w,c
  4401   007056  0DE8               	mullw	232
  4402   007058  50F3               	movf	243,w,c
  4403   00705A  2430               	addwf	(??_eventRead+2)^0,w,c
  4404   00705C  242F               	addwf	(??_eventRead+1)^0,w,c
  4405   00705E  242E               	addwf	??_eventRead^0,w,c
  4406   007060  244C               	addwf	(eventRead@msg+5)^0,w,c
  4407   007062  0FB0               	addlw	176
  4408   007064  0B01               	andlw	1
  4409   007066  EC2E  F02D         	call	_setLanguage
  4410   00706A                     l3314:
  4411                           
  4412                           ;event.c: 87:                 if (msg[0] == 'A') {
  4413   00706A  0E41               	movlw	65
  4414   00706C  1847               	xorwf	eventRead@msg^0,w,c
  4415   00706E  A4D8               	btfss	status,2,c
  4416   007070  EF3C  F038         	goto	u3041
  4417   007074  EF3E  F038         	goto	u3040
  4418   007078                     u3041:
  4419   007078  EF7A  F038         	goto	l3318
  4420   00707C                     u3040:
  4421   00707C                     
  4422                           ;event.c: 88:                     setAlarmUpperLevel((msg[1] - 48)*10000 + (msg[2] - 48)
      +                          *1000 + (msg[3] - 48)*100 + (msg[4] - 48)*10 + (msg[5] - 48));
  4423   00707C  C048  F001         	movff	eventRead@msg+1,___wmul@multiplier
  4424   007080  6A02               	clrf	(___wmul@multiplier+1)^0,c
  4425   007082  0E27               	movlw	39
  4426   007084  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  4427   007086  0E10               	movlw	16
  4428   007088  6E03               	movwf	___wmul@multiplicand^0,c
  4429   00708A  EC74  F02D         	call	___wmul	;wreg free
  4430   00708E  504B               	movf	(eventRead@msg+4)^0,w,c
  4431   007090  0D0A               	mullw	10
  4432   007092  CFF3 F02E          	movff	prodl,??_eventRead
  4433   007096  CFF4 F02F          	movff	prodh,??_eventRead+1
  4434   00709A  504A               	movf	(eventRead@msg+3)^0,w,c
  4435   00709C  0D64               	mullw	100
  4436   00709E  CFF3 F030          	movff	prodl,??_eventRead+2
  4437   0070A2  CFF4 F031          	movff	prodh,??_eventRead+3
  4438   0070A6  502E               	movf	??_eventRead^0,w,c
  4439   0070A8  2430               	addwf	(??_eventRead+2)^0,w,c
  4440   0070AA  6E32               	movwf	(??_eventRead+4)^0,c
  4441   0070AC  502F               	movf	(??_eventRead+1)^0,w,c
  4442   0070AE  2031               	addwfc	(??_eventRead+3)^0,w,c
  4443   0070B0  6E33               	movwf	(??_eventRead+5)^0,c
  4444   0070B2  5001               	movf	?___wmul^0,w,c
  4445   0070B4  2432               	addwf	(??_eventRead+4)^0,w,c
  4446   0070B6  6E34               	movwf	(??_eventRead+6)^0,c
  4447   0070B8  5002               	movf	(?___wmul+1)^0,w,c
  4448   0070BA  2033               	addwfc	(??_eventRead+5)^0,w,c
  4449   0070BC  6E35               	movwf	(??_eventRead+7)^0,c
  4450   0070BE  C049  F001         	movff	eventRead@msg+2,___wmul@multiplier
  4451   0070C2  6A02               	clrf	(___wmul@multiplier+1)^0,c
  4452   0070C4  0E03               	movlw	3
  4453   0070C6  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  4454   0070C8  0EE8               	movlw	232
  4455   0070CA  6E03               	movwf	___wmul@multiplicand^0,c
  4456   0070CC  EC74  F02D         	call	___wmul	;wreg free
  4457   0070D0  5001               	movf	?___wmul^0,w,c
  4458   0070D2  2434               	addwf	(??_eventRead+6)^0,w,c
  4459   0070D4  6E36               	movwf	(??_eventRead+8)^0,c
  4460   0070D6  5002               	movf	(?___wmul+1)^0,w,c
  4461   0070D8  2035               	addwfc	(??_eventRead+7)^0,w,c
  4462   0070DA  6E37               	movwf	(??_eventRead+9)^0,c
  4463   0070DC  504C               	movf	(eventRead@msg+5)^0,w,c
  4464   0070DE  2636               	addwf	(??_eventRead+8)^0,f,c
  4465   0070E0  0E00               	movlw	0
  4466   0070E2  2237               	addwfc	(??_eventRead+9)^0,f,c
  4467   0070E4  0EB0               	movlw	176
  4468   0070E6  2436               	addwf	(??_eventRead+8)^0,w,c
  4469   0070E8  6E17               	movwf	setAlarmUpperLevel@newAlarmLevel^0,c
  4470   0070EA  0EDC               	movlw	220
  4471   0070EC  2037               	addwfc	(??_eventRead+9)^0,w,c
  4472   0070EE  6E18               	movwf	(setAlarmUpperLevel@newAlarmLevel+1)^0,c
  4473   0070F0  EC9A  F02D         	call	_setAlarmUpperLevel	;wreg free
  4474   0070F4                     l3318:
  4475                           
  4476                           ;event.c: 91:                 if (msg[0] == 'a') {
  4477   0070F4  0E61               	movlw	97
  4478   0070F6  1847               	xorwf	eventRead@msg^0,w,c
  4479   0070F8  A4D8               	btfss	status,2,c
  4480   0070FA  EF81  F038         	goto	u3051
  4481   0070FE  EF83  F038         	goto	u3050
  4482   007102                     u3051:
  4483   007102  EFBF  F038         	goto	l3322
  4484   007106                     u3050:
  4485   007106                     
  4486                           ;event.c: 92:                     setAlarmLowerLevel((msg[1] - 48)*10000 + (msg[2] - 48)
      +                          *1000 + (msg[3] - 48)*100 + (msg[4] - 48)*10 + (msg[5] - 48));
  4487   007106  C048  F001         	movff	eventRead@msg+1,___wmul@multiplier
  4488   00710A  6A02               	clrf	(___wmul@multiplier+1)^0,c
  4489   00710C  0E27               	movlw	39
  4490   00710E  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  4491   007110  0E10               	movlw	16
  4492   007112  6E03               	movwf	___wmul@multiplicand^0,c
  4493   007114  EC74  F02D         	call	___wmul	;wreg free
  4494   007118  504B               	movf	(eventRead@msg+4)^0,w,c
  4495   00711A  0D0A               	mullw	10
  4496   00711C  CFF3 F02E          	movff	prodl,??_eventRead
  4497   007120  CFF4 F02F          	movff	prodh,??_eventRead+1
  4498   007124  504A               	movf	(eventRead@msg+3)^0,w,c
  4499   007126  0D64               	mullw	100
  4500   007128  CFF3 F030          	movff	prodl,??_eventRead+2
  4501   00712C  CFF4 F031          	movff	prodh,??_eventRead+3
  4502   007130  502E               	movf	??_eventRead^0,w,c
  4503   007132  2430               	addwf	(??_eventRead+2)^0,w,c
  4504   007134  6E32               	movwf	(??_eventRead+4)^0,c
  4505   007136  502F               	movf	(??_eventRead+1)^0,w,c
  4506   007138  2031               	addwfc	(??_eventRead+3)^0,w,c
  4507   00713A  6E33               	movwf	(??_eventRead+5)^0,c
  4508   00713C  5001               	movf	?___wmul^0,w,c
  4509   00713E  2432               	addwf	(??_eventRead+4)^0,w,c
  4510   007140  6E34               	movwf	(??_eventRead+6)^0,c
  4511   007142  5002               	movf	(?___wmul+1)^0,w,c
  4512   007144  2033               	addwfc	(??_eventRead+5)^0,w,c
  4513   007146  6E35               	movwf	(??_eventRead+7)^0,c
  4514   007148  C049  F001         	movff	eventRead@msg+2,___wmul@multiplier
  4515   00714C  6A02               	clrf	(___wmul@multiplier+1)^0,c
  4516   00714E  0E03               	movlw	3
  4517   007150  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  4518   007152  0EE8               	movlw	232
  4519   007154  6E03               	movwf	___wmul@multiplicand^0,c
  4520   007156  EC74  F02D         	call	___wmul	;wreg free
  4521   00715A  5001               	movf	?___wmul^0,w,c
  4522   00715C  2434               	addwf	(??_eventRead+6)^0,w,c
  4523   00715E  6E36               	movwf	(??_eventRead+8)^0,c
  4524   007160  5002               	movf	(?___wmul+1)^0,w,c
  4525   007162  2035               	addwfc	(??_eventRead+7)^0,w,c
  4526   007164  6E37               	movwf	(??_eventRead+9)^0,c
  4527   007166  504C               	movf	(eventRead@msg+5)^0,w,c
  4528   007168  2636               	addwf	(??_eventRead+8)^0,f,c
  4529   00716A  0E00               	movlw	0
  4530   00716C  2237               	addwfc	(??_eventRead+9)^0,f,c
  4531   00716E  0EB0               	movlw	176
  4532   007170  2436               	addwf	(??_eventRead+8)^0,w,c
  4533   007172  6E17               	movwf	setAlarmLowerLevel@newAlarmLevel^0,c
  4534   007174  0EDC               	movlw	220
  4535   007176  2037               	addwfc	(??_eventRead+9)^0,w,c
  4536   007178  6E18               	movwf	(setAlarmLowerLevel@newAlarmLevel+1)^0,c
  4537   00717A  EC87  F02D         	call	_setAlarmLowerLevel	;wreg free
  4538   00717E                     l3322:
  4539                           
  4540                           ;event.c: 94:                 static char envio[7];;event.c: 95:                 for (ch
      +                          ar i = 0; i < 6; i++) {
  4541   00717E  0E00               	movlw	0
  4542   007180  6E3F               	movwf	eventRead@i_352^0,c
  4543   007182                     l3328:
  4544                           
  4545                           ;event.c: 96:                     envio[i] = msg[i];
  4546   007182  503F               	movf	eventRead@i_352^0,w,c
  4547   007184  0F47               	addlw	low eventRead@msg
  4548   007186  6ED9               	movwf	fsr2l,c
  4549   007188  6ADA               	clrf	fsr2h,c
  4550   00718A  503F               	movf	eventRead@i_352^0,w,c
  4551   00718C  0F8E               	addlw	low eventRead@envio
  4552   00718E  6EE1               	movwf	fsr1l,c
  4553   007190  6AE2               	clrf	fsr1h,c
  4554   007192  CFDF FFE7          	movff	indf2,indf1
  4555   007196                     
  4556                           ;event.c: 97:                 }
  4557   007196  2A3F               	incf	eventRead@i_352^0,f,c
  4558   007198  0E05               	movlw	5
  4559   00719A  643F               	cpfsgt	eventRead@i_352^0,c
  4560   00719C  EFD2  F038         	goto	u3061
  4561   0071A0  EFD4  F038         	goto	u3060
  4562   0071A4                     u3061:
  4563   0071A4  EFC1  F038         	goto	l3328
  4564   0071A8                     u3060:
  4565   0071A8                     
  4566                           ;event.c: 98:                 msg[6] = '\0';
  4567   0071A8  0E00               	movlw	0
  4568   0071AA  6E4D               	movwf	(eventRead@msg+6)^0,c
  4569   0071AC                     
  4570                           ;event.c: 99:                 serialSendString(envio);
  4571   0071AC  0E8E               	movlw	low eventRead@envio
  4572   0071AE  6E13               	movwf	serialSendString@str^0,c
  4573   0071B0  6A14               	clrf	(serialSendString@str+1)^0,c
  4574   0071B2  EC87  F030         	call	_serialSendString	;wreg free
  4575   0071B6                     
  4576                           ;event.c: 100:                 serialSend(' ');
  4577   0071B6  0E20               	movlw	32
  4578   0071B8  EC17  F02D         	call	_serialSend
  4579   0071BC                     
  4580                           ;event.c: 101:                 serialSend(reading_protocol + '0');
  4581   0071BC  505A               	movf	_reading_protocol^0,w,c
  4582   0071BE  0F30               	addlw	48
  4583   0071C0  EC17  F02D         	call	_serialSend
  4584   0071C4                     
  4585                           ;event.c: 102:                 serialSend(' ');
  4586   0071C4  0E20               	movlw	32
  4587   0071C6  EC17  F02D         	call	_serialSend
  4588   0071CA                     
  4589                           ;event.c: 103:                 serialSendInt(value);
  4590   0071CA  C038  F01E         	movff	eventRead@value,serialSendInt@value
  4591   0071CE  C039  F01F         	movff	eventRead@value+1,serialSendInt@value+1
  4592   0071D2  EC47  F02D         	call	_serialSendInt	;wreg free
  4593   0071D6                     
  4594                           ;event.c: 104:                 serialSend(' ');
  4595   0071D6  0E20               	movlw	32
  4596   0071D8  EC17  F02D         	call	_serialSend
  4597   0071DC                     
  4598                           ;event.c: 105:                 reading_protocol = 0;
  4599   0071DC  0E00               	movlw	0
  4600   0071DE  6E5A               	movwf	_reading_protocol^0,c
  4601   0071E0                     l3350:
  4602                           
  4603                           ;event.c: 109:     return ev;
  4604   0071E0  C03C  F02C         	movff	eventRead@ev,?_eventRead
  4605   0071E4  C03D  F02D         	movff	eventRead@ev+1,?_eventRead+1
  4606   0071E8  0012               	return		;funcret
  4607   0071EA                     __end_of_eventRead:
  4608                           	callstack 0
  4609                           
  4610 ;; *************** function _setSEC *****************
  4611 ;; Defined at:
  4612 ;;		line 60 in file "var.c"
  4613 ;; Parameters:    Size  Location     Type
  4614 ;;  value           1    wreg     unsigned char 
  4615 ;; Auto vars:     Size  Location     Type
  4616 ;;  value           1   14[COMRAM] unsigned char 
  4617 ;; Return value:  Size  Location     Type
  4618 ;;                  1    wreg      void 
  4619 ;; Registers used:
  4620 ;;		wreg, status,2, status,0, cstack
  4621 ;; Tracked objects:
  4622 ;;		On entry : 0/0
  4623 ;;		On exit  : 0/0
  4624 ;;		Unchanged: 0/0
  4625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4626 ;;      Params:         0       0       0       0       0       0       0       0       0
  4627 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4628 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4629 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4630 ;;Total ram usage:        1 bytes
  4631 ;; Hardware stack levels used: 1
  4632 ;; Hardware stack levels required when called: 5
  4633 ;; This function calls:
  4634 ;;		_dsWriteData
  4635 ;; This function is called by:
  4636 ;;		_eventRead
  4637 ;;		_smLoop
  4638 ;; This function uses a non-reentrant model
  4639 ;;
  4640                           
  4641                           	psect	text24
  4642   005BA6                     __ptext24:
  4643                           	callstack 0
  4644   005BA6                     _setSEC:
  4645                           	callstack 24
  4646                           
  4647                           ;incstack = 0
  4648                           ;setSEC@value stored from wreg
  4649   005BA6  6E0F               	movwf	setSEC@value^0,c
  4650   005BA8                     
  4651                           ;var.c: 60: void setSEC(char value);var.c: 61: {;var.c: 62:     if (value > 59) value = 
      +                          0;
  4652   005BA8  0E3B               	movlw	59
  4653   005BAA  640F               	cpfsgt	setSEC@value^0,c
  4654   005BAC  EFDA  F02D         	goto	u2831
  4655   005BB0  EFDC  F02D         	goto	u2830
  4656   005BB4                     u2831:
  4657   005BB4  EFDE  F02D         	goto	l3120
  4658   005BB8                     u2830:
  4659   005BB8  0E00               	movlw	0
  4660   005BBA  6E0F               	movwf	setSEC@value^0,c
  4661   005BBC                     l3120:
  4662                           
  4663                           ;var.c: 64:     dsWriteData(value, 0);
  4664   005BBC  0E00               	movlw	0
  4665   005BBE  6E0D               	movwf	(dsWriteData@address+1)^0,c
  4666   005BC0  0E00               	movlw	0
  4667   005BC2  6E0C               	movwf	dsWriteData@address^0,c
  4668   005BC4  500F               	movf	setSEC@value^0,w,c
  4669   005BC6  EC7D  F02E         	call	_dsWriteData
  4670   005BCA  0012               	return		;funcret
  4671   005BCC                     __end_of_setSEC:
  4672                           	callstack 0
  4673                           
  4674 ;; *************** function _setMIN *****************
  4675 ;; Defined at:
  4676 ;;		line 67 in file "var.c"
  4677 ;; Parameters:    Size  Location     Type
  4678 ;;  value           1    wreg     unsigned char 
  4679 ;; Auto vars:     Size  Location     Type
  4680 ;;  value           1   14[COMRAM] unsigned char 
  4681 ;; Return value:  Size  Location     Type
  4682 ;;                  1    wreg      void 
  4683 ;; Registers used:
  4684 ;;		wreg, status,2, status,0, cstack
  4685 ;; Tracked objects:
  4686 ;;		On entry : 0/0
  4687 ;;		On exit  : 0/0
  4688 ;;		Unchanged: 0/0
  4689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4690 ;;      Params:         0       0       0       0       0       0       0       0       0
  4691 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4692 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4693 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4694 ;;Total ram usage:        1 bytes
  4695 ;; Hardware stack levels used: 1
  4696 ;; Hardware stack levels required when called: 5
  4697 ;; This function calls:
  4698 ;;		_dsWriteData
  4699 ;; This function is called by:
  4700 ;;		_eventRead
  4701 ;;		_smLoop
  4702 ;; This function uses a non-reentrant model
  4703 ;;
  4704                           
  4705                           	psect	text25
  4706   005B80                     __ptext25:
  4707                           	callstack 0
  4708   005B80                     _setMIN:
  4709                           	callstack 24
  4710                           
  4711                           ;incstack = 0
  4712                           ;setMIN@value stored from wreg
  4713   005B80  6E0F               	movwf	setMIN@value^0,c
  4714   005B82                     
  4715                           ;var.c: 67: void setMIN(char value);var.c: 68: {;var.c: 69:     if (value > 59) value = 
      +                          0;
  4716   005B82  0E3B               	movlw	59
  4717   005B84  640F               	cpfsgt	setMIN@value^0,c
  4718   005B86  EFC7  F02D         	goto	u2821
  4719   005B8A  EFC9  F02D         	goto	u2820
  4720   005B8E                     u2821:
  4721   005B8E  EFCB  F02D         	goto	l3112
  4722   005B92                     u2820:
  4723   005B92  0E00               	movlw	0
  4724   005B94  6E0F               	movwf	setMIN@value^0,c
  4725   005B96                     l3112:
  4726                           
  4727                           ;var.c: 71:     dsWriteData(value, 1);
  4728   005B96  0E00               	movlw	0
  4729   005B98  6E0D               	movwf	(dsWriteData@address+1)^0,c
  4730   005B9A  0E01               	movlw	1
  4731   005B9C  6E0C               	movwf	dsWriteData@address^0,c
  4732   005B9E  500F               	movf	setMIN@value^0,w,c
  4733   005BA0  EC7D  F02E         	call	_dsWriteData
  4734   005BA4  0012               	return		;funcret
  4735   005BA6                     __end_of_setMIN:
  4736                           	callstack 0
  4737                           
  4738 ;; *************** function _setLanguage *****************
  4739 ;; Defined at:
  4740 ;;		line 114 in file "var.c"
  4741 ;; Parameters:    Size  Location     Type
  4742 ;;  newLanguage     1    wreg     unsigned char 
  4743 ;; Auto vars:     Size  Location     Type
  4744 ;;  newLanguage     1   14[COMRAM] unsigned char 
  4745 ;; Return value:  Size  Location     Type
  4746 ;;                  1    wreg      void 
  4747 ;; Registers used:
  4748 ;;		wreg, status,2, status,0, cstack
  4749 ;; Tracked objects:
  4750 ;;		On entry : 0/0
  4751 ;;		On exit  : 0/0
  4752 ;;		Unchanged: 0/0
  4753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4754 ;;      Params:         0       0       0       0       0       0       0       0       0
  4755 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4756 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4757 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4758 ;;Total ram usage:        1 bytes
  4759 ;; Hardware stack levels used: 1
  4760 ;; Hardware stack levels required when called: 5
  4761 ;; This function calls:
  4762 ;;		_dsWriteData
  4763 ;; This function is called by:
  4764 ;;		_eventRead
  4765 ;;		_smLoop
  4766 ;;		_varInit
  4767 ;; This function uses a non-reentrant model
  4768 ;;
  4769                           
  4770                           	psect	text26
  4771   005A5C                     __ptext26:
  4772                           	callstack 0
  4773   005A5C                     _setLanguage:
  4774                           	callstack 24
  4775                           
  4776                           ;incstack = 0
  4777                           ;setLanguage@newLanguage stored from wreg
  4778   005A5C  6E0F               	movwf	setLanguage@newLanguage^0,c
  4779   005A5E                     
  4780                           ;var.c: 117:     language = newLanguage%2;
  4781   005A5E  500F               	movf	setLanguage@newLanguage^0,w,c
  4782   005A60  0B01               	andlw	1
  4783   005A62  6E57               	movwf	_language^0,c
  4784   005A64                     
  4785                           ;var.c: 118:     dsWriteData(language, 0x26);
  4786   005A64  0E00               	movlw	0
  4787   005A66  6E0D               	movwf	(dsWriteData@address+1)^0,c
  4788   005A68  0E26               	movlw	38
  4789   005A6A  6E0C               	movwf	dsWriteData@address^0,c
  4790   005A6C  5057               	movf	_language^0,w,c
  4791   005A6E  EC7D  F02E         	call	_dsWriteData
  4792   005A72  0012               	return		;funcret
  4793   005A74                     __end_of_setLanguage:
  4794                           	callstack 0
  4795                           
  4796 ;; *************** function _setHOUR *****************
  4797 ;; Defined at:
  4798 ;;		line 74 in file "var.c"
  4799 ;; Parameters:    Size  Location     Type
  4800 ;;  value           1    wreg     unsigned char 
  4801 ;; Auto vars:     Size  Location     Type
  4802 ;;  value           1   14[COMRAM] unsigned char 
  4803 ;; Return value:  Size  Location     Type
  4804 ;;                  1    wreg      void 
  4805 ;; Registers used:
  4806 ;;		wreg, status,2, status,0, cstack
  4807 ;; Tracked objects:
  4808 ;;		On entry : 0/0
  4809 ;;		On exit  : 0/0
  4810 ;;		Unchanged: 0/0
  4811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4812 ;;      Params:         0       0       0       0       0       0       0       0       0
  4813 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4814 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4815 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4816 ;;Total ram usage:        1 bytes
  4817 ;; Hardware stack levels used: 1
  4818 ;; Hardware stack levels required when called: 5
  4819 ;; This function calls:
  4820 ;;		_dsWriteData
  4821 ;; This function is called by:
  4822 ;;		_eventRead
  4823 ;;		_smLoop
  4824 ;; This function uses a non-reentrant model
  4825 ;;
  4826                           
  4827                           	psect	text27
  4828   005B5A                     __ptext27:
  4829                           	callstack 0
  4830   005B5A                     _setHOUR:
  4831                           	callstack 24
  4832                           
  4833                           ;incstack = 0
  4834                           ;setHOUR@value stored from wreg
  4835   005B5A  6E0F               	movwf	setHOUR@value^0,c
  4836   005B5C                     
  4837                           ;var.c: 74: void setHOUR(char value);var.c: 75: {;var.c: 76:     if (value > 23) value =
      +                           0;
  4838   005B5C  0E17               	movlw	23
  4839   005B5E  640F               	cpfsgt	setHOUR@value^0,c
  4840   005B60  EFB4  F02D         	goto	u2811
  4841   005B64  EFB6  F02D         	goto	u2810
  4842   005B68                     u2811:
  4843   005B68  EFB8  F02D         	goto	l3104
  4844   005B6C                     u2810:
  4845   005B6C  0E00               	movlw	0
  4846   005B6E  6E0F               	movwf	setHOUR@value^0,c
  4847   005B70                     l3104:
  4848                           
  4849                           ;var.c: 78:     dsWriteData(value, 2);
  4850   005B70  0E00               	movlw	0
  4851   005B72  6E0D               	movwf	(dsWriteData@address+1)^0,c
  4852   005B74  0E02               	movlw	2
  4853   005B76  6E0C               	movwf	dsWriteData@address^0,c
  4854   005B78  500F               	movf	setHOUR@value^0,w,c
  4855   005B7A  EC7D  F02E         	call	_dsWriteData
  4856   005B7E  0012               	return		;funcret
  4857   005B80                     __end_of_setHOUR:
  4858                           	callstack 0
  4859                           
  4860 ;; *************** function _setAlarmUpperLevel *****************
  4861 ;; Defined at:
  4862 ;;		line 87 in file "var.c"
  4863 ;; Parameters:    Size  Location     Type
  4864 ;;  newAlarmLeve    2   22[COMRAM] int 
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;		None
  4867 ;; Return value:  Size  Location     Type
  4868 ;;                  1    wreg      void 
  4869 ;; Registers used:
  4870 ;;		wreg, status,2, status,0, cstack
  4871 ;; Tracked objects:
  4872 ;;		On entry : 0/0
  4873 ;;		On exit  : 0/0
  4874 ;;		Unchanged: 0/0
  4875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4876 ;;      Params:         2       0       0       0       0       0       0       0       0
  4877 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4878 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4879 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4880 ;;Total ram usage:        2 bytes
  4881 ;; Hardware stack levels used: 1
  4882 ;; Hardware stack levels required when called: 5
  4883 ;; This function calls:
  4884 ;;		_dsWriteData
  4885 ;; This function is called by:
  4886 ;;		_eventRead
  4887 ;;		_smLoop
  4888 ;; This function uses a non-reentrant model
  4889 ;;
  4890                           
  4891                           	psect	text28
  4892   005B34                     __ptext28:
  4893                           	callstack 0
  4894   005B34                     _setAlarmUpperLevel:
  4895                           	callstack 24
  4896   005B34                     
  4897                           ;var.c: 88:     static unsigned char a, b;;var.c: 89:     a = (newAlarmLevel>>8);
  4898   005B34  5018               	movf	(setAlarmUpperLevel@newAlarmLevel+1)^0,w,c
  4899   005B36  6E54               	movwf	setAlarmUpperLevel@a^0,c
  4900   005B38                     
  4901                           ;var.c: 90:     b = newAlarmLevel;
  4902   005B38  C017  F053         	movff	setAlarmUpperLevel@newAlarmLevel,setAlarmUpperLevel@b
  4903   005B3C                     
  4904                           ;var.c: 91:     dsWriteData(a, 0x22);
  4905   005B3C  0E00               	movlw	0
  4906   005B3E  6E0D               	movwf	(dsWriteData@address+1)^0,c
  4907   005B40  0E22               	movlw	34
  4908   005B42  6E0C               	movwf	dsWriteData@address^0,c
  4909   005B44  5054               	movf	setAlarmUpperLevel@a^0,w,c
  4910   005B46  EC7D  F02E         	call	_dsWriteData
  4911   005B4A                     
  4912                           ;var.c: 92:     dsWriteData(b, 0x23);
  4913   005B4A  0E00               	movlw	0
  4914   005B4C  6E0D               	movwf	(dsWriteData@address+1)^0,c
  4915   005B4E  0E23               	movlw	35
  4916   005B50  6E0C               	movwf	dsWriteData@address^0,c
  4917   005B52  5053               	movf	setAlarmUpperLevel@b^0,w,c
  4918   005B54  EC7D  F02E         	call	_dsWriteData
  4919   005B58  0012               	return		;funcret
  4920   005B5A                     __end_of_setAlarmUpperLevel:
  4921                           	callstack 0
  4922                           
  4923 ;; *************** function _setAlarmLowerLevel *****************
  4924 ;; Defined at:
  4925 ;;		line 101 in file "var.c"
  4926 ;; Parameters:    Size  Location     Type
  4927 ;;  newAlarmLeve    2   22[COMRAM] int 
  4928 ;; Auto vars:     Size  Location     Type
  4929 ;;		None
  4930 ;; Return value:  Size  Location     Type
  4931 ;;                  1    wreg      void 
  4932 ;; Registers used:
  4933 ;;		wreg, status,2, status,0, cstack
  4934 ;; Tracked objects:
  4935 ;;		On entry : 0/0
  4936 ;;		On exit  : 0/0
  4937 ;;		Unchanged: 0/0
  4938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4939 ;;      Params:         2       0       0       0       0       0       0       0       0
  4940 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4941 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4942 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4943 ;;Total ram usage:        2 bytes
  4944 ;; Hardware stack levels used: 1
  4945 ;; Hardware stack levels required when called: 5
  4946 ;; This function calls:
  4947 ;;		_dsWriteData
  4948 ;; This function is called by:
  4949 ;;		_eventRead
  4950 ;;		_smLoop
  4951 ;; This function uses a non-reentrant model
  4952 ;;
  4953                           
  4954                           	psect	text29
  4955   005B0E                     __ptext29:
  4956                           	callstack 0
  4957   005B0E                     _setAlarmLowerLevel:
  4958                           	callstack 24
  4959   005B0E                     
  4960                           ;var.c: 102:     static unsigned char a, b;;var.c: 103:     a = (newAlarmLevel>>8);
  4961   005B0E  5018               	movf	(setAlarmLowerLevel@newAlarmLevel+1)^0,w,c
  4962   005B10  6E50               	movwf	setAlarmLowerLevel@a^0,c
  4963   005B12                     
  4964                           ;var.c: 104:     b = newAlarmLevel;
  4965   005B12  C017  F04F         	movff	setAlarmLowerLevel@newAlarmLevel,setAlarmLowerLevel@b
  4966   005B16                     
  4967                           ;var.c: 105:     dsWriteData(a, 0x24);
  4968   005B16  0E00               	movlw	0
  4969   005B18  6E0D               	movwf	(dsWriteData@address+1)^0,c
  4970   005B1A  0E24               	movlw	36
  4971   005B1C  6E0C               	movwf	dsWriteData@address^0,c
  4972   005B1E  5050               	movf	setAlarmLowerLevel@a^0,w,c
  4973   005B20  EC7D  F02E         	call	_dsWriteData
  4974   005B24                     
  4975                           ;var.c: 106:     dsWriteData(b, 0x25);
  4976   005B24  0E00               	movlw	0
  4977   005B26  6E0D               	movwf	(dsWriteData@address+1)^0,c
  4978   005B28  0E25               	movlw	37
  4979   005B2A  6E0C               	movwf	dsWriteData@address^0,c
  4980   005B2C  504F               	movf	setAlarmLowerLevel@b^0,w,c
  4981   005B2E  EC7D  F02E         	call	_dsWriteData
  4982   005B32  0012               	return		;funcret
  4983   005B34                     __end_of_setAlarmLowerLevel:
  4984                           	callstack 0
  4985                           
  4986 ;; *************** function _dsWriteData *****************
  4987 ;; Defined at:
  4988 ;;		line 26 in file "ds1307.c"
  4989 ;; Parameters:    Size  Location     Type
  4990 ;;  value           1    wreg     unsigned char 
  4991 ;;  address         2   11[COMRAM] int 
  4992 ;; Auto vars:     Size  Location     Type
  4993 ;;  value           1   13[COMRAM] unsigned char 
  4994 ;; Return value:  Size  Location     Type
  4995 ;;                  1    wreg      void 
  4996 ;; Registers used:
  4997 ;;		wreg, status,2, status,0, cstack
  4998 ;; Tracked objects:
  4999 ;;		On entry : 0/0
  5000 ;;		On exit  : 0/0
  5001 ;;		Unchanged: 0/0
  5002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5003 ;;      Params:         2       0       0       0       0       0       0       0       0
  5004 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5005 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5006 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5007 ;;Total ram usage:        3 bytes
  5008 ;; Hardware stack levels used: 1
  5009 ;; Hardware stack levels required when called: 4
  5010 ;; This function calls:
  5011 ;;		_i2cWriteByte
  5012 ;; This function is called by:
  5013 ;;		_setSEC
  5014 ;;		_setMIN
  5015 ;;		_setHOUR
  5016 ;;		_setAlarmUpperLevel
  5017 ;;		_setAlarmLowerLevel
  5018 ;;		_setLanguage
  5019 ;;		_dsStartClock
  5020 ;; This function uses a non-reentrant model
  5021 ;;
  5022                           
  5023                           	psect	text30
  5024   005CFA                     __ptext30:
  5025                           	callstack 0
  5026   005CFA                     _dsWriteData:
  5027                           	callstack 24
  5028                           
  5029                           ;incstack = 0
  5030                           ;dsWriteData@value stored from wreg
  5031   005CFA  6E0E               	movwf	dsWriteData@value^0,c
  5032   005CFC                     
  5033                           ;ds1307.c: 27:  i2cWriteByte(1,0, (0x6f<<1)|0);
  5034   005CFC  0E00               	movlw	0
  5035   005CFE  6E08               	movwf	i2cWriteByte@send_stop^0,c
  5036   005D00  0EDE               	movlw	222
  5037   005D02  6E09               	movwf	i2cWriteByte@byte^0,c
  5038   005D04  0E01               	movlw	1
  5039   005D06  ECB6  F030         	call	_i2cWriteByte
  5040                           
  5041                           ;ds1307.c: 28:  i2cWriteByte(0,0,address);
  5042   005D0A  0E00               	movlw	0
  5043   005D0C  6E08               	movwf	i2cWriteByte@send_stop^0,c
  5044   005D0E  C00C  F009         	movff	dsWriteData@address,i2cWriteByte@byte
  5045   005D12  0E00               	movlw	0
  5046   005D14  ECB6  F030         	call	_i2cWriteByte
  5047                           
  5048                           ;ds1307.c: 29:  i2cWriteByte(0,1,value);
  5049   005D18  0E01               	movlw	1
  5050   005D1A  6E08               	movwf	i2cWriteByte@send_stop^0,c
  5051   005D1C  C00E  F009         	movff	dsWriteData@value,i2cWriteByte@byte
  5052   005D20  0E00               	movlw	0
  5053   005D22  ECB6  F030         	call	_i2cWriteByte
  5054   005D26  0012               	return		;funcret
  5055   005D28                     __end_of_dsWriteData:
  5056                           	callstack 0
  5057                           
  5058 ;; *************** function _i2cWriteByte *****************
  5059 ;; Defined at:
  5060 ;;		line 113 in file "i2c.c"
  5061 ;; Parameters:    Size  Location     Type
  5062 ;;  send_start      1    wreg     unsigned char 
  5063 ;;  send_stop       1    7[COMRAM] unsigned char 
  5064 ;;  byte            1    8[COMRAM] unsigned char 
  5065 ;; Auto vars:     Size  Location     Type
  5066 ;;  send_start      1    9[COMRAM] unsigned char 
  5067 ;;  bit             1   10[COMRAM] unsigned char 
  5068 ;;  nack            1    0        unsigned char 
  5069 ;; Return value:  Size  Location     Type
  5070 ;;                  1    wreg      unsigned char 
  5071 ;; Registers used:
  5072 ;;		wreg, status,2, status,0, cstack
  5073 ;; Tracked objects:
  5074 ;;		On entry : 0/0
  5075 ;;		On exit  : 0/0
  5076 ;;		Unchanged: 0/0
  5077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5078 ;;      Params:         2       0       0       0       0       0       0       0       0
  5079 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5080 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5081 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5082 ;;Total ram usage:        4 bytes
  5083 ;; Hardware stack levels used: 1
  5084 ;; Hardware stack levels required when called: 3
  5085 ;; This function calls:
  5086 ;;		_i2c_read_bit
  5087 ;;		_i2c_start
  5088 ;;		_i2c_stop
  5089 ;;		_i2c_write_bit
  5090 ;; This function is called by:
  5091 ;;		_dsWriteData
  5092 ;;		_dsReadData
  5093 ;; This function uses a non-reentrant model
  5094 ;;
  5095                           
  5096                           	psect	text31
  5097   00616C                     __ptext31:
  5098                           	callstack 0
  5099   00616C                     _i2cWriteByte:
  5100                           	callstack 24
  5101                           
  5102                           ;incstack = 0
  5103                           ;i2cWriteByte@send_start stored from wreg
  5104   00616C  6E0A               	movwf	i2cWriteByte@send_start^0,c
  5105   00616E                     
  5106                           ;i2c.c: 114:  unsigned char bit;;i2c.c: 115:  unsigned char nack;;i2c.c: 116:  if (send_
      +                          start) {
  5107   00616E  500A               	movf	i2cWriteByte@send_start^0,w,c
  5108   006170  B4D8               	btfsc	status,2,c
  5109   006172  EFBD  F030         	goto	u2451
  5110   006176  EFBF  F030         	goto	u2450
  5111   00617A                     u2451:
  5112   00617A  EFC1  F030         	goto	l2812
  5113   00617E                     u2450:
  5114   00617E                     
  5115                           ;i2c.c: 117:   i2c_start();
  5116   00617E  EC1D  F02F         	call	_i2c_start	;wreg free
  5117   006182                     l2812:
  5118                           
  5119                           ;i2c.c: 119:  for (bit = 0; bit < 8; bit++) {
  5120   006182  0E00               	movlw	0
  5121   006184  6E0B               	movwf	i2cWriteByte@bit^0,c
  5122   006186                     l2818:
  5123                           
  5124                           ;i2c.c: 120:   i2c_write_bit((byte & 0x80) != 0);
  5125   006186  BE09               	btfsc	i2cWriteByte@byte^0,7,c
  5126   006188  EFC8  F030         	goto	u2461
  5127   00618C  EFCB  F030         	goto	u2460
  5128   006190                     u2461:
  5129   006190  0E01               	movlw	1
  5130   006192  EFCC  F030         	goto	u2470
  5131   006196                     u2460:
  5132   006196  0E00               	movlw	0
  5133   006198                     u2470:
  5134   006198  EC2D  F030         	call	_i2c_write_bit
  5135   00619C                     
  5136                           ;i2c.c: 121:   byte <<= 1;
  5137   00619C  90D8               	bcf	status,0,c
  5138   00619E  3609               	rlcf	i2cWriteByte@byte^0,f,c
  5139   0061A0                     
  5140                           ;i2c.c: 122:  }
  5141   0061A0  2A0B               	incf	i2cWriteByte@bit^0,f,c
  5142   0061A2  0E07               	movlw	7
  5143   0061A4  640B               	cpfsgt	i2cWriteByte@bit^0,c
  5144   0061A6  EFD7  F030         	goto	u2481
  5145   0061AA  EFD9  F030         	goto	u2480
  5146   0061AE                     u2481:
  5147   0061AE  EFC3  F030         	goto	l2818
  5148   0061B2                     u2480:
  5149   0061B2  EC94  F02E         	call	_i2c_read_bit	;wreg free
  5150   0061B6                     
  5151                           ;i2c.c: 124:  if (send_stop) {
  5152   0061B6  5008               	movf	i2cWriteByte@send_stop^0,w,c
  5153   0061B8  B4D8               	btfsc	status,2,c
  5154   0061BA  EFE1  F030         	goto	u2491
  5155   0061BE  EFE3  F030         	goto	u2490
  5156   0061C2                     u2491:
  5157   0061C2  EFE5  F030         	goto	l270
  5158   0061C6                     u2490:
  5159   0061C6                     
  5160                           ;i2c.c: 125:   i2c_stop();
  5161   0061C6  EC66  F02E         	call	_i2c_stop	;wreg free
  5162   0061CA                     l270:
  5163   0061CA  0012               	return		;funcret
  5164   0061CC                     __end_of_i2cWriteByte:
  5165                           	callstack 0
  5166                           
  5167 ;; *************** function _i2c_write_bit *****************
  5168 ;; Defined at:
  5169 ;;		line 84 in file "i2c.c"
  5170 ;; Parameters:    Size  Location     Type
  5171 ;;  bit             1    wreg     unsigned char 
  5172 ;; Auto vars:     Size  Location     Type
  5173 ;;  bit             1    6[COMRAM] unsigned char 
  5174 ;; Return value:  Size  Location     Type
  5175 ;;                  1    wreg      void 
  5176 ;; Registers used:
  5177 ;;		wreg, status,2, status,0, cstack
  5178 ;; Tracked objects:
  5179 ;;		On entry : 0/0
  5180 ;;		On exit  : 0/0
  5181 ;;		Unchanged: 0/0
  5182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5183 ;;      Params:         0       0       0       0       0       0       0       0       0
  5184 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5185 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5186 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5187 ;;Total ram usage:        1 bytes
  5188 ;; Hardware stack levels used: 1
  5189 ;; Hardware stack levels required when called: 2
  5190 ;; This function calls:
  5191 ;;		_I2C_delay
  5192 ;;		_clear_SCL
  5193 ;;		_clear_SDA
  5194 ;;		_read_SCL
  5195 ;;		_read_SDA
  5196 ;; This function is called by:
  5197 ;;		_i2cWriteByte
  5198 ;;		_i2cReadByte
  5199 ;; This function uses a non-reentrant model
  5200 ;;
  5201                           
  5202                           	psect	text32
  5203   00605A                     __ptext32:
  5204                           	callstack 0
  5205   00605A                     _i2c_write_bit:
  5206                           	callstack 24
  5207                           
  5208                           ;incstack = 0
  5209                           ;i2c_write_bit@bit stored from wreg
  5210   00605A  6E07               	movwf	i2c_write_bit@bit^0,c
  5211   00605C                     
  5212                           ;i2c.c: 85:  if (bit) {
  5213   00605C  5007               	movf	i2c_write_bit@bit^0,w,c
  5214   00605E  B4D8               	btfsc	status,2,c
  5215   006060  EF34  F030         	goto	u2341
  5216   006064  EF36  F030         	goto	u2340
  5217   006068                     u2341:
  5218   006068  EF3A  F030         	goto	l2730
  5219   00606C                     u2340:
  5220   00606C                     
  5221                           ;i2c.c: 86:   read_SDA();
  5222   00606C  ECC9  F02E         	call	_read_SDA	;wreg free
  5223                           
  5224                           ;i2c.c: 87:  } else {
  5225   006070  EF3C  F030         	goto	l2732
  5226   006074                     l2730:
  5227                           
  5228                           ;i2c.c: 88:   clear_SDA();
  5229   006074  EC0F  F02E         	call	_clear_SDA	;wreg free
  5230   006078                     l2732:
  5231                           
  5232                           ;i2c.c: 90:  I2C_delay();
  5233   006078  ECB7  F02C         	call	_I2C_delay	;wreg free
  5234   00607C                     l2734:
  5235   00607C  ECAD  F02E         	call	_read_SCL	;wreg free
  5236   006080  0900               	iorlw	0
  5237   006082  B4D8               	btfsc	status,2,c
  5238   006084  EF46  F030         	goto	u2351
  5239   006088  EF48  F030         	goto	u2350
  5240   00608C                     u2351:
  5241   00608C  EF3E  F030         	goto	l2734
  5242   006090                     u2350:
  5243   006090                     
  5244                           ;i2c.c: 92:  if (bit && read_SDA() == 0) {
  5245   006090  5007               	movf	i2c_write_bit@bit^0,w,c
  5246   006092  B4D8               	btfsc	status,2,c
  5247   006094  EF4E  F030         	goto	u2361
  5248   006098  EF50  F030         	goto	u2360
  5249   00609C                     u2361:
  5250   00609C  EF52  F030         	goto	l2740
  5251   0060A0                     u2360:
  5252   0060A0  ECC9  F02E         	call	_read_SDA	;wreg free
  5253   0060A4                     l2740:
  5254                           
  5255                           ;i2c.c: 95:  I2C_delay();
  5256   0060A4  ECB7  F02C         	call	_I2C_delay	;wreg free
  5257   0060A8                     
  5258                           ;i2c.c: 96:  clear_SCL();
  5259   0060A8  ECFA  F02D         	call	_clear_SCL	;wreg free
  5260   0060AC                     
  5261                           ;i2c.c: 97:  I2C_delay();
  5262   0060AC  ECB7  F02C         	call	_I2C_delay	;wreg free
  5263   0060B0  0012               	return		;funcret
  5264   0060B2                     __end_of_i2c_write_bit:
  5265                           	callstack 0
  5266                           
  5267 ;; *************** function _i2c_stop *****************
  5268 ;; Defined at:
  5269 ;;		line 71 in file "i2c.c"
  5270 ;; Parameters:    Size  Location     Type
  5271 ;;		None
  5272 ;; Auto vars:     Size  Location     Type
  5273 ;;		None
  5274 ;; Return value:  Size  Location     Type
  5275 ;;                  1    wreg      void 
  5276 ;; Registers used:
  5277 ;;		wreg, status,2, status,0, cstack
  5278 ;; Tracked objects:
  5279 ;;		On entry : 0/0
  5280 ;;		On exit  : 0/0
  5281 ;;		Unchanged: 0/0
  5282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5283 ;;      Params:         0       0       0       0       0       0       0       0       0
  5284 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5285 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5286 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5287 ;;Total ram usage:        0 bytes
  5288 ;; Hardware stack levels used: 1
  5289 ;; Hardware stack levels required when called: 2
  5290 ;; This function calls:
  5291 ;;		_I2C_delay
  5292 ;;		_clear_SDA
  5293 ;;		_read_SCL
  5294 ;;		_read_SDA
  5295 ;; This function is called by:
  5296 ;;		_i2cWriteByte
  5297 ;;		_i2cReadByte
  5298 ;; This function uses a non-reentrant model
  5299 ;;
  5300                           
  5301                           	psect	text33
  5302   005CCC                     __ptext33:
  5303                           	callstack 0
  5304   005CCC                     _i2c_stop:
  5305                           	callstack 24
  5306   005CCC                     
  5307                           ;i2c.c: 73:  clear_SDA();
  5308   005CCC  EC0F  F02E         	call	_clear_SDA	;wreg free
  5309   005CD0                     
  5310                           ;i2c.c: 74:  I2C_delay();
  5311   005CD0  ECB7  F02C         	call	_I2C_delay	;wreg free
  5312   005CD4                     l2716:
  5313   005CD4  ECAD  F02E         	call	_read_SCL	;wreg free
  5314   005CD8  0900               	iorlw	0
  5315   005CDA  B4D8               	btfsc	status,2,c
  5316   005CDC  EF72  F02E         	goto	u2331
  5317   005CE0  EF74  F02E         	goto	u2330
  5318   005CE4                     u2331:
  5319   005CE4  EF6A  F02E         	goto	l2716
  5320   005CE8                     u2330:
  5321   005CE8                     
  5322                           ;i2c.c: 76:  I2C_delay();
  5323   005CE8  ECB7  F02C         	call	_I2C_delay	;wreg free
  5324   005CEC                     
  5325                           ;i2c.c: 77:  if (read_SDA() == 0) {
  5326   005CEC  ECC9  F02E         	call	_read_SDA	;wreg free
  5327   005CF0                     
  5328                           ;i2c.c: 80:  I2C_delay();
  5329   005CF0  ECB7  F02C         	call	_I2C_delay	;wreg free
  5330   005CF4                     
  5331                           ;i2c.c: 81:  started = 0;
  5332   005CF4  0E00               	movlw	0
  5333   005CF6  6E5B               	movwf	_started^0,c
  5334   005CF8  0012               	return		;funcret
  5335   005CFA                     __end_of_i2c_stop:
  5336                           	callstack 0
  5337                           
  5338 ;; *************** function _i2c_start *****************
  5339 ;; Defined at:
  5340 ;;		line 52 in file "i2c.c"
  5341 ;; Parameters:    Size  Location     Type
  5342 ;;		None
  5343 ;; Auto vars:     Size  Location     Type
  5344 ;;		None
  5345 ;; Return value:  Size  Location     Type
  5346 ;;                  1    wreg      void 
  5347 ;; Registers used:
  5348 ;;		wreg, status,2, status,0, cstack
  5349 ;; Tracked objects:
  5350 ;;		On entry : 0/0
  5351 ;;		On exit  : 0/0
  5352 ;;		Unchanged: 0/0
  5353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5354 ;;      Params:         0       0       0       0       0       0       0       0       0
  5355 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5356 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5357 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5358 ;;Total ram usage:        0 bytes
  5359 ;; Hardware stack levels used: 1
  5360 ;; Hardware stack levels required when called: 2
  5361 ;; This function calls:
  5362 ;;		_I2C_delay
  5363 ;;		_clear_SCL
  5364 ;;		_clear_SDA
  5365 ;;		_read_SCL
  5366 ;;		_read_SDA
  5367 ;; This function is called by:
  5368 ;;		_i2cWriteByte
  5369 ;; This function uses a non-reentrant model
  5370 ;;
  5371                           
  5372                           	psect	text34
  5373   005E3A                     __ptext34:
  5374                           	callstack 0
  5375   005E3A                     _i2c_start:
  5376                           	callstack 24
  5377   005E3A                     
  5378                           ;i2c.c: 54:  if (started) {
  5379   005E3A  505B               	movf	_started^0,w,c
  5380   005E3C  B4D8               	btfsc	status,2,c
  5381   005E3E  EF23  F02F         	goto	u2311
  5382   005E42  EF25  F02F         	goto	u2310
  5383   005E46                     u2311:
  5384   005E46  EF35  F02F         	goto	l2702
  5385   005E4A                     u2310:
  5386   005E4A                     
  5387                           ;i2c.c: 55:   read_SDA();
  5388   005E4A  ECC9  F02E         	call	_read_SDA	;wreg free
  5389   005E4E                     
  5390                           ;i2c.c: 56:   I2C_delay();
  5391   005E4E  ECB7  F02C         	call	_I2C_delay	;wreg free
  5392   005E52                     l2698:
  5393   005E52  ECAD  F02E         	call	_read_SCL	;wreg free
  5394   005E56  0900               	iorlw	0
  5395   005E58  B4D8               	btfsc	status,2,c
  5396   005E5A  EF31  F02F         	goto	u2321
  5397   005E5E  EF33  F02F         	goto	u2320
  5398   005E62                     u2321:
  5399   005E62  EF29  F02F         	goto	l2698
  5400   005E66                     u2320:
  5401   005E66                     
  5402                           ;i2c.c: 59:   I2C_delay();
  5403   005E66  ECB7  F02C         	call	_I2C_delay	;wreg free
  5404   005E6A                     l2702:
  5405                           
  5406                           ;i2c.c: 61:  if (read_SDA() == 0) {
  5407   005E6A  ECC9  F02E         	call	_read_SDA	;wreg free
  5408   005E6E                     
  5409                           ;i2c.c: 65:  clear_SDA();
  5410   005E6E  EC0F  F02E         	call	_clear_SDA	;wreg free
  5411   005E72                     
  5412                           ;i2c.c: 66:  I2C_delay();
  5413   005E72  ECB7  F02C         	call	_I2C_delay	;wreg free
  5414   005E76                     
  5415                           ;i2c.c: 67:  clear_SCL();
  5416   005E76  ECFA  F02D         	call	_clear_SCL	;wreg free
  5417   005E7A                     
  5418                           ;i2c.c: 68:  started = 1;
  5419   005E7A  0E01               	movlw	1
  5420   005E7C  6E5B               	movwf	_started^0,c
  5421   005E7E  0012               	return		;funcret
  5422   005E80                     __end_of_i2c_start:
  5423                           	callstack 0
  5424                           
  5425 ;; *************** function _clear_SDA *****************
  5426 ;; Defined at:
  5427 ;;		line 45 in file "i2c.c"
  5428 ;; Parameters:    Size  Location     Type
  5429 ;;		None
  5430 ;; Auto vars:     Size  Location     Type
  5431 ;;		None
  5432 ;; Return value:  Size  Location     Type
  5433 ;;                  1    wreg      void 
  5434 ;; Registers used:
  5435 ;;		wreg, status,2, status,0, cstack
  5436 ;; Tracked objects:
  5437 ;;		On entry : 0/0
  5438 ;;		On exit  : 0/0
  5439 ;;		Unchanged: 0/0
  5440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5441 ;;      Params:         0       0       0       0       0       0       0       0       0
  5442 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5443 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5444 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5445 ;;Total ram usage:        0 bytes
  5446 ;; Hardware stack levels used: 1
  5447 ;; Hardware stack levels required when called: 1
  5448 ;; This function calls:
  5449 ;;		_digitalWrite
  5450 ;;		_pinMode
  5451 ;; This function is called by:
  5452 ;;		_i2c_start
  5453 ;;		_i2c_stop
  5454 ;;		_i2c_write_bit
  5455 ;; This function uses a non-reentrant model
  5456 ;;
  5457                           
  5458                           	psect	text35
  5459   005C1E                     __ptext35:
  5460                           	callstack 0
  5461   005C1E                     _clear_SDA:
  5462                           	callstack 24
  5463   005C1E                     
  5464                           ;i2c.c: 47:  pinMode(PIN_B0,0);
  5465   005C1E  0E00               	movlw	0
  5466   005C20  6E02               	movwf	(pinMode@pin+1)^0,c
  5467   005C22  0E08               	movlw	8
  5468   005C24  6E01               	movwf	pinMode@pin^0,c
  5469   005C26  0E00               	movlw	0
  5470   005C28  6E04               	movwf	(pinMode@type+1)^0,c
  5471   005C2A  0E00               	movlw	0
  5472   005C2C  6E03               	movwf	pinMode@type^0,c
  5473   005C2E  EC6E  F035         	call	_pinMode	;wreg free
  5474                           
  5475                           ;i2c.c: 48:  digitalWrite(PIN_B0,0);
  5476   005C32  0E00               	movlw	0
  5477   005C34  6E02               	movwf	(digitalWrite@pin+1)^0,c
  5478   005C36  0E08               	movlw	8
  5479   005C38  6E01               	movwf	digitalWrite@pin^0,c
  5480   005C3A  0E00               	movlw	0
  5481   005C3C  6E04               	movwf	(digitalWrite@value+1)^0,c
  5482   005C3E  0E00               	movlw	0
  5483   005C40  6E03               	movwf	digitalWrite@value^0,c
  5484   005C42  EC47  F034         	call	_digitalWrite	;wreg free
  5485   005C46  0012               	return		;funcret
  5486   005C48                     __end_of_clear_SDA:
  5487                           	callstack 0
  5488                           
  5489 ;; *************** function _i2c_read_bit *****************
  5490 ;; Defined at:
  5491 ;;		line 100 in file "i2c.c"
  5492 ;; Parameters:    Size  Location     Type
  5493 ;;		None
  5494 ;; Auto vars:     Size  Location     Type
  5495 ;;  bit             1    6[COMRAM] unsigned char 
  5496 ;; Return value:  Size  Location     Type
  5497 ;;                  1    wreg      unsigned char 
  5498 ;; Registers used:
  5499 ;;		wreg, status,2, status,0, cstack
  5500 ;; Tracked objects:
  5501 ;;		On entry : 0/0
  5502 ;;		On exit  : 0/0
  5503 ;;		Unchanged: 0/0
  5504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5505 ;;      Params:         0       0       0       0       0       0       0       0       0
  5506 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5507 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5508 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5509 ;;Total ram usage:        1 bytes
  5510 ;; Hardware stack levels used: 1
  5511 ;; Hardware stack levels required when called: 2
  5512 ;; This function calls:
  5513 ;;		_I2C_delay
  5514 ;;		_clear_SCL
  5515 ;;		_read_SCL
  5516 ;;		_read_SDA
  5517 ;; This function is called by:
  5518 ;;		_i2cWriteByte
  5519 ;;		_i2cReadByte
  5520 ;; This function uses a non-reentrant model
  5521 ;;
  5522                           
  5523                           	psect	text36
  5524   005D28                     __ptext36:
  5525                           	callstack 0
  5526   005D28                     _i2c_read_bit:
  5527                           	callstack 24
  5528   005D28                     
  5529                           ;i2c.c: 101:  unsigned char bit;;i2c.c: 102:  read_SDA();
  5530   005D28  ECC9  F02E         	call	_read_SDA	;wreg free
  5531   005D2C                     
  5532                           ;i2c.c: 103:  I2C_delay();
  5533   005D2C  ECB7  F02C         	call	_I2C_delay	;wreg free
  5534   005D30                     l2750:
  5535   005D30  ECAD  F02E         	call	_read_SCL	;wreg free
  5536   005D34  0900               	iorlw	0
  5537   005D36  B4D8               	btfsc	status,2,c
  5538   005D38  EFA0  F02E         	goto	u2371
  5539   005D3C  EFA2  F02E         	goto	u2370
  5540   005D40                     u2371:
  5541   005D40  EF98  F02E         	goto	l2750
  5542   005D44                     u2370:
  5543   005D44                     
  5544                           ;i2c.c: 105:  bit = read_SDA();
  5545   005D44  ECC9  F02E         	call	_read_SDA	;wreg free
  5546   005D48  6E07               	movwf	i2c_read_bit@bit^0,c
  5547   005D4A                     
  5548                           ;i2c.c: 106:  I2C_delay();
  5549   005D4A  ECB7  F02C         	call	_I2C_delay	;wreg free
  5550   005D4E                     
  5551                           ;i2c.c: 107:  clear_SCL();
  5552   005D4E  ECFA  F02D         	call	_clear_SCL	;wreg free
  5553                           
  5554                           ;i2c.c: 108:  I2C_delay();
  5555   005D52  ECB7  F02C         	call	_I2C_delay	;wreg free
  5556   005D56                     
  5557                           ;i2c.c: 109:  return bit;
  5558   005D56  5007               	movf	i2c_read_bit@bit^0,w,c
  5559   005D58  0012               	return		;funcret
  5560   005D5A                     __end_of_i2c_read_bit:
  5561                           	callstack 0
  5562                           
  5563 ;; *************** function _read_SDA *****************
  5564 ;; Defined at:
  5565 ;;		line 34 in file "i2c.c"
  5566 ;; Parameters:    Size  Location     Type
  5567 ;;		None
  5568 ;; Auto vars:     Size  Location     Type
  5569 ;;		None
  5570 ;; Return value:  Size  Location     Type
  5571 ;;                  1    wreg      unsigned char 
  5572 ;; Registers used:
  5573 ;;		wreg, status,2, status,0, cstack
  5574 ;; Tracked objects:
  5575 ;;		On entry : 0/0
  5576 ;;		On exit  : 0/0
  5577 ;;		Unchanged: 0/0
  5578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5579 ;;      Params:         0       0       0       0       0       0       0       0       0
  5580 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5581 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5582 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5583 ;;Total ram usage:        0 bytes
  5584 ;; Hardware stack levels used: 1
  5585 ;; Hardware stack levels required when called: 1
  5586 ;; This function calls:
  5587 ;;		_digitalRead
  5588 ;;		_pinMode
  5589 ;; This function is called by:
  5590 ;;		_i2c_start
  5591 ;;		_i2c_stop
  5592 ;;		_i2c_write_bit
  5593 ;;		_i2c_read_bit
  5594 ;; This function uses a non-reentrant model
  5595 ;;
  5596                           
  5597                           	psect	text37
  5598   005D92                     __ptext37:
  5599                           	callstack 0
  5600   005D92                     _read_SDA:
  5601                           	callstack 24
  5602   005D92                     
  5603                           ;i2c.c: 36:  pinMode(PIN_B0,1);
  5604   005D92  0E00               	movlw	0
  5605   005D94  6E02               	movwf	(pinMode@pin+1)^0,c
  5606   005D96  0E08               	movlw	8
  5607   005D98  6E01               	movwf	pinMode@pin^0,c
  5608   005D9A  0E00               	movlw	0
  5609   005D9C  6E04               	movwf	(pinMode@type+1)^0,c
  5610   005D9E  0E01               	movlw	1
  5611   005DA0  6E03               	movwf	pinMode@type^0,c
  5612   005DA2  EC6E  F035         	call	_pinMode	;wreg free
  5613                           
  5614                           ;i2c.c: 37:  return !!digitalRead(PIN_B0);
  5615   005DA6  0E00               	movlw	0
  5616   005DA8  6E02               	movwf	(digitalRead@pin+1)^0,c
  5617   005DAA  0E08               	movlw	8
  5618   005DAC  6E01               	movwf	digitalRead@pin^0,c
  5619   005DAE  EC92  F033         	call	_digitalRead	;wreg free
  5620   005DB2  5001               	movf	?_digitalRead^0,w,c
  5621   005DB4  1002               	iorwf	(?_digitalRead+1)^0,w,c
  5622   005DB6  A4D8               	btfss	status,2,c
  5623   005DB8  EFE0  F02E         	goto	u2291
  5624   005DBC  EFE3  F02E         	goto	u2290
  5625   005DC0                     u2291:
  5626   005DC0  0E01               	movlw	1
  5627   005DC2  EFE4  F02E         	goto	u2300
  5628   005DC6                     u2290:
  5629   005DC6  0E00               	movlw	0
  5630   005DC8                     u2300:
  5631   005DC8  0012               	return		;funcret
  5632   005DCA                     __end_of_read_SDA:
  5633                           	callstack 0
  5634                           
  5635 ;; *************** function _read_SCL *****************
  5636 ;; Defined at:
  5637 ;;		line 29 in file "i2c.c"
  5638 ;; Parameters:    Size  Location     Type
  5639 ;;		None
  5640 ;; Auto vars:     Size  Location     Type
  5641 ;;		None
  5642 ;; Return value:  Size  Location     Type
  5643 ;;                  1    wreg      unsigned char 
  5644 ;; Registers used:
  5645 ;;		wreg, status,2, status,0, cstack
  5646 ;; Tracked objects:
  5647 ;;		On entry : 0/0
  5648 ;;		On exit  : 0/0
  5649 ;;		Unchanged: 0/0
  5650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5651 ;;      Params:         0       0       0       0       0       0       0       0       0
  5652 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5653 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5654 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5655 ;;Total ram usage:        0 bytes
  5656 ;; Hardware stack levels used: 1
  5657 ;; Hardware stack levels required when called: 1
  5658 ;; This function calls:
  5659 ;;		_digitalRead
  5660 ;;		_pinMode
  5661 ;; This function is called by:
  5662 ;;		_i2c_start
  5663 ;;		_i2c_stop
  5664 ;;		_i2c_write_bit
  5665 ;;		_i2c_read_bit
  5666 ;; This function uses a non-reentrant model
  5667 ;;
  5668                           
  5669                           	psect	text38
  5670   005D5A                     __ptext38:
  5671                           	callstack 0
  5672   005D5A                     _read_SCL:
  5673                           	callstack 24
  5674   005D5A                     
  5675                           ;i2c.c: 31:  pinMode(PIN_B1,1);
  5676   005D5A  0E00               	movlw	0
  5677   005D5C  6E02               	movwf	(pinMode@pin+1)^0,c
  5678   005D5E  0E09               	movlw	9
  5679   005D60  6E01               	movwf	pinMode@pin^0,c
  5680   005D62  0E00               	movlw	0
  5681   005D64  6E04               	movwf	(pinMode@type+1)^0,c
  5682   005D66  0E01               	movlw	1
  5683   005D68  6E03               	movwf	pinMode@type^0,c
  5684   005D6A  EC6E  F035         	call	_pinMode	;wreg free
  5685                           
  5686                           ;i2c.c: 32:  return !!digitalRead(PIN_B1);
  5687   005D6E  0E00               	movlw	0
  5688   005D70  6E02               	movwf	(digitalRead@pin+1)^0,c
  5689   005D72  0E09               	movlw	9
  5690   005D74  6E01               	movwf	digitalRead@pin^0,c
  5691   005D76  EC92  F033         	call	_digitalRead	;wreg free
  5692   005D7A  5001               	movf	?_digitalRead^0,w,c
  5693   005D7C  1002               	iorwf	(?_digitalRead+1)^0,w,c
  5694   005D7E  A4D8               	btfss	status,2,c
  5695   005D80  EFC4  F02E         	goto	u2271
  5696   005D84  EFC7  F02E         	goto	u2270
  5697   005D88                     u2271:
  5698   005D88  0E01               	movlw	1
  5699   005D8A  EFC8  F02E         	goto	u2280
  5700   005D8E                     u2270:
  5701   005D8E  0E00               	movlw	0
  5702   005D90                     u2280:
  5703   005D90  0012               	return		;funcret
  5704   005D92                     __end_of_read_SCL:
  5705                           	callstack 0
  5706                           
  5707 ;; *************** function _digitalRead *****************
  5708 ;; Defined at:
  5709 ;;		line 39 in file "io.c"
  5710 ;; Parameters:    Size  Location     Type
  5711 ;;  pin             2    0[COMRAM] int 
  5712 ;; Auto vars:     Size  Location     Type
  5713 ;;		None
  5714 ;; Return value:  Size  Location     Type
  5715 ;;                  2    0[COMRAM] int 
  5716 ;; Registers used:
  5717 ;;		wreg, status,2, status,0
  5718 ;; Tracked objects:
  5719 ;;		On entry : 0/0
  5720 ;;		On exit  : 0/0
  5721 ;;		Unchanged: 0/0
  5722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5723 ;;      Params:         2       0       0       0       0       0       0       0       0
  5724 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5725 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5726 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5727 ;;Total ram usage:        5 bytes
  5728 ;; Hardware stack levels used: 1
  5729 ;; This function calls:
  5730 ;;		Nothing
  5731 ;; This function is called by:
  5732 ;;		_read_SCL
  5733 ;;		_read_SDA
  5734 ;; This function uses a non-reentrant model
  5735 ;;
  5736                           
  5737                           	psect	text39
  5738   006724                     __ptext39:
  5739                           	callstack 0
  5740   006724                     _digitalRead:
  5741                           	callstack 24
  5742   006724                     
  5743                           ;io.c: 40:     if(pin <8){
  5744   006724  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  5745   006726  EFA0  F033         	goto	u1970
  5746   00672A  5002               	movf	(digitalRead@pin+1)^0,w,c
  5747   00672C  E107               	bnz	u1971
  5748   00672E  0E08               	movlw	8
  5749   006730  5C01               	subwf	digitalRead@pin^0,w,c
  5750   006732  B0D8               	btfsc	status,0,c
  5751   006734  EF9E  F033         	goto	u1971
  5752   006738  EFA0  F033         	goto	u1970
  5753   00673C                     u1971:
  5754   00673C  EFB4  F033         	goto	l2608
  5755   006740                     u1970:
  5756   006740                     
  5757                           ;io.c: 41:         return ((PORTA) & (1<<(pin)));
  5758   006740  C001  F003         	movff	digitalRead@pin,??_digitalRead
  5759   006744  0E01               	movlw	1
  5760   006746  6E04               	movwf	(??_digitalRead+1)^0,c
  5761   006748  2A03               	incf	??_digitalRead^0,f,c
  5762   00674A  EFA9  F033         	goto	u1984
  5763   00674E                     u1985:
  5764   00674E  90D8               	bcf	status,0,c
  5765   006750  3604               	rlcf	(??_digitalRead+1)^0,f,c
  5766   006752                     u1984:
  5767   006752  2E03               	decfsz	??_digitalRead^0,f,c
  5768   006754  EFA7  F033         	goto	u1985
  5769   006758  5004               	movf	(??_digitalRead+1)^0,w,c
  5770   00675A  1480               	andwf	128,w,c	;volatile
  5771   00675C  6E05               	movwf	(??_digitalRead+2)^0,c
  5772   00675E  5005               	movf	(??_digitalRead+2)^0,w,c
  5773   006760  6E01               	movwf	?_digitalRead^0,c
  5774   006762  6A02               	clrf	(?_digitalRead+1)^0,c
  5775   006764  EF46  F034         	goto	l322
  5776   006768                     l2608:
  5777   006768  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  5778   00676A  EFC2  F033         	goto	u1990
  5779   00676E  5002               	movf	(digitalRead@pin+1)^0,w,c
  5780   006770  E107               	bnz	u1991
  5781   006772  0E10               	movlw	16
  5782   006774  5C01               	subwf	digitalRead@pin^0,w,c
  5783   006776  B0D8               	btfsc	status,0,c
  5784   006778  EFC0  F033         	goto	u1991
  5785   00677C  EFC2  F033         	goto	u1990
  5786   006780                     u1991:
  5787   006780  EFD8  F033         	goto	l2616
  5788   006784                     u1990:
  5789   006784                     
  5790                           ;io.c: 43:         return ((PORTB) & (1<<(pin-8)));
  5791   006784  C001  F003         	movff	digitalRead@pin,??_digitalRead
  5792   006788  0EF8               	movlw	-8
  5793   00678A  2603               	addwf	??_digitalRead^0,f,c
  5794   00678C  0E01               	movlw	1
  5795   00678E  6E04               	movwf	(??_digitalRead+1)^0,c
  5796   006790  2A03               	incf	??_digitalRead^0,f,c
  5797   006792  EFCD  F033         	goto	u2004
  5798   006796                     u2005:
  5799   006796  90D8               	bcf	status,0,c
  5800   006798  3604               	rlcf	(??_digitalRead+1)^0,f,c
  5801   00679A                     u2004:
  5802   00679A  2E03               	decfsz	??_digitalRead^0,f,c
  5803   00679C  EFCB  F033         	goto	u2005
  5804   0067A0  5004               	movf	(??_digitalRead+1)^0,w,c
  5805   0067A2  1481               	andwf	129,w,c	;volatile
  5806   0067A4  6E05               	movwf	(??_digitalRead+2)^0,c
  5807   0067A6  5005               	movf	(??_digitalRead+2)^0,w,c
  5808   0067A8  6E01               	movwf	?_digitalRead^0,c
  5809   0067AA  6A02               	clrf	(?_digitalRead+1)^0,c
  5810   0067AC  EF46  F034         	goto	l322
  5811   0067B0                     l2616:
  5812   0067B0  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  5813   0067B2  EFE6  F033         	goto	u2010
  5814   0067B6  5002               	movf	(digitalRead@pin+1)^0,w,c
  5815   0067B8  E107               	bnz	u2011
  5816   0067BA  0E18               	movlw	24
  5817   0067BC  5C01               	subwf	digitalRead@pin^0,w,c
  5818   0067BE  B0D8               	btfsc	status,0,c
  5819   0067C0  EFE4  F033         	goto	u2011
  5820   0067C4  EFE6  F033         	goto	u2010
  5821   0067C8                     u2011:
  5822   0067C8  EFFC  F033         	goto	l2624
  5823   0067CC                     u2010:
  5824   0067CC                     
  5825                           ;io.c: 45:         return ((PORTC) & (1<<(pin-16)));
  5826   0067CC  C001  F003         	movff	digitalRead@pin,??_digitalRead
  5827   0067D0  0EF0               	movlw	-16
  5828   0067D2  2603               	addwf	??_digitalRead^0,f,c
  5829   0067D4  0E01               	movlw	1
  5830   0067D6  6E04               	movwf	(??_digitalRead+1)^0,c
  5831   0067D8  2A03               	incf	??_digitalRead^0,f,c
  5832   0067DA  EFF1  F033         	goto	u2024
  5833   0067DE                     u2025:
  5834   0067DE  90D8               	bcf	status,0,c
  5835   0067E0  3604               	rlcf	(??_digitalRead+1)^0,f,c
  5836   0067E2                     u2024:
  5837   0067E2  2E03               	decfsz	??_digitalRead^0,f,c
  5838   0067E4  EFEF  F033         	goto	u2025
  5839   0067E8  5004               	movf	(??_digitalRead+1)^0,w,c
  5840   0067EA  1482               	andwf	130,w,c	;volatile
  5841   0067EC  6E05               	movwf	(??_digitalRead+2)^0,c
  5842   0067EE  5005               	movf	(??_digitalRead+2)^0,w,c
  5843   0067F0  6E01               	movwf	?_digitalRead^0,c
  5844   0067F2  6A02               	clrf	(?_digitalRead+1)^0,c
  5845   0067F4  EF46  F034         	goto	l322
  5846   0067F8                     l2624:
  5847   0067F8  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  5848   0067FA  EF0A  F034         	goto	u2030
  5849   0067FE  5002               	movf	(digitalRead@pin+1)^0,w,c
  5850   006800  E107               	bnz	u2031
  5851   006802  0E20               	movlw	32
  5852   006804  5C01               	subwf	digitalRead@pin^0,w,c
  5853   006806  B0D8               	btfsc	status,0,c
  5854   006808  EF08  F034         	goto	u2031
  5855   00680C  EF0A  F034         	goto	u2030
  5856   006810                     u2031:
  5857   006810  EF20  F034         	goto	l2632
  5858   006814                     u2030:
  5859   006814                     
  5860                           ;io.c: 47:         return ((PORTD) & (1<<(pin-24)));
  5861   006814  C001  F003         	movff	digitalRead@pin,??_digitalRead
  5862   006818  0EE8               	movlw	-24
  5863   00681A  2603               	addwf	??_digitalRead^0,f,c
  5864   00681C  0E01               	movlw	1
  5865   00681E  6E04               	movwf	(??_digitalRead+1)^0,c
  5866   006820  2A03               	incf	??_digitalRead^0,f,c
  5867   006822  EF15  F034         	goto	u2044
  5868   006826                     u2045:
  5869   006826  90D8               	bcf	status,0,c
  5870   006828  3604               	rlcf	(??_digitalRead+1)^0,f,c
  5871   00682A                     u2044:
  5872   00682A  2E03               	decfsz	??_digitalRead^0,f,c
  5873   00682C  EF13  F034         	goto	u2045
  5874   006830  5004               	movf	(??_digitalRead+1)^0,w,c
  5875   006832  1483               	andwf	131,w,c	;volatile
  5876   006834  6E05               	movwf	(??_digitalRead+2)^0,c
  5877   006836  5005               	movf	(??_digitalRead+2)^0,w,c
  5878   006838  6E01               	movwf	?_digitalRead^0,c
  5879   00683A  6A02               	clrf	(?_digitalRead+1)^0,c
  5880   00683C  EF46  F034         	goto	l322
  5881   006840                     l2632:
  5882   006840  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  5883   006842  EF2E  F034         	goto	u2050
  5884   006846  5002               	movf	(digitalRead@pin+1)^0,w,c
  5885   006848  E107               	bnz	u2051
  5886   00684A  0E28               	movlw	40
  5887   00684C  5C01               	subwf	digitalRead@pin^0,w,c
  5888   00684E  B0D8               	btfsc	status,0,c
  5889   006850  EF2C  F034         	goto	u2051
  5890   006854  EF2E  F034         	goto	u2050
  5891   006858                     u2051:
  5892   006858  EF44  F034         	goto	l327
  5893   00685C                     u2050:
  5894   00685C                     
  5895                           ;io.c: 49:         return ((PORTE) & (1<<(pin-32)));
  5896   00685C  C001  F003         	movff	digitalRead@pin,??_digitalRead
  5897   006860  0EE0               	movlw	-32
  5898   006862  2603               	addwf	??_digitalRead^0,f,c
  5899   006864  0E01               	movlw	1
  5900   006866  6E04               	movwf	(??_digitalRead+1)^0,c
  5901   006868  2A03               	incf	??_digitalRead^0,f,c
  5902   00686A  EF39  F034         	goto	u2064
  5903   00686E                     u2065:
  5904   00686E  90D8               	bcf	status,0,c
  5905   006870  3604               	rlcf	(??_digitalRead+1)^0,f,c
  5906   006872                     u2064:
  5907   006872  2E03               	decfsz	??_digitalRead^0,f,c
  5908   006874  EF37  F034         	goto	u2065
  5909   006878  5004               	movf	(??_digitalRead+1)^0,w,c
  5910   00687A  1484               	andwf	132,w,c	;volatile
  5911   00687C  6E05               	movwf	(??_digitalRead+2)^0,c
  5912   00687E  5005               	movf	(??_digitalRead+2)^0,w,c
  5913   006880  6E01               	movwf	?_digitalRead^0,c
  5914   006882  6A02               	clrf	(?_digitalRead+1)^0,c
  5915   006884  EF46  F034         	goto	l322
  5916   006888                     l327:
  5917   006888                     
  5918                           ;io.c: 51:     return -1;
  5919   006888  6801               	setf	?_digitalRead^0,c
  5920   00688A  6802               	setf	(?_digitalRead+1)^0,c
  5921   00688C                     l322:
  5922   00688C  0012               	return		;funcret
  5923   00688E                     __end_of_digitalRead:
  5924                           	callstack 0
  5925                           
  5926 ;; *************** function _clear_SCL *****************
  5927 ;; Defined at:
  5928 ;;		line 39 in file "i2c.c"
  5929 ;; Parameters:    Size  Location     Type
  5930 ;;		None
  5931 ;; Auto vars:     Size  Location     Type
  5932 ;;		None
  5933 ;; Return value:  Size  Location     Type
  5934 ;;                  1    wreg      void 
  5935 ;; Registers used:
  5936 ;;		wreg, status,2, status,0, cstack
  5937 ;; Tracked objects:
  5938 ;;		On entry : 0/0
  5939 ;;		On exit  : 0/0
  5940 ;;		Unchanged: 0/0
  5941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5942 ;;      Params:         0       0       0       0       0       0       0       0       0
  5943 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5944 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5945 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5946 ;;Total ram usage:        0 bytes
  5947 ;; Hardware stack levels used: 1
  5948 ;; Hardware stack levels required when called: 1
  5949 ;; This function calls:
  5950 ;;		_digitalWrite
  5951 ;;		_pinMode
  5952 ;; This function is called by:
  5953 ;;		_i2c_start
  5954 ;;		_i2c_write_bit
  5955 ;;		_i2c_read_bit
  5956 ;; This function uses a non-reentrant model
  5957 ;;
  5958                           
  5959                           	psect	text40
  5960   005BF4                     __ptext40:
  5961                           	callstack 0
  5962   005BF4                     _clear_SCL:
  5963                           	callstack 24
  5964   005BF4                     
  5965                           ;i2c.c: 41:  pinMode(PIN_B1,0);
  5966   005BF4  0E00               	movlw	0
  5967   005BF6  6E02               	movwf	(pinMode@pin+1)^0,c
  5968   005BF8  0E09               	movlw	9
  5969   005BFA  6E01               	movwf	pinMode@pin^0,c
  5970   005BFC  0E00               	movlw	0
  5971   005BFE  6E04               	movwf	(pinMode@type+1)^0,c
  5972   005C00  0E00               	movlw	0
  5973   005C02  6E03               	movwf	pinMode@type^0,c
  5974   005C04  EC6E  F035         	call	_pinMode	;wreg free
  5975                           
  5976                           ;i2c.c: 42:  digitalWrite(PIN_B1,0);
  5977   005C08  0E00               	movlw	0
  5978   005C0A  6E02               	movwf	(digitalWrite@pin+1)^0,c
  5979   005C0C  0E09               	movlw	9
  5980   005C0E  6E01               	movwf	digitalWrite@pin^0,c
  5981   005C10  0E00               	movlw	0
  5982   005C12  6E04               	movwf	(digitalWrite@value+1)^0,c
  5983   005C14  0E00               	movlw	0
  5984   005C16  6E03               	movwf	digitalWrite@value^0,c
  5985   005C18  EC47  F034         	call	_digitalWrite	;wreg free
  5986   005C1C  0012               	return		;funcret
  5987   005C1E                     __end_of_clear_SCL:
  5988                           	callstack 0
  5989                           
  5990 ;; *************** function _pinMode *****************
  5991 ;; Defined at:
  5992 ;;		line 54 in file "io.c"
  5993 ;; Parameters:    Size  Location     Type
  5994 ;;  pin             2    0[COMRAM] int 
  5995 ;;  type            2    2[COMRAM] int 
  5996 ;; Auto vars:     Size  Location     Type
  5997 ;;		None
  5998 ;; Return value:  Size  Location     Type
  5999 ;;                  1    wreg      void 
  6000 ;; Registers used:
  6001 ;;		wreg, status,2, status,0
  6002 ;; Tracked objects:
  6003 ;;		On entry : 0/0
  6004 ;;		On exit  : 0/0
  6005 ;;		Unchanged: 0/0
  6006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6007 ;;      Params:         4       0       0       0       0       0       0       0       0
  6008 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6009 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6010 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6011 ;;Total ram usage:        6 bytes
  6012 ;; Hardware stack levels used: 1
  6013 ;; This function calls:
  6014 ;;		Nothing
  6015 ;; This function is called by:
  6016 ;;		_i2cInit
  6017 ;;		_read_SCL
  6018 ;;		_read_SDA
  6019 ;;		_clear_SCL
  6020 ;;		_clear_SDA
  6021 ;; This function uses a non-reentrant model
  6022 ;;
  6023                           
  6024                           	psect	text41
  6025   006ADC                     __ptext41:
  6026                           	callstack 0
  6027   006ADC                     _pinMode:
  6028                           	callstack 24
  6029   006ADC                     
  6030                           ;io.c: 56:     if(pin <8){
  6031   006ADC  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  6032   006ADE  EF7C  F035         	goto	u1770
  6033   006AE2  5002               	movf	(pinMode@pin+1)^0,w,c
  6034   006AE4  E107               	bnz	u1771
  6035   006AE6  0E08               	movlw	8
  6036   006AE8  5C01               	subwf	pinMode@pin^0,w,c
  6037   006AEA  B0D8               	btfsc	status,0,c
  6038   006AEC  EF7A  F035         	goto	u1771
  6039   006AF0  EF7C  F035         	goto	u1770
  6040   006AF4                     u1771:
  6041   006AF4  EFA6  F035         	goto	l2568
  6042   006AF8                     u1770:
  6043   006AF8                     
  6044                           ;io.c: 57:         if (type){ ((TRISA) |= (1<<(pin)));}
  6045   006AF8  5003               	movf	pinMode@type^0,w,c
  6046   006AFA  1004               	iorwf	(pinMode@type+1)^0,w,c
  6047   006AFC  B4D8               	btfsc	status,2,c
  6048   006AFE  EF83  F035         	goto	u1781
  6049   006B02  EF85  F035         	goto	u1780
  6050   006B06                     u1781:
  6051   006B06  EF95  F035         	goto	l2566
  6052   006B0A                     u1780:
  6053   006B0A  C001  F005         	movff	pinMode@pin,??_pinMode
  6054   006B0E  0E01               	movlw	1
  6055   006B10  6E06               	movwf	(??_pinMode+1)^0,c
  6056   006B12  2A05               	incf	??_pinMode^0,f,c
  6057   006B14  EF8E  F035         	goto	u1794
  6058   006B18                     u1795:
  6059   006B18  90D8               	bcf	status,0,c
  6060   006B1A  3606               	rlcf	(??_pinMode+1)^0,f,c
  6061   006B1C                     u1794:
  6062   006B1C  2E05               	decfsz	??_pinMode^0,f,c
  6063   006B1E  EF8C  F035         	goto	u1795
  6064   006B22  5006               	movf	(??_pinMode+1)^0,w,c
  6065   006B24  1292               	iorwf	146,f,c	;volatile
  6066   006B26  EF94  F036         	goto	l352
  6067   006B2A                     l2566:
  6068   006B2A  C001  F005         	movff	pinMode@pin,??_pinMode
  6069   006B2E  0E01               	movlw	1
  6070   006B30  6E06               	movwf	(??_pinMode+1)^0,c
  6071   006B32  2A05               	incf	??_pinMode^0,f,c
  6072   006B34  EF9E  F035         	goto	u1804
  6073   006B38                     u1805:
  6074   006B38  90D8               	bcf	status,0,c
  6075   006B3A  3606               	rlcf	(??_pinMode+1)^0,f,c
  6076   006B3C                     u1804:
  6077   006B3C  2E05               	decfsz	??_pinMode^0,f,c
  6078   006B3E  EF9C  F035         	goto	u1805
  6079   006B42  5006               	movf	(??_pinMode+1)^0,w,c
  6080   006B44  0AFF               	xorlw	255
  6081   006B46  1692               	andwf	146,f,c	;volatile
  6082   006B48  EF94  F036         	goto	l352
  6083   006B4C                     l2568:
  6084   006B4C  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  6085   006B4E  EFB4  F035         	goto	u1810
  6086   006B52  5002               	movf	(pinMode@pin+1)^0,w,c
  6087   006B54  E107               	bnz	u1811
  6088   006B56  0E10               	movlw	16
  6089   006B58  5C01               	subwf	pinMode@pin^0,w,c
  6090   006B5A  B0D8               	btfsc	status,0,c
  6091   006B5C  EFB2  F035         	goto	u1811
  6092   006B60  EFB4  F035         	goto	u1810
  6093   006B64                     u1811:
  6094   006B64  EFE2  F035         	goto	l2576
  6095   006B68                     u1810:
  6096   006B68                     
  6097                           ;io.c: 60:         if (type){ ((TRISB) |= (1<<(pin-8)));}
  6098   006B68  5003               	movf	pinMode@type^0,w,c
  6099   006B6A  1004               	iorwf	(pinMode@type+1)^0,w,c
  6100   006B6C  B4D8               	btfsc	status,2,c
  6101   006B6E  EFBB  F035         	goto	u1821
  6102   006B72  EFBD  F035         	goto	u1820
  6103   006B76                     u1821:
  6104   006B76  EFCF  F035         	goto	l2574
  6105   006B7A                     u1820:
  6106   006B7A  C001  F005         	movff	pinMode@pin,??_pinMode
  6107   006B7E  0EF8               	movlw	-8
  6108   006B80  2605               	addwf	??_pinMode^0,f,c
  6109   006B82  0E01               	movlw	1
  6110   006B84  6E06               	movwf	(??_pinMode+1)^0,c
  6111   006B86  2A05               	incf	??_pinMode^0,f,c
  6112   006B88  EFC8  F035         	goto	u1834
  6113   006B8C                     u1835:
  6114   006B8C  90D8               	bcf	status,0,c
  6115   006B8E  3606               	rlcf	(??_pinMode+1)^0,f,c
  6116   006B90                     u1834:
  6117   006B90  2E05               	decfsz	??_pinMode^0,f,c
  6118   006B92  EFC6  F035         	goto	u1835
  6119   006B96  5006               	movf	(??_pinMode+1)^0,w,c
  6120   006B98  1293               	iorwf	147,f,c	;volatile
  6121   006B9A  EF94  F036         	goto	l352
  6122   006B9E                     l2574:
  6123   006B9E  C001  F005         	movff	pinMode@pin,??_pinMode
  6124   006BA2  0EF8               	movlw	-8
  6125   006BA4  2605               	addwf	??_pinMode^0,f,c
  6126   006BA6  0E01               	movlw	1
  6127   006BA8  6E06               	movwf	(??_pinMode+1)^0,c
  6128   006BAA  2A05               	incf	??_pinMode^0,f,c
  6129   006BAC  EFDA  F035         	goto	u1844
  6130   006BB0                     u1845:
  6131   006BB0  90D8               	bcf	status,0,c
  6132   006BB2  3606               	rlcf	(??_pinMode+1)^0,f,c
  6133   006BB4                     u1844:
  6134   006BB4  2E05               	decfsz	??_pinMode^0,f,c
  6135   006BB6  EFD8  F035         	goto	u1845
  6136   006BBA  5006               	movf	(??_pinMode+1)^0,w,c
  6137   006BBC  0AFF               	xorlw	255
  6138   006BBE  1693               	andwf	147,f,c	;volatile
  6139   006BC0  EF94  F036         	goto	l352
  6140   006BC4                     l2576:
  6141   006BC4  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  6142   006BC6  EFF0  F035         	goto	u1850
  6143   006BCA  5002               	movf	(pinMode@pin+1)^0,w,c
  6144   006BCC  E107               	bnz	u1851
  6145   006BCE  0E18               	movlw	24
  6146   006BD0  5C01               	subwf	pinMode@pin^0,w,c
  6147   006BD2  B0D8               	btfsc	status,0,c
  6148   006BD4  EFEE  F035         	goto	u1851
  6149   006BD8  EFF0  F035         	goto	u1850
  6150   006BDC                     u1851:
  6151   006BDC  EF1E  F036         	goto	l2584
  6152   006BE0                     u1850:
  6153   006BE0                     
  6154                           ;io.c: 63:         if (type){ ((TRISC) |= (1<<(pin-16)));}
  6155   006BE0  5003               	movf	pinMode@type^0,w,c
  6156   006BE2  1004               	iorwf	(pinMode@type+1)^0,w,c
  6157   006BE4  B4D8               	btfsc	status,2,c
  6158   006BE6  EFF7  F035         	goto	u1861
  6159   006BEA  EFF9  F035         	goto	u1860
  6160   006BEE                     u1861:
  6161   006BEE  EF0B  F036         	goto	l2582
  6162   006BF2                     u1860:
  6163   006BF2  C001  F005         	movff	pinMode@pin,??_pinMode
  6164   006BF6  0EF0               	movlw	-16
  6165   006BF8  2605               	addwf	??_pinMode^0,f,c
  6166   006BFA  0E01               	movlw	1
  6167   006BFC  6E06               	movwf	(??_pinMode+1)^0,c
  6168   006BFE  2A05               	incf	??_pinMode^0,f,c
  6169   006C00  EF04  F036         	goto	u1874
  6170   006C04                     u1875:
  6171   006C04  90D8               	bcf	status,0,c
  6172   006C06  3606               	rlcf	(??_pinMode+1)^0,f,c
  6173   006C08                     u1874:
  6174   006C08  2E05               	decfsz	??_pinMode^0,f,c
  6175   006C0A  EF02  F036         	goto	u1875
  6176   006C0E  5006               	movf	(??_pinMode+1)^0,w,c
  6177   006C10  1294               	iorwf	148,f,c	;volatile
  6178   006C12  EF94  F036         	goto	l352
  6179   006C16                     l2582:
  6180   006C16  C001  F005         	movff	pinMode@pin,??_pinMode
  6181   006C1A  0EF0               	movlw	-16
  6182   006C1C  2605               	addwf	??_pinMode^0,f,c
  6183   006C1E  0E01               	movlw	1
  6184   006C20  6E06               	movwf	(??_pinMode+1)^0,c
  6185   006C22  2A05               	incf	??_pinMode^0,f,c
  6186   006C24  EF16  F036         	goto	u1884
  6187   006C28                     u1885:
  6188   006C28  90D8               	bcf	status,0,c
  6189   006C2A  3606               	rlcf	(??_pinMode+1)^0,f,c
  6190   006C2C                     u1884:
  6191   006C2C  2E05               	decfsz	??_pinMode^0,f,c
  6192   006C2E  EF14  F036         	goto	u1885
  6193   006C32  5006               	movf	(??_pinMode+1)^0,w,c
  6194   006C34  0AFF               	xorlw	255
  6195   006C36  1694               	andwf	148,f,c	;volatile
  6196   006C38  EF94  F036         	goto	l352
  6197   006C3C                     l2584:
  6198   006C3C  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  6199   006C3E  EF2C  F036         	goto	u1890
  6200   006C42  5002               	movf	(pinMode@pin+1)^0,w,c
  6201   006C44  E107               	bnz	u1891
  6202   006C46  0E20               	movlw	32
  6203   006C48  5C01               	subwf	pinMode@pin^0,w,c
  6204   006C4A  B0D8               	btfsc	status,0,c
  6205   006C4C  EF2A  F036         	goto	u1891
  6206   006C50  EF2C  F036         	goto	u1890
  6207   006C54                     u1891:
  6208   006C54  EF5A  F036         	goto	l2592
  6209   006C58                     u1890:
  6210   006C58                     
  6211                           ;io.c: 66:         if (type){ ((TRISD) |= (1<<(pin-24)));}
  6212   006C58  5003               	movf	pinMode@type^0,w,c
  6213   006C5A  1004               	iorwf	(pinMode@type+1)^0,w,c
  6214   006C5C  B4D8               	btfsc	status,2,c
  6215   006C5E  EF33  F036         	goto	u1901
  6216   006C62  EF35  F036         	goto	u1900
  6217   006C66                     u1901:
  6218   006C66  EF47  F036         	goto	l2590
  6219   006C6A                     u1900:
  6220   006C6A  C001  F005         	movff	pinMode@pin,??_pinMode
  6221   006C6E  0EE8               	movlw	-24
  6222   006C70  2605               	addwf	??_pinMode^0,f,c
  6223   006C72  0E01               	movlw	1
  6224   006C74  6E06               	movwf	(??_pinMode+1)^0,c
  6225   006C76  2A05               	incf	??_pinMode^0,f,c
  6226   006C78  EF40  F036         	goto	u1914
  6227   006C7C                     u1915:
  6228   006C7C  90D8               	bcf	status,0,c
  6229   006C7E  3606               	rlcf	(??_pinMode+1)^0,f,c
  6230   006C80                     u1914:
  6231   006C80  2E05               	decfsz	??_pinMode^0,f,c
  6232   006C82  EF3E  F036         	goto	u1915
  6233   006C86  5006               	movf	(??_pinMode+1)^0,w,c
  6234   006C88  1295               	iorwf	149,f,c	;volatile
  6235   006C8A  EF94  F036         	goto	l352
  6236   006C8E                     l2590:
  6237   006C8E  C001  F005         	movff	pinMode@pin,??_pinMode
  6238   006C92  0EE8               	movlw	-24
  6239   006C94  2605               	addwf	??_pinMode^0,f,c
  6240   006C96  0E01               	movlw	1
  6241   006C98  6E06               	movwf	(??_pinMode+1)^0,c
  6242   006C9A  2A05               	incf	??_pinMode^0,f,c
  6243   006C9C  EF52  F036         	goto	u1924
  6244   006CA0                     u1925:
  6245   006CA0  90D8               	bcf	status,0,c
  6246   006CA2  3606               	rlcf	(??_pinMode+1)^0,f,c
  6247   006CA4                     u1924:
  6248   006CA4  2E05               	decfsz	??_pinMode^0,f,c
  6249   006CA6  EF50  F036         	goto	u1925
  6250   006CAA  5006               	movf	(??_pinMode+1)^0,w,c
  6251   006CAC  0AFF               	xorlw	255
  6252   006CAE  1695               	andwf	149,f,c	;volatile
  6253   006CB0  EF94  F036         	goto	l352
  6254   006CB4                     l2592:
  6255   006CB4  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  6256   006CB6  EF68  F036         	goto	u1930
  6257   006CBA  5002               	movf	(pinMode@pin+1)^0,w,c
  6258   006CBC  E107               	bnz	u1931
  6259   006CBE  0E28               	movlw	40
  6260   006CC0  5C01               	subwf	pinMode@pin^0,w,c
  6261   006CC2  B0D8               	btfsc	status,0,c
  6262   006CC4  EF66  F036         	goto	u1931
  6263   006CC8  EF68  F036         	goto	u1930
  6264   006CCC                     u1931:
  6265   006CCC  EF94  F036         	goto	l352
  6266   006CD0                     u1930:
  6267   006CD0                     
  6268                           ;io.c: 69:         if (type){ ((TRISE) |= (1<<(pin-32)));}
  6269   006CD0  5003               	movf	pinMode@type^0,w,c
  6270   006CD2  1004               	iorwf	(pinMode@type+1)^0,w,c
  6271   006CD4  B4D8               	btfsc	status,2,c
  6272   006CD6  EF6F  F036         	goto	u1941
  6273   006CDA  EF71  F036         	goto	u1940
  6274   006CDE                     u1941:
  6275   006CDE  EF83  F036         	goto	l2598
  6276   006CE2                     u1940:
  6277   006CE2  C001  F005         	movff	pinMode@pin,??_pinMode
  6278   006CE6  0EE0               	movlw	-32
  6279   006CE8  2605               	addwf	??_pinMode^0,f,c
  6280   006CEA  0E01               	movlw	1
  6281   006CEC  6E06               	movwf	(??_pinMode+1)^0,c
  6282   006CEE  2A05               	incf	??_pinMode^0,f,c
  6283   006CF0  EF7C  F036         	goto	u1954
  6284   006CF4                     u1955:
  6285   006CF4  90D8               	bcf	status,0,c
  6286   006CF6  3606               	rlcf	(??_pinMode+1)^0,f,c
  6287   006CF8                     u1954:
  6288   006CF8  2E05               	decfsz	??_pinMode^0,f,c
  6289   006CFA  EF7A  F036         	goto	u1955
  6290   006CFE  5006               	movf	(??_pinMode+1)^0,w,c
  6291   006D00  1296               	iorwf	150,f,c	;volatile
  6292   006D02  EF94  F036         	goto	l352
  6293   006D06                     l2598:
  6294   006D06  C001  F005         	movff	pinMode@pin,??_pinMode
  6295   006D0A  0EE0               	movlw	-32
  6296   006D0C  2605               	addwf	??_pinMode^0,f,c
  6297   006D0E  0E01               	movlw	1
  6298   006D10  6E06               	movwf	(??_pinMode+1)^0,c
  6299   006D12  2A05               	incf	??_pinMode^0,f,c
  6300   006D14  EF8E  F036         	goto	u1964
  6301   006D18                     u1965:
  6302   006D18  90D8               	bcf	status,0,c
  6303   006D1A  3606               	rlcf	(??_pinMode+1)^0,f,c
  6304   006D1C                     u1964:
  6305   006D1C  2E05               	decfsz	??_pinMode^0,f,c
  6306   006D1E  EF8C  F036         	goto	u1965
  6307   006D22  5006               	movf	(??_pinMode+1)^0,w,c
  6308   006D24  0AFF               	xorlw	255
  6309   006D26  1696               	andwf	150,f,c	;volatile
  6310   006D28                     l352:
  6311   006D28  0012               	return		;funcret
  6312   006D2A                     __end_of_pinMode:
  6313                           	callstack 0
  6314                           
  6315 ;; *************** function _digitalWrite *****************
  6316 ;; Defined at:
  6317 ;;		line 14 in file "io.c"
  6318 ;; Parameters:    Size  Location     Type
  6319 ;;  pin             2    0[COMRAM] int 
  6320 ;;  value           2    2[COMRAM] int 
  6321 ;; Auto vars:     Size  Location     Type
  6322 ;;		None
  6323 ;; Return value:  Size  Location     Type
  6324 ;;                  1    wreg      void 
  6325 ;; Registers used:
  6326 ;;		wreg, status,2, status,0
  6327 ;; Tracked objects:
  6328 ;;		On entry : 0/0
  6329 ;;		On exit  : 0/0
  6330 ;;		Unchanged: 0/0
  6331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6332 ;;      Params:         4       0       0       0       0       0       0       0       0
  6333 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6334 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6335 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6336 ;;Total ram usage:        6 bytes
  6337 ;; Hardware stack levels used: 1
  6338 ;; This function calls:
  6339 ;;		Nothing
  6340 ;; This function is called by:
  6341 ;;		_clear_SCL
  6342 ;;		_clear_SDA
  6343 ;; This function uses a non-reentrant model
  6344 ;;
  6345                           
  6346                           	psect	text42
  6347   00688E                     __ptext42:
  6348                           	callstack 0
  6349   00688E                     _digitalWrite:
  6350                           	callstack 24
  6351   00688E                     
  6352                           ;io.c: 16:     if(pin <8){
  6353   00688E  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  6354   006890  EF55  F034         	goto	u2070
  6355   006894  5002               	movf	(digitalWrite@pin+1)^0,w,c
  6356   006896  E107               	bnz	u2071
  6357   006898  0E08               	movlw	8
  6358   00689A  5C01               	subwf	digitalWrite@pin^0,w,c
  6359   00689C  B0D8               	btfsc	status,0,c
  6360   00689E  EF53  F034         	goto	u2071
  6361   0068A2  EF55  F034         	goto	u2070
  6362   0068A6                     u2071:
  6363   0068A6  EF7F  F034         	goto	l2646
  6364   0068AA                     u2070:
  6365   0068AA                     
  6366                           ;io.c: 17:         if (value){ ((PORTA) |= (1<<(pin)));}
  6367   0068AA  5003               	movf	digitalWrite@value^0,w,c
  6368   0068AC  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  6369   0068AE  B4D8               	btfsc	status,2,c
  6370   0068B0  EF5C  F034         	goto	u2081
  6371   0068B4  EF5E  F034         	goto	u2080
  6372   0068B8                     u2081:
  6373   0068B8  EF6E  F034         	goto	l2644
  6374   0068BC                     u2080:
  6375   0068BC  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  6376   0068C0  0E01               	movlw	1
  6377   0068C2  6E06               	movwf	(??_digitalWrite+1)^0,c
  6378   0068C4  2A05               	incf	??_digitalWrite^0,f,c
  6379   0068C6  EF67  F034         	goto	u2094
  6380   0068CA                     u2095:
  6381   0068CA  90D8               	bcf	status,0,c
  6382   0068CC  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  6383   0068CE                     u2094:
  6384   0068CE  2E05               	decfsz	??_digitalWrite^0,f,c
  6385   0068D0  EF65  F034         	goto	u2095
  6386   0068D4  5006               	movf	(??_digitalWrite+1)^0,w,c
  6387   0068D6  1280               	iorwf	128,f,c	;volatile
  6388   0068D8  EF6D  F035         	goto	l318
  6389   0068DC                     l2644:
  6390   0068DC  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  6391   0068E0  0E01               	movlw	1
  6392   0068E2  6E06               	movwf	(??_digitalWrite+1)^0,c
  6393   0068E4  2A05               	incf	??_digitalWrite^0,f,c
  6394   0068E6  EF77  F034         	goto	u2104
  6395   0068EA                     u2105:
  6396   0068EA  90D8               	bcf	status,0,c
  6397   0068EC  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  6398   0068EE                     u2104:
  6399   0068EE  2E05               	decfsz	??_digitalWrite^0,f,c
  6400   0068F0  EF75  F034         	goto	u2105
  6401   0068F4  5006               	movf	(??_digitalWrite+1)^0,w,c
  6402   0068F6  0AFF               	xorlw	255
  6403   0068F8  1680               	andwf	128,f,c	;volatile
  6404   0068FA  EF6D  F035         	goto	l318
  6405   0068FE                     l2646:
  6406   0068FE  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  6407   006900  EF8D  F034         	goto	u2110
  6408   006904  5002               	movf	(digitalWrite@pin+1)^0,w,c
  6409   006906  E107               	bnz	u2111
  6410   006908  0E10               	movlw	16
  6411   00690A  5C01               	subwf	digitalWrite@pin^0,w,c
  6412   00690C  B0D8               	btfsc	status,0,c
  6413   00690E  EF8B  F034         	goto	u2111
  6414   006912  EF8D  F034         	goto	u2110
  6415   006916                     u2111:
  6416   006916  EFBB  F034         	goto	l2654
  6417   00691A                     u2110:
  6418   00691A                     
  6419                           ;io.c: 20:         pin -=8;
  6420   00691A  0EF8               	movlw	248
  6421   00691C  2601               	addwf	digitalWrite@pin^0,f,c
  6422   00691E  0EFF               	movlw	255
  6423   006920  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  6424                           
  6425                           ;io.c: 21:         if (value){ ((PORTB) |= (1<<(pin)));}
  6426   006922  5003               	movf	digitalWrite@value^0,w,c
  6427   006924  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  6428   006926  B4D8               	btfsc	status,2,c
  6429   006928  EF98  F034         	goto	u2121
  6430   00692C  EF9A  F034         	goto	u2120
  6431   006930                     u2121:
  6432   006930  EFAA  F034         	goto	l2652
  6433   006934                     u2120:
  6434   006934  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  6435   006938  0E01               	movlw	1
  6436   00693A  6E06               	movwf	(??_digitalWrite+1)^0,c
  6437   00693C  2A05               	incf	??_digitalWrite^0,f,c
  6438   00693E  EFA3  F034         	goto	u2134
  6439   006942                     u2135:
  6440   006942  90D8               	bcf	status,0,c
  6441   006944  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  6442   006946                     u2134:
  6443   006946  2E05               	decfsz	??_digitalWrite^0,f,c
  6444   006948  EFA1  F034         	goto	u2135
  6445   00694C  5006               	movf	(??_digitalWrite+1)^0,w,c
  6446   00694E  1281               	iorwf	129,f,c	;volatile
  6447   006950  EF6D  F035         	goto	l318
  6448   006954                     l2652:
  6449   006954  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  6450   006958  0E01               	movlw	1
  6451   00695A  6E06               	movwf	(??_digitalWrite+1)^0,c
  6452   00695C  2A05               	incf	??_digitalWrite^0,f,c
  6453   00695E  EFB3  F034         	goto	u2144
  6454   006962                     u2145:
  6455   006962  90D8               	bcf	status,0,c
  6456   006964  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  6457   006966                     u2144:
  6458   006966  2E05               	decfsz	??_digitalWrite^0,f,c
  6459   006968  EFB1  F034         	goto	u2145
  6460   00696C  5006               	movf	(??_digitalWrite+1)^0,w,c
  6461   00696E  0AFF               	xorlw	255
  6462   006970  1681               	andwf	129,f,c	;volatile
  6463   006972  EF6D  F035         	goto	l318
  6464   006976                     l2654:
  6465   006976  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  6466   006978  EFC9  F034         	goto	u2150
  6467   00697C  5002               	movf	(digitalWrite@pin+1)^0,w,c
  6468   00697E  E107               	bnz	u2151
  6469   006980  0E18               	movlw	24
  6470   006982  5C01               	subwf	digitalWrite@pin^0,w,c
  6471   006984  B0D8               	btfsc	status,0,c
  6472   006986  EFC7  F034         	goto	u2151
  6473   00698A  EFC9  F034         	goto	u2150
  6474   00698E                     u2151:
  6475   00698E  EFF7  F034         	goto	l2662
  6476   006992                     u2150:
  6477   006992                     
  6478                           ;io.c: 24:         pin -=16;
  6479   006992  0EF0               	movlw	240
  6480   006994  2601               	addwf	digitalWrite@pin^0,f,c
  6481   006996  0EFF               	movlw	255
  6482   006998  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  6483                           
  6484                           ;io.c: 25:         if (value){ ((PORTC) |= (1<<(pin)));}
  6485   00699A  5003               	movf	digitalWrite@value^0,w,c
  6486   00699C  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  6487   00699E  B4D8               	btfsc	status,2,c
  6488   0069A0  EFD4  F034         	goto	u2161
  6489   0069A4  EFD6  F034         	goto	u2160
  6490   0069A8                     u2161:
  6491   0069A8  EFE6  F034         	goto	l2660
  6492   0069AC                     u2160:
  6493   0069AC  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  6494   0069B0  0E01               	movlw	1
  6495   0069B2  6E06               	movwf	(??_digitalWrite+1)^0,c
  6496   0069B4  2A05               	incf	??_digitalWrite^0,f,c
  6497   0069B6  EFDF  F034         	goto	u2174
  6498   0069BA                     u2175:
  6499   0069BA  90D8               	bcf	status,0,c
  6500   0069BC  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  6501   0069BE                     u2174:
  6502   0069BE  2E05               	decfsz	??_digitalWrite^0,f,c
  6503   0069C0  EFDD  F034         	goto	u2175
  6504   0069C4  5006               	movf	(??_digitalWrite+1)^0,w,c
  6505   0069C6  1282               	iorwf	130,f,c	;volatile
  6506   0069C8  EF6D  F035         	goto	l318
  6507   0069CC                     l2660:
  6508   0069CC  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  6509   0069D0  0E01               	movlw	1
  6510   0069D2  6E06               	movwf	(??_digitalWrite+1)^0,c
  6511   0069D4  2A05               	incf	??_digitalWrite^0,f,c
  6512   0069D6  EFEF  F034         	goto	u2184
  6513   0069DA                     u2185:
  6514   0069DA  90D8               	bcf	status,0,c
  6515   0069DC  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  6516   0069DE                     u2184:
  6517   0069DE  2E05               	decfsz	??_digitalWrite^0,f,c
  6518   0069E0  EFED  F034         	goto	u2185
  6519   0069E4  5006               	movf	(??_digitalWrite+1)^0,w,c
  6520   0069E6  0AFF               	xorlw	255
  6521   0069E8  1682               	andwf	130,f,c	;volatile
  6522   0069EA  EF6D  F035         	goto	l318
  6523   0069EE                     l2662:
  6524   0069EE  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  6525   0069F0  EF05  F035         	goto	u2190
  6526   0069F4  5002               	movf	(digitalWrite@pin+1)^0,w,c
  6527   0069F6  E107               	bnz	u2191
  6528   0069F8  0E20               	movlw	32
  6529   0069FA  5C01               	subwf	digitalWrite@pin^0,w,c
  6530   0069FC  B0D8               	btfsc	status,0,c
  6531   0069FE  EF03  F035         	goto	u2191
  6532   006A02  EF05  F035         	goto	u2190
  6533   006A06                     u2191:
  6534   006A06  EF33  F035         	goto	l2670
  6535   006A0A                     u2190:
  6536   006A0A                     
  6537                           ;io.c: 28:         pin -=24;
  6538   006A0A  0EE8               	movlw	232
  6539   006A0C  2601               	addwf	digitalWrite@pin^0,f,c
  6540   006A0E  0EFF               	movlw	255
  6541   006A10  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  6542                           
  6543                           ;io.c: 29:         if (value){ ((PORTD) |= (1<<(pin)));}
  6544   006A12  5003               	movf	digitalWrite@value^0,w,c
  6545   006A14  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  6546   006A16  B4D8               	btfsc	status,2,c
  6547   006A18  EF10  F035         	goto	u2201
  6548   006A1C  EF12  F035         	goto	u2200
  6549   006A20                     u2201:
  6550   006A20  EF22  F035         	goto	l2668
  6551   006A24                     u2200:
  6552   006A24  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  6553   006A28  0E01               	movlw	1
  6554   006A2A  6E06               	movwf	(??_digitalWrite+1)^0,c
  6555   006A2C  2A05               	incf	??_digitalWrite^0,f,c
  6556   006A2E  EF1B  F035         	goto	u2214
  6557   006A32                     u2215:
  6558   006A32  90D8               	bcf	status,0,c
  6559   006A34  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  6560   006A36                     u2214:
  6561   006A36  2E05               	decfsz	??_digitalWrite^0,f,c
  6562   006A38  EF19  F035         	goto	u2215
  6563   006A3C  5006               	movf	(??_digitalWrite+1)^0,w,c
  6564   006A3E  1283               	iorwf	131,f,c	;volatile
  6565   006A40  EF6D  F035         	goto	l318
  6566   006A44                     l2668:
  6567   006A44  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  6568   006A48  0E01               	movlw	1
  6569   006A4A  6E06               	movwf	(??_digitalWrite+1)^0,c
  6570   006A4C  2A05               	incf	??_digitalWrite^0,f,c
  6571   006A4E  EF2B  F035         	goto	u2224
  6572   006A52                     u2225:
  6573   006A52  90D8               	bcf	status,0,c
  6574   006A54  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  6575   006A56                     u2224:
  6576   006A56  2E05               	decfsz	??_digitalWrite^0,f,c
  6577   006A58  EF29  F035         	goto	u2225
  6578   006A5C  5006               	movf	(??_digitalWrite+1)^0,w,c
  6579   006A5E  0AFF               	xorlw	255
  6580   006A60  1683               	andwf	131,f,c	;volatile
  6581   006A62  EF6D  F035         	goto	l318
  6582   006A66                     l2670:
  6583   006A66  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  6584   006A68  EF41  F035         	goto	u2230
  6585   006A6C  5002               	movf	(digitalWrite@pin+1)^0,w,c
  6586   006A6E  E107               	bnz	u2231
  6587   006A70  0E28               	movlw	40
  6588   006A72  5C01               	subwf	digitalWrite@pin^0,w,c
  6589   006A74  B0D8               	btfsc	status,0,c
  6590   006A76  EF3F  F035         	goto	u2231
  6591   006A7A  EF41  F035         	goto	u2230
  6592   006A7E                     u2231:
  6593   006A7E  EF6D  F035         	goto	l318
  6594   006A82                     u2230:
  6595   006A82                     
  6596                           ;io.c: 32:         pin -=32;
  6597   006A82  0EE0               	movlw	224
  6598   006A84  2601               	addwf	digitalWrite@pin^0,f,c
  6599   006A86  0EFF               	movlw	255
  6600   006A88  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  6601                           
  6602                           ;io.c: 33:         if (value){ ((PORTE) |= (1<<(pin)));}
  6603   006A8A  5003               	movf	digitalWrite@value^0,w,c
  6604   006A8C  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  6605   006A8E  B4D8               	btfsc	status,2,c
  6606   006A90  EF4C  F035         	goto	u2241
  6607   006A94  EF4E  F035         	goto	u2240
  6608   006A98                     u2241:
  6609   006A98  EF5E  F035         	goto	l2676
  6610   006A9C                     u2240:
  6611   006A9C  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  6612   006AA0  0E01               	movlw	1
  6613   006AA2  6E06               	movwf	(??_digitalWrite+1)^0,c
  6614   006AA4  2A05               	incf	??_digitalWrite^0,f,c
  6615   006AA6  EF57  F035         	goto	u2254
  6616   006AAA                     u2255:
  6617   006AAA  90D8               	bcf	status,0,c
  6618   006AAC  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  6619   006AAE                     u2254:
  6620   006AAE  2E05               	decfsz	??_digitalWrite^0,f,c
  6621   006AB0  EF55  F035         	goto	u2255
  6622   006AB4  5006               	movf	(??_digitalWrite+1)^0,w,c
  6623   006AB6  1284               	iorwf	132,f,c	;volatile
  6624   006AB8  EF6D  F035         	goto	l318
  6625   006ABC                     l2676:
  6626   006ABC  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  6627   006AC0  0E01               	movlw	1
  6628   006AC2  6E06               	movwf	(??_digitalWrite+1)^0,c
  6629   006AC4  2A05               	incf	??_digitalWrite^0,f,c
  6630   006AC6  EF67  F035         	goto	u2264
  6631   006ACA                     u2265:
  6632   006ACA  90D8               	bcf	status,0,c
  6633   006ACC  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  6634   006ACE                     u2264:
  6635   006ACE  2E05               	decfsz	??_digitalWrite^0,f,c
  6636   006AD0  EF65  F035         	goto	u2265
  6637   006AD4  5006               	movf	(??_digitalWrite+1)^0,w,c
  6638   006AD6  0AFF               	xorlw	255
  6639   006AD8  1684               	andwf	132,f,c	;volatile
  6640   006ADA                     l318:
  6641   006ADA  0012               	return		;funcret
  6642   006ADC                     __end_of_digitalWrite:
  6643                           	callstack 0
  6644                           
  6645 ;; *************** function _I2C_delay *****************
  6646 ;; Defined at:
  6647 ;;		line 22 in file "i2c.c"
  6648 ;; Parameters:    Size  Location     Type
  6649 ;;		None
  6650 ;; Auto vars:     Size  Location     Type
  6651 ;;  i               2    0        int 
  6652 ;;  v               2    0        volatile int 
  6653 ;; Return value:  Size  Location     Type
  6654 ;;                  1    wreg      void 
  6655 ;; Registers used:
  6656 ;;		None
  6657 ;; Tracked objects:
  6658 ;;		On entry : 0/0
  6659 ;;		On exit  : 0/0
  6660 ;;		Unchanged: 0/0
  6661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6662 ;;      Params:         0       0       0       0       0       0       0       0       0
  6663 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6664 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6665 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6666 ;;Total ram usage:        0 bytes
  6667 ;; Hardware stack levels used: 1
  6668 ;; This function calls:
  6669 ;;		Nothing
  6670 ;; This function is called by:
  6671 ;;		_i2c_start
  6672 ;;		_i2c_stop
  6673 ;;		_i2c_write_bit
  6674 ;;		_i2c_read_bit
  6675 ;; This function uses a non-reentrant model
  6676 ;;
  6677                           
  6678                           	psect	text43
  6679   00596E                     __ptext43:
  6680                           	callstack 0
  6681   00596E                     _I2C_delay:
  6682                           	callstack 25
  6683   00596E  0012               	return		;funcret
  6684   005970                     __end_of_I2C_delay:
  6685                           	callstack 0
  6686                           
  6687 ;; *************** function _serialSendInt *****************
  6688 ;; Defined at:
  6689 ;;		line 82 in file "serial.c"
  6690 ;; Parameters:    Size  Location     Type
  6691 ;;  value           2   29[COMRAM] int 
  6692 ;; Auto vars:     Size  Location     Type
  6693 ;;  buffer         12   31[COMRAM] unsigned char [12]
  6694 ;; Return value:  Size  Location     Type
  6695 ;;                  1    wreg      void 
  6696 ;; Registers used:
  6697 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6698 ;; Tracked objects:
  6699 ;;		On entry : 0/0
  6700 ;;		On exit  : 0/0
  6701 ;;		Unchanged: 0/0
  6702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6703 ;;      Params:         2       0       0       0       0       0       0       0       0
  6704 ;;      Locals:        12       0       0       0       0       0       0       0       0
  6705 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6706 ;;      Totals:        14       0       0       0       0       0       0       0       0
  6707 ;;Total ram usage:       14 bytes
  6708 ;; Hardware stack levels used: 1
  6709 ;; Hardware stack levels required when called: 2
  6710 ;; This function calls:
  6711 ;;		_intToStr
  6712 ;;		_serialSendString
  6713 ;; This function is called by:
  6714 ;;		_eventRead
  6715 ;;		_smLoop
  6716 ;; This function uses a non-reentrant model
  6717 ;;
  6718                           
  6719                           	psect	text44
  6720   005A8E                     __ptext44:
  6721                           	callstack 0
  6722   005A8E                     _serialSendInt:
  6723                           	callstack 27
  6724   005A8E                     
  6725                           ;serial.c: 83:     char buffer[12];;serial.c: 84:     intToStr(value, buffer);
  6726   005A8E  C01E  F00F         	movff	serialSendInt@value,intToStr@value
  6727   005A92  C01F  F010         	movff	serialSendInt@value+1,intToStr@value+1
  6728   005A96  0E20               	movlw	low serialSendInt@buffer
  6729   005A98  6E11               	movwf	intToStr@buffer^0,c
  6730   005A9A  ECE7  F032         	call	_intToStr	;wreg free
  6731   005A9E                     
  6732                           ;serial.c: 85:     serialSendString(buffer);
  6733   005A9E  0E20               	movlw	low serialSendInt@buffer
  6734   005AA0  6E13               	movwf	serialSendString@str^0,c
  6735   005AA2  6A14               	clrf	(serialSendString@str+1)^0,c
  6736   005AA4  EC87  F030         	call	_serialSendString	;wreg free
  6737   005AA8  0012               	return		;funcret
  6738   005AAA                     __end_of_serialSendInt:
  6739                           	callstack 0
  6740                           
  6741 ;; *************** function _serialSendString *****************
  6742 ;; Defined at:
  6743 ;;		line 33 in file "serial.c"
  6744 ;; Parameters:    Size  Location     Type
  6745 ;;  str             2   18[COMRAM] PTR const unsigned char 
  6746 ;;		 -> STR_3(14), STR_2(13), eventRead@envio(7), STR_1(6), 
  6747 ;;		 -> serialSendInt@buffer(12), 
  6748 ;; Auto vars:     Size  Location     Type
  6749 ;;		None
  6750 ;; Return value:  Size  Location     Type
  6751 ;;                  1    wreg      void 
  6752 ;; Registers used:
  6753 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6754 ;; Tracked objects:
  6755 ;;		On entry : 0/0
  6756 ;;		On exit  : 0/0
  6757 ;;		Unchanged: 0/0
  6758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6759 ;;      Params:         2       0       0       0       0       0       0       0       0
  6760 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6761 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6762 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6763 ;;Total ram usage:        2 bytes
  6764 ;; Hardware stack levels used: 1
  6765 ;; Hardware stack levels required when called: 1
  6766 ;; This function calls:
  6767 ;;		_serialSend
  6768 ;; This function is called by:
  6769 ;;		_serialSendInt
  6770 ;;		_eventRead
  6771 ;;		_smLoop
  6772 ;; This function uses a non-reentrant model
  6773 ;;
  6774                           
  6775                           	psect	text45
  6776   00610E                     __ptext45:
  6777                           	callstack 0
  6778   00610E                     _serialSendString:
  6779                           	callstack 28
  6780   00610E                     
  6781                           ;serial.c: 34:     while (*str) {
  6782   00610E  EF9D  F030         	goto	l2942
  6783   006112                     l2938:
  6784                           
  6785                           ;serial.c: 35:         serialSend(*str++);
  6786   006112  C013  FFF6         	movff	serialSendString@str,tblptrl
  6787   006116  C014  FFF7         	movff	serialSendString@str+1,tblptrh
  6788   00611A  6AF8               	clrf	tblptru,c
  6789   00611C  0E07               	movlw	(high __ramtop+-1)
  6790   00611E  64F7               	cpfsgt	tblptrh,c
  6791   006120  D003               	bra	u2647
  6792   006122  0008               	tblrd		*
  6793   006124  50F5               	movf	tablat,w,c
  6794   006126  D005               	bra	u2640
  6795   006128                     u2647:
  6796   006128  CFF6 FFE9          	movff	tblptrl,fsr0l
  6797   00612C  CFF7 FFEA          	movff	tblptrh,fsr0h
  6798   006130  50EF               	movf	indf0,w,c
  6799   006132                     u2640:
  6800   006132  EC17  F02D         	call	_serialSend
  6801   006136  4A13               	infsnz	serialSendString@str^0,f,c
  6802   006138  2A14               	incf	(serialSendString@str+1)^0,f,c
  6803   00613A                     l2942:
  6804                           
  6805                           ;serial.c: 34:     while (*str) {
  6806   00613A  C013  FFF6         	movff	serialSendString@str,tblptrl
  6807   00613E  C014  FFF7         	movff	serialSendString@str+1,tblptrh
  6808   006142  6AF8               	clrf	tblptru,c
  6809   006144  0E07               	movlw	(high __ramtop+-1)
  6810   006146  64F7               	cpfsgt	tblptrh,c
  6811   006148  D003               	bra	u2657
  6812   00614A  0008               	tblrd		*
  6813   00614C  50F5               	movf	tablat,w,c
  6814   00614E  D005               	bra	u2650
  6815   006150                     u2657:
  6816   006150  CFF6 FFE9          	movff	tblptrl,fsr0l
  6817   006154  CFF7 FFEA          	movff	tblptrh,fsr0h
  6818   006158  50EF               	movf	indf0,w,c
  6819   00615A                     u2650:
  6820   00615A  0900               	iorlw	0
  6821   00615C  A4D8               	btfss	status,2,c
  6822   00615E  EFB3  F030         	goto	u2661
  6823   006162  EFB5  F030         	goto	u2660
  6824   006166                     u2661:
  6825   006166  EF89  F030         	goto	l2938
  6826   00616A                     u2660:
  6827   00616A  0012               	return		;funcret
  6828   00616C                     __end_of_serialSendString:
  6829                           	callstack 0
  6830                           
  6831 ;; *************** function _serialSend *****************
  6832 ;; Defined at:
  6833 ;;		line 28 in file "serial.c"
  6834 ;; Parameters:    Size  Location     Type
  6835 ;;  c               1    wreg     unsigned char 
  6836 ;; Auto vars:     Size  Location     Type
  6837 ;;  c               1    0[COMRAM] unsigned char 
  6838 ;; Return value:  Size  Location     Type
  6839 ;;                  1    wreg      void 
  6840 ;; Registers used:
  6841 ;;		wreg
  6842 ;; Tracked objects:
  6843 ;;		On entry : 0/0
  6844 ;;		On exit  : 0/0
  6845 ;;		Unchanged: 0/0
  6846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6847 ;;      Params:         0       0       0       0       0       0       0       0       0
  6848 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6849 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6850 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6851 ;;Total ram usage:        1 bytes
  6852 ;; Hardware stack levels used: 1
  6853 ;; This function calls:
  6854 ;;		Nothing
  6855 ;; This function is called by:
  6856 ;;		_serialSendString
  6857 ;;		_eventRead
  6858 ;;		_smLoop
  6859 ;; This function uses a non-reentrant model
  6860 ;;
  6861                           
  6862                           	psect	text46
  6863   005A2E                     __ptext46:
  6864                           	callstack 0
  6865   005A2E                     _serialSend:
  6866                           	callstack 28
  6867                           
  6868                           ;incstack = 0
  6869                           ;serialSend@c stored from wreg
  6870   005A2E  6E01               	movwf	serialSend@c^0,c
  6871   005A30                     l44:
  6872   005A30  A89E               	btfss	158,4,c	;volatile
  6873   005A32  EF1D  F02D         	goto	u2381
  6874   005A36  EF1F  F02D         	goto	u2380
  6875   005A3A                     u2381:
  6876   005A3A  EF18  F02D         	goto	l44
  6877   005A3E                     u2380:
  6878   005A3E                     
  6879                           ;serial.c: 30:     TXREG = c;
  6880   005A3E  C001  FFAD         	movff	serialSend@c,4013	;volatile
  6881   005A42  0012               	return		;funcret
  6882   005A44                     __end_of_serialSend:
  6883                           	callstack 0
  6884                           
  6885 ;; *************** function _intToStr *****************
  6886 ;; Defined at:
  6887 ;;		line 39 in file "serial.c"
  6888 ;; Parameters:    Size  Location     Type
  6889 ;;  value           2   14[COMRAM] int 
  6890 ;;  buffer          1   16[COMRAM] PTR unsigned char 
  6891 ;;		 -> serialSendInt@buffer(12), 
  6892 ;; Auto vars:     Size  Location     Type
  6893 ;;  temp            1   22[COMRAM] unsigned char 
  6894 ;;  digit           2   18[COMRAM] int 
  6895 ;;  i               2   27[COMRAM] int 
  6896 ;;  end             2   25[COMRAM] int 
  6897 ;;  start           2   23[COMRAM] int 
  6898 ;;  isNegative      2   20[COMRAM] int 
  6899 ;; Return value:  Size  Location     Type
  6900 ;;                  1    wreg      void 
  6901 ;; Registers used:
  6902 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6903 ;; Tracked objects:
  6904 ;;		On entry : 0/0
  6905 ;;		On exit  : 0/0
  6906 ;;		Unchanged: 0/0
  6907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6908 ;;      Params:         3       0       0       0       0       0       0       0       0
  6909 ;;      Locals:        11       0       0       0       0       0       0       0       0
  6910 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6911 ;;      Totals:        15       0       0       0       0       0       0       0       0
  6912 ;;Total ram usage:       15 bytes
  6913 ;; Hardware stack levels used: 1
  6914 ;; Hardware stack levels required when called: 1
  6915 ;; This function calls:
  6916 ;;		___awdiv
  6917 ;;		___awmod
  6918 ;; This function is called by:
  6919 ;;		_serialSendInt
  6920 ;; This function uses a non-reentrant model
  6921 ;;
  6922                           
  6923                           	psect	text47
  6924   0065CE                     __ptext47:
  6925                           	callstack 0
  6926   0065CE                     _intToStr:
  6927                           	callstack 27
  6928   0065CE                     
  6929                           ;serial.c: 40:     int i = 0;
  6930   0065CE  0E00               	movlw	0
  6931   0065D0  6E1D               	movwf	(intToStr@i+1)^0,c
  6932   0065D2  0E00               	movlw	0
  6933   0065D4  6E1C               	movwf	intToStr@i^0,c
  6934                           
  6935                           ;serial.c: 41:     int isNegative = 0;
  6936   0065D6  0E00               	movlw	0
  6937   0065D8  6E16               	movwf	(intToStr@isNegative+1)^0,c
  6938   0065DA  0E00               	movlw	0
  6939   0065DC  6E15               	movwf	intToStr@isNegative^0,c
  6940   0065DE                     
  6941                           ;serial.c: 44:     if (value == 0) {
  6942   0065DE  500F               	movf	intToStr@value^0,w,c
  6943   0065E0  1010               	iorwf	(intToStr@value+1)^0,w,c
  6944   0065E2  A4D8               	btfss	status,2,c
  6945   0065E4  EFF6  F032         	goto	u2671
  6946   0065E8  EFF8  F032         	goto	u2670
  6947   0065EC                     u2671:
  6948   0065EC  EF06  F033         	goto	l2956
  6949   0065F0                     u2670:
  6950   0065F0                     
  6951                           ;serial.c: 45:         buffer[i++] = '0';
  6952   0065F0  5011               	movf	intToStr@buffer^0,w,c
  6953   0065F2  6ED9               	movwf	fsr2l,c
  6954   0065F4  6ADA               	clrf	fsr2h,c
  6955   0065F6  0E30               	movlw	48
  6956   0065F8  6EDF               	movwf	indf2,c
  6957   0065FA  4A1C               	infsnz	intToStr@i^0,f,c
  6958   0065FC  2A1D               	incf	(intToStr@i+1)^0,f,c
  6959   0065FE                     
  6960                           ;serial.c: 46:         buffer[i] = '\0';
  6961   0065FE  5011               	movf	intToStr@buffer^0,w,c
  6962   006600  241C               	addwf	intToStr@i^0,w,c
  6963   006602  6ED9               	movwf	fsr2l,c
  6964   006604  6ADA               	clrf	fsr2h,c
  6965   006606  6ADF               	clrf	indf2,c
  6966   006608  EF91  F033         	goto	l57
  6967   00660C                     l2956:
  6968                           
  6969                           ;serial.c: 51:     if (value < 0) {
  6970   00660C  BE10               	btfsc	(intToStr@value+1)^0,7,c
  6971   00660E  EF0D  F033         	goto	u2680
  6972   006612  EF0B  F033         	goto	u2681
  6973   006616                     u2681:
  6974   006616  EF3C  F033         	goto	l2970
  6975   00661A                     u2680:
  6976   00661A                     
  6977                           ;serial.c: 52:         isNegative = 1;
  6978   00661A  0E00               	movlw	0
  6979   00661C  6E16               	movwf	(intToStr@isNegative+1)^0,c
  6980   00661E  0E01               	movlw	1
  6981   006620  6E15               	movwf	intToStr@isNegative^0,c
  6982   006622                     
  6983                           ;serial.c: 53:         value = -value;
  6984   006622  6C0F               	negf	intToStr@value^0,c
  6985   006624  1E10               	comf	(intToStr@value+1)^0,f,c
  6986   006626  B0D8               	btfsc	status,0,c
  6987   006628  2A10               	incf	(intToStr@value+1)^0,f,c
  6988   00662A  EF3C  F033         	goto	l2970
  6989   00662E                     l2962:
  6990                           
  6991                           ;serial.c: 58:         int digit = value % 10;
  6992   00662E  C00F  F009         	movff	intToStr@value,___awmod@dividend
  6993   006632  C010  F00A         	movff	intToStr@value+1,___awmod@dividend+1
  6994   006636  0E00               	movlw	0
  6995   006638  6E0C               	movwf	(___awmod@divisor+1)^0,c
  6996   00663A  0E0A               	movlw	10
  6997   00663C  6E0B               	movwf	___awmod@divisor^0,c
  6998   00663E  ECB0  F031         	call	___awmod	;wreg free
  6999   006642  C009  F013         	movff	?___awmod,intToStr@digit
  7000   006646  C00A  F014         	movff	?___awmod+1,intToStr@digit+1
  7001   00664A                     
  7002                           ;serial.c: 59:         buffer[i++] = digit + '0';
  7003   00664A  5011               	movf	intToStr@buffer^0,w,c
  7004   00664C  241C               	addwf	intToStr@i^0,w,c
  7005   00664E  6ED9               	movwf	fsr2l,c
  7006   006650  6ADA               	clrf	fsr2h,c
  7007   006652  5013               	movf	intToStr@digit^0,w,c
  7008   006654  0F30               	addlw	48
  7009   006656  6EDF               	movwf	indf2,c
  7010   006658  4A1C               	infsnz	intToStr@i^0,f,c
  7011   00665A  2A1D               	incf	(intToStr@i+1)^0,f,c
  7012   00665C                     
  7013                           ;serial.c: 60:         value = value / 10;
  7014   00665C  C00F  F001         	movff	intToStr@value,___awdiv@dividend
  7015   006660  C010  F002         	movff	intToStr@value+1,___awdiv@dividend+1
  7016   006664  0E00               	movlw	0
  7017   006666  6E04               	movwf	(___awdiv@divisor+1)^0,c
  7018   006668  0E0A               	movlw	10
  7019   00666A  6E03               	movwf	___awdiv@divisor^0,c
  7020   00666C  EC08  F032         	call	___awdiv	;wreg free
  7021   006670  C001  F00F         	movff	?___awdiv,intToStr@value
  7022   006674  C002  F010         	movff	?___awdiv+1,intToStr@value+1
  7023   006678                     l2970:
  7024                           
  7025                           ;serial.c: 57:     while (value != 0) {
  7026   006678  500F               	movf	intToStr@value^0,w,c
  7027   00667A  1010               	iorwf	(intToStr@value+1)^0,w,c
  7028   00667C  A4D8               	btfss	status,2,c
  7029   00667E  EF43  F033         	goto	u2691
  7030   006682  EF45  F033         	goto	u2690
  7031   006686                     u2691:
  7032   006686  EF17  F033         	goto	l2962
  7033   00668A                     u2690:
  7034   00668A                     
  7035                           ;serial.c: 64:     if (isNegative) {
  7036   00668A  5015               	movf	intToStr@isNegative^0,w,c
  7037   00668C  1016               	iorwf	(intToStr@isNegative+1)^0,w,c
  7038   00668E  B4D8               	btfsc	status,2,c
  7039   006690  EF4C  F033         	goto	u2701
  7040   006694  EF4E  F033         	goto	u2700
  7041   006698                     u2701:
  7042   006698  EF56  F033         	goto	l2978
  7043   00669C                     u2700:
  7044   00669C                     
  7045                           ;serial.c: 65:         buffer[i++] = '-';
  7046   00669C  5011               	movf	intToStr@buffer^0,w,c
  7047   00669E  241C               	addwf	intToStr@i^0,w,c
  7048   0066A0  6ED9               	movwf	fsr2l,c
  7049   0066A2  6ADA               	clrf	fsr2h,c
  7050   0066A4  0E2D               	movlw	45
  7051   0066A6  6EDF               	movwf	indf2,c
  7052   0066A8  4A1C               	infsnz	intToStr@i^0,f,c
  7053   0066AA  2A1D               	incf	(intToStr@i+1)^0,f,c
  7054   0066AC                     l2978:
  7055                           
  7056                           ;serial.c: 68:     buffer[i] = '\0';
  7057   0066AC  5011               	movf	intToStr@buffer^0,w,c
  7058   0066AE  241C               	addwf	intToStr@i^0,w,c
  7059   0066B0  6ED9               	movwf	fsr2l,c
  7060   0066B2  6ADA               	clrf	fsr2h,c
  7061   0066B4  6ADF               	clrf	indf2,c
  7062   0066B6                     
  7063                           ;serial.c: 71:     int start = 0;
  7064   0066B6  0E00               	movlw	0
  7065   0066B8  6E19               	movwf	(intToStr@start+1)^0,c
  7066   0066BA  0E00               	movlw	0
  7067   0066BC  6E18               	movwf	intToStr@start^0,c
  7068   0066BE                     
  7069                           ;serial.c: 72:     int end = i - 1;
  7070   0066BE  0EFF               	movlw	255
  7071   0066C0  241C               	addwf	intToStr@i^0,w,c
  7072   0066C2  6E1A               	movwf	intToStr@end^0,c
  7073   0066C4  0EFF               	movlw	255
  7074   0066C6  201D               	addwfc	(intToStr@i+1)^0,w,c
  7075   0066C8  6E1B               	movwf	(intToStr@end+1)^0,c
  7076                           
  7077                           ;serial.c: 73:     while (start < end) {
  7078   0066CA  EF82  F033         	goto	l2994
  7079   0066CE                     l2984:
  7080                           
  7081                           ;serial.c: 74:         char temp = buffer[start];
  7082   0066CE  5011               	movf	intToStr@buffer^0,w,c
  7083   0066D0  2418               	addwf	intToStr@start^0,w,c
  7084   0066D2  6ED9               	movwf	fsr2l,c
  7085   0066D4  6ADA               	clrf	fsr2h,c
  7086   0066D6  50DF               	movf	indf2,w,c
  7087   0066D8  6E17               	movwf	intToStr@temp^0,c
  7088   0066DA                     
  7089                           ;serial.c: 75:         buffer[start] = buffer[end];
  7090   0066DA  5011               	movf	intToStr@buffer^0,w,c
  7091   0066DC  241A               	addwf	intToStr@end^0,w,c
  7092   0066DE  6ED9               	movwf	fsr2l,c
  7093   0066E0  6ADA               	clrf	fsr2h,c
  7094   0066E2  5011               	movf	intToStr@buffer^0,w,c
  7095   0066E4  2418               	addwf	intToStr@start^0,w,c
  7096   0066E6  6EE1               	movwf	fsr1l,c
  7097   0066E8  6AE2               	clrf	fsr1h,c
  7098   0066EA  CFDF FFE7          	movff	indf2,indf1
  7099   0066EE                     
  7100                           ;serial.c: 76:         buffer[end] = temp;
  7101   0066EE  5011               	movf	intToStr@buffer^0,w,c
  7102   0066F0  241A               	addwf	intToStr@end^0,w,c
  7103   0066F2  6ED9               	movwf	fsr2l,c
  7104   0066F4  6ADA               	clrf	fsr2h,c
  7105   0066F6  C017  FFDF         	movff	intToStr@temp,indf2
  7106   0066FA                     
  7107                           ;serial.c: 77:         start++;
  7108   0066FA  4A18               	infsnz	intToStr@start^0,f,c
  7109   0066FC  2A19               	incf	(intToStr@start+1)^0,f,c
  7110   0066FE                     
  7111                           ;serial.c: 78:         end--;
  7112   0066FE  061A               	decf	intToStr@end^0,f,c
  7113   006700  A0D8               	btfss	status,0,c
  7114   006702  061B               	decf	(intToStr@end+1)^0,f,c
  7115   006704                     l2994:
  7116                           
  7117                           ;serial.c: 73:     while (start < end) {
  7118   006704  501A               	movf	intToStr@end^0,w,c
  7119   006706  5C18               	subwf	intToStr@start^0,w,c
  7120   006708  5019               	movf	(intToStr@start+1)^0,w,c
  7121   00670A  0A80               	xorlw	128
  7122   00670C  6E12               	movwf	??_intToStr^0,c
  7123   00670E  501B               	movf	(intToStr@end+1)^0,w,c
  7124   006710  0A80               	xorlw	128
  7125   006712  5812               	subwfb	??_intToStr^0,w,c
  7126   006714  A0D8               	btfss	status,0,c
  7127   006716  EF8F  F033         	goto	u2711
  7128   00671A  EF91  F033         	goto	u2710
  7129   00671E                     u2711:
  7130   00671E  EF67  F033         	goto	l2984
  7131   006722                     u2710:
  7132   006722                     l57:
  7133   006722  0012               	return		;funcret
  7134   006724                     __end_of_intToStr:
  7135                           	callstack 0
  7136                           
  7137 ;; *************** function ___awmod *****************
  7138 ;; Defined at:
  7139 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
  7140 ;; Parameters:    Size  Location     Type
  7141 ;;  dividend        2    8[COMRAM] int 
  7142 ;;  divisor         2   10[COMRAM] int 
  7143 ;; Auto vars:     Size  Location     Type
  7144 ;;  sign            1   13[COMRAM] unsigned char 
  7145 ;;  counter         1   12[COMRAM] unsigned char 
  7146 ;; Return value:  Size  Location     Type
  7147 ;;                  2    8[COMRAM] int 
  7148 ;; Registers used:
  7149 ;;		wreg, status,2, status,0
  7150 ;; Tracked objects:
  7151 ;;		On entry : 0/0
  7152 ;;		On exit  : 0/0
  7153 ;;		Unchanged: 0/0
  7154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7155 ;;      Params:         4       0       0       0       0       0       0       0       0
  7156 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7157 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7158 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7159 ;;Total ram usage:        6 bytes
  7160 ;; Hardware stack levels used: 1
  7161 ;; This function calls:
  7162 ;;		Nothing
  7163 ;; This function is called by:
  7164 ;;		_intToStr
  7165 ;;		_lcdInt
  7166 ;;		_outputPrint
  7167 ;;		_dec2bcd
  7168 ;; This function uses a non-reentrant model
  7169 ;;
  7170                           
  7171                           	psect	text48
  7172   006360                     __ptext48:
  7173                           	callstack 0
  7174   006360                     ___awmod:
  7175                           	callstack 27
  7176   006360  0E00               	movlw	0
  7177   006362  6E0E               	movwf	___awmod@sign^0,c
  7178   006364  BE0A               	btfsc	(___awmod@dividend+1)^0,7,c
  7179   006366  EFB9  F031         	goto	u2580
  7180   00636A  EFB7  F031         	goto	u2581
  7181   00636E                     u2581:
  7182   00636E  EFBF  F031         	goto	l2908
  7183   006372                     u2580:
  7184   006372  6C09               	negf	___awmod@dividend^0,c
  7185   006374  1E0A               	comf	(___awmod@dividend+1)^0,f,c
  7186   006376  B0D8               	btfsc	status,0,c
  7187   006378  2A0A               	incf	(___awmod@dividend+1)^0,f,c
  7188   00637A  0E01               	movlw	1
  7189   00637C  6E0E               	movwf	___awmod@sign^0,c
  7190   00637E                     l2908:
  7191   00637E  BE0C               	btfsc	(___awmod@divisor+1)^0,7,c
  7192   006380  EFC6  F031         	goto	u2590
  7193   006384  EFC4  F031         	goto	u2591
  7194   006388                     u2591:
  7195   006388  EFCA  F031         	goto	l2912
  7196   00638C                     u2590:
  7197   00638C  6C0B               	negf	___awmod@divisor^0,c
  7198   00638E  1E0C               	comf	(___awmod@divisor+1)^0,f,c
  7199   006390  B0D8               	btfsc	status,0,c
  7200   006392  2A0C               	incf	(___awmod@divisor+1)^0,f,c
  7201   006394                     l2912:
  7202   006394  500B               	movf	___awmod@divisor^0,w,c
  7203   006396  100C               	iorwf	(___awmod@divisor+1)^0,w,c
  7204   006398  B4D8               	btfsc	status,2,c
  7205   00639A  EFD1  F031         	goto	u2601
  7206   00639E  EFD3  F031         	goto	u2600
  7207   0063A2                     u2601:
  7208   0063A2  EFF7  F031         	goto	l2928
  7209   0063A6                     u2600:
  7210   0063A6  0E01               	movlw	1
  7211   0063A8  6E0D               	movwf	___awmod@counter^0,c
  7212   0063AA  EFDB  F031         	goto	l2918
  7213   0063AE                     l2916:
  7214   0063AE  90D8               	bcf	status,0,c
  7215   0063B0  360B               	rlcf	___awmod@divisor^0,f,c
  7216   0063B2  360C               	rlcf	(___awmod@divisor+1)^0,f,c
  7217   0063B4  2A0D               	incf	___awmod@counter^0,f,c
  7218   0063B6                     l2918:
  7219   0063B6  AE0C               	btfss	(___awmod@divisor+1)^0,7,c
  7220   0063B8  EFE0  F031         	goto	u2611
  7221   0063BC  EFE2  F031         	goto	u2610
  7222   0063C0                     u2611:
  7223   0063C0  EFD7  F031         	goto	l2916
  7224   0063C4                     u2610:
  7225   0063C4                     l2920:
  7226   0063C4  500B               	movf	___awmod@divisor^0,w,c
  7227   0063C6  5C09               	subwf	___awmod@dividend^0,w,c
  7228   0063C8  500C               	movf	(___awmod@divisor+1)^0,w,c
  7229   0063CA  580A               	subwfb	(___awmod@dividend+1)^0,w,c
  7230   0063CC  A0D8               	btfss	status,0,c
  7231   0063CE  EFEB  F031         	goto	u2621
  7232   0063D2  EFED  F031         	goto	u2620
  7233   0063D6                     u2621:
  7234   0063D6  EFF1  F031         	goto	l2924
  7235   0063DA                     u2620:
  7236   0063DA  500B               	movf	___awmod@divisor^0,w,c
  7237   0063DC  5E09               	subwf	___awmod@dividend^0,f,c
  7238   0063DE  500C               	movf	(___awmod@divisor+1)^0,w,c
  7239   0063E0  5A0A               	subwfb	(___awmod@dividend+1)^0,f,c
  7240   0063E2                     l2924:
  7241   0063E2  90D8               	bcf	status,0,c
  7242   0063E4  320C               	rrcf	(___awmod@divisor+1)^0,f,c
  7243   0063E6  320B               	rrcf	___awmod@divisor^0,f,c
  7244   0063E8  2E0D               	decfsz	___awmod@counter^0,f,c
  7245   0063EA  EFE2  F031         	goto	l2920
  7246   0063EE                     l2928:
  7247   0063EE  500E               	movf	___awmod@sign^0,w,c
  7248   0063F0  B4D8               	btfsc	status,2,c
  7249   0063F2  EFFD  F031         	goto	u2631
  7250   0063F6  EFFF  F031         	goto	u2630
  7251   0063FA                     u2631:
  7252   0063FA  EF03  F032         	goto	l2932
  7253   0063FE                     u2630:
  7254   0063FE  6C09               	negf	___awmod@dividend^0,c
  7255   006400  1E0A               	comf	(___awmod@dividend+1)^0,f,c
  7256   006402  B0D8               	btfsc	status,0,c
  7257   006404  2A0A               	incf	(___awmod@dividend+1)^0,f,c
  7258   006406                     l2932:
  7259   006406  C009  F009         	movff	___awmod@dividend,?___awmod
  7260   00640A  C00A  F00A         	movff	___awmod@dividend+1,?___awmod+1
  7261   00640E  0012               	return		;funcret
  7262   006410                     __end_of___awmod:
  7263                           	callstack 0
  7264                           
  7265 ;; *************** function ___awdiv *****************
  7266 ;; Defined at:
  7267 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awdiv.c"
  7268 ;; Parameters:    Size  Location     Type
  7269 ;;  dividend        2    0[COMRAM] int 
  7270 ;;  divisor         2    2[COMRAM] int 
  7271 ;; Auto vars:     Size  Location     Type
  7272 ;;  quotient        2    6[COMRAM] int 
  7273 ;;  sign            1    5[COMRAM] unsigned char 
  7274 ;;  counter         1    4[COMRAM] unsigned char 
  7275 ;; Return value:  Size  Location     Type
  7276 ;;                  2    0[COMRAM] int 
  7277 ;; Registers used:
  7278 ;;		wreg, status,2, status,0
  7279 ;; Tracked objects:
  7280 ;;		On entry : 0/0
  7281 ;;		On exit  : 0/0
  7282 ;;		Unchanged: 0/0
  7283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7284 ;;      Params:         4       0       0       0       0       0       0       0       0
  7285 ;;      Locals:         4       0       0       0       0       0       0       0       0
  7286 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7287 ;;      Totals:         8       0       0       0       0       0       0       0       0
  7288 ;;Total ram usage:        8 bytes
  7289 ;; Hardware stack levels used: 1
  7290 ;; This function calls:
  7291 ;;		Nothing
  7292 ;; This function is called by:
  7293 ;;		_intToStr
  7294 ;;		_lcdInt
  7295 ;;		_outputPrint
  7296 ;;		_dec2bcd
  7297 ;;		_bcd2dec
  7298 ;; This function uses a non-reentrant model
  7299 ;;
  7300                           
  7301                           	psect	text49
  7302   006410                     __ptext49:
  7303                           	callstack 0
  7304   006410                     ___awdiv:
  7305                           	callstack 27
  7306   006410  0E00               	movlw	0
  7307   006412  6E06               	movwf	___awdiv@sign^0,c
  7308   006414  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  7309   006416  EF11  F032         	goto	u2520
  7310   00641A  EF0F  F032         	goto	u2521
  7311   00641E                     u2521:
  7312   00641E  EF17  F032         	goto	l2864
  7313   006422                     u2520:
  7314   006422  6C03               	negf	___awdiv@divisor^0,c
  7315   006424  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  7316   006426  B0D8               	btfsc	status,0,c
  7317   006428  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  7318   00642A  0E01               	movlw	1
  7319   00642C  6E06               	movwf	___awdiv@sign^0,c
  7320   00642E                     l2864:
  7321   00642E  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  7322   006430  EF1E  F032         	goto	u2530
  7323   006434  EF1C  F032         	goto	u2531
  7324   006438                     u2531:
  7325   006438  EF24  F032         	goto	l2870
  7326   00643C                     u2530:
  7327   00643C  6C01               	negf	___awdiv@dividend^0,c
  7328   00643E  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  7329   006440  B0D8               	btfsc	status,0,c
  7330   006442  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  7331   006444  0E01               	movlw	1
  7332   006446  1A06               	xorwf	___awdiv@sign^0,f,c
  7333   006448                     l2870:
  7334   006448  0E00               	movlw	0
  7335   00644A  6E08               	movwf	(___awdiv@quotient+1)^0,c
  7336   00644C  0E00               	movlw	0
  7337   00644E  6E07               	movwf	___awdiv@quotient^0,c
  7338   006450  5003               	movf	___awdiv@divisor^0,w,c
  7339   006452  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  7340   006454  B4D8               	btfsc	status,2,c
  7341   006456  EF2F  F032         	goto	u2541
  7342   00645A  EF31  F032         	goto	u2540
  7343   00645E                     u2541:
  7344   00645E  EF59  F032         	goto	l2892
  7345   006462                     u2540:
  7346   006462  0E01               	movlw	1
  7347   006464  6E05               	movwf	___awdiv@counter^0,c
  7348   006466  EF39  F032         	goto	l2878
  7349   00646A                     l2876:
  7350   00646A  90D8               	bcf	status,0,c
  7351   00646C  3603               	rlcf	___awdiv@divisor^0,f,c
  7352   00646E  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  7353   006470  2A05               	incf	___awdiv@counter^0,f,c
  7354   006472                     l2878:
  7355   006472  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  7356   006474  EF3E  F032         	goto	u2551
  7357   006478  EF40  F032         	goto	u2550
  7358   00647C                     u2551:
  7359   00647C  EF35  F032         	goto	l2876
  7360   006480                     u2550:
  7361   006480                     l2880:
  7362   006480  90D8               	bcf	status,0,c
  7363   006482  3607               	rlcf	___awdiv@quotient^0,f,c
  7364   006484  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  7365   006486  5003               	movf	___awdiv@divisor^0,w,c
  7366   006488  5C01               	subwf	___awdiv@dividend^0,w,c
  7367   00648A  5004               	movf	(___awdiv@divisor+1)^0,w,c
  7368   00648C  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  7369   00648E  A0D8               	btfss	status,0,c
  7370   006490  EF4C  F032         	goto	u2561
  7371   006494  EF4E  F032         	goto	u2560
  7372   006498                     u2561:
  7373   006498  EF53  F032         	goto	l2888
  7374   00649C                     u2560:
  7375   00649C  5003               	movf	___awdiv@divisor^0,w,c
  7376   00649E  5E01               	subwf	___awdiv@dividend^0,f,c
  7377   0064A0  5004               	movf	(___awdiv@divisor+1)^0,w,c
  7378   0064A2  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  7379   0064A4  8007               	bsf	___awdiv@quotient^0,0,c
  7380   0064A6                     l2888:
  7381   0064A6  90D8               	bcf	status,0,c
  7382   0064A8  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  7383   0064AA  3203               	rrcf	___awdiv@divisor^0,f,c
  7384   0064AC  2E05               	decfsz	___awdiv@counter^0,f,c
  7385   0064AE  EF40  F032         	goto	l2880
  7386   0064B2                     l2892:
  7387   0064B2  5006               	movf	___awdiv@sign^0,w,c
  7388   0064B4  B4D8               	btfsc	status,2,c
  7389   0064B6  EF5F  F032         	goto	u2571
  7390   0064BA  EF61  F032         	goto	u2570
  7391   0064BE                     u2571:
  7392   0064BE  EF65  F032         	goto	l2896
  7393   0064C2                     u2570:
  7394   0064C2  6C07               	negf	___awdiv@quotient^0,c
  7395   0064C4  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  7396   0064C6  B0D8               	btfsc	status,0,c
  7397   0064C8  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  7398   0064CA                     l2896:
  7399   0064CA  C007  F001         	movff	___awdiv@quotient,?___awdiv
  7400   0064CE  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  7401   0064D2  0012               	return		;funcret
  7402   0064D4                     __end_of___awdiv:
  7403                           	callstack 0
  7404                           
  7405 ;; *************** function _serialRead *****************
  7406 ;; Defined at:
  7407 ;;		line 88 in file "serial.c"
  7408 ;; Parameters:    Size  Location     Type
  7409 ;;		None
  7410 ;; Auto vars:     Size  Location     Type
  7411 ;;  resp            1    0[COMRAM] unsigned char 
  7412 ;; Return value:  Size  Location     Type
  7413 ;;                  1    wreg      unsigned char 
  7414 ;; Registers used:
  7415 ;;		wreg, status,2, status,0
  7416 ;; Tracked objects:
  7417 ;;		On entry : 0/0
  7418 ;;		On exit  : 0/0
  7419 ;;		Unchanged: 0/0
  7420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7421 ;;      Params:         0       0       0       0       0       0       0       0       0
  7422 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7423 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7424 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7425 ;;Total ram usage:        1 bytes
  7426 ;; Hardware stack levels used: 1
  7427 ;; This function calls:
  7428 ;;		Nothing
  7429 ;; This function is called by:
  7430 ;;		_eventRead
  7431 ;; This function uses a non-reentrant model
  7432 ;;
  7433                           
  7434                           	psect	text50
  7435   005C72                     __ptext50:
  7436                           	callstack 0
  7437   005C72                     _serialRead:
  7438                           	callstack 28
  7439   005C72                     
  7440                           ;serial.c: 89:     char resp = 0;
  7441   005C72  0E00               	movlw	0
  7442   005C74  6E01               	movwf	serialRead@resp^0,c
  7443   005C76                     
  7444                           ;serial.c: 91:     if (((RCSTA) & (1<<1)))
  7445   005C76  A2AB               	btfss	171,1,c	;volatile
  7446   005C78  EF40  F02E         	goto	u2741
  7447   005C7C  EF42  F02E         	goto	u2740
  7448   005C80                     u2741:
  7449   005C80  EF44  F02E         	goto	l3042
  7450   005C84                     u2740:
  7451   005C84                     
  7452                           ;serial.c: 92:     {;serial.c: 93:         ((RCSTA) &= ~(1<<4));
  7453   005C84  98AB               	bcf	171,4,c	;volatile
  7454                           
  7455                           ;serial.c: 94:         ((RCSTA) |= (1<<4));
  7456   005C86  88AB               	bsf	171,4,c	;volatile
  7457   005C88                     l3042:
  7458                           
  7459                           ;serial.c: 97:     if (((PIR1) & (1<<5)))
  7460   005C88  AA9E               	btfss	158,5,c	;volatile
  7461   005C8A  EF49  F02E         	goto	u2751
  7462   005C8E  EF4B  F02E         	goto	u2750
  7463   005C92                     u2751:
  7464   005C92  EF4D  F02E         	goto	l3046
  7465   005C96                     u2750:
  7466   005C96                     
  7467                           ;serial.c: 98:     {;serial.c: 99:         resp = RCREG;
  7468   005C96  CFAE F001          	movff	4014,serialRead@resp	;volatile
  7469   005C9A                     l3046:
  7470                           
  7471                           ;serial.c: 101:     return resp;
  7472   005C9A  5001               	movf	serialRead@resp^0,w,c
  7473   005C9C  0012               	return		;funcret
  7474   005C9E                     __end_of_serialRead:
  7475                           	callstack 0
  7476                           
  7477 ;; *************** function _pow10 *****************
  7478 ;; Defined at:
  7479 ;;		line 9 in file "event.c"
  7480 ;; Parameters:    Size  Location     Type
  7481 ;;  expoent         2    6[COMRAM] int 
  7482 ;; Auto vars:     Size  Location     Type
  7483 ;;  i               2    9[COMRAM] int 
  7484 ;;  result          2   11[COMRAM] int 
  7485 ;; Return value:  Size  Location     Type
  7486 ;;                  2    6[COMRAM] int 
  7487 ;; Registers used:
  7488 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7489 ;; Tracked objects:
  7490 ;;		On entry : 0/0
  7491 ;;		On exit  : 0/0
  7492 ;;		Unchanged: 0/0
  7493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7494 ;;      Params:         2       0       0       0       0       0       0       0       0
  7495 ;;      Locals:         4       0       0       0       0       0       0       0       0
  7496 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7497 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7498 ;;Total ram usage:        7 bytes
  7499 ;; Hardware stack levels used: 1
  7500 ;; Hardware stack levels required when called: 1
  7501 ;; This function calls:
  7502 ;;		___wmul
  7503 ;; This function is called by:
  7504 ;;		_eventRead
  7505 ;; This function uses a non-reentrant model
  7506 ;;
  7507                           
  7508                           	psect	text51
  7509   0060B2                     __ptext51:
  7510                           	callstack 0
  7511   0060B2                     _pow10:
  7512                           	callstack 27
  7513   0060B2                     
  7514                           ;event.c: 10:     int result = 1;
  7515   0060B2  0E00               	movlw	0
  7516   0060B4  6E0D               	movwf	(pow10@result+1)^0,c
  7517   0060B6  0E01               	movlw	1
  7518   0060B8  6E0C               	movwf	pow10@result^0,c
  7519                           
  7520                           ;event.c: 11:     for (int i = 0; i < expoent; i++) {
  7521   0060BA  0E00               	movlw	0
  7522   0060BC  6E0B               	movwf	(pow10@i+1)^0,c
  7523   0060BE  0E00               	movlw	0
  7524   0060C0  6E0A               	movwf	pow10@i^0,c
  7525   0060C2  EF73  F030         	goto	l3096
  7526   0060C6                     l3092:
  7527                           
  7528                           ;event.c: 12:         result *= 10;
  7529   0060C6  C00C  F001         	movff	pow10@result,___wmul@multiplier
  7530   0060CA  C00D  F002         	movff	pow10@result+1,___wmul@multiplier+1
  7531   0060CE  0E00               	movlw	0
  7532   0060D0  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  7533   0060D2  0E0A               	movlw	10
  7534   0060D4  6E03               	movwf	___wmul@multiplicand^0,c
  7535   0060D6  EC74  F02D         	call	___wmul	;wreg free
  7536   0060DA  C001  F00C         	movff	?___wmul,pow10@result
  7537   0060DE  C002  F00D         	movff	?___wmul+1,pow10@result+1
  7538   0060E2                     
  7539                           ;event.c: 13:     }
  7540   0060E2  4A0A               	infsnz	pow10@i^0,f,c
  7541   0060E4  2A0B               	incf	(pow10@i+1)^0,f,c
  7542   0060E6                     l3096:
  7543   0060E6  5007               	movf	pow10@expoent^0,w,c
  7544   0060E8  5C0A               	subwf	pow10@i^0,w,c
  7545   0060EA  500B               	movf	(pow10@i+1)^0,w,c
  7546   0060EC  0A80               	xorlw	128
  7547   0060EE  6E09               	movwf	??_pow10^0,c
  7548   0060F0  5008               	movf	(pow10@expoent+1)^0,w,c
  7549   0060F2  0A80               	xorlw	128
  7550   0060F4  5809               	subwfb	??_pow10^0,w,c
  7551   0060F6  A0D8               	btfss	status,0,c
  7552   0060F8  EF80  F030         	goto	u2801
  7553   0060FC  EF82  F030         	goto	u2800
  7554   006100                     u2801:
  7555   006100  EF63  F030         	goto	l3092
  7556   006104                     u2800:
  7557   006104                     
  7558                           ;event.c: 14:     return result;
  7559   006104  C00C  F007         	movff	pow10@result,?_pow10
  7560   006108  C00D  F008         	movff	pow10@result+1,?_pow10+1
  7561   00610C  0012               	return		;funcret
  7562   00610E                     __end_of_pow10:
  7563                           	callstack 0
  7564                           
  7565 ;; *************** function ___wmul *****************
  7566 ;; Defined at:
  7567 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
  7568 ;; Parameters:    Size  Location     Type
  7569 ;;  multiplier      2    0[COMRAM] unsigned int 
  7570 ;;  multiplicand    2    2[COMRAM] unsigned int 
  7571 ;; Auto vars:     Size  Location     Type
  7572 ;;  product         2    4[COMRAM] unsigned int 
  7573 ;; Return value:  Size  Location     Type
  7574 ;;                  2    0[COMRAM] unsigned int 
  7575 ;; Registers used:
  7576 ;;		wreg, status,2, status,0, prodl, prodh
  7577 ;; Tracked objects:
  7578 ;;		On entry : 0/0
  7579 ;;		On exit  : 0/0
  7580 ;;		Unchanged: 0/0
  7581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7582 ;;      Params:         4       0       0       0       0       0       0       0       0
  7583 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7584 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7585 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7586 ;;Total ram usage:        6 bytes
  7587 ;; Hardware stack levels used: 1
  7588 ;; This function calls:
  7589 ;;		Nothing
  7590 ;; This function is called by:
  7591 ;;		_pow10
  7592 ;;		_eventRead
  7593 ;;		_bcd2dec
  7594 ;; This function uses a non-reentrant model
  7595 ;;
  7596                           
  7597                           	psect	text52
  7598   005AE8                     __ptext52:
  7599                           	callstack 0
  7600   005AE8                     ___wmul:
  7601                           	callstack 27
  7602   005AE8  5001               	movf	___wmul@multiplier^0,w,c
  7603   005AEA  0203               	mulwf	___wmul@multiplicand^0,c
  7604   005AEC  CFF3 F005          	movff	prodl,___wmul@product
  7605   005AF0  CFF4 F006          	movff	prodh,___wmul@product+1
  7606   005AF4  5001               	movf	___wmul@multiplier^0,w,c
  7607   005AF6  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  7608   005AF8  50F3               	movf	243,w,c
  7609   005AFA  2606               	addwf	(___wmul@product+1)^0,f,c
  7610   005AFC  5002               	movf	(___wmul@multiplier+1)^0,w,c
  7611   005AFE  0203               	mulwf	___wmul@multiplicand^0,c
  7612   005B00  50F3               	movf	243,w,c
  7613   005B02  2606               	addwf	(___wmul@product+1)^0,f,c
  7614   005B04  C005  F001         	movff	___wmul@product,?___wmul
  7615   005B08  C006  F002         	movff	___wmul@product+1,?___wmul+1
  7616   005B0C  0012               	return		;funcret
  7617   005B0E                     __end_of___wmul:
  7618                           	callstack 0
  7619                           
  7620 ;; *************** function _kpRead *****************
  7621 ;; Defined at:
  7622 ;;		line 21 in file "keypad.c"
  7623 ;; Parameters:    Size  Location     Type
  7624 ;;		None
  7625 ;; Auto vars:     Size  Location     Type
  7626 ;;		None
  7627 ;; Return value:  Size  Location     Type
  7628 ;;                  1    wreg      unsigned char 
  7629 ;; Registers used:
  7630 ;;		wreg, status,2
  7631 ;; Tracked objects:
  7632 ;;		On entry : 0/0
  7633 ;;		On exit  : 0/0
  7634 ;;		Unchanged: 0/0
  7635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7636 ;;      Params:         0       0       0       0       0       0       0       0       0
  7637 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7638 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7639 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7640 ;;Total ram usage:        0 bytes
  7641 ;; Hardware stack levels used: 1
  7642 ;; This function calls:
  7643 ;;		Nothing
  7644 ;; This function is called by:
  7645 ;;		_eventRead
  7646 ;; This function uses a non-reentrant model
  7647 ;;
  7648                           
  7649                           	psect	text53
  7650   005970                     __ptext53:
  7651                           	callstack 0
  7652   005970                     _kpRead:
  7653                           	callstack 28
  7654   005970                     
  7655                           ;keypad.c: 22:     return tecla;
  7656   005970  505E               	movf	_tecla^0,w,c
  7657   005972  0012               	return		;funcret
  7658   005974                     __end_of_kpRead:
  7659                           	callstack 0
  7660                           
  7661 ;; *************** function _serialInit *****************
  7662 ;; Defined at:
  7663 ;;		line 106 in file "serial.c"
  7664 ;; Parameters:    Size  Location     Type
  7665 ;;		None
  7666 ;; Auto vars:     Size  Location     Type
  7667 ;;		None
  7668 ;; Return value:  Size  Location     Type
  7669 ;;                  1    wreg      void 
  7670 ;; Registers used:
  7671 ;;		wreg, status,2, status,0
  7672 ;; Tracked objects:
  7673 ;;		On entry : 0/0
  7674 ;;		On exit  : 0/0
  7675 ;;		Unchanged: 0/0
  7676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7677 ;;      Params:         0       0       0       0       0       0       0       0       0
  7678 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7679 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7680 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7681 ;;Total ram usage:        0 bytes
  7682 ;; Hardware stack levels used: 1
  7683 ;; This function calls:
  7684 ;;		Nothing
  7685 ;; This function is called by:
  7686 ;;		_main
  7687 ;; This function uses a non-reentrant model
  7688 ;;
  7689                           
  7690                           	psect	text54
  7691   005A74                     __ptext54:
  7692                           	callstack 0
  7693   005A74                     _serialInit:
  7694                           	callstack 30
  7695   005A74                     
  7696                           ;serial.c: 107:     TXSTA = 0b00101100;
  7697   005A74  0E2C               	movlw	44
  7698   005A76  6EAC               	movwf	172,c	;volatile
  7699                           
  7700                           ;serial.c: 108:     RCSTA = 0b10010000;
  7701   005A78  0E90               	movlw	144
  7702   005A7A  6EAB               	movwf	171,c	;volatile
  7703                           
  7704                           ;serial.c: 109:     BAUDCON = 0b00001000;
  7705   005A7C  0E08               	movlw	8
  7706   005A7E  6EB8               	movwf	184,c	;volatile
  7707                           
  7708                           ;serial.c: 110:     SPBRGH = 0b00000000;
  7709   005A80  0E00               	movlw	0
  7710   005A82  6EB0               	movwf	176,c	;volatile
  7711                           
  7712                           ;serial.c: 111:     SPBRG = 0b00100010;
  7713   005A84  0E22               	movlw	34
  7714   005A86  6EAF               	movwf	175,c	;volatile
  7715   005A88                     
  7716                           ;serial.c: 112:     ((TRISC) |= (1<<6));
  7717   005A88  8C94               	bsf	148,6,c	;volatile
  7718   005A8A                     
  7719                           ;serial.c: 113:     ((TRISC) |= (1<<7));
  7720   005A8A  8E94               	bsf	148,7,c	;volatile
  7721   005A8C  0012               	return		;funcret
  7722   005A8E                     __end_of_serialInit:
  7723                           	callstack 0
  7724                           
  7725 ;; *************** function _outputInit *****************
  7726 ;; Defined at:
  7727 ;;		line 19 in file "output.c"
  7728 ;; Parameters:    Size  Location     Type
  7729 ;;		None
  7730 ;; Auto vars:     Size  Location     Type
  7731 ;;		None
  7732 ;; Return value:  Size  Location     Type
  7733 ;;                  1    wreg      void 
  7734 ;; Registers used:
  7735 ;;		wreg, status,2, status,0, cstack
  7736 ;; Tracked objects:
  7737 ;;		On entry : 0/0
  7738 ;;		On exit  : 0/0
  7739 ;;		Unchanged: 0/0
  7740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7741 ;;      Params:         0       0       0       0       0       0       0       0       0
  7742 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7743 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7744 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7745 ;;Total ram usage:        0 bytes
  7746 ;; Hardware stack levels used: 1
  7747 ;; Hardware stack levels required when called: 4
  7748 ;; This function calls:
  7749 ;;		_lcdInit
  7750 ;; This function is called by:
  7751 ;;		_main
  7752 ;; This function uses a non-reentrant model
  7753 ;;
  7754                           
  7755                           	psect	text55
  7756   00597E                     __ptext55:
  7757                           	callstack 0
  7758   00597E                     _outputInit:
  7759                           	callstack 26
  7760   00597E                     
  7761                           ;output.c: 20:     lcdInit();
  7762   00597E  EC22  F031         	call	_lcdInit	;wreg free
  7763   005982  0012               	return		;funcret
  7764   005984                     __end_of_outputInit:
  7765                           	callstack 0
  7766                           
  7767 ;; *************** function _lcdInit *****************
  7768 ;; Defined at:
  7769 ;;		line 110 in file "lcd.c"
  7770 ;; Parameters:    Size  Location     Type
  7771 ;;		None
  7772 ;; Auto vars:     Size  Location     Type
  7773 ;;  i               1    3[COMRAM] unsigned char 
  7774 ;; Return value:  Size  Location     Type
  7775 ;;                  1    wreg      void 
  7776 ;; Registers used:
  7777 ;;		wreg, status,2, status,0, cstack
  7778 ;; Tracked objects:
  7779 ;;		On entry : 0/0
  7780 ;;		On exit  : 0/0
  7781 ;;		Unchanged: 0/0
  7782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7783 ;;      Params:         0       0       0       0       0       0       0       0       0
  7784 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7785 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7786 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7787 ;;Total ram usage:        1 bytes
  7788 ;; Hardware stack levels used: 1
  7789 ;; Hardware stack levels required when called: 3
  7790 ;; This function calls:
  7791 ;;		_Delay2ms
  7792 ;;		_lcdCommand
  7793 ;;		_lcdCommand4bits
  7794 ;; This function is called by:
  7795 ;;		_main
  7796 ;;		_outputInit
  7797 ;; This function uses a non-reentrant model
  7798 ;;
  7799                           
  7800                           	psect	text56
  7801   006244                     __ptext56:
  7802                           	callstack 0
  7803   006244                     _lcdInit:
  7804                           	callstack 26
  7805   006244                     
  7806                           ;lcd.c: 111:     unsigned char i;;lcd.c: 113:     ((TRISD) &= ~(1<<(0)));
  7807   006244  9095               	bcf	149,0,c	;volatile
  7808                           
  7809                           ;lcd.c: 114:     ((TRISD) &= ~(1<<(7)));
  7810   006246  9E95               	bcf	149,7,c	;volatile
  7811                           
  7812                           ;lcd.c: 115:     ((TRISD) &= ~(1<<(6)));
  7813   006248  9C95               	bcf	149,6,c	;volatile
  7814                           
  7815                           ;lcd.c: 116:     ((TRISD) &= ~(1<<(5)));
  7816   00624A  9A95               	bcf	149,5,c	;volatile
  7817                           
  7818                           ;lcd.c: 117:     ((TRISD) &= ~(1<<(4)));
  7819   00624C  9895               	bcf	149,4,c	;volatile
  7820                           
  7821                           ;lcd.c: 118:     ((TRISD) &= ~(1<<(2)));
  7822   00624E  9495               	bcf	149,2,c	;volatile
  7823   006250                     
  7824                           ;lcd.c: 121:     for (i = 0; i < 7; i++)
  7825   006250  0E00               	movlw	0
  7826   006252  6E04               	movwf	lcdInit@i^0,c
  7827   006254                     l3204:
  7828                           
  7829                           ;lcd.c: 122:         Delay2ms();
  7830   006254  EC4F  F02E         	call	_Delay2ms	;wreg free
  7831   006258  2A04               	incf	lcdInit@i^0,f,c
  7832   00625A  0E06               	movlw	6
  7833   00625C  6404               	cpfsgt	lcdInit@i^0,c
  7834   00625E  EF33  F031         	goto	u2861
  7835   006262  EF35  F031         	goto	u2860
  7836   006266                     u2861:
  7837   006266  EF2A  F031         	goto	l3204
  7838   00626A                     u2860:
  7839   00626A                     
  7840                           ;lcd.c: 125:     lcdCommand4bits(0x30, 0);
  7841   00626A  0E00               	movlw	0
  7842   00626C  6E01               	movwf	lcdCommand4bits@data^0,c
  7843   00626E  0E30               	movlw	48
  7844   006270  ECE6  F030         	call	_lcdCommand4bits
  7845                           
  7846                           ;lcd.c: 126:     Delay2ms();
  7847   006274  EC4F  F02E         	call	_Delay2ms	;wreg free
  7848                           
  7849                           ;lcd.c: 128:     lcdCommand4bits(0x30, 0);
  7850   006278  0E00               	movlw	0
  7851   00627A  6E01               	movwf	lcdCommand4bits@data^0,c
  7852   00627C  0E30               	movlw	48
  7853   00627E  ECE6  F030         	call	_lcdCommand4bits
  7854                           
  7855                           ;lcd.c: 129:     Delay2ms();
  7856   006282  EC4F  F02E         	call	_Delay2ms	;wreg free
  7857                           
  7858                           ;lcd.c: 131:     lcdCommand4bits(0x30, 0);
  7859   006286  0E00               	movlw	0
  7860   006288  6E01               	movwf	lcdCommand4bits@data^0,c
  7861   00628A  0E30               	movlw	48
  7862   00628C  ECE6  F030         	call	_lcdCommand4bits
  7863                           
  7864                           ;lcd.c: 132:     Delay2ms();
  7865   006290  EC4F  F02E         	call	_Delay2ms	;wreg free
  7866                           
  7867                           ;lcd.c: 134:     lcdCommand4bits(0x20, 0);
  7868   006294  0E00               	movlw	0
  7869   006296  6E01               	movwf	lcdCommand4bits@data^0,c
  7870   006298  0E20               	movlw	32
  7871   00629A  ECE6  F030         	call	_lcdCommand4bits
  7872                           
  7873                           ;lcd.c: 135:     Delay2ms();
  7874   00629E  EC4F  F02E         	call	_Delay2ms	;wreg free
  7875                           
  7876                           ;lcd.c: 137:     lcdCommand(0x28);
  7877   0062A2  0E28               	movlw	40
  7878   0062A4  EC63  F02F         	call	_lcdCommand
  7879                           
  7880                           ;lcd.c: 138:     lcdCommand(0x06);
  7881   0062A8  0E06               	movlw	6
  7882   0062AA  EC63  F02F         	call	_lcdCommand
  7883                           
  7884                           ;lcd.c: 140:     lcdCommand(0x0C);
  7885   0062AE  0E0C               	movlw	12
  7886   0062B0  EC63  F02F         	call	_lcdCommand
  7887                           
  7888                           ;lcd.c: 141:     lcdCommand(0x01);
  7889   0062B4  0E01               	movlw	1
  7890   0062B6  EC63  F02F         	call	_lcdCommand
  7891   0062BA  0012               	return		;funcret
  7892   0062BC                     __end_of_lcdInit:
  7893                           	callstack 0
  7894                           
  7895 ;; *************** function _lcdCommand *****************
  7896 ;; Defined at:
  7897 ;;		line 89 in file "lcd.c"
  7898 ;; Parameters:    Size  Location     Type
  7899 ;;  cmd             1    wreg     unsigned char 
  7900 ;; Auto vars:     Size  Location     Type
  7901 ;;  cmd             1    2[COMRAM] unsigned char 
  7902 ;; Return value:  Size  Location     Type
  7903 ;;                  1    wreg      void 
  7904 ;; Registers used:
  7905 ;;		wreg, status,2, status,0, cstack
  7906 ;; Tracked objects:
  7907 ;;		On entry : 0/0
  7908 ;;		On exit  : 0/0
  7909 ;;		Unchanged: 0/0
  7910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7911 ;;      Params:         0       0       0       0       0       0       0       0       0
  7912 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7913 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7914 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7915 ;;Total ram usage:        1 bytes
  7916 ;; Hardware stack levels used: 1
  7917 ;; Hardware stack levels required when called: 2
  7918 ;; This function calls:
  7919 ;;		_Delay2ms
  7920 ;;		_Delay40us
  7921 ;;		_lcdCommand4bits
  7922 ;; This function is called by:
  7923 ;;		_lcdInit
  7924 ;;		_outputPrint
  7925 ;; This function uses a non-reentrant model
  7926 ;;
  7927                           
  7928                           	psect	text57
  7929   005EC6                     __ptext57:
  7930                           	callstack 0
  7931   005EC6                     _lcdCommand:
  7932                           	callstack 26
  7933                           
  7934                           ;incstack = 0
  7935                           ;lcdCommand@cmd stored from wreg
  7936   005EC6  6E03               	movwf	lcdCommand@cmd^0,c
  7937   005EC8                     
  7938                           ;lcd.c: 91:     lcdCommand4bits(cmd, 0);
  7939   005EC8  0E00               	movlw	0
  7940   005ECA  6E01               	movwf	lcdCommand4bits@data^0,c
  7941   005ECC  5003               	movf	lcdCommand@cmd^0,w,c
  7942   005ECE  ECE6  F030         	call	_lcdCommand4bits
  7943                           
  7944                           ;lcd.c: 92:     lcdCommand4bits(cmd << 4, 0);
  7945   005ED2  0E00               	movlw	0
  7946   005ED4  6E01               	movwf	lcdCommand4bits@data^0,c
  7947   005ED6  3803               	swapf	lcdCommand@cmd^0,w,c
  7948   005ED8  0BF0               	andlw	240
  7949   005EDA  ECE6  F030         	call	_lcdCommand4bits
  7950   005EDE                     
  7951                           ;lcd.c: 95:     if ((cmd == 0x02) || (cmd == 0x01)) {
  7952   005EDE  0E02               	movlw	2
  7953   005EE0  1803               	xorwf	lcdCommand@cmd^0,w,c
  7954   005EE2  B4D8               	btfsc	status,2,c
  7955   005EE4  EF76  F02F         	goto	u2761
  7956   005EE8  EF78  F02F         	goto	u2760
  7957   005EEC                     u2761:
  7958   005EEC  EF80  F02F         	goto	l3056
  7959   005EF0                     u2760:
  7960   005EF0  0403               	decf	lcdCommand@cmd^0,w,c
  7961   005EF2  A4D8               	btfss	status,2,c
  7962   005EF4  EF7E  F02F         	goto	u2771
  7963   005EF8  EF80  F02F         	goto	u2770
  7964   005EFC                     u2771:
  7965   005EFC  EF84  F02F         	goto	l3058
  7966   005F00                     u2770:
  7967   005F00                     l3056:
  7968                           
  7969                           ;lcd.c: 96:         Delay2ms();
  7970   005F00  EC4F  F02E         	call	_Delay2ms	;wreg free
  7971                           
  7972                           ;lcd.c: 97:     } else {
  7973   005F04  EF86  F02F         	goto	l115
  7974   005F08                     l3058:
  7975                           
  7976                           ;lcd.c: 98:         Delay40us();
  7977   005F08  EC22  F02D         	call	_Delay40us	;wreg free
  7978   005F0C                     l115:
  7979   005F0C  0012               	return		;funcret
  7980   005F0E                     __end_of_lcdCommand:
  7981                           	callstack 0
  7982                           
  7983 ;; *************** function _lcdCommand4bits *****************
  7984 ;; Defined at:
  7985 ;;		line 51 in file "lcd.c"
  7986 ;; Parameters:    Size  Location     Type
  7987 ;;  cmd             1    wreg     unsigned char 
  7988 ;;  data            1    0[COMRAM] unsigned char 
  7989 ;; Auto vars:     Size  Location     Type
  7990 ;;  cmd             1    1[COMRAM] unsigned char 
  7991 ;; Return value:  Size  Location     Type
  7992 ;;                  1    wreg      void 
  7993 ;; Registers used:
  7994 ;;		wreg, status,2, status,0, cstack
  7995 ;; Tracked objects:
  7996 ;;		On entry : 0/0
  7997 ;;		On exit  : 0/0
  7998 ;;		Unchanged: 0/0
  7999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8000 ;;      Params:         1       0       0       0       0       0       0       0       0
  8001 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8002 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8003 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8004 ;;Total ram usage:        2 bytes
  8005 ;; Hardware stack levels used: 1
  8006 ;; Hardware stack levels required when called: 1
  8007 ;; This function calls:
  8008 ;;		_pulseEnable
  8009 ;; This function is called by:
  8010 ;;		_lcdCommand
  8011 ;;		_lcdData
  8012 ;;		_lcdInit
  8013 ;; This function uses a non-reentrant model
  8014 ;;
  8015                           
  8016                           	psect	text58
  8017   0061CC                     __ptext58:
  8018                           	callstack 0
  8019   0061CC                     _lcdCommand4bits:
  8020                           	callstack 25
  8021                           
  8022                           ;incstack = 0
  8023                           ;lcdCommand4bits@cmd stored from wreg
  8024   0061CC  6E02               	movwf	lcdCommand4bits@cmd^0,c
  8025   0061CE                     
  8026                           ;lcd.c: 53:     if (data) {
  8027   0061CE  5001               	movf	lcdCommand4bits@data^0,w,c
  8028   0061D0  B4D8               	btfsc	status,2,c
  8029   0061D2  EFED  F030         	goto	u2401
  8030   0061D6  EFEF  F030         	goto	u2400
  8031   0061DA                     u2401:
  8032   0061DA  EFF2  F030         	goto	l2780
  8033   0061DE                     u2400:
  8034   0061DE                     
  8035                           ;lcd.c: 54:         ((PORTD) |= (1<<(0)));
  8036   0061DE  8083               	bsf	131,0,c	;volatile
  8037                           
  8038                           ;lcd.c: 55:     } else {
  8039   0061E0  EFF3  F030         	goto	l2782
  8040   0061E4                     l2780:
  8041                           
  8042                           ;lcd.c: 56:         ((PORTD) &= ~(1<<(0)));
  8043   0061E4  9083               	bcf	131,0,c	;volatile
  8044   0061E6                     l2782:
  8045                           
  8046                           ;lcd.c: 59:     if (((cmd) & (1<<(7)))) {
  8047   0061E6  AE02               	btfss	lcdCommand4bits@cmd^0,7,c
  8048   0061E8  EFF8  F030         	goto	u2411
  8049   0061EC  EFFA  F030         	goto	u2410
  8050   0061F0                     u2411:
  8051   0061F0  EFFD  F030         	goto	l2786
  8052   0061F4                     u2410:
  8053   0061F4                     
  8054                           ;lcd.c: 60:         ((PORTD) |= (1<<(2)));
  8055   0061F4  8483               	bsf	131,2,c	;volatile
  8056                           
  8057                           ;lcd.c: 61:     } else {
  8058   0061F6  EFFE  F030         	goto	l2788
  8059   0061FA                     l2786:
  8060                           
  8061                           ;lcd.c: 62:         ((PORTD) &= ~(1<<(2)));
  8062   0061FA  9483               	bcf	131,2,c	;volatile
  8063   0061FC                     l2788:
  8064                           
  8065                           ;lcd.c: 66:     if (((cmd) & (1<<(6)))) {
  8066   0061FC  AC02               	btfss	lcdCommand4bits@cmd^0,6,c
  8067   0061FE  EF03  F031         	goto	u2421
  8068   006202  EF05  F031         	goto	u2420
  8069   006206                     u2421:
  8070   006206  EF08  F031         	goto	l2792
  8071   00620A                     u2420:
  8072   00620A                     
  8073                           ;lcd.c: 67:         ((PORTD) |= (1<<(4)));
  8074   00620A  8883               	bsf	131,4,c	;volatile
  8075                           
  8076                           ;lcd.c: 68:     } else {
  8077   00620C  EF09  F031         	goto	l2794
  8078   006210                     l2792:
  8079                           
  8080                           ;lcd.c: 69:         ((PORTD) &= ~(1<<(4)));
  8081   006210  9883               	bcf	131,4,c	;volatile
  8082   006212                     l2794:
  8083                           
  8084                           ;lcd.c: 73:     if (((cmd) & (1<<(5)))) {
  8085   006212  AA02               	btfss	lcdCommand4bits@cmd^0,5,c
  8086   006214  EF0E  F031         	goto	u2431
  8087   006218  EF10  F031         	goto	u2430
  8088   00621C                     u2431:
  8089   00621C  EF13  F031         	goto	l2798
  8090   006220                     u2430:
  8091   006220                     
  8092                           ;lcd.c: 74:         ((PORTD) |= (1<<(5)));
  8093   006220  8A83               	bsf	131,5,c	;volatile
  8094                           
  8095                           ;lcd.c: 75:     } else {
  8096   006222  EF14  F031         	goto	l2800
  8097   006226                     l2798:
  8098                           
  8099                           ;lcd.c: 76:         ((PORTD) &= ~(1<<(5)));
  8100   006226  9A83               	bcf	131,5,c	;volatile
  8101   006228                     l2800:
  8102                           
  8103                           ;lcd.c: 80:     if (((cmd) & (1<<(4)))) {
  8104   006228  A802               	btfss	lcdCommand4bits@cmd^0,4,c
  8105   00622A  EF19  F031         	goto	u2441
  8106   00622E  EF1B  F031         	goto	u2440
  8107   006232                     u2441:
  8108   006232  EF1E  F031         	goto	l2804
  8109   006236                     u2440:
  8110   006236                     
  8111                           ;lcd.c: 81:         ((PORTD) |= (1<<(6)));
  8112   006236  8C83               	bsf	131,6,c	;volatile
  8113                           
  8114                           ;lcd.c: 82:     } else {
  8115   006238  EF1F  F031         	goto	l2806
  8116   00623C                     l2804:
  8117                           
  8118                           ;lcd.c: 83:         ((PORTD) &= ~(1<<(6)));
  8119   00623C  9C83               	bcf	131,6,c	;volatile
  8120   00623E                     l2806:
  8121                           
  8122                           ;lcd.c: 86:     pulseEnable();
  8123   00623E  ECBC  F02C         	call	_pulseEnable	;wreg free
  8124   006242  0012               	return		;funcret
  8125   006244                     __end_of_lcdCommand4bits:
  8126                           	callstack 0
  8127                           
  8128 ;; *************** function _pulseEnable *****************
  8129 ;; Defined at:
  8130 ;;		line 46 in file "lcd.c"
  8131 ;; Parameters:    Size  Location     Type
  8132 ;;		None
  8133 ;; Auto vars:     Size  Location     Type
  8134 ;;		None
  8135 ;; Return value:  Size  Location     Type
  8136 ;;                  1    wreg      void 
  8137 ;; Registers used:
  8138 ;;		status,2, status,0
  8139 ;; Tracked objects:
  8140 ;;		On entry : 0/0
  8141 ;;		On exit  : 0/0
  8142 ;;		Unchanged: 0/0
  8143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8144 ;;      Params:         0       0       0       0       0       0       0       0       0
  8145 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8146 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8147 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8148 ;;Total ram usage:        0 bytes
  8149 ;; Hardware stack levels used: 1
  8150 ;; This function calls:
  8151 ;;		Nothing
  8152 ;; This function is called by:
  8153 ;;		_lcdCommand4bits
  8154 ;; This function uses a non-reentrant model
  8155 ;;
  8156                           
  8157                           	psect	text59
  8158   005978                     __ptext59:
  8159                           	callstack 0
  8160   005978                     _pulseEnable:
  8161                           	callstack 25
  8162   005978                     
  8163                           ;lcd.c: 47:     ((PORTD) |= (1<<(7)));
  8164   005978  8E83               	bsf	131,7,c	;volatile
  8165                           
  8166                           ;lcd.c: 48:     ((PORTD) &= ~(1<<(7)));
  8167   00597A  9E83               	bcf	131,7,c	;volatile
  8168   00597C  0012               	return		;funcret
  8169   00597E                     __end_of_pulseEnable:
  8170                           	callstack 0
  8171                           
  8172 ;; *************** function _Delay40us *****************
  8173 ;; Defined at:
  8174 ;;		line 35 in file "lcd.c"
  8175 ;; Parameters:    Size  Location     Type
  8176 ;;		None
  8177 ;; Auto vars:     Size  Location     Type
  8178 ;;  j               1    0[COMRAM] unsigned char 
  8179 ;; Return value:  Size  Location     Type
  8180 ;;                  1    wreg      void 
  8181 ;; Registers used:
  8182 ;;		wreg, status,2, status,0
  8183 ;; Tracked objects:
  8184 ;;		On entry : 0/0
  8185 ;;		On exit  : 0/0
  8186 ;;		Unchanged: 0/0
  8187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8188 ;;      Params:         0       0       0       0       0       0       0       0       0
  8189 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8190 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8191 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8192 ;;Total ram usage:        1 bytes
  8193 ;; Hardware stack levels used: 1
  8194 ;; This function calls:
  8195 ;;		Nothing
  8196 ;; This function is called by:
  8197 ;;		_lcdCommand
  8198 ;;		_lcdData
  8199 ;; This function uses a non-reentrant model
  8200 ;;
  8201                           
  8202                           	psect	text60
  8203   005A44                     __ptext60:
  8204                           	callstack 0
  8205   005A44                     _Delay40us:
  8206                           	callstack 26
  8207   005A44                     
  8208                           ;lcd.c: 36:     unsigned char j;;lcd.c: 37:     for (j = 0; j < 68; j++);
  8209   005A44  0E00               	movlw	0
  8210   005A46  6E01               	movwf	Delay40us@j^0,c
  8211   005A48                     l2772:
  8212   005A48  2A01               	incf	Delay40us@j^0,f,c
  8213   005A4A  0E43               	movlw	67
  8214   005A4C  6401               	cpfsgt	Delay40us@j^0,c
  8215   005A4E  EF2B  F02D         	goto	u2391
  8216   005A52  EF2D  F02D         	goto	u2390
  8217   005A56                     u2391:
  8218   005A56  EF24  F02D         	goto	l2772
  8219   005A5A                     u2390:
  8220   005A5A  0012               	return		;funcret
  8221   005A5C                     __end_of_Delay40us:
  8222                           	callstack 0
  8223                           
  8224 ;; *************** function _Delay2ms *****************
  8225 ;; Defined at:
  8226 ;;		line 40 in file "lcd.c"
  8227 ;; Parameters:    Size  Location     Type
  8228 ;;		None
  8229 ;; Auto vars:     Size  Location     Type
  8230 ;;  k               1    1[COMRAM] unsigned char 
  8231 ;;  j               1    0[COMRAM] unsigned char 
  8232 ;; Return value:  Size  Location     Type
  8233 ;;                  1    wreg      void 
  8234 ;; Registers used:
  8235 ;;		wreg, status,2, status,0
  8236 ;; Tracked objects:
  8237 ;;		On entry : 0/0
  8238 ;;		On exit  : 0/0
  8239 ;;		Unchanged: 0/0
  8240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8241 ;;      Params:         0       0       0       0       0       0       0       0       0
  8242 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8243 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8244 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8245 ;;Total ram usage:        2 bytes
  8246 ;; Hardware stack levels used: 1
  8247 ;; This function calls:
  8248 ;;		Nothing
  8249 ;; This function is called by:
  8250 ;;		_lcdCommand
  8251 ;;		_lcdInit
  8252 ;; This function uses a non-reentrant model
  8253 ;;
  8254                           
  8255                           	psect	text61
  8256   005C9E                     __ptext61:
  8257                           	callstack 0
  8258   005C9E                     _Delay2ms:
  8259                           	callstack 27
  8260   005C9E                     
  8261                           ;lcd.c: 41:     unsigned char j, k;;lcd.c: 42:     for (j = 0; j < 20; j++)
  8262   005C9E  0E00               	movlw	0
  8263   005CA0  6E01               	movwf	Delay2ms@j^0,c
  8264   005CA2                     l3002:
  8265                           
  8266                           ;lcd.c: 43:         for (k = 0; k < 178; k++);
  8267   005CA2  0E00               	movlw	0
  8268   005CA4  6E02               	movwf	Delay2ms@k^0,c
  8269   005CA6                     l3008:
  8270   005CA6  2A02               	incf	Delay2ms@k^0,f,c
  8271   005CA8  0EB1               	movlw	177
  8272   005CAA  6402               	cpfsgt	Delay2ms@k^0,c
  8273   005CAC  EF5A  F02E         	goto	u2721
  8274   005CB0  EF5C  F02E         	goto	u2720
  8275   005CB4                     u2721:
  8276   005CB4  EF53  F02E         	goto	l3008
  8277   005CB8                     u2720:
  8278   005CB8  2A01               	incf	Delay2ms@j^0,f,c
  8279   005CBA  0E13               	movlw	19
  8280   005CBC  6401               	cpfsgt	Delay2ms@j^0,c
  8281   005CBE  EF63  F02E         	goto	u2731
  8282   005CC2  EF65  F02E         	goto	u2730
  8283   005CC6                     u2731:
  8284   005CC6  EF51  F02E         	goto	l3002
  8285   005CCA                     u2730:
  8286   005CCA  0012               	return		;funcret
  8287   005CCC                     __end_of_Delay2ms:
  8288                           	callstack 0
  8289                           
  8290 ;; *************** function _kpDebounce *****************
  8291 ;; Defined at:
  8292 ;;		line 25 in file "keypad.c"
  8293 ;; Parameters:    Size  Location     Type
  8294 ;;		None
  8295 ;; Auto vars:     Size  Location     Type
  8296 ;;  j               1    0        unsigned char 
  8297 ;;  i               1    0        unsigned char 
  8298 ;; Return value:  Size  Location     Type
  8299 ;;                  1    wreg      void 
  8300 ;; Registers used:
  8301 ;;		wreg, status,2, status,0
  8302 ;; Tracked objects:
  8303 ;;		On entry : 0/0
  8304 ;;		On exit  : 0/0
  8305 ;;		Unchanged: 0/0
  8306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8307 ;;      Params:         0       0       0       0       0       0       0       0       0
  8308 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8309 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8310 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8311 ;;Total ram usage:        0 bytes
  8312 ;; Hardware stack levels used: 1
  8313 ;; This function calls:
  8314 ;;		Nothing
  8315 ;; This function is called by:
  8316 ;;		_main
  8317 ;; This function uses a non-reentrant model
  8318 ;;
  8319                           
  8320                           	psect	text62
  8321   0062BC                     __ptext62:
  8322                           	callstack 0
  8323   0062BC                     _kpDebounce:
  8324                           	callstack 30
  8325   0062BC                     
  8326                           ;keypad.c: 26:     unsigned char i, j;;keypad.c: 27:     static unsigned char tempo;;key
      +                          pad.c: 28:     static unsigned char teclaNew = 0x0000;;keypad.c: 29:     static unsigned
      +                           char teclaOld = 0x0001;;keypad.c: 31:     if (!((PORTB) & (1<<(2)))) ((teclaNew) |= (1<
      +                          <(0)));
  8327   0062BC  B481               	btfsc	129,2,c	;volatile
  8328   0062BE  EF63  F031         	goto	u1401
  8329   0062C2  EF65  F031         	goto	u1400
  8330   0062C6                     u1401:
  8331   0062C6  EF68  F031         	goto	l2326
  8332   0062CA                     u1400:
  8333   0062CA  805C               	bsf	kpDebounce@teclaNew^0,0,c
  8334   0062CC  EF69  F031         	goto	l2328
  8335   0062D0                     l2326:
  8336   0062D0  905C               	bcf	kpDebounce@teclaNew^0,0,c
  8337   0062D2                     l2328:
  8338                           
  8339                           ;keypad.c: 34:     if (!((PORTB) & (1<<(3)))) ((teclaNew) |= (1<<(1)));
  8340   0062D2  B681               	btfsc	129,3,c	;volatile
  8341   0062D4  EF6E  F031         	goto	u1411
  8342   0062D8  EF70  F031         	goto	u1410
  8343   0062DC                     u1411:
  8344   0062DC  EF73  F031         	goto	l2332
  8345   0062E0                     u1410:
  8346   0062E0  825C               	bsf	kpDebounce@teclaNew^0,1,c
  8347   0062E2  EF74  F031         	goto	l2334
  8348   0062E6                     l2332:
  8349   0062E6  925C               	bcf	kpDebounce@teclaNew^0,1,c
  8350   0062E8                     l2334:
  8351                           
  8352                           ;keypad.c: 37:     if (!((PORTB) & (1<<(5)))) ((teclaNew) |= (1<<(2)));
  8353   0062E8  BA81               	btfsc	129,5,c	;volatile
  8354   0062EA  EF79  F031         	goto	u1421
  8355   0062EE  EF7B  F031         	goto	u1420
  8356   0062F2                     u1421:
  8357   0062F2  EF7E  F031         	goto	l2338
  8358   0062F6                     u1420:
  8359   0062F6  845C               	bsf	kpDebounce@teclaNew^0,2,c
  8360   0062F8  EF7F  F031         	goto	l2340
  8361   0062FC                     l2338:
  8362   0062FC  945C               	bcf	kpDebounce@teclaNew^0,2,c
  8363   0062FE                     l2340:
  8364                           
  8365                           ;keypad.c: 40:     if (!((PORTB) & (1<<(4)))) ((teclaNew) |= (1<<(3)));
  8366   0062FE  B881               	btfsc	129,4,c	;volatile
  8367   006300  EF84  F031         	goto	u1431
  8368   006304  EF86  F031         	goto	u1430
  8369   006308                     u1431:
  8370   006308  EF89  F031         	goto	l2344
  8371   00630C                     u1430:
  8372   00630C  865C               	bsf	kpDebounce@teclaNew^0,3,c
  8373   00630E  EF8A  F031         	goto	l2346
  8374   006312                     l2344:
  8375   006312  965C               	bcf	kpDebounce@teclaNew^0,3,c
  8376   006314                     l2346:
  8377                           
  8378                           ;keypad.c: 43:     if (!((PORTE) & (1<<(1)))) ((teclaNew) |= (1<<(4)));
  8379   006314  B284               	btfsc	132,1,c	;volatile
  8380   006316  EF8F  F031         	goto	u1441
  8381   00631A  EF91  F031         	goto	u1440
  8382   00631E                     u1441:
  8383   00631E  EF94  F031         	goto	l2350
  8384   006322                     u1440:
  8385   006322  885C               	bsf	kpDebounce@teclaNew^0,4,c
  8386   006324  EF95  F031         	goto	l2352
  8387   006328                     l2350:
  8388   006328  985C               	bcf	kpDebounce@teclaNew^0,4,c
  8389   00632A                     l2352:
  8390                           
  8391                           ;keypad.c: 46:     if (teclaOld == teclaNew) tempo--;
  8392   00632A  505C               	movf	kpDebounce@teclaNew^0,w,c
  8393   00632C  185F               	xorwf	kpDebounce@teclaOld^0,w,c
  8394   00632E  A4D8               	btfss	status,2,c
  8395   006330  EF9C  F031         	goto	u1451
  8396   006334  EF9E  F031         	goto	u1450
  8397   006338                     u1451:
  8398   006338  EFA1  F031         	goto	l2356
  8399   00633C                     u1450:
  8400   00633C  065D               	decf	kpDebounce@tempo^0,f,c
  8401   00633E  EFA5  F031         	goto	l205
  8402   006342                     l2356:
  8403                           
  8404                           ;keypad.c: 48:         tempo = 1;
  8405   006342  0E01               	movlw	1
  8406   006344  6E5D               	movwf	kpDebounce@tempo^0,c
  8407   006346                     
  8408                           ;keypad.c: 49:         teclaOld = teclaNew;
  8409   006346  C05C  F05F         	movff	kpDebounce@teclaNew,kpDebounce@teclaOld
  8410   00634A                     l205:
  8411                           
  8412                           ;keypad.c: 52:     if (tempo == 0) tecla = teclaOld;
  8413   00634A  505D               	movf	kpDebounce@tempo^0,w,c
  8414   00634C  A4D8               	btfss	status,2,c
  8415   00634E  EFAB  F031         	goto	u1461
  8416   006352  EFAD  F031         	goto	u1460
  8417   006356                     u1461:
  8418   006356  EFAF  F031         	goto	l207
  8419   00635A                     u1460:
  8420   00635A  C05F  F05E         	movff	kpDebounce@teclaOld,_tecla
  8421   00635E                     l207:
  8422   00635E  0012               	return		;funcret
  8423   006360                     __end_of_kpDebounce:
  8424                           	callstack 0
  8425                           
  8426 ;; *************** function _eventInit *****************
  8427 ;; Defined at:
  8428 ;;		line 20 in file "event.c"
  8429 ;; Parameters:    Size  Location     Type
  8430 ;;		None
  8431 ;; Auto vars:     Size  Location     Type
  8432 ;;		None
  8433 ;; Return value:  Size  Location     Type
  8434 ;;                  1    wreg      void 
  8435 ;; Registers used:
  8436 ;;		wreg, status,2, status,0, cstack
  8437 ;; Tracked objects:
  8438 ;;		On entry : 0/0
  8439 ;;		On exit  : 0/0
  8440 ;;		Unchanged: 0/0
  8441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8442 ;;      Params:         0       0       0       0       0       0       0       0       0
  8443 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8444 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8445 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8446 ;;Total ram usage:        0 bytes
  8447 ;; Hardware stack levels used: 1
  8448 ;; Hardware stack levels required when called: 1
  8449 ;; This function calls:
  8450 ;;		_kpInit
  8451 ;; This function is called by:
  8452 ;;		_main
  8453 ;; This function uses a non-reentrant model
  8454 ;;
  8455                           
  8456                           	psect	text63
  8457   0059A6                     __ptext63:
  8458                           	callstack 0
  8459   0059A6                     _eventInit:
  8460                           	callstack 29
  8461   0059A6                     
  8462                           ;event.c: 21:     kpInit();
  8463   0059A6  ECC9  F02C         	call	_kpInit	;wreg free
  8464   0059AA                     
  8465                           ;event.c: 22:     key_ant = 0;
  8466   0059AA  0E00               	movlw	0
  8467   0059AC  0100               	movlb	0	; () banked
  8468   0059AE  6F8D               	movwf	(_key_ant+1)& (0+255),b
  8469   0059B0  0E00               	movlw	0
  8470   0059B2  6F8C               	movwf	_key_ant& (0+255),b
  8471   0059B4                     
  8472                           ; BSR set to: 0
  8473   0059B4  0012               	return		;funcret
  8474   0059B6                     __end_of_eventInit:
  8475                           	callstack 0
  8476                           
  8477 ;; *************** function _kpInit *****************
  8478 ;; Defined at:
  8479 ;;		line 7 in file "keypad.c"
  8480 ;; Parameters:    Size  Location     Type
  8481 ;;		None
  8482 ;; Auto vars:     Size  Location     Type
  8483 ;;		None
  8484 ;; Return value:  Size  Location     Type
  8485 ;;                  1    wreg      void 
  8486 ;; Registers used:
  8487 ;;		wreg, status,2, status,0
  8488 ;; Tracked objects:
  8489 ;;		On entry : 0/0
  8490 ;;		On exit  : 0/0
  8491 ;;		Unchanged: 0/0
  8492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8493 ;;      Params:         0       0       0       0       0       0       0       0       0
  8494 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8495 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8496 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8497 ;;Total ram usage:        0 bytes
  8498 ;; Hardware stack levels used: 1
  8499 ;; This function calls:
  8500 ;;		Nothing
  8501 ;; This function is called by:
  8502 ;;		_main
  8503 ;;		_eventInit
  8504 ;; This function uses a non-reentrant model
  8505 ;;
  8506                           
  8507                           	psect	text64
  8508   005992                     __ptext64:
  8509                           	callstack 0
  8510   005992                     _kpInit:
  8511                           	callstack 30
  8512   005992                     
  8513                           ;keypad.c: 16:     TRISB = 0xff;
  8514   005992  6893               	setf	147,c	;volatile
  8515   005994                     
  8516                           ;keypad.c: 17:     ADCON1 = 0b00001110;
  8517   005994  0E0E               	movlw	14
  8518   005996  6EC1               	movwf	193,c	;volatile
  8519   005998                     
  8520                           ;keypad.c: 18:     ((TRISE) |= (1<<(1)));
  8521   005998  8296               	bsf	150,1,c	;volatile
  8522   00599A  0012               	return		;funcret
  8523   00599C                     __end_of_kpInit:
  8524                           	callstack 0
  8525                           
  8526                           	psect	rparam
  8527   000000                     
  8528                           	psect	config
  8529                           
  8530                           ;Config register CONFIG1L @ 0x300000
  8531                           ;	unspecified, using default values
  8532                           ;	PLL Prescaler Selection bits
  8533                           ;	PLLDIV = 0x0, unprogrammed default
  8534                           ;	System Clock Postscaler Selection bits
  8535                           ;	CPUDIV = 0x0, unprogrammed default
  8536                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  8537                           ;	USBDIV = 0x0, unprogrammed default
  8538   300000                     	org	3145728
  8539   300000  00                 	db	0
  8540                           
  8541                           ;Config register CONFIG1H @ 0x300001
  8542                           ;	Oscillator Selection bits
  8543                           ;	FOSC = HS, HS oscillator (HS)
  8544                           ;	Fail-Safe Clock Monitor Enable bit
  8545                           ;	FCMEN = 0x0, unprogrammed default
  8546                           ;	Internal/External Oscillator Switchover bit
  8547                           ;	IESO = 0x0, unprogrammed default
  8548   300001                     	org	3145729
  8549   300001  0C                 	db	12
  8550                           
  8551                           ;Config register CONFIG2L @ 0x300002
  8552                           ;	unspecified, using default values
  8553                           ;	Power-up Timer Enable bit
  8554                           ;	PWRT = 0x1, unprogrammed default
  8555                           ;	Brown-out Reset Enable bits
  8556                           ;	BOR = 0x3, unprogrammed default
  8557                           ;	Brown-out Reset Voltage bits
  8558                           ;	BORV = 0x3, unprogrammed default
  8559                           ;	USB Voltage Regulator Enable bit
  8560                           ;	VREGEN = 0x0, unprogrammed default
  8561   300002                     	org	3145730
  8562   300002  1F                 	db	31
  8563                           
  8564                           ;Config register CONFIG2H @ 0x300003
  8565                           ;	Watchdog Timer Enable bit
  8566                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8567                           ;	Watchdog Timer Postscale Select bits
  8568                           ;	WDTPS = 0xF, unprogrammed default
  8569   300003                     	org	3145731
  8570   300003  1E                 	db	30
  8571                           
  8572                           ; Padding undefined space
  8573   300004                     	org	3145732
  8574   300004  FF                 	db	255
  8575                           
  8576                           ;Config register CONFIG3H @ 0x300005
  8577                           ;	CCP2 MUX bit
  8578                           ;	CCP2MX = 0x1, unprogrammed default
  8579                           ;	PORTB A/D Enable bit
  8580                           ;	PBADEN = 0x1, unprogrammed default
  8581                           ;	Low-Power Timer 1 Oscillator Enable bit
  8582                           ;	LPT1OSC = 0x0, unprogrammed default
  8583                           ;	MCLR Pin Enable bit
  8584                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  8585   300005                     	org	3145733
  8586   300005  83                 	db	131
  8587                           
  8588                           ;Config register CONFIG4L @ 0x300006
  8589                           ;	Stack Full/Underflow Reset Enable bit
  8590                           ;	STVREN = 0x1, unprogrammed default
  8591                           ;	Single-Supply ICSP Enable bit
  8592                           ;	LVP = OFF, Single-Supply ICSP disabled
  8593                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  8594                           ;	ICPRT = 0x0, unprogrammed default
  8595                           ;	Extended Instruction Set Enable bit
  8596                           ;	XINST = 0x0, unprogrammed default
  8597                           ;	Background Debugger Enable bit
  8598                           ;	DEBUG = 0x1, unprogrammed default
  8599   300006                     	org	3145734
  8600   300006  81                 	db	129
  8601                           
  8602                           ; Padding undefined space
  8603   300007                     	org	3145735
  8604   300007  FF                 	db	255
  8605                           tosu	equ	0xFFF
  8606                           tosh	equ	0xFFE
  8607                           tosl	equ	0xFFD
  8608                           stkptr	equ	0xFFC
  8609                           pclatu	equ	0xFFB
  8610                           pclath	equ	0xFFA
  8611                           pcl	equ	0xFF9
  8612                           tblptru	equ	0xFF8
  8613                           tblptrh	equ	0xFF7
  8614                           tblptrl	equ	0xFF6
  8615                           tablat	equ	0xFF5
  8616                           prodh	equ	0xFF4
  8617                           prodl	equ	0xFF3
  8618                           indf0	equ	0xFEF
  8619                           postinc0	equ	0xFEE
  8620                           postdec0	equ	0xFED
  8621                           preinc0	equ	0xFEC
  8622                           plusw0	equ	0xFEB
  8623                           fsr0h	equ	0xFEA
  8624                           fsr0l	equ	0xFE9
  8625                           wreg	equ	0xFE8
  8626                           indf1	equ	0xFE7
  8627                           postinc1	equ	0xFE6
  8628                           postdec1	equ	0xFE5
  8629                           preinc1	equ	0xFE4
  8630                           plusw1	equ	0xFE3
  8631                           fsr1h	equ	0xFE2
  8632                           fsr1l	equ	0xFE1
  8633                           bsr	equ	0xFE0
  8634                           indf2	equ	0xFDF
  8635                           postinc2	equ	0xFDE
  8636                           postdec2	equ	0xFDD
  8637                           preinc2	equ	0xFDC
  8638                           plusw2	equ	0xFDB
  8639                           fsr2h	equ	0xFDA
  8640                           fsr2l	equ	0xFD9
  8641                           status	equ	0xFD8

Data Sizes:
    Strings     315
    Constant    0
    Data        33
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     70      95
    BANK0           160      0      53
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           239      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    intToStr@buffer	PTR unsigned char  size(1) Largest target is 12
		 -> serialSendInt@buffer(COMRAM[12]), 

    lcdString@msg	PTR unsigned char  size(2) Largest target is 17
		 -> STR_10(CODE[17]), STR_11(CODE[17]), STR_12(CODE[17]), STR_13(CODE[17]), 
		 -> STR_14(CODE[17]), STR_15(CODE[17]), STR_16(CODE[17]), STR_17(CODE[17]), 
		 -> STR_18(CODE[6]), STR_19(CODE[6]), STR_20(CODE[17]), STR_21(CODE[17]), 
		 -> STR_22(CODE[16]), STR_4(CODE[17]), STR_5(CODE[17]), STR_6(CODE[17]), 
		 -> STR_7(CODE[17]), STR_8(CODE[17]), STR_9(CODE[17]), 

    msgs	PTR unsigned char [2][7] size(2) Largest target is 17
		 -> STR_10(CODE[17]), STR_11(CODE[17]), STR_12(CODE[17]), STR_13(CODE[17]), 
		 -> STR_14(CODE[17]), STR_15(CODE[17]), STR_16(CODE[17]), STR_17(CODE[17]), 
		 -> STR_4(CODE[17]), STR_5(CODE[17]), STR_6(CODE[17]), STR_7(CODE[17]), 
		 -> STR_8(CODE[17]), STR_9(CODE[17]), 

    serial_out	PTR unsigned char [2] size(2) Largest target is 14
		 -> STR_2(CODE[13]), STR_3(CODE[14]), 

    serialSendString@str	PTR const unsigned char  size(2) Largest target is 14
		 -> eventRead@envio(BANK0[7]), serialSendInt@buffer(COMRAM[12]), STR_1(CODE[6]), STR_2(CODE[13]), 
		 -> STR_3(CODE[14]), 


Critical Paths under _main in COMRAM

    _main->_smLoop
    _i2cInit->_pinMode
    _smLoop->_eventRead
    _updateLevel->_ADC_Read
    _outputPrint->_lcdInt
    _lcdString->_lcdData
    _lcdInt->_getAlarmLowerLevel
    _lcdInt->_getAlarmUpperLevel
    _lcdData->_lcdCommand4bits
    _getSEC->_dsReadData
    _getMIN->_dsReadData
    _getLanguage->_dsReadData
    _getHOUR->_dsReadData
    _getAlarmUpperLevel->_dsReadData
    _getAlarmLowerLevel->_dsReadData
    _dsReadData->_i2cReadByte
    _i2cReadByte->_i2c_read_bit
    _i2cReadByte->_i2c_write_bit
    _eventRead->_serialSendInt
    _setSEC->_dsWriteData
    _setMIN->_dsWriteData
    _setLanguage->_dsWriteData
    _setHOUR->_dsWriteData
    _setAlarmUpperLevel->_getAlarmUpperLevel
    _setAlarmLowerLevel->_getAlarmLowerLevel
    _dsWriteData->_i2cWriteByte
    _i2cWriteByte->_i2c_read_bit
    _i2cWriteByte->_i2c_write_bit
    _clear_SDA->_digitalWrite
    _clear_SDA->_pinMode
    _read_SDA->_pinMode
    _read_SCL->_pinMode
    _clear_SCL->_digitalWrite
    _clear_SCL->_pinMode
    _serialSendInt->_intToStr
    _intToStr->___awmod
    ___awmod->___awdiv
    _pow10->___wmul
    _outputInit->_lcdInit
    _lcdInit->_lcdCommand
    _lcdCommand->_Delay2ms
    _lcdCommand->_lcdCommand4bits

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0 1034088
                          _eventInit
                         _kpDebounce
                             _kpInit
                            _lcdInit
                         _outputInit
                         _serialInit
                             _smLoop
                            _varInit
 ---------------------------------------------------------------------------------
 (1) _varInit                                              0     0      0   76836
                             _dsInit
                        _getLanguage
                        _setLanguage
 ---------------------------------------------------------------------------------
 (2) _dsInit                                               0     0      0    1352
                            _i2cInit
 ---------------------------------------------------------------------------------
 (3) _i2cInit                                              0     0      0    1352
                            _pinMode
 ---------------------------------------------------------------------------------
 (1) _smLoop                                               4     4      0  953652
                                             66 COMRAM     4     4      0
                          _eventRead
                 _getAlarmLowerLevel
                 _getAlarmUpperLevel
                            _getHOUR
                        _getLanguage
                           _getLevel
                             _getMIN
                             _getSEC
                           _getState
                        _outputPrint
                         _serialSend
                      _serialSendInt
                   _serialSendString
                 _setAlarmLowerLevel
                 _setAlarmUpperLevel
                            _setHOUR
                        _setLanguage
                             _setMIN
                             _setSEC
                           _setState
                        _updateLevel
 ---------------------------------------------------------------------------------
 (2) _updateLevel                                          0     0      0      44
                           _ADC_Init
                           _ADC_Read
 ---------------------------------------------------------------------------------
 (3) _ADC_Read                                             5     3      2      44
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (3) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setState                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _outputPrint                                         14    10      4  302962
                                             24 COMRAM    14    10      4
                            ___awdiv
                            ___awmod
                 _getAlarmLowerLevel
                 _getAlarmUpperLevel
                            _getHOUR
                        _getLanguage
                           _getLevel
                             _getMIN
                             _getSEC
                           _getState (ARG)
                         _lcdCommand
                            _lcdData
                             _lcdInt
                          _lcdString
 ---------------------------------------------------------------------------------
 (3) _lcdString                                            6     4      2    1810
                                              3 COMRAM     6     4      2
                            _lcdData
 ---------------------------------------------------------------------------------
 (3) _lcdInt                                               2     0      2    8095
                                             22 COMRAM     2     0      2
                            ___awdiv
                            ___awmod
                 _getAlarmLowerLevel (ARG)
                 _getAlarmUpperLevel (ARG)
                           _getLevel (ARG)
                            _lcdData
 ---------------------------------------------------------------------------------
 (4) _lcdData                                              1     1      0     808
                                              2 COMRAM     1     1      0
                          _Delay40us
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (3) _getSEC                                               0     0      0   47243
                         _dsReadData
 ---------------------------------------------------------------------------------
 (3) _getMIN                                               0     0      0   47243
                         _dsReadData
 ---------------------------------------------------------------------------------
 (3) _getLevel                                             2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _getLanguage                                          0     0      0   47243
                         _dsReadData
 ---------------------------------------------------------------------------------
 (3) _getHOUR                                              0     0      0   47243
                         _dsReadData
 ---------------------------------------------------------------------------------
 (3) _getAlarmUpperLevel                                   4     2      2   47243
                                             18 COMRAM     4     2      2
                         _dsReadData
 ---------------------------------------------------------------------------------
 (3) _getAlarmLowerLevel                                   4     2      2   47243
                                             18 COMRAM     4     2      2
                         _dsReadData
 ---------------------------------------------------------------------------------
 (3) _dsReadData                                           5     3      2   47243
                                             13 COMRAM     5     3      2
                        _i2cReadByte
                       _i2cWriteByte
 ---------------------------------------------------------------------------------
 (4) _i2cReadByte                                          6     5      1   19023
                                              7 COMRAM     6     5      1
                       _i2c_read_bit
                           _i2c_stop
                      _i2c_write_bit
 ---------------------------------------------------------------------------------
 (2) _getState                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _eventRead                                           23    21      2  187422
                                             43 COMRAM    23    21      2
                             ___wmul
                             _kpRead
                              _pow10
                         _serialRead
                         _serialSend
                      _serialSendInt
                   _serialSendString
                 _setAlarmLowerLevel
                 _setAlarmUpperLevel
                            _setHOUR
                        _setLanguage
                             _setMIN
                             _setSEC
 ---------------------------------------------------------------------------------
 (2) _setSEC                                               1     1      0   28265
                                             14 COMRAM     1     1      0
                        _dsWriteData
 ---------------------------------------------------------------------------------
 (2) _setMIN                                               1     1      0   28265
                                             14 COMRAM     1     1      0
                        _dsWriteData
 ---------------------------------------------------------------------------------
 (2) _setLanguage                                          1     1      0   28241
                                             14 COMRAM     1     1      0
                        _dsWriteData
 ---------------------------------------------------------------------------------
 (2) _setHOUR                                              1     1      0   28265
                                             14 COMRAM     1     1      0
                        _dsWriteData
 ---------------------------------------------------------------------------------
 (2) _setAlarmUpperLevel                                   2     0      2   28491
                                             22 COMRAM     2     0      2
                             ___wmul (ARG)
                        _dsWriteData
                 _getAlarmUpperLevel (ARG)
 ---------------------------------------------------------------------------------
 (2) _setAlarmLowerLevel                                   2     0      2   28491
                                             22 COMRAM     2     0      2
                             ___wmul (ARG)
                        _dsWriteData
                 _getAlarmLowerLevel (ARG)
 ---------------------------------------------------------------------------------
 (3) _dsWriteData                                          3     1      2   28219
                                             11 COMRAM     3     1      2
                       _i2cWriteByte
 ---------------------------------------------------------------------------------
 (4) _i2cWriteByte                                         5     3      2   27491
                                              7 COMRAM     4     2      2
                       _i2c_read_bit
                          _i2c_start
                           _i2c_stop
                      _i2c_write_bit
 ---------------------------------------------------------------------------------
 (5) _i2c_write_bit                                        1     1      0    7692
                                              6 COMRAM     1     1      0
                          _I2C_delay
                          _clear_SCL
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (5) _i2c_stop                                             0     0      0    5548
                          _I2C_delay
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (5) _i2c_start                                            0     0      0    7648
                          _I2C_delay
                          _clear_SCL
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (6) _clear_SDA                                            0     0      0    2100
                       _digitalWrite
                            _pinMode
 ---------------------------------------------------------------------------------
 (5) _i2c_read_bit                                         1     1      0    5571
                                              6 COMRAM     1     1      0
                          _I2C_delay
                          _clear_SCL
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (6) _read_SDA                                             0     0      0    1724
                        _digitalRead
                            _pinMode
 ---------------------------------------------------------------------------------
 (6) _read_SCL                                             0     0      0    1724
                        _digitalRead
                            _pinMode
 ---------------------------------------------------------------------------------
 (7) _digitalRead                                          5     3      2     372
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (6) _clear_SCL                                            0     0      0    2100
                       _digitalWrite
                            _pinMode
 ---------------------------------------------------------------------------------
 (7) _pinMode                                              6     2      4    1352
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) _digitalWrite                                         6     2      4     748
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _I2C_delay                                            4     4      0       0
 ---------------------------------------------------------------------------------
 (2) _serialSendInt                                       14    12      2    8793
                                             29 COMRAM    14    12      2
                             ___wmul (ARG)
                            _getHOUR (ARG)
                             _getMIN (ARG)
                             _getSEC (ARG)
                           _intToStr
                              _pow10 (ARG)
                   _serialSendString
 ---------------------------------------------------------------------------------
 (2) _serialSendString                                     2     0      2     447
                                             18 COMRAM     2     0      2
                        _getLanguage (ARG)
                         _serialSend
 ---------------------------------------------------------------------------------
 (3) _serialSend                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _intToStr                                            15    12      3    7654
                                             14 COMRAM    15    12      3
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    4096
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2732
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _serialRead                                           1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _pow10                                                7     5      2    3919
                                              6 COMRAM     7     5      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3675
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _kpRead                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _serialInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _outputInit                                           0     0      0    1800
                            _lcdInit
 ---------------------------------------------------------------------------------
 (2) _lcdInit                                              1     1      0    1800
                                              3 COMRAM     1     1      0
                           _Delay2ms
                         _lcdCommand
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (3) _lcdCommand                                           1     1      0     944
                                              2 COMRAM     1     1      0
                           _Delay2ms
                          _Delay40us
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (5) _lcdCommand4bits                                      2     1      1     718
                                              0 COMRAM     2     1      1
                        _pulseEnable
 ---------------------------------------------------------------------------------
 (6) _pulseEnable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Delay40us                                            1     1      0      46
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Delay2ms                                             2     2      0      92
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _kpDebounce                                           2     2      0       0
 ---------------------------------------------------------------------------------
 (1) _eventInit                                            0     0      0       0
                             _kpInit
 ---------------------------------------------------------------------------------
 (1) _kpInit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _eventInit
     _kpInit
   _kpDebounce
   _kpInit
   _lcdInit
     _Delay2ms
     _lcdCommand
       _Delay2ms
       _Delay40us
       _lcdCommand4bits
         _pulseEnable
     _lcdCommand4bits
   _outputInit
     _lcdInit
   _serialInit
   _smLoop
     _eventRead
       ___wmul
       _kpRead
       _pow10
         ___wmul
       _serialRead
       _serialSend
       _serialSendInt
         ___wmul (ARG)
         _getHOUR (ARG)
           _dsReadData
             _i2cReadByte
               _i2c_read_bit
                 _I2C_delay
                 _clear_SCL
                   _digitalWrite
                   _pinMode
                 _read_SCL
                   _digitalRead
                   _pinMode
                 _read_SDA
                   _digitalRead
                   _pinMode
               _i2c_stop
                 _I2C_delay
                 _clear_SDA
                   _digitalWrite
                   _pinMode
                 _read_SCL
                 _read_SDA
               _i2c_write_bit
                 _I2C_delay
                 _clear_SCL
                 _clear_SDA
                 _read_SCL
                 _read_SDA
             _i2cWriteByte
               _i2c_read_bit
               _i2c_start
                 _I2C_delay
                 _clear_SCL
                 _clear_SDA
                 _read_SCL
                 _read_SDA
               _i2c_stop
               _i2c_write_bit
         _getMIN (ARG)
           _dsReadData
         _getSEC (ARG)
           _dsReadData
         _intToStr (ARG)
           ___awdiv
           ___awmod
             ___awdiv (ARG)
         _pow10 (ARG)
         _serialSendString (ARG)
           _getLanguage (ARG)
             _dsReadData
           _serialSend (ARG)
       _serialSendString
       _setAlarmLowerLevel
         ___wmul (ARG)
         _dsWriteData (ARG)
           _i2cWriteByte
         _getAlarmLowerLevel (ARG)
           _dsReadData
       _setAlarmUpperLevel
         ___wmul (ARG)
         _dsWriteData (ARG)
         _getAlarmUpperLevel (ARG)
           _dsReadData
       _setHOUR
         _dsWriteData
       _setLanguage
         _dsWriteData
       _setMIN
         _dsWriteData
       _setSEC
         _dsWriteData
     _getAlarmLowerLevel
     _getAlarmUpperLevel
     _getHOUR
     _getLanguage
     _getLevel
     _getMIN
     _getSEC
     _getState
     _outputPrint
       ___awdiv
       ___awmod
       _getAlarmLowerLevel
       _getAlarmUpperLevel
       _getHOUR
       _getLanguage
       _getLevel
       _getMIN
       _getSEC
       _getState (ARG)
       _lcdCommand (ARG)
       _lcdData (ARG)
         _Delay40us
         _lcdCommand4bits
       _lcdInt (ARG)
         ___awdiv
         ___awmod
         _getAlarmLowerLevel (ARG)
         _getAlarmUpperLevel (ARG)
         _getLevel (ARG)
         _lcdData (ARG)
       _lcdString (ARG)
         _lcdData
     _serialSend
     _serialSendInt
     _serialSendString
     _setAlarmLowerLevel
     _setAlarmUpperLevel
     _setHOUR
     _setLanguage
     _setMIN
     _setSEC
     _setState
     _updateLevel
       _ADC_Init
       _ADC_Read
   _varInit
     _dsInit
       _i2cInit
         _pinMode
     _getLanguage
     _setLanguage

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM_1           400      0       0      32        0.0%
BIGRAM             3EE      0       0      33        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      17        0.0%
BANK7              100      0       0      18        0.0%
BITBANK6           100      0       0      15        0.0%
BANK6              100      0       0      16        0.0%
BITBANK5           100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK3            EF      0       0       9        0.0%
BANK3               EF      0       0      10        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      35       4       33.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     46      5F       1      100.0%
BITBIGSFRlll        20      0       0      30        0.0%
BITBIGSFR_1hhhh      F      0       0      23        0.0%
BITBIGSFRlh          D      0       0      29        0.0%
BITBIGSFR_1hll       C      0       0      26        0.0%
BITBIGSFR_5          C      0       0      19        0.0%
BITBIGSFR_1hhlh      7      0       0      25        0.0%
BITBIGSFR_1hhhl      7      0       0      24        0.0%
BITBIGSFR_2          6      0       0      22        0.0%
BITBIGSFRh           5      0       0      28        0.0%
BITBIGSFR_4          3      0       0      20        0.0%
BITBIGSFR_3          3      0       0      21        0.0%
BITBIGSFR_1l         1      0       0      27        0.0%
BIGSFR_5             0      0       0     200        0.0%
BIGSFR_4             0      0       0     200        0.0%
BIGSFR_3             0      0       0     200        0.0%
BIGSFR_2             0      0       0     200        0.0%
BIGSFR_1             0      0       0     200        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      94      31        0.0%
DATA                 0      0      94      34        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Mon Jul 01 00:28:05 2024

                   lcdString@msg 0004                               l21 5BE4                               l44 5A30  
                             l53 616A                               l47 5A42                               l73 5C9C  
                             l57 6722                               l92 5CCA                               l76 5A8C  
                             l68 5AA8                               l85 5A5A                               l95 597C  
                   ___awdiv@sign 0006              ___wmul@multiplicand 0003                    ??_i2cReadByte 0009  
          i2cWriteByte@send_stop 0008                   i2cReadByte@bit 000B                              l115 5F0C  
                            l123 62BA                              l108 6242                              l205 634A  
                            l222 5D90                              l118 5AC6                              l207 635E  
                            l231 5C46                              l135 6058                              l216 5C70  
                            l225 5DC8                              l241 5E7E                              l322 688C  
                            l219 596E                              l323 6888                              l139 65CC  
                            l228 5C1C                              l164 5D26                              l404 6E34  
                            l182 599A                              l318 6ADA                              l270 61CA  
                            l158 5988                              l327 6888                              l263 5D58  
                            l167 5EC4                              l352 6D28                              l248 5CF8  
                            l600 5990                              l520 76AE                              l185 5972  
                            l257 60B0                              l425 71E8                              l603 59F4  
                            l276 5FAE                              l381 6104                              l382 610C  
                            l614 5BCA                              l606 59E4                              l631 5E38  
                            l624 5B7E                              l609 59C4                              l561 7C00  
                            l619 5BA4                              l652 5B32                              l389 59B4  
                            l549 5982                              l645 5E00                              l638 5B58  
                            l655 59D4                              l591 59A4                              l673 5A04  
                            l914 64D2                              l658 5A72                              l594 5A18  
                            l683 5B0C                              l588 5A2C                              l597 5976  
                            l677 5F5A                              l678 5F3A                              l927 640E  
                   ___awmod@sign 000E                              wreg 0FE8                 i2c_write_bit@bit 0007  
       __end_of_serialSendString 616C                    ?_i2cWriteByte 0008           i2cWriteByte@send_start 000A  
                i2cReadByte@nack 000A                  i2cReadByte@byte 000D              getAlarmLowerLevel@a 0052  
            getAlarmLowerLevel@b 0051                             l3010 5CA8                             l3002 5CA2  
                           l3012 5CB8                             l3100 5B6C                             l3020 5EBC  
                           l3014 5CBA                             l3008 5CA6                             l2304 5A74  
                           l3040 5C84                             l3032 5A8E                             l3024 5CFC  
                           l3104 5B70                             l3112 5B96                             l3120 5BBC  
                           l3016 5AAC                             l2330 62E0                             l2322 62BC  
                           l3050 5EC8                             l3210 626A                             l2306 5A88  
                           l3026 5AE8                             l3042 5C88                             l3034 5A9E  
                           l3130 5B3C                             l3122 5A5E                             l3106 5B82  
                           l3114 5BA8                             l3018 5E80                             l2340 62FE  
                           l2332 62E6                             l2324 62CA                             l3052 5EDE  
                           l3204 6254                             l2308 5A8A                             l3028 5B04  
                           l3044 5C96                             l3036 5C72                             l3140 5B24  
                           l3132 5B4A                             l3124 5A64                             l3108 5B92  
                           l3116 5BB8                             l3300 6F82                             l3220 6D58  
                           l3060 6004                             l3212 5984                             l2350 6328  
                           l2342 630C                             l2334 62E8                             l2326 62D0  
                           l3054 5EF0                             l3206 6258                             l3046 5C9A  
                           l3038 5C76                             l3134 5B0E                             l3126 5B34  
                           l3310 702A                             l3302 6FAE                             l3230 6D92  
                           l3222 6D66                             l3214 6D2A                             l3150 5DCA  
                           l3142 599C                             l3070 64E2                             l3062 6010  
                           l2360 635A                             l2352 632A                             l2344 6312  
                           l2336 62F6                             l2328 62D2                             l3056 5F00  
                           l3208 625A                             l2600 6724                             l3136 5B12  
                           l3128 5B38                             l3320 7106                             l3312 703C  
                           l3304 6FC0                             l3240 6DC8                             l3224 6D6E  
                           l3232 6D9A                             l3216 6D32                             l3152 5DEA  
                           l3144 5E02                             l3160 59D6                             l3080 6580  
                           l3072 64EA                             l3064 602C                             l3400 7824  
                           l2354 633C                             l2346 6314                             l2338 62FC  
                           l3058 5F08                             l3090 60B2                             l2610 6784  
                           l2602 6740                             l3138 5B16                             l3330 7196  
                           l3322 717E                             l3314 706A                             l3306 6FEC  
                           l3250 6E0A                             l3242 6DD4                             l3234 6DA2  
                           l3226 6D7C                             l3218 6D3E                             l3146 5E22  
                           l3082 65B0                             l3074 64F0                             l3066 6030  
                           l3410 786A                             l3402 782A                             l2356 6342  
                           l2348 6322                             l3092 60C6                             l2700 5E66  
                           l3340 71BC                             l3332 7198                             l3316 707C  
                           l3308 6FFE                             l3260 6E56                             l3252 6E16  
                           l3244 6DDA                             l3236 6DA8                             l3228 6D84  
                           l3156 59B6                             l3164 59E6                             l3076 6520  
                           l3068 64D4                             l3500 7BC6                             l3420 78D8  
                           l3412 7884                             l3404 7830                             l3172 59F6  
                           l3084 5C48                             l3190 5992                             l2358 6346  
                           l3086 5970                             l3094 60E2                             l2710 5E7A  
                           l2702 5E6A                             l3342 71C4                             l3334 71A8  
                           l3318 70F4                             l3270 6E6C                             l3254 6E28  
                           l3246 6DEC                             l3238 6DB8                             l3350 71E0  
                           l3078 6550                             l3502 7BCC                             l3430 795C  
                           l3422 7906                             l3414 788A                             l3406 7836  
                           l3174 5A02                             l3182 5F2C                             l3510 5A1E  
                           l3192 5994                             l2800 6228                             l3096 60E6  
                           l2640 68AA                             l2560 6ADC                             l2632 6840  
                           l2624 67F8                             l2616 67B0                             l2608 6768  
                           l2704 5E6E                             l2720 5CEC                             l2712 5CCC  
                           l3344 71CA                             l3336 71AC                             l3328 7182  
                           l3280 6EA2                             l3272 6E80                             l3248 6DF8  
                           l3256 6E34                             l3360 5974                             l3168 59C6  
                           l3504 7BEE                             l3440 79A2                             l3432 7962  
                           l3416 78B8                             l3408 783C                             l3424 7920  
                           l3184 5F38                             l3176 5F10                             l3600 7448  
                           l3520 71EA                             l3512 5A22                             l3194 5998  
                           l3514 59A6                             l2802 6236                             l2650 6934  
                           l2642 68BC                             l2570 6B68                             l2562 6AF8  
                           l2634 685C                             l2626 6814                             l2618 67CC  
                           l2706 5E72                             l2722 5CF0                             l2714 5CD0  
                           l2730 6074                             l2810 617E                             l3098 5B5C  
                           l3346 71D6                             l3338 71B6                             l3290 6F52  
                           l3282 6EC8                             l3274 6E88                             l3266 6E5E  
                           l3258 6E46                             l3506 7BF4                             l3450 7A10  
                           l3442 79BC                             l3434 7968                             l3426 7934  
                           l3418 78D2                             l3370 76EC                             l3354 598C  
                           l3186 5F48                             l3178 5F20                             l3602 7464  
                           l3610 7488                             l3530 722C                             l3522 71EE  
                           l3516 59AA                             l2804 623C                             l3196 6244  
                           l2900 6360                             l2660 69CC                             l2652 6954  
                           l2644 68DC                             l2580 6BF2                             l2572 6B7A  
                           l2564 6B0A                             l2708 5E76                             l2724 5CF4  
                           l2716 5CD4                             l2740 60A4                             l2732 6078  
                           l2820 619C                             l2812 6182                             l3348 71DC  
                           l3292 6F5E                             l3284 6EF4                             l3276 6E8E  
                           l3268 6E6A                             l3460 7A92                             l3452 7A3E  
                           l3444 79C2                             l3436 796E                             l3428 793A  
                           l3380 7732                             l3372 76F2                             l3364 76B0  
                           l3356 5A06                             l3612 749A                             l3604 746A  
                           l3540 7280                             l3532 723E                             l3524 71FA  
                           l3508 5A1A                             l2806 623E                             l3198 6250  
                           l3518 597E                             l2910 638C                             l2902 6364  
                           l2670 6A66                             l2662 69EE                             l2654 6976  
                           l2646 68FE                             l2638 688E                             l2590 6C8E  
                           l2582 6C16                             l2574 6B9E                             l2566 6B2A  
                           l2750 5D30                             l2718 5CE8                             l2742 60A8  
                           l2734 607C                             l2726 605C                             l2830 61C6  
                           l2822 61A0                             l3286 6EFC                             l3470 7AD6  
                           l3462 7A98                             l3446 79F0                             l3438 7974  
                           l3454 7A58                             l3390 77A0                             l3382 774C  
                           l3374 76F8                             l3366 76C4                             l3358 5A0A  
                           l3630 753C                             l3614 74AA                             l3606 7474  
                           l3550 72D6                             l3542 7294                             l3534 7252  
                           l3526 7206                             l3622 74B4                             l2920 63C4  
                           l2912 6394                             l2904 6372                             l2672 6A82  
                           l2664 6A0A                             l2656 6992                             l2648 691A  
                           l2592 6CB4                             l2584 6C3C                             l2576 6BC4  
                           l2568 6B4C                             l2752 5D44                             l2744 60AC  
                           l2736 6090                             l2728 606C                             l2824 61A2  
                           l2808 616E                             l3288 6F22                             l3296 6F64  
                           l2840 5F6A                             l3480 7B20                             l3472 7ADC  
                           l3464 7AA8                             l3456 7A6A                             l3448 7A0A  
                           l3392 77CE                             l3384 7752                             l3376 76FE  
                           l3368 76CA                             l3640 7574                             l3632 754E  
                           l3608 747C                             l3560 7324                             l3552 72E8  
                           l3544 72A6                             l3536 7264                             l3624 74F4  
                           l3528 7218                             l2690 5978                             l2930 63FE  
                           l2922 63DA                             l2914 63A6                             l2906 637A  
                           l2762 5A30                             l2674 6A9C                             l2666 6A24  
                           l2658 69AC                             l2594 6CD0                             l2586 6C58  
                           l2578 6BE0                             l2682 5D92                             l2754 5D4A  
                           l2746 5D28                             l2738 60A0                             l2826 61B2  
                           l2818 6186                             l3298 6F70                             l2850 5FA8  
                           l2842 5F78                             l2834 5F5E                             l3490 7B72  
                           l3474 7AFE                             l3482 7B30                             l3466 7AB4  
                           l3458 7A70                             l3386 7780                             l3378 7704  
                           l3394 77E8                             l3650 75BA                             l3642 758E  
                           l3634 7554                             l3626 7500                             l3570 736A  
                           l3562 732E                             l3554 72F4                             l3546 72BA  
                           l3538 726E                             l2772 5A48                             l2780 61E4  
                           l2860 6422                             l2932 6406                             l2924 63E2  
                           l2916 63AE                             l2908 637E                             l2764 5A3E  
                           l2940 6136                             l2676 6ABC                             l2668 6A44  
                           l2596 6CE2                             l2588 6C6A                             l2756 5D4E  
                           l2748 5D2C                             l2692 5E3A                             l2828 61B6  
                           l2852 5FAC                             l2844 5F7C                             l3492 7B86  
                           l3484 7B44                             l3476 7B04                             l3468 7AC4  
                           l3396 77FC                             l3388 779A                             l3660 7614  
                           l3652 75CA                             l3644 759E                             l3636 755A  
                           l3628 7518                             l3580 73B6                             l3572 737C  
                           l3564 7340                             l3556 7306                             l3548 72CC  
                           l2774 5A4A                             l2766 5A44                             l2790 620A  
                           l2782 61E6                             l2870 6448                             l2862 642A  
                           l2926 63E8                             l2918 63B6                             l2950 65FA  
                           l2942 613A                             l2598 6D06                             l2686 5BF4  
                           l2678 5D5A                             l2758 5D56                             l2694 5E4A  
                           l2846 5F92                             l3494 7B92                             l3486 7B4A  
                           l3478 7B14                             l3398 7802                             l3670 7662  
                           l3662 761E                             l3646 75A4                             l3638 7562  
                           l3654 75D8                             l3590 73FC                             l3582 73C2  
                           l3574 7386                             l3566 734C                             l3558 7312  
                           l2792 6210                             l2784 61F4                             l2776 61CE  
                           l2880 6480                             l2872 6450                             l2864 642E  
                           l2856 6410                             l2928 63EE                             l2960 6622  
                           l2952 65FE                             l2944 65CE                             l2936 610E  
                           l2688 5C1E                             l2696 5E4E                             l2848 5F98  
                           l3496 7BA6                             l3488 7B6C                             l3672 7668  
                           l3664 7626                             l3656 75FC                             l3648 75B4  
                           l3680 7682                             l3592 740E                             l3584 73D4  
                           l3576 7398                             l3568 735E                             l2794 6212  
                           l2786 61FA                             l2778 61DE                             l2890 64AC  
                           l2882 6486                             l2874 6462                             l2866 643C  
                           l2858 6414                             l2962 662E                             l2970 6678  
                           l2946 65DE                             l2938 6112                             l2698 5E52  
                           l3498 7BB2                             l3682 769C                             l3674 7678  
                           l3666 7638                             l3658 760E                             l3594 741A  
                           l3586 73DE                             l3578 73A4                             l2796 6220  
                           l2788 61FC                             l2884 649C                             l2876 646A  
                           l2892 64B2                             l2868 6444                             l2980 66B6  
                           l2972 668A                             l2964 664A                             l2948 65F0  
                           l2956 660C                             l3684 76A6                             l3668 7652  
                           l3596 742C                             l3588 73F0                             l2798 6226  
                           l2894 64C2                             l2886 64A4                             l2878 6472  
                           l2990 66FA                             l2982 66BE                             l2974 669C  
                           l2966 6658                             l2958 661A                             l3598 7436  
                           l3686 5BCC                             l2896 64CA                             l2888 64A6  
                           l2992 66FE                             l2984 66CE                             l2976 66A8  
                           l2968 665C                             l3688 5BE8                             l2986 66DA  
                           l2994 6704                             l2978 66AC                             l2996 5C9E  
                           l2988 66EE                             STR_1 7D1D                             STR_2 7D31  
                           STR_3 7D23                             STR_4 7CE0                             STR_5 7C7A  
                           STR_6 7CCF                             STR_7 7C8B                             STR_8 7C9C  
                           STR_9 7C69                             u2010 67CC                             u2011 67C8  
                           u2004 679A                             u2005 6796                             u2110 691A  
                           u2030 6814                             u2111 6916                             u2031 6810  
                           u1400 62CA                             u2200 6A24                             u2120 6934  
                           u2104 68EE                             u2024 67E2                             u3000 6F82  
                           u1401 62C6                             u2201 6A20                             u2121 6930  
                           u2105 68EA                             u2025 67DE                             u3001 6F7E  
                           u1410 62E0                             u2050 685C                             u3010 6FC0  
                           u1411 62DC                             u2051 6858                             u3011 6FBC  
                           u1420 62F6                             u2044 682A                             u2300 5DC8  
                           u3020 6FFE                             u3100 7A6A                             u1421 62F2  
                           u2045 6826                             u3021 6FFA                             u3101 7A66  
                           u1430 630C                             u2230 6A82                             u2214 6A36  
                           u2150 6992                             u2134 6946                             u2070 68AA  
                           u2310 5E4A                             u3030 703C                             u3110 7AD6  
                           u1431 6308                             u2231 6A7E                             u2215 6A32  
                           u2151 698E                             u2135 6942                             u2071 68A6  
                           u2311 5E46                             u3031 7038                             u3111 7AD2  
                           u1440 6322                             u2400 61DE                             u2240 6A9C  
                           u2224 6A56                             u2160 69AC                             u2144 6966  
                           u2080 68BC                             u2064 6872                             u2320 5E66  
                           u3040 707C                             u3120 7B44                             u3200 72A6  
                           u1441 631E                             u2401 61DA                             u2241 6A98  
                           u2225 6A52                             u2161 69A8                             u2145 6962  
                           u2081 68B8                             u2065 686E                             u2321 5E62  
                           u3041 7078                             u3121 7B40                             u3201 72A2  
                           u1450 633C                             u2410 61F4                             u2330 5CE8  
                           u3050 7106                             u3130 7B86                             u3210 72CC  
                           u1451 6338                             u2411 61F0                             u2331 5CE4  
                           u3051 7102                             u3131 7B82                             u3211 72C8  
            setAlarmLowerLevel@a 0050                             u1460 635A                             u2420 620A  
                           u2340 606C                             u3060 71A8                             u2500 5F92  
                           u3140 7BA6                             u3300 73D4                             u3220 72E8  
            setAlarmLowerLevel@b 004F                             u1461 6356                             u2421 6206  
                           u2341 6068                             u3061 71A4                             u2501 5F8E  
                           u3141 7BA2                             u3301 73D0                             u3221 72E4  
                           u2430 6220                             u2254 6AAE                             u2190 6A0A  
                           u2174 69BE                             u2094 68CE                             u2270 5D8E  
                           u2350 6090                             u2510 5FA8                             u3150 7BC6  
                           u3070 76C4                             u3310 73F0                             u3230 7306  
                           u2431 621C                             u2255 6AAA                             u2191 6A06  
                           u2175 69BA                             u2095 68CA                             u2271 5D88  
                           u2351 608C                             u2511 5FA4                             u3151 7BC2  
                           u3071 76C0                             u3311 73EC                             u3231 7302  
                           u2440 6236                             u2520 6422                             u2600 63A6  
                           u2264 6ACE                             u2184 69DE                             u2280 5D90  
                           u2360 60A0                             u3080 77FC                             u3400 7574  
                           u3320 740E                             u3240 7324                             u3160 7218  
                           u2441 6232                             u2521 641E                             u2601 63A2  
                           u2265 6ACA                             u2185 69DA                             u2361 609C  
                           u3081 77F8                             u3401 7570                             u3321 740A  
                           u3241 7320                             u3161 7214                             u2530 643C  
                           u2610 63C4                             u1810 6B68                             u2290 5DC6  
                           u2370 5D44                             u2450 617E                             u3090 7934  
                           u3410 75FC                             u3330 742C                             u3250 7340  
                           u3170 723E                             u2531 6438                             u2611 63C0  
                           u1811 6B64                             u2291 5DC0                             u2371 5D40  
                           u2451 617A                             u3091 7930                             u3411 75F8  
                           u3331 7428                             u3251 733C                             u3171 723A  
                           u2540 6462                             u2620 63DA                             u2700 669C  
                           u2380 5A3E                             u1900 6C6A                             u1820 6B7A  
                           u1804 6B3C                             u2460 6196                             u3420 760E  
                           u3340 7448                             u3260 735E                             u3180 7264  
                           u2541 645E                             u2621 63D6                             u2701 6698  
                           u2381 5A3A                             u1901 6C66                             u1821 6B76  
                           u1805 6B38                             u2461 6190                             u3421 760A  
                           u3341 7444                             u3261 735A                             u3181 7260  
                           u2390 5A5A                             u2550 6480                             u2630 63FE  
                           u2710 6722                             u2470 6198                             u3430 7638  
                           u3350 7464                             u3270 737C                             u3190 7280  
                           u2391 5A56                             u2551 647C                             u2631 63FA  
                           u2711 671E                             u3431 7634                             u3351 7460  
                           u3271 7378                             u3191 727C                             u2720 5CB8  
                           u2800 6104                             u2560 649C                             u2640 6132  
                           u2480 61B2                             u3440 769C                             u3360 749A  
                           u3280 7398                             u2721 5CB4                             u2801 6100  
                           u2561 6498                             u2481 61AE                             u3441 7698  
                           u3361 7496                             u3281 7394                             u2730 5CCA  
                           u2570 64C2                             u2650 615A                             u1930 6CD0  
                           u1914 6C80                             u1850 6BE0                             u1834 6B90  
                           u1770 6AF8                             u2490 61C6                             u2810 5B6C  
                           u3370 74AA                             u3290 73B6                             u2731 5CC6  
                           u2571 64BE                             u1931 6CCC                             u1915 6C7C  
                           u1851 6BDC                             u1835 6B8C                             u1771 6AF4  
                           u2491 61C2                             u2811 5B68                             u3371 74A6  
                           u3291 73B2                             u2740 5C84                             u2580 6372  
                           u2660 616A                             u1940 6CE2                             u1924 6CA4  
                           u1860 6BF2                             u1844 6BB4                             u1780 6B0A  
                           u2820 5B92                             u2900 6D92                             u3380 753C  
                           u2741 5C80                             u2581 636E                             u2661 6166  
                           u1941 6CDE                             u1925 6CA0                             u1861 6BEE  
                           u1845 6BB0                             u1781 6B06                             u2821 5B8E  
                           u2901 6D8E                             u3381 7538                             u2750 5C96  
                           u2590 638C                             u2670 65F0                             u2830 5BB8  
                           u2910 6DB8                             u3390 754E                             u2751 5C92  
                           u2591 6388                             u2671 65EC                             u2647 6128  
                           u2831 5BB4                             u2911 6DB4                             u3391 754A  
                           u2760 5EF0                             u2680 661A                             u2920 6DC8  
                           u2840 5F20                             u2761 5EEC                             u2681 6616  
                           u2657 6150                             u2921 6DC4                             u2841 5F1C  
                           u2770 5F00                             u2690 668A                             u1954 6CF8  
                           u1890 6C58                             u1874 6C08                             u1794 6B1C  
                           u1970 6740                             u2930 6DEC                             u2850 5F48  
                           u2771 5EFC                             u2691 6686                             u1955 6CF4  
                           u1891 6C54                             u1875 6C04                             u1795 6B18  
                           u1971 673C                             u2931 6DE8                             u2851 5F44  
                           u2860 626A                             u1964 6D1C                             u1884 6C2C  
                           u2940 6E0A                             u2780 6058                             u2861 6266  
                           u1965 6D18                             u1885 6C28                             u2941 6E06  
                           u2781 6054                             u1990 6784                             u2950 6E28  
                           u2870 6D58                             u2790 64E2                             u1991 6780  
                           u2951 6E24                             u2871 6D54                             u2791 64DE  
                           u1984 6752                             u2960 6E46                             u2880 6D66  
                           u1985 674E                             u2961 6E42                             u2881 6D62  
                           u2970 6E56                             u2890 6D7C                             u2971 6E52  
                           u2891 6D78                             u2980 6E7C                             u2981 6E78  
                           u2990 6E9E                             u2991 6E9A                             _PIR1 0F9E  
                    _outputPrint 76B0                             _flag 008A                             _main 5BCC  
                           _send 0086                             _msgs 0060                             _time 0084  
                           fsr0h 0FEA                             fsr1h 0FE2                             indf0 0FEF  
                           fsr2h 0FDA                             fsr0l 0FE9                             indf1 0FE7  
                           indf2 0FDF                             fsr1l 0FE1                             fsr2l 0FD9  
               __end_of_ADC_Init 5A06                 __end_of_ADC_Read 5F5C                    ?_i2c_read_bit 0001  
                           prodh 0FF4                             prodl 0FF3                             start 0002  
                   ___param_bank 0000                  __end_of_i2cInit 5C72              serialSendString@str 0013  
                          ?_main 0001                  __end_of___awdiv 64D4                 ?_lcdCommand4bits 0001  
                          STR_10 7C58                            STR_11 7C36                            STR_20 7C14  
                          STR_12 7C47                            STR_21 7C03                            STR_13 7C25  
                          STR_22 7D13                            STR_14 7CAD                            STR_15 7CBE  
                          STR_16 7D02                            STR_17 7CF1                            STR_18 7D1D  
                          STR_19 7D1D                  __end_of___awmod 6410               outputPrint@min_483 0022  
                ___awdiv@divisor 0003               outputPrint@min_486 0025               outputPrint@sec_484 0023  
             outputPrint@sec_487 0026                  ___awdiv@counter 0005                            _RCREG 0FAE  
                          _RCSTA 0FAB                            _SPBRG 0FAF                            _PORTA 0F80  
                          _PORTB 0F81                            _PORTC 0F82                            _PORTD 0F83  
                          _PORTE 0F84                            _TRISA 0F92                            _TRISB 0F93  
                          _TRISC 0F94                            _TRISD 0F95                            _TRISE 0F96  
                          _TXREG 0FAD                  __end_of_getHOUR 59C6                            _TXSTA 0FAC  
                __end_of_lcdData 5AC8                  __end_of_lcdInit 62BC                   ??_i2cWriteByte 000A  
               _reading_protocol 005A              __end_of_i2cReadByte 5FB0               outputPrint@numTela 0019  
                          _pow10 60B2                            _level 0088                  __end_of_setHOUR 5B80  
                          _tecla 005E                  __end_of_pinMode 6D2A                            _timer 004D  
                          _state 0058                  __end_of_varInit 5A2E                            tablat 0FF5  
              __end_of_I2C_delay 5970                    _i2c_write_bit 605A                            status 0FD8  
                 ??_i2c_read_bit 0007                 __end_of_Delay2ms 5CCC             __end_of_digitalWrite 6ADC  
                __initialization 5FB0                     __end_of_main 5BF4                  i2cWriteByte@bit 000B  
               __end_of_i2c_stop 5CFA                     ?_setLanguage 0001                           ??_main 0047  
                  __activetblptr 0002                      pow10@result 000C                           _ADCON0 0FC2  
                         _ADCON1 0FC1                           _ADCON2 0FC0                      eventRead@ev 003C  
                         ?_pow10 0007                           _ADRESH 0FC4                           _ADRESL 0FC3  
               ___awdiv@dividend 0001                   ?_i2c_write_bit 0001                           _SPBRGH 0FB0  
            outputPrint@hour_482 0021              outputPrint@hour_485 0024                        ??_i2cInit 0007  
             _getAlarmLowerLevel 5DCA               _setAlarmLowerLevel 5B0E                      intToStr@end 001A  
             dsWriteData@address 000C                 __end_of_getLevel 59A6                 __end_of_getState 5978  
            ?_getAlarmLowerLevel 0013                           ___wmul 5AE8              ?_setAlarmLowerLevel 0017  
                      ??___awdiv 0005                        ??___awmod 000D                           _getMIN 59D6  
                         _getSEC 59E6                           _dsInit 5984                           _lcdInt 64D4  
                         _kpInit 5992                           _kpRead 5970                 __end_of_read_SDA 5DCA  
               __end_of_read_SCL 5D92                  ADC_Read@channel 0005                 __end_of_intToStr 6724  
             kpDebounce@teclaOld 005F               kpDebounce@teclaNew 005C                           _setMIN 5B80  
                         _setSEC 5BA6                        ??_getHOUR 0013                           clear_0 5FE8  
                         clear_1 5FF4                           _smLoop 71EA                 ___awdiv@quotient 0007  
                ___awmod@divisor 000B                        ??_lcdData 0003                           isa$std 0001  
                    _i2cReadByte 5F5C                        ??_lcdInit 0004                  ___awmod@counter 000D  
                         pow10@i 000A                 __end_of_setState 5992                     __pdataCOMRAM 005F  
                      ??_setHOUR 000F                        ??_pinMode 0005                        ?_ADC_Init 0001  
                      ?_ADC_Read 0001                     __mediumconst 7C02                        ??_varInit 0013  
                         tblptrh 0FF7                           tblptrl 0FF6                           tblptru 0FF8  
           ??_getAlarmLowerLevel 0015             ??_setAlarmLowerLevel 0019                      setMIN@value 000F  
              __end_of_Delay40us 5A5C                      setSEC@value 000F                       __accesstop 0060  
        __end_of__initialization 5FFA            __end_of_serialSendInt 5AAA               _getAlarmUpperLevel 5E02  
             _setAlarmUpperLevel 5B34                    ___rparam_used 0001                     ?_updateLevel 0001  
                   ?_pulseEnable 0001                      pinMode@type 0003             __end_of_i2cWriteByte 61CC  
                 __pcstackCOMRAM 0001              ?_getAlarmUpperLevel 0013              ?_setAlarmUpperLevel 0017  
                   __pidataBANK0 5AC8                    __end_of_pow10 610E                 i2cWriteByte@byte 0009  
              __end_of_i2c_start 5E80             __end_of_i2c_read_bit 5D5A                        ?_Delay2ms 0001  
                     ??_ADC_Init 0001                       ??_ADC_Read 0003             ??_getAlarmUpperLevel 0015  
           ??_setAlarmUpperLevel 0019                ?_serialSendString 0013              getAlarmUpperLevel@a 0056  
            getAlarmUpperLevel@b 0055                  ??_i2c_write_bit 0007                          ??_pow10 0009  
            setAlarmUpperLevel@a 0054              setAlarmUpperLevel@b 0053               ??_serialSendString 0015  
                     __pbssBANK0 0080                     ?_outputPrint 0019                       _alarmLevel 0082  
                      ?_i2c_stop 0001                   outputPrint@min 001F                   outputPrint@sec 0020  
                     _dsReadData 5E80                 dsReadData@result 0011                     pow10@expoent 0007  
                     _lcdCommand 5EC6                          ?___wmul 0001                          ?_getMIN 0001  
                        ?_getSEC 0001                          ?_dsInit 0001                          ?_lcdInt 0017  
                        ?_kpInit 0001                          ?_kpRead 0001                     eventRead@key 0040  
                   eventRead@msg 0047                          _BAUDCON 0FB8                          ?_setMIN 0001  
                        ?_setSEC 0001                          ?_smLoop 0001                       _kpDebounce 62BC  
                     ??_Delay2ms 0001             i2cReadByte@send_stop 0008                     _digitalWrite 688E  
                      ?_getLevel 0001                        ?_getState 0001                   eventRead@i_352 003F  
                 eventRead@i_347 0042                     intToStr@temp 0017               intToStr@isNegative 0015  
                 eventRead@envio 008E                __end_of_clear_SDA 5C48                __end_of_clear_SCL 5C1E  
                      ?_read_SDA 0001                        ?_read_SCL 0001                       ??_i2c_stop 0007  
                      ?_intToStr 000F                   eventRead@value 0038                          _i2cInit 5C48  
                      _I2C_delay 596E                          __Hparam 0000                        ?_setState 0001  
                        __Lparam 0000                   _eventRead$1298 003A                __end_of_lcdString 605A  
                kpDebounce@tempo 005D                          ___awdiv 6410                          ___awmod 6360  
                        _getHOUR 59B6                          __pcinit 5FB0                   serialRead@resp 0001  
                        _lcdData 5AAA                          __ramtop 0800                          _lcdInit 6244  
                        __ptext0 5BCC                          __ptext1 5A1A                          __ptext2 5984  
                        __ptext3 5C48                          __ptext4 71EA                          __ptext5 5A06  
                        __ptext6 5F0E                          __ptext7 59F6                          __ptext8 598A  
                        __ptext9 76B0                __end_of_eventInit 59B6                __end_of_eventRead 71EA  
                        _key_ant 008C                          _setHOUR 5B5A                          _pinMode 6ADC  
               ___awmod@dividend 0009                      serialSend@c 0001                          _varInit 5A1A  
                     ??_getLevel 0003                       ??_getState 0001                        Delay2ms@j 0001  
                      Delay2ms@k 0002                          _started 005B             end_of_initialization 5FFA  
                     ??_read_SDA 0007                       ??_read_SCL 0007                       ??_intToStr 0012  
                  __Lmediumconst 7C02                      ?_dsReadData 000E                   digitalRead@pin 0001  
                     ?_I2C_delay 0001                       ??_setState 0001                       _serialInit 5A74  
                     _serialRead 5C72                       _serialSend 5A2E                       _serial_out 007C  
                        postdec1 0FE5                          postdec2 0FDD                      ?_lcdCommand 0001  
                   setHOUR@value 000F                          postinc0 0FEE                          postinc2 0FDE  
setAlarmUpperLevel@newAlarmLevel 0017                    ??_digitalRead 0003                    ??_getLanguage 0013  
                    ?_kpDebounce 0001                     ?_i2cReadByte 0008                  i2c_read_bit@bit 0007  
                     lcdString@i 0008                     _i2cWriteByte 616C                    ??_dsWriteData 000E  
                      _Delay40us 5A44                   _level@var$F512 0080                       _outputInit 597E  
                 intToStr@buffer 0011                     _i2c_read_bit 5D28                outputPrint@idioma 001B  
                 __end_of___wmul 5B0E                   __end_of_getMIN 59E6                   __end_of_getSEC 59F6  
                 __end_of_dsInit 598A                    __pidataCOMRAM 596D                   __end_of_lcdInt 65CE  
                 __end_of_kpInit 599C                   __end_of_kpRead 5974                   __end_of_setMIN 5BA6  
                 __end_of_setSEC 5BCC                   __end_of_smLoop 76B0              start_initialization 5FB0  
            __end_of_digitalRead 688E              __end_of_getLanguage 59D6                        _i2c_start 5E3A  
                     eventRead@i 003E                       ?_Delay40us 0001                     smLoop@evento 0046  
              ??_lcdCommand4bits 0002                      ??_I2C_delay 0001              __end_of_dsWriteData 5D28  
                    ?_serialInit 0001                      ?_serialRead 0001                      ?_serialSend 0001  
                       ??___wmul 0005                         ??_getMIN 0013                         ??_getSEC 0013  
                       ??_dsInit 0007                         ??_lcdInt 0019                         ??_kpInit 0001  
                       ??_kpRead 0001                      __pdataBANK0 0060                         ??_setMIN 000F  
                       ??_setSEC 000F                         ??_smLoop 0043                dsReadData@address 000E  
                    __pbssCOMRAM 0047                       pinMode@pin 0001                       ?_i2c_start 0001  
               setState@newState 0001                  outputPrint@hour 001E            __end_of_i2c_write_bit 60B2  
                       ?_i2cInit 0001                      ?_outputInit 0001                        _clear_SDA 5C1E  
                      _clear_SCL 5BF4                    __pmediumconst 7C02                         ?___awdiv 0001  
                       ?___awmod 0009                        _lcdString 6004                         ?_getHOUR 0001  
                    _digitalRead 6724                      _getLanguage 59C6                         ?_lcdData 0001  
                  ??_setLanguage 000F                         ?_lcdInit 0001                    lcdCommand@cmd 0003  
                  eventRead@data 0059                         ?_setHOUR 0001                         ?_pinMode 0001  
                       _ADC_Init 59F6                         _ADC_Read 5F0E                         ?_varInit 0001  
                      _eventInit 59A6                        _eventRead 6D2A                      _dsWriteData 5CFA  
                    ??_Delay40us 0001                   ___wmul@product 0005                     ??_dsReadData 0010  
                  _serialSendInt 5A8E                       ?_clear_SDA 0001                       ?_clear_SCL 0001  
                      lcdInt@val 0017                     ??_lcdCommand 0003                       ?_lcdString 0004  
                   ??_kpDebounce 0001                       _ADCON0bits 0FC2                ___wmul@multiplier 0001  
                  intToStr@digit 0013                         _Delay2ms 5C9E               __end_of_dsReadData 5EC6  
                  intToStr@value 000F                    intToStr@start 0018                       ?_eventInit 0001  
                     ?_eventRead 002C                      ??_i2c_start 0007              __end_of_setLanguage 5A74  
                      copy_data0 5FC4               __end_of_lcdCommand 5F0E  setAlarmLowerLevel@newAlarmLevel 0017  
                   lcdData@valor 0003                         _i2c_stop 5CCC                   ?_serialSendInt 001E  
             __end_of_kpDebounce 6360                    ??_updateLevel 0006                         __Hrparam 0000  
                      intToStr@i 001C                    ??_pulseEnable 0001                 _serialSendString 610E  
                       __Lrparam 0000                 dsWriteData@value 000E                  _lcdCommand4bits 61CC  
                       _getLevel 599C                         __ptext10 6004                         __ptext11 64D4  
                       __ptext20 5E80                         __ptext12 5AAA                         __ptext21 5F5C  
                       __ptext13 59E6                         __ptext30 5CFA                         __ptext22 5974  
                       __ptext14 59D6                         __ptext31 616C                         __ptext23 6D2A  
                       __ptext15 599C                         __ptext40 5BF4                         __ptext32 605A  
                       __ptext24 5BA6                         __ptext16 59C6                         __ptext41 6ADC  
                       __ptext33 5CCC                         __ptext25 5B80                         __ptext17 59B6  
                       __ptext50 5C72                         __ptext42 688E                         __ptext34 5E3A  
                       __ptext26 5A5C                         __ptext18 5E02                         __ptext51 60B2  
                       __ptext43 596E                         __ptext35 5C1E                         __ptext27 5B5A  
                       __ptext19 5DCA                         __ptext60 5A44                         __ptext52 5AE8  
                       __ptext44 5A8E                         __ptext36 5D28                         __ptext28 5B34  
                       __ptext61 5C9E                         __ptext53 5970                         __ptext45 610E  
                       __ptext37 5D92                         __ptext29 5B0E                         __ptext62 62BC  
                       __ptext54 5A74                         __ptext46 5A2E                         __ptext38 5D5A  
                       __ptext63 59A6                         __ptext55 597E                         __ptext47 65CE  
                       __ptext39 6724                         __ptext64 5992                         __ptext56 6244  
                       __ptext48 6360                         __ptext57 5EC6                         __ptext49 6410  
                       __ptext58 61CC                         __ptext59 5978                         _getState 5974  
                    _smLoop$1299 0044                    ??_outputPrint 001D                         _language 0057  
                       _read_SDA 5D92                         _read_SCL 5D5A                         _intToStr 65CE  
                    ??_clear_SDA 0007                      ??_clear_SCL 0007                     ??_serialInit 0001  
                   ??_serialRead 0001                     ??_serialSend 0001                         _setState 598A  
                     Delay40us@j 0001                         lcdInit@i 0004                         isa$xinst 0000  
                    ??_lcdString 0006              __end_of_updateLevel 5A1A              __end_of_pulseEnable 597E  
                    _setLanguage 5A5C           setLanguage@newLanguage 000F       __end_of_getAlarmLowerLevel 5E02  
     __end_of_setAlarmLowerLevel 5B34                      ??_eventInit 0001                      ??_eventRead 002E  
                  ?_digitalWrite 0001               __end_of_serialInit 5A8E               __end_of_serialRead 5C9E  
             __end_of_serialSend 5A44                  ??_serialSendInt 0020                digitalWrite@value 0003  
                   ??_outputInit 0005              __end_of_outputPrint 7C02              serialSendInt@buffer 0020  
                   ?_digitalRead 0001                     ?_getLanguage 0001          __end_of_lcdCommand4bits 6244  
     __end_of_getAlarmUpperLevel 5E3A       __end_of_setAlarmUpperLevel 5B5A                   ??_digitalWrite 0005  
             __end_of_outputInit 5984               serialSendInt@value 001E                  digitalWrite@pin 0001  
                   ?_dsWriteData 000C              lcdCommand4bits@data 0001                      _updateLevel 5A06  
             lcdCommand4bits@cmd 0002                      _pulseEnable 5978  
