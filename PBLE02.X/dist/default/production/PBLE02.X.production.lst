

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Mon Jul 01 12:17:09 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	text54,global,reloc=2,class=CODE,delta=1
    68                           	psect	text55,global,reloc=2,class=CODE,delta=1
    69                           	psect	text56,global,reloc=2,class=CODE,delta=1
    70                           	psect	text57,global,reloc=2,class=CODE,delta=1
    71                           	psect	text58,global,reloc=2,class=CODE,delta=1
    72                           	psect	text59,global,reloc=2,class=CODE,delta=1
    73                           	psect	text60,global,reloc=2,class=CODE,delta=1
    74                           	psect	text61,global,reloc=2,class=CODE,delta=1
    75                           	psect	text62,global,reloc=2,class=CODE,delta=1
    76                           	psect	text63,global,reloc=2,class=CODE,delta=1
    77                           	psect	text64,global,reloc=2,class=CODE,delta=1
    78                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    79                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    80                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    81   000000                     
    82                           ; Generated 17/10/2023 GMT
    83                           ; 
    84                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    85                           ; All rights reserved.
    86                           ; 
    87                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    88                           ; 
    89                           ; Redistribution and use in source and binary forms, with or without modification, are
    90                           ; permitted provided that the following conditions are met:
    91                           ; 
    92                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    93                           ;        conditions and the following disclaimer.
    94                           ; 
    95                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    96                           ;        of conditions and the following disclaimer in the documentation and/or other
    97                           ;        materials provided with the distribution. Publication is not required when
    98                           ;        this file is used in an embedded application.
    99                           ; 
   100                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   101                           ;        software without specific prior written permission.
   102                           ; 
   103                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   104                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   105                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   106                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   107                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   108                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   109                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   110                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   111                           ; 
   112                           ; 
   113                           ; Code-generator required, PIC18F4550 Definitions
   114                           ; 
   115                           ; SFR Addresses
   116   000000                     
   117                           	psect	idataCOMRAM
   118   005C37                     __pidataCOMRAM:
   119                           	callstack 0
   120                           
   121                           ;initializer for kpDebounce@teclaOld
   122   005C37  01                 	db	1
   123                           
   124                           	psect	idataBANK0
   125   00610E                     __pidataBANK0:
   126                           	callstack 0
   127                           
   128                           ;initializer for _msgs
   129   00610E  57                 	db	low STR_5
   130   00610F  7F                 	db	high STR_5
   131   006110  69                 	db	low STR_6
   132   006111  7E                 	db	high STR_6
   133   006112  BD                 	db	low STR_7
   134   006113  7F                 	db	high STR_7
   135   006114  68                 	db	low STR_8
   136   006115  7F                 	db	high STR_8
   137   006116  35                 	db	low STR_9
   138   006117  7F                 	db	high STR_9
   139   006118  7A                 	db	low STR_10
   140   006119  7E                 	db	high STR_10
   141   00611A  AC                 	db	low STR_11
   142   00611B  7F                 	db	high STR_11
   143   00611C  46                 	db	low STR_12
   144   00611D  7F                 	db	high STR_12
   145   00611E  AD                 	db	low STR_13
   146   00611F  7E                 	db	high STR_13
   147   006120  58                 	db	low STR_14
   148   006121  7E                 	db	high STR_14
   149   006122  9C                 	db	low STR_15
   150   006123  7E                 	db	high STR_15
   151   006124  8B                 	db	low STR_16
   152   006125  7E                 	db	high STR_16
   153   006126  47                 	db	low STR_17
   154   006127  7E                 	db	high STR_17
   155   006128  03                 	db	low STR_18
   156   006129  7E                 	db	high STR_18
   157   00612A  BE                 	db	low STR_19
   158   00612B  7E                 	db	high STR_19
   159   00612C  36                 	db	low STR_20
   160   00612D  7E                 	db	high STR_20
   161   00612E  25                 	db	low STR_21
   162   00612F  7E                 	db	high STR_21
   163   006130  F2                 	db	low STR_22
   164   006131  7D                 	db	high STR_22
   165   006132  13                 	db	low STR_23
   166   006133  7F                 	db	high STR_23
   167   006134  14                 	db	low STR_24
   168   006135  7E                 	db	high STR_24
   169   006136  E0                 	db	low STR_25
   170   006137  7E                 	db	high STR_25
   171   006138  24                 	db	low STR_26
   172   006139  7F                 	db	high STR_26
   173   00613A  F1                 	db	low STR_27
   174   00613B  7E                 	db	high STR_27
   175   00613C  CF                 	db	low STR_28
   176   00613D  7E                 	db	high STR_28
   177   00613E  9B                 	db	low STR_29
   178   00613F  7F                 	db	high STR_29
   179   006140  8A                 	db	low STR_30
   180   006141  7F                 	db	high STR_30
   181   006142  02                 	db	low STR_31
   182   006143  7F                 	db	high STR_31
   183   006144  79                 	db	low STR_32
   184   006145  7F                 	db	high STR_32
   185                           
   186                           ;initializer for _serial_out
   187   006146  DC                 	db	low STR_1
   188   006147  7F                 	db	high STR_1
   189   006148  CE                 	db	low STR_2
   190   006149  7F                 	db	high STR_2
   191   00614A  F5                 	db	low STR_3
   192   00614B  7F                 	db	high STR_3
   193   00614C  E9                 	db	low STR_4
   194   00614D  7F                 	db	high STR_4
   195   000000                     _ADRESL	set	4035
   196   000000                     _ADRESH	set	4036
   197   000000                     _ADCON0	set	4034
   198   000000                     _PORTC	set	3970
   199   000000                     _SPBRG	set	4015
   200   000000                     _SPBRGH	set	4016
   201   000000                     _BAUDCON	set	4024
   202   000000                     _TXSTA	set	4012
   203   000000                     _RCREG	set	4014
   204   000000                     _PORTA	set	3968
   205   000000                     _PORTB	set	3969
   206   000000                     _PORTD	set	3971
   207   000000                     _TRISC	set	3988
   208   000000                     _PIR1	set	3998
   209   000000                     _RCSTA	set	4011
   210   000000                     _TXREG	set	4013
   211   000000                     _ADCON2	set	4032
   212   000000                     _ADCON1	set	4033
   213   000000                     _TRISE	set	3990
   214   000000                     _TRISD	set	3989
   215   000000                     _TRISA	set	3986
   216   000000                     _PORTE	set	3972
   217   000000                     _TRISB	set	3987
   218                           
   219                           	psect	mediumconst
   220   007D9C                     __pmediumconst:
   221                           	callstack 0
   222   007D9C  00                 	db	0
   223   007D9D                     STR_42:
   224   007D9D  20                 	db	32
   225   007D9E  20                 	db	32
   226   007D9F  20                 	db	32
   227   007DA0  20                 	db	32
   228   007DA1  20                 	db	32
   229   007DA2  20                 	db	32
   230   007DA3  20                 	db	32
   231   007DA4  20                 	db	32
   232   007DA5  20                 	db	32
   233   007DA6  20                 	db	32
   234   007DA7  20                 	db	32
   235   007DA8  20                 	db	32
   236   007DA9  20                 	db	32
   237   007DAA  20                 	db	32
   238   007DAB  20                 	db	32
   239   007DAC  20                 	db	32
   240   007DAD  00                 	db	0
   241   007DAE                     STR_39:
   242   007DAE  45                 	db	69	;'E'
   243   007DAF  6E                 	db	110	;'n'
   244   007DB0  67                 	db	103	;'g'
   245   007DB1  6C                 	db	108	;'l'
   246   007DB2  69                 	db	105	;'i'
   247   007DB3  73                 	db	115	;'s'
   248   007DB4  68                 	db	104	;'h'
   249   007DB5  20                 	db	32
   250   007DB6  20                 	db	32
   251   007DB7  20                 	db	32
   252   007DB8  20                 	db	32
   253   007DB9  20                 	db	32
   254   007DBA  20                 	db	32
   255   007DBB  20                 	db	32
   256   007DBC  20                 	db	32
   257   007DBD  20                 	db	32
   258   007DBE  00                 	db	0
   259   007DBF                     STR_41:
   260   007DBF  45                 	db	69	;'E'
   261   007DC0  73                 	db	115	;'s'
   262   007DC1  70                 	db	112	;'p'
   263   007DC2  61                 	db	97	;'a'
   264   007DC3  6E                 	db	110	;'n'
   265   007DC4  6F                 	db	111	;'o'
   266   007DC5  6C                 	db	108	;'l'
   267   007DC6  20                 	db	32
   268   007DC7  20                 	db	32
   269   007DC8  20                 	db	32
   270   007DC9  20                 	db	32
   271   007DCA  20                 	db	32
   272   007DCB  20                 	db	32
   273   007DCC  20                 	db	32
   274   007DCD  20                 	db	32
   275   007DCE  20                 	db	32
   276   007DCF  00                 	db	0
   277   007DD0                     STR_40:
   278   007DD0  46                 	db	70	;'F'
   279   007DD1  72                 	db	114	;'r'
   280   007DD2  61                 	db	97	;'a'
   281   007DD3  6E                 	db	110	;'n'
   282   007DD4  63                 	db	99	;'c'
   283   007DD5  61                 	db	97	;'a'
   284   007DD6  69                 	db	105	;'i'
   285   007DD7  73                 	db	115	;'s'
   286   007DD8  65                 	db	101	;'e'
   287   007DD9  20                 	db	32
   288   007DDA  20                 	db	32
   289   007DDB  20                 	db	32
   290   007DDC  20                 	db	32
   291   007DDD  20                 	db	32
   292   007DDE  20                 	db	32
   293   007DDF  20                 	db	32
   294   007DE0  00                 	db	0
   295   007DE1                     STR_38:
   296   007DE1  50                 	db	80	;'P'
   297   007DE2  6F                 	db	111	;'o'
   298   007DE3  72                 	db	114	;'r'
   299   007DE4  74                 	db	116	;'t'
   300   007DE5  75                 	db	117	;'u'
   301   007DE6  67                 	db	103	;'g'
   302   007DE7  75                 	db	117	;'u'
   303   007DE8  65                 	db	101	;'e'
   304   007DE9  73                 	db	115	;'s'
   305   007DEA  20                 	db	32
   306   007DEB  20                 	db	32
   307   007DEC  20                 	db	32
   308   007DED  20                 	db	32
   309   007DEE  20                 	db	32
   310   007DEF  20                 	db	32
   311   007DF0  20                 	db	32
   312   007DF1  00                 	db	0
   313   007DF2                     STR_22:
   314   007DF2  43                 	db	67	;'C'
   315   007DF3  68                 	db	104	;'h'
   316   007DF4  61                 	db	97	;'a'
   317   007DF5  6E                 	db	110	;'n'
   318   007DF6  67                 	db	103	;'g'
   319   007DF7  65                 	db	101	;'e'
   320   007DF8  20                 	db	32
   321   007DF9  53                 	db	83	;'S'
   322   007DFA  45                 	db	69	;'E'
   323   007DFB  43                 	db	67	;'C'
   324   007DFC  20                 	db	32
   325   007DFD  20                 	db	32
   326   007DFE  20                 	db	32
   327   007DFF  20                 	db	32
   328   007E00  20                 	db	32
   329   007E01  20                 	db	32
   330   007E02  00                 	db	0
   331   007E03                     STR_18:
   332   007E03  43                 	db	67	;'C'
   333   007E04  68                 	db	104	;'h'
   334   007E05  61                 	db	97	;'a'
   335   007E06  6E                 	db	110	;'n'
   336   007E07  67                 	db	103	;'g'
   337   007E08  65                 	db	101	;'e'
   338   007E09  20                 	db	32
   339   007E0A  4D                 	db	77	;'M'
   340   007E0B  49                 	db	73	;'I'
   341   007E0C  4E                 	db	78	;'N'
   342   007E0D  20                 	db	32
   343   007E0E  20                 	db	32
   344   007E0F  20                 	db	32
   345   007E10  20                 	db	32
   346   007E11  20                 	db	32
   347   007E12  20                 	db	32
   348   007E13  00                 	db	0
   349   007E14                     STR_24:
   350   007E14  43                 	db	67	;'C'
   351   007E15  61                 	db	97	;'a'
   352   007E16  6D                 	db	109	;'m'
   353   007E17  62                 	db	98	;'b'
   354   007E18  69                 	db	105	;'i'
   355   007E19  61                 	db	97	;'a'
   356   007E1A  72                 	db	114	;'r'
   357   007E1B  20                 	db	32
   358   007E1C  53                 	db	83	;'S'
   359   007E1D  45                 	db	69	;'E'
   360   007E1E  47                 	db	71	;'G'
   361   007E1F  20                 	db	32
   362   007E20  20                 	db	32
   363   007E21  20                 	db	32
   364   007E22  20                 	db	32
   365   007E23  20                 	db	32
   366   007E24  00                 	db	0
   367   007E25                     STR_21:
   368   007E25  41                 	db	65	;'A'
   369   007E26  6C                 	db	108	;'l'
   370   007E27  74                 	db	116	;'t'
   371   007E28  65                 	db	101	;'e'
   372   007E29  72                 	db	114	;'r'
   373   007E2A  61                 	db	97	;'a'
   374   007E2B  72                 	db	114	;'r'
   375   007E2C  20                 	db	32
   376   007E2D  53                 	db	83	;'S'
   377   007E2E  45                 	db	69	;'E'
   378   007E2F  47                 	db	71	;'G'
   379   007E30  20                 	db	32
   380   007E31  20                 	db	32
   381   007E32  20                 	db	32
   382   007E33  20                 	db	32
   383   007E34  20                 	db	32
   384   007E35  00                 	db	0
   385   007E36                     STR_20:
   386   007E36  43                 	db	67	;'C'
   387   007E37  61                 	db	97	;'a'
   388   007E38  6D                 	db	109	;'m'
   389   007E39  62                 	db	98	;'b'
   390   007E3A  69                 	db	105	;'i'
   391   007E3B  61                 	db	97	;'a'
   392   007E3C  72                 	db	114	;'r'
   393   007E3D  20                 	db	32
   394   007E3E  4D                 	db	77	;'M'
   395   007E3F  49                 	db	73	;'I'
   396   007E40  4E                 	db	78	;'N'
   397   007E41  20                 	db	32
   398   007E42  20                 	db	32
   399   007E43  20                 	db	32
   400   007E44  20                 	db	32
   401   007E45  20                 	db	32
   402   007E46  00                 	db	0
   403   007E47                     STR_17:
   404   007E47  41                 	db	65	;'A'
   405   007E48  6C                 	db	108	;'l'
   406   007E49  74                 	db	116	;'t'
   407   007E4A  65                 	db	101	;'e'
   408   007E4B  72                 	db	114	;'r'
   409   007E4C  61                 	db	97	;'a'
   410   007E4D  72                 	db	114	;'r'
   411   007E4E  20                 	db	32
   412   007E4F  4D                 	db	77	;'M'
   413   007E50  49                 	db	73	;'I'
   414   007E51  4E                 	db	78	;'N'
   415   007E52  20                 	db	32
   416   007E53  20                 	db	32
   417   007E54  20                 	db	32
   418   007E55  20                 	db	32
   419   007E56  20                 	db	32
   420   007E57  00                 	db	0
   421   007E58                     STR_14:
   422   007E58  43                 	db	67	;'C'
   423   007E59  68                 	db	104	;'h'
   424   007E5A  61                 	db	97	;'a'
   425   007E5B  6E                 	db	110	;'n'
   426   007E5C  67                 	db	103	;'g'
   427   007E5D  65                 	db	101	;'e'
   428   007E5E  20                 	db	32
   429   007E5F  48                 	db	72	;'H'
   430   007E60  4F                 	db	79	;'O'
   431   007E61  55                 	db	85	;'U'
   432   007E62  52                 	db	82	;'R'
   433   007E63  20                 	db	32
   434   007E64  20                 	db	32
   435   007E65  20                 	db	32
   436   007E66  20                 	db	32
   437   007E67  20                 	db	32
   438   007E68  00                 	db	0
   439   007E69                     STR_6:
   440   007E69  55                 	db	85	;'U'
   441   007E6A  70                 	db	112	;'p'
   442   007E6B  70                 	db	112	;'p'
   443   007E6C  65                 	db	101	;'e'
   444   007E6D  72                 	db	114	;'r'
   445   007E6E  20                 	db	32
   446   007E6F  41                 	db	65	;'A'
   447   007E70  6C                 	db	108	;'l'
   448   007E71  61                 	db	97	;'a'
   449   007E72  72                 	db	114	;'r'
   450   007E73  6D                 	db	109	;'m'
   451   007E74  20                 	db	32
   452   007E75  20                 	db	32
   453   007E76  20                 	db	32
   454   007E77  20                 	db	32
   455   007E78  20                 	db	32
   456   007E79  00                 	db	0
   457   007E7A                     STR_10:
   458   007E7A  4C                 	db	76	;'L'
   459   007E7B  6F                 	db	111	;'o'
   460   007E7C  77                 	db	119	;'w'
   461   007E7D  65                 	db	101	;'e'
   462   007E7E  72                 	db	114	;'r'
   463   007E7F  20                 	db	32
   464   007E80  41                 	db	65	;'A'
   465   007E81  6C                 	db	108	;'l'
   466   007E82  61                 	db	97	;'a'
   467   007E83  72                 	db	114	;'r'
   468   007E84  6D                 	db	109	;'m'
   469   007E85  20                 	db	32
   470   007E86  20                 	db	32
   471   007E87  20                 	db	32
   472   007E88  20                 	db	32
   473   007E89  20                 	db	32
   474   007E8A  00                 	db	0
   475   007E8B                     STR_16:
   476   007E8B  43                 	db	67	;'C'
   477   007E8C  61                 	db	97	;'a'
   478   007E8D  6D                 	db	109	;'m'
   479   007E8E  62                 	db	98	;'b'
   480   007E8F  69                 	db	105	;'i'
   481   007E90  61                 	db	97	;'a'
   482   007E91  72                 	db	114	;'r'
   483   007E92  20                 	db	32
   484   007E93  48                 	db	72	;'H'
   485   007E94  4F                 	db	79	;'O'
   486   007E95  52                 	db	82	;'R'
   487   007E96  41                 	db	65	;'A'
   488   007E97  20                 	db	32
   489   007E98  20                 	db	32
   490   007E99  20                 	db	32
   491   007E9A  20                 	db	32
   492   007E9B  00                 	db	0
   493   007E9C                     STR_15:
   494   007E9C  43                 	db	67	;'C'
   495   007E9D  68                 	db	104	;'h'
   496   007E9E  61                 	db	97	;'a'
   497   007E9F  6E                 	db	110	;'n'
   498   007EA0  67                 	db	103	;'g'
   499   007EA1  65                 	db	101	;'e'
   500   007EA2  72                 	db	114	;'r'
   501   007EA3  20                 	db	32
   502   007EA4  48                 	db	72	;'H'
   503   007EA5  45                 	db	69	;'E'
   504   007EA6  55                 	db	85	;'U'
   505   007EA7  52                 	db	82	;'R'
   506   007EA8  45                 	db	69	;'E'
   507   007EA9  20                 	db	32
   508   007EAA  20                 	db	32
   509   007EAB  20                 	db	32
   510   007EAC  00                 	db	0
   511   007EAD                     STR_13:
   512   007EAD  41                 	db	65	;'A'
   513   007EAE  6C                 	db	108	;'l'
   514   007EAF  74                 	db	116	;'t'
   515   007EB0  65                 	db	101	;'e'
   516   007EB1  72                 	db	114	;'r'
   517   007EB2  61                 	db	97	;'a'
   518   007EB3  72                 	db	114	;'r'
   519   007EB4  20                 	db	32
   520   007EB5  48                 	db	72	;'H'
   521   007EB6  4F                 	db	79	;'O'
   522   007EB7  52                 	db	82	;'R'
   523   007EB8  41                 	db	65	;'A'
   524   007EB9  53                 	db	83	;'S'
   525   007EBA  20                 	db	32
   526   007EBB  20                 	db	32
   527   007EBC  20                 	db	32
   528   007EBD  00                 	db	0
   529   007EBE                     STR_19:
   530   007EBE  43                 	db	67	;'C'
   531   007EBF  68                 	db	104	;'h'
   532   007EC0  61                 	db	97	;'a'
   533   007EC1  6E                 	db	110	;'n'
   534   007EC2  67                 	db	103	;'g'
   535   007EC3  65                 	db	101	;'e'
   536   007EC4  72                 	db	114	;'r'
   537   007EC5  20                 	db	32
   538   007EC6  4D                 	db	77	;'M'
   539   007EC7  49                 	db	73	;'I'
   540   007EC8  4E                 	db	78	;'N'
   541   007EC9  55                 	db	85	;'U'
   542   007ECA  54                 	db	84	;'T'
   543   007ECB  45                 	db	69	;'E'
   544   007ECC  20                 	db	32
   545   007ECD  20                 	db	32
   546   007ECE  00                 	db	0
   547   007ECF                     STR_28:
   548   007ECF  43                 	db	67	;'C'
   549   007ED0  61                 	db	97	;'a'
   550   007ED1  6D                 	db	109	;'m'
   551   007ED2  62                 	db	98	;'b'
   552   007ED3  69                 	db	105	;'i'
   553   007ED4  61                 	db	97	;'a'
   554   007ED5  72                 	db	114	;'r'
   555   007ED6  20                 	db	32
   556   007ED7  69                 	db	105	;'i'
   557   007ED8  64                 	db	100	;'d'
   558   007ED9  69                 	db	105	;'i'
   559   007EDA  6F                 	db	111	;'o'
   560   007EDB  6D                 	db	109	;'m'
   561   007EDC  61                 	db	97	;'a'
   562   007EDD  20                 	db	32
   563   007EDE  20                 	db	32
   564   007EDF  00                 	db	0
   565   007EE0                     STR_25:
   566   007EE0  41                 	db	65	;'A'
   567   007EE1  6C                 	db	108	;'l'
   568   007EE2  74                 	db	116	;'t'
   569   007EE3  65                 	db	101	;'e'
   570   007EE4  72                 	db	114	;'r'
   571   007EE5  61                 	db	97	;'a'
   572   007EE6  72                 	db	114	;'r'
   573   007EE7  20                 	db	32
   574   007EE8  69                 	db	105	;'i'
   575   007EE9  64                 	db	100	;'d'
   576   007EEA  69                 	db	105	;'i'
   577   007EEB  6F                 	db	111	;'o'
   578   007EEC  6D                 	db	109	;'m'
   579   007EED  61                 	db	97	;'a'
   580   007EEE  20                 	db	32
   581   007EEF  20                 	db	32
   582   007EF0  00                 	db	0
   583   007EF1                     STR_27:
   584   007EF1  43                 	db	67	;'C'
   585   007EF2  68                 	db	104	;'h'
   586   007EF3  61                 	db	97	;'a'
   587   007EF4  6E                 	db	110	;'n'
   588   007EF5  67                 	db	103	;'g'
   589   007EF6  65                 	db	101	;'e'
   590   007EF7  72                 	db	114	;'r'
   591   007EF8  20                 	db	32
   592   007EF9  6C                 	db	108	;'l'
   593   007EFA  61                 	db	97	;'a'
   594   007EFB  6E                 	db	110	;'n'
   595   007EFC  67                 	db	103	;'g'
   596   007EFD  75                 	db	117	;'u'
   597   007EFE  65                 	db	101	;'e'
   598   007EFF  20                 	db	32
   599   007F00  20                 	db	32
   600   007F01  00                 	db	0
   601   007F02                     STR_31:
   602   007F02  41                 	db	65	;'A'
   603   007F03  4C                 	db	76	;'L'
   604   007F04  41                 	db	65	;'A'
   605   007F05  52                 	db	82	;'R'
   606   007F06  4D                 	db	77	;'M'
   607   007F07  45                 	db	69	;'E'
   608   007F08  20                 	db	32
   609   007F09  41                 	db	65	;'A'
   610   007F0A  43                 	db	67	;'C'
   611   007F0B  54                 	db	84	;'T'
   612   007F0C  49                 	db	73	;'I'
   613   007F0D  56                 	db	86	;'V'
   614   007F0E  45                 	db	69	;'E'
   615   007F0F  20                 	db	32
   616   007F10  21                 	db	33
   617   007F11  20                 	db	32
   618   007F12  00                 	db	0
   619   007F13                     STR_23:
   620   007F13  43                 	db	67	;'C'
   621   007F14  68                 	db	104	;'h'
   622   007F15  61                 	db	97	;'a'
   623   007F16  6E                 	db	110	;'n'
   624   007F17  67                 	db	103	;'g'
   625   007F18  65                 	db	101	;'e'
   626   007F19  72                 	db	114	;'r'
   627   007F1A  20                 	db	32
   628   007F1B  53                 	db	83	;'S'
   629   007F1C  45                 	db	69	;'E'
   630   007F1D  43                 	db	67	;'C'
   631   007F1E  4F                 	db	79	;'O'
   632   007F1F  4E                 	db	78	;'N'
   633   007F20  44                 	db	68	;'D'
   634   007F21  45                 	db	69	;'E'
   635   007F22  20                 	db	32
   636   007F23  00                 	db	0
   637   007F24                     STR_26:
   638   007F24  43                 	db	67	;'C'
   639   007F25  68                 	db	104	;'h'
   640   007F26  61                 	db	97	;'a'
   641   007F27  6E                 	db	110	;'n'
   642   007F28  67                 	db	103	;'g'
   643   007F29  65                 	db	101	;'e'
   644   007F2A  20                 	db	32
   645   007F2B  6C                 	db	108	;'l'
   646   007F2C  61                 	db	97	;'a'
   647   007F2D  6E                 	db	110	;'n'
   648   007F2E  67                 	db	103	;'g'
   649   007F2F  75                 	db	117	;'u'
   650   007F30  61                 	db	97	;'a'
   651   007F31  67                 	db	103	;'g'
   652   007F32  65                 	db	101	;'e'
   653   007F33  20                 	db	32
   654   007F34  00                 	db	0
   655   007F35                     STR_9:
   656   007F35  41                 	db	65	;'A'
   657   007F36  6C                 	db	108	;'l'
   658   007F37  61                 	db	97	;'a'
   659   007F38  72                 	db	114	;'r'
   660   007F39  6D                 	db	109	;'m'
   661   007F3A  65                 	db	101	;'e'
   662   007F3B  20                 	db	32
   663   007F3C  49                 	db	73	;'I'
   664   007F3D  6E                 	db	110	;'n'
   665   007F3E  66                 	db	102	;'f'
   666   007F3F  65                 	db	101	;'e'
   667   007F40  72                 	db	114	;'r'
   668   007F41  69                 	db	105	;'i'
   669   007F42  6F                 	db	111	;'o'
   670   007F43  72                 	db	114	;'r'
   671   007F44  20                 	db	32
   672   007F45  00                 	db	0
   673   007F46                     STR_12:
   674   007F46  41                 	db	65	;'A'
   675   007F47  6C                 	db	108	;'l'
   676   007F48  61                 	db	97	;'a'
   677   007F49  72                 	db	114	;'r'
   678   007F4A  6D                 	db	109	;'m'
   679   007F4B  61                 	db	97	;'a'
   680   007F4C  20                 	db	32
   681   007F4D  69                 	db	105	;'i'
   682   007F4E  6E                 	db	110	;'n'
   683   007F4F  66                 	db	102	;'f'
   684   007F50  65                 	db	101	;'e'
   685   007F51  72                 	db	114	;'r'
   686   007F52  69                 	db	105	;'i'
   687   007F53  6F                 	db	111	;'o'
   688   007F54  72                 	db	114	;'r'
   689   007F55  20                 	db	32
   690   007F56  00                 	db	0
   691   007F57                     STR_5:
   692   007F57  41                 	db	65	;'A'
   693   007F58  6C                 	db	108	;'l'
   694   007F59  61                 	db	97	;'a'
   695   007F5A  72                 	db	114	;'r'
   696   007F5B  6D                 	db	109	;'m'
   697   007F5C  65                 	db	101	;'e'
   698   007F5D  20                 	db	32
   699   007F5E  53                 	db	83	;'S'
   700   007F5F  75                 	db	117	;'u'
   701   007F60  70                 	db	112	;'p'
   702   007F61  65                 	db	101	;'e'
   703   007F62  72                 	db	114	;'r'
   704   007F63  69                 	db	105	;'i'
   705   007F64  6F                 	db	111	;'o'
   706   007F65  72                 	db	114	;'r'
   707   007F66  20                 	db	32
   708   007F67  00                 	db	0
   709   007F68                     STR_8:
   710   007F68  41                 	db	65	;'A'
   711   007F69  6C                 	db	108	;'l'
   712   007F6A  61                 	db	97	;'a'
   713   007F6B  72                 	db	114	;'r'
   714   007F6C  6D                 	db	109	;'m'
   715   007F6D  61                 	db	97	;'a'
   716   007F6E  20                 	db	32
   717   007F6F  73                 	db	115	;'s'
   718   007F70  75                 	db	117	;'u'
   719   007F71  70                 	db	112	;'p'
   720   007F72  65                 	db	101	;'e'
   721   007F73  72                 	db	114	;'r'
   722   007F74  69                 	db	105	;'i'
   723   007F75  6F                 	db	111	;'o'
   724   007F76  72                 	db	114	;'r'
   725   007F77  20                 	db	32
   726   007F78  00                 	db	0
   727   007F79                     STR_32:
   728   007F79  41                 	db	65	;'A'
   729   007F7A  4C                 	db	76	;'L'
   730   007F7B  41                 	db	65	;'A'
   731   007F7C  52                 	db	82	;'R'
   732   007F7D  4D                 	db	77	;'M'
   733   007F7E  41                 	db	65	;'A'
   734   007F7F  20                 	db	32
   735   007F80  41                 	db	65	;'A'
   736   007F81  43                 	db	67	;'C'
   737   007F82  54                 	db	84	;'T'
   738   007F83  49                 	db	73	;'I'
   739   007F84  56                 	db	86	;'V'
   740   007F85  41                 	db	65	;'A'
   741   007F86  44                 	db	68	;'D'
   742   007F87  41                 	db	65	;'A'
   743   007F88  21                 	db	33
   744   007F89  00                 	db	0
   745   007F8A                     STR_30:
   746   007F8A  41                 	db	65	;'A'
   747   007F8B  4C                 	db	76	;'L'
   748   007F8C  41                 	db	65	;'A'
   749   007F8D  52                 	db	82	;'R'
   750   007F8E  4D                 	db	77	;'M'
   751   007F8F  20                 	db	32
   752   007F90  41                 	db	65	;'A'
   753   007F91  43                 	db	67	;'C'
   754   007F92  54                 	db	84	;'T'
   755   007F93  49                 	db	73	;'I'
   756   007F94  56                 	db	86	;'V'
   757   007F95  41                 	db	65	;'A'
   758   007F96  54                 	db	84	;'T'
   759   007F97  45                 	db	69	;'E'
   760   007F98  44                 	db	68	;'D'
   761   007F99  21                 	db	33
   762   007F9A  00                 	db	0
   763   007F9B                     STR_29:
   764   007F9B  41                 	db	65	;'A'
   765   007F9C  4C                 	db	76	;'L'
   766   007F9D  41                 	db	65	;'A'
   767   007F9E  52                 	db	82	;'R'
   768   007F9F  4D                 	db	77	;'M'
   769   007FA0  45                 	db	69	;'E'
   770   007FA1  20                 	db	32
   771   007FA2  41                 	db	65	;'A'
   772   007FA3  43                 	db	67	;'C'
   773   007FA4  49                 	db	73	;'I'
   774   007FA5  4F                 	db	79	;'O'
   775   007FA6  4E                 	db	78	;'N'
   776   007FA7  41                 	db	65	;'A'
   777   007FA8  44                 	db	68	;'D'
   778   007FA9  4F                 	db	79	;'O'
   779   007FAA  21                 	db	33
   780   007FAB  00                 	db	0
   781   007FAC                     STR_11:
   782   007FAC  41                 	db	65	;'A'
   783   007FAD  6C                 	db	108	;'l'
   784   007FAE  61                 	db	97	;'a'
   785   007FAF  72                 	db	114	;'r'
   786   007FB0  6D                 	db	109	;'m'
   787   007FB1  65                 	db	101	;'e'
   788   007FB2  20                 	db	32
   789   007FB3  69                 	db	105	;'i'
   790   007FB4  6E                 	db	110	;'n'
   791   007FB5  66                 	db	102	;'f'
   792   007FB6  65                 	db	101	;'e'
   793   007FB7  72                 	db	114	;'r'
   794   007FB8  69                 	db	105	;'i'
   795   007FB9  65                 	db	101	;'e'
   796   007FBA  75                 	db	117	;'u'
   797   007FBB  72                 	db	114	;'r'
   798   007FBC  00                 	db	0
   799   007FBD                     STR_7:
   800   007FBD  41                 	db	65	;'A'
   801   007FBE  6C                 	db	108	;'l'
   802   007FBF  61                 	db	97	;'a'
   803   007FC0  72                 	db	114	;'r'
   804   007FC1  6D                 	db	109	;'m'
   805   007FC2  65                 	db	101	;'e'
   806   007FC3  20                 	db	32
   807   007FC4  73                 	db	115	;'s'
   808   007FC5  75                 	db	117	;'u'
   809   007FC6  70                 	db	112	;'p'
   810   007FC7  65                 	db	101	;'e'
   811   007FC8  72                 	db	114	;'r'
   812   007FC9  69                 	db	105	;'i'
   813   007FCA  65                 	db	101	;'e'
   814   007FCB  75                 	db	117	;'u'
   815   007FCC  72                 	db	114	;'r'
   816   007FCD  00                 	db	0
   817   007FCE                     STR_2:
   818   007FCE  41                 	db	65	;'A'
   819   007FCF  43                 	db	67	;'C'
   820   007FD0  54                 	db	84	;'T'
   821   007FD1  49                 	db	73	;'I'
   822   007FD2  56                 	db	86	;'V'
   823   007FD3  41                 	db	65	;'A'
   824   007FD4  54                 	db	84	;'T'
   825   007FD5  45                 	db	69	;'E'
   826   007FD6  44                 	db	68	;'D'
   827   007FD7  20                 	db	32
   828   007FD8  41                 	db	65	;'A'
   829   007FD9  54                 	db	84	;'T'
   830   007FDA  20                 	db	32
   831   007FDB  00                 	db	0
   832   007FDC                     STR_1:
   833   007FDC  41                 	db	65	;'A'
   834   007FDD  43                 	db	67	;'C'
   835   007FDE  49                 	db	73	;'I'
   836   007FDF  4F                 	db	79	;'O'
   837   007FE0  4E                 	db	78	;'N'
   838   007FE1  41                 	db	65	;'A'
   839   007FE2  44                 	db	68	;'D'
   840   007FE3  4F                 	db	79	;'O'
   841   007FE4  20                 	db	32
   842   007FE5  45                 	db	69	;'E'
   843   007FE6  4D                 	db	77	;'M'
   844   007FE7  20                 	db	32
   845   007FE8  00                 	db	0
   846   007FE9                     STR_4:
   847   007FE9  41                 	db	65	;'A'
   848   007FEA  43                 	db	67	;'C'
   849   007FEB  54                 	db	84	;'T'
   850   007FEC  49                 	db	73	;'I'
   851   007FED  56                 	db	86	;'V'
   852   007FEE  41                 	db	65	;'A'
   853   007FEF  44                 	db	68	;'D'
   854   007FF0  4F                 	db	79	;'O'
   855   007FF1  20                 	db	32
   856   007FF2  41                 	db	65	;'A'
   857   007FF3  20                 	db	32
   858   007FF4  00                 	db	0
   859   007FF5                     STR_3:
   860   007FF5  41                 	db	65	;'A'
   861   007FF6  43                 	db	67	;'C'
   862   007FF7  54                 	db	84	;'T'
   863   007FF8  49                 	db	73	;'I'
   864   007FF9  56                 	db	86	;'V'
   865   007FFA  45                 	db	69	;'E'
   866   007FFB  20                 	db	32
   867   007FFC  41                 	db	65	;'A'
   868   007FFD  20                 	db	32
   869   007FFE  00                 	db	0
   870   007FFF  00                 	db	0	; dummy byte at the end
   871   000000                     
   872                           ; #config settings
   873                           
   874                           	psect	cinit
   875   006222                     __pcinit:
   876                           	callstack 0
   877   006222                     start_initialization:
   878                           	callstack 0
   879   006222                     __initialization:
   880                           	callstack 0
   881                           
   882                           ; Initialize objects allocated to BANK0 (64 bytes)
   883                           ; load TBLPTR registers with __pidataBANK0
   884   006222  0E0E               	movlw	low __pidataBANK0
   885   006224  6EF6               	movwf	tblptrl,c
   886   006226  0E61               	movlw	high __pidataBANK0
   887   006228  6EF7               	movwf	tblptrh,c
   888   00622A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   889   00622C  6EF8               	movwf	tblptru,c
   890   00622E  EE00  F060         	lfsr	0,__pdataBANK0
   891   006232  EE10 F040          	lfsr	1,64
   892   006236                     copy_data0:
   893   006236  0009               	tblrd		*+
   894   006238  CFF5 FFEE          	movff	tablat,postinc0
   895   00623C  50E5               	movf	postdec1,w,c
   896   00623E  50E1               	movf	fsr1l,w,c
   897   006240  E1FA               	bnz	copy_data0
   898                           
   899                           ; Initialize objects allocated to COMRAM (1 bytes)
   900                           ; load TBLPTR registers with __pidataCOMRAM
   901   006242  0E37               	movlw	low __pidataCOMRAM
   902   006244  6EF6               	movwf	tblptrl,c
   903   006246  0E5C               	movlw	high __pidataCOMRAM
   904   006248  6EF7               	movwf	tblptrh,c
   905   00624A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   906   00624C  6EF8               	movwf	tblptru,c
   907   00624E  0009               	tblrd		*+	;fetch initializer
   908   006250  CFF5 F05F          	movff	tablat,__pdataCOMRAM
   909                           
   910                           ; Clear objects allocated to COMRAM (45 bytes)
   911   006254  EE00  F032         	lfsr	0,__pbssCOMRAM
   912   006258  0E2D               	movlw	45
   913   00625A                     clear_0:
   914   00625A  6AEE               	clrf	postinc0,c
   915   00625C  06E8               	decf	wreg,f,c
   916   00625E  E1FD               	bnz	clear_0
   917   006260                     end_of_initialization:
   918                           	callstack 0
   919   006260                     __end_of__initialization:
   920                           	callstack 0
   921   006260  0E00               	movlw	low (__Lmediumconst shr (0+16))
   922   006262  6EF8               	movwf	tblptru,c
   923   006264  0100               	movlb	0
   924   006266  EF39  F02F         	goto	_main	;jump to C main() function
   925                           
   926                           	psect	bssCOMRAM
   927   000032                     __pbssCOMRAM:
   928                           	callstack 0
   929   000032                     eventRead@envio:
   930                           	callstack 0
   931   000032                     	ds	7
   932   000039                     eventRead@msg:
   933                           	callstack 0
   934   000039                     	ds	6
   935   00003F                     _level@var$F528:
   936                           	callstack 0
   937   00003F                     	ds	2
   938   000041                     	ds	2
   939   000043                     	ds	2
   940   000045                     _timer:
   941                           	callstack 0
   942   000045                     	ds	2
   943   000047                     _send:
   944                           	callstack 0
   945   000047                     	ds	2
   946   000049                     _level:
   947                           	callstack 0
   948   000049                     	ds	2
   949   00004B                     _flag:
   950                           	callstack 0
   951   00004B                     	ds	2
   952   00004D                     _key_ant:
   953                           	callstack 0
   954   00004D                     	ds	2
   955   00004F                     setAlarmLowerLevel@b:
   956                           	callstack 0
   957   00004F                     	ds	1
   958   000050                     setAlarmLowerLevel@a:
   959                           	callstack 0
   960   000050                     	ds	1
   961   000051                     getAlarmLowerLevel@b:
   962                           	callstack 0
   963   000051                     	ds	1
   964   000052                     getAlarmLowerLevel@a:
   965                           	callstack 0
   966   000052                     	ds	1
   967   000053                     setAlarmUpperLevel@b:
   968                           	callstack 0
   969   000053                     	ds	1
   970   000054                     setAlarmUpperLevel@a:
   971                           	callstack 0
   972   000054                     	ds	1
   973   000055                     getAlarmUpperLevel@b:
   974                           	callstack 0
   975   000055                     	ds	1
   976   000056                     getAlarmUpperLevel@a:
   977                           	callstack 0
   978   000056                     	ds	1
   979   000057                     _language:
   980                           	callstack 0
   981   000057                     	ds	1
   982   000058                     _state:
   983                           	callstack 0
   984   000058                     	ds	1
   985   000059                     eventRead@data:
   986                           	callstack 0
   987   000059                     	ds	1
   988   00005A                     _reading_protocol:
   989                           	callstack 0
   990   00005A                     	ds	1
   991   00005B                     _started:
   992                           	callstack 0
   993   00005B                     	ds	1
   994   00005C                     kpDebounce@teclaNew:
   995                           	callstack 0
   996   00005C                     	ds	1
   997   00005D                     kpDebounce@tempo:
   998                           	callstack 0
   999   00005D                     	ds	1
  1000   00005E                     _tecla:
  1001                           	callstack 0
  1002   00005E                     	ds	1
  1003                           
  1004                           	psect	dataCOMRAM
  1005   00005F                     __pdataCOMRAM:
  1006                           	callstack 0
  1007   00005F                     kpDebounce@teclaOld:
  1008                           	callstack 0
  1009   00005F                     	ds	1
  1010                           
  1011                           	psect	dataBANK0
  1012   000060                     __pdataBANK0:
  1013                           	callstack 0
  1014   000060                     _msgs:
  1015                           	callstack 0
  1016   000060                     	ds	56
  1017   000098                     _serial_out:
  1018                           	callstack 0
  1019   000098                     	ds	8
  1020                           
  1021                           	psect	cstackCOMRAM
  1022   000001                     __pcstackCOMRAM:
  1023                           	callstack 0
  1024   000001                     ?_digitalRead:
  1025                           	callstack 0
  1026   000001                     ?_getLevel:
  1027                           	callstack 0
  1028   000001                     ?_adcRead:
  1029                           	callstack 0
  1030   000001                     ?___wmul:
  1031                           	callstack 0
  1032   000001                     ?___awdiv:
  1033                           	callstack 0
  1034   000001                     serialSend@c:
  1035                           	callstack 0
  1036   000001                     serialRead@resp:
  1037                           	callstack 0
  1038   000001                     Delay40us@j:
  1039                           	callstack 0
  1040   000001                     Delay2ms@j:
  1041                           	callstack 0
  1042   000001                     lcdCommand4bits@data:
  1043                           	callstack 0
  1044   000001                     setState@newState:
  1045                           	callstack 0
  1046   000001                     digitalWrite@pin:
  1047                           	callstack 0
  1048   000001                     digitalRead@pin:
  1049                           	callstack 0
  1050   000001                     pinMode@pin:
  1051                           	callstack 0
  1052   000001                     ___wmul@multiplier:
  1053                           	callstack 0
  1054   000001                     ___awdiv@dividend:
  1055                           	callstack 0
  1056                           
  1057                           ; 2 bytes @ 0x0
  1058   000001                     	ds	1
  1059   000002                     Delay2ms@k:
  1060                           	callstack 0
  1061   000002                     lcdCommand4bits@cmd:
  1062                           	callstack 0
  1063                           
  1064                           ; 1 bytes @ 0x1
  1065   000002                     	ds	1
  1066   000003                     ??_digitalRead:
  1067   000003                     lcdCommand@cmd:
  1068                           	callstack 0
  1069   000003                     lcdData@valor:
  1070                           	callstack 0
  1071   000003                     digitalWrite@value:
  1072                           	callstack 0
  1073   000003                     pinMode@type:
  1074                           	callstack 0
  1075   000003                     adcRead@ADvalor:
  1076                           	callstack 0
  1077   000003                     ___wmul@multiplicand:
  1078                           	callstack 0
  1079   000003                     ___awdiv@divisor:
  1080                           	callstack 0
  1081                           
  1082                           ; 2 bytes @ 0x2
  1083   000003                     	ds	1
  1084   000004                     lcdInit@i:
  1085                           	callstack 0
  1086   000004                     lcdString@msg:
  1087                           	callstack 0
  1088                           
  1089                           ; 2 bytes @ 0x3
  1090   000004                     	ds	1
  1091   000005                     ??_pinMode:
  1092   000005                     ??_digitalWrite:
  1093   000005                     ___awdiv@counter:
  1094                           	callstack 0
  1095   000005                     ___wmul@product:
  1096                           	callstack 0
  1097                           
  1098                           ; 2 bytes @ 0x4
  1099   000005                     	ds	1
  1100   000006                     ??_lcdString:
  1101   000006                     ___awdiv@sign:
  1102                           	callstack 0
  1103                           
  1104                           ; 1 bytes @ 0x5
  1105   000006                     	ds	1
  1106   000007                     ?_pow10:
  1107                           	callstack 0
  1108   000007                     i2c_write_bit@bit:
  1109                           	callstack 0
  1110   000007                     i2c_read_bit@bit:
  1111                           	callstack 0
  1112   000007                     pow10@expoent:
  1113                           	callstack 0
  1114   000007                     ___awdiv@quotient:
  1115                           	callstack 0
  1116                           
  1117                           ; 2 bytes @ 0x6
  1118   000007                     	ds	1
  1119   000008                     i2cWriteByte@send_stop:
  1120                           	callstack 0
  1121   000008                     i2cReadByte@send_stop:
  1122                           	callstack 0
  1123   000008                     lcdString@i:
  1124                           	callstack 0
  1125                           
  1126                           ; 2 bytes @ 0x7
  1127   000008                     	ds	1
  1128   000009                     ??_i2cReadByte:
  1129   000009                     ??_pow10:
  1130   000009                     ?___awmod:
  1131                           	callstack 0
  1132   000009                     i2cWriteByte@byte:
  1133                           	callstack 0
  1134   000009                     ___awmod@dividend:
  1135                           	callstack 0
  1136                           
  1137                           ; 2 bytes @ 0x8
  1138   000009                     	ds	1
  1139   00000A                     i2cWriteByte@send_start:
  1140                           	callstack 0
  1141   00000A                     i2cReadByte@nack:
  1142                           	callstack 0
  1143   00000A                     pow10@i:
  1144                           	callstack 0
  1145                           
  1146                           ; 2 bytes @ 0x9
  1147   00000A                     	ds	1
  1148   00000B                     i2cWriteByte@bit:
  1149                           	callstack 0
  1150   00000B                     i2cReadByte@bit:
  1151                           	callstack 0
  1152   00000B                     ___awmod@divisor:
  1153                           	callstack 0
  1154                           
  1155                           ; 2 bytes @ 0xA
  1156   00000B                     	ds	1
  1157   00000C                     dsWriteData@address:
  1158                           	callstack 0
  1159   00000C                     pow10@result:
  1160                           	callstack 0
  1161                           
  1162                           ; 2 bytes @ 0xB
  1163   00000C                     	ds	1
  1164   00000D                     i2cReadByte@byte:
  1165                           	callstack 0
  1166   00000D                     ___awmod@counter:
  1167                           	callstack 0
  1168                           
  1169                           ; 1 bytes @ 0xC
  1170   00000D                     	ds	1
  1171   00000E                     ?_dsReadData:
  1172                           	callstack 0
  1173   00000E                     dsWriteData@value:
  1174                           	callstack 0
  1175   00000E                     ___awmod@sign:
  1176                           	callstack 0
  1177   00000E                     dsReadData@address:
  1178                           	callstack 0
  1179                           
  1180                           ; 2 bytes @ 0xD
  1181   00000E                     	ds	1
  1182   00000F                     setSEC@value:
  1183                           	callstack 0
  1184   00000F                     setMIN@value:
  1185                           	callstack 0
  1186   00000F                     setHOUR@value:
  1187                           	callstack 0
  1188   00000F                     setLanguage@newLanguage:
  1189                           	callstack 0
  1190   00000F                     intToStr@value:
  1191                           	callstack 0
  1192                           
  1193                           ; 2 bytes @ 0xE
  1194   00000F                     	ds	1
  1195   000010                     ??_dsReadData:
  1196                           
  1197                           ; 1 bytes @ 0xF
  1198   000010                     	ds	1
  1199   000011                     intToStr@buffer:
  1200                           	callstack 0
  1201   000011                     dsReadData@result:
  1202                           	callstack 0
  1203                           
  1204                           ; 2 bytes @ 0x10
  1205   000011                     	ds	1
  1206   000012                     ??_intToStr:
  1207                           
  1208                           ; 1 bytes @ 0x11
  1209   000012                     	ds	1
  1210   000013                     ?_getAlarmUpperLevel:
  1211                           	callstack 0
  1212   000013                     ?_getAlarmLowerLevel:
  1213                           	callstack 0
  1214   000013                     serialSendString@str:
  1215                           	callstack 0
  1216   000013                     intToStr@digit:
  1217                           	callstack 0
  1218                           
  1219                           ; 2 bytes @ 0x12
  1220   000013                     	ds	2
  1221   000015                     ??_getAlarmUpperLevel:
  1222   000015                     ??_getAlarmLowerLevel:
  1223   000015                     intToStr@isNegative:
  1224                           	callstack 0
  1225                           
  1226                           ; 2 bytes @ 0x14
  1227   000015                     	ds	2
  1228   000017                     intToStr@temp:
  1229                           	callstack 0
  1230   000017                     lcdInt@val:
  1231                           	callstack 0
  1232   000017                     setAlarmUpperLevel@newAlarmLevel:
  1233                           	callstack 0
  1234   000017                     setAlarmLowerLevel@newAlarmLevel:
  1235                           	callstack 0
  1236                           
  1237                           ; 2 bytes @ 0x16
  1238   000017                     	ds	1
  1239   000018                     intToStr@start:
  1240                           	callstack 0
  1241                           
  1242                           ; 2 bytes @ 0x17
  1243   000018                     	ds	1
  1244   000019                     ?_eventRead:
  1245                           	callstack 0
  1246   000019                     outputPrint@numTela:
  1247                           	callstack 0
  1248                           
  1249                           ; 2 bytes @ 0x18
  1250   000019                     	ds	1
  1251   00001A                     intToStr@end:
  1252                           	callstack 0
  1253                           
  1254                           ; 2 bytes @ 0x19
  1255   00001A                     	ds	1
  1256   00001B                     ??_eventRead:
  1257   00001B                     outputPrint@idioma:
  1258                           	callstack 0
  1259                           
  1260                           ; 2 bytes @ 0x1A
  1261   00001B                     	ds	1
  1262   00001C                     intToStr@i:
  1263                           	callstack 0
  1264                           
  1265                           ; 2 bytes @ 0x1B
  1266   00001C                     	ds	1
  1267   00001D                     ??_outputPrint:
  1268   00001D                     _eventRead$1244:
  1269                           	callstack 0
  1270                           
  1271                           ; 2 bytes @ 0x1C
  1272   00001D                     	ds	1
  1273   00001E                     outputPrint@hour:
  1274                           	callstack 0
  1275   00001E                     serialSendInt@value:
  1276                           	callstack 0
  1277                           
  1278                           ; 2 bytes @ 0x1D
  1279   00001E                     	ds	1
  1280   00001F                     outputPrint@min:
  1281                           	callstack 0
  1282   00001F                     eventRead@ev:
  1283                           	callstack 0
  1284                           
  1285                           ; 2 bytes @ 0x1E
  1286   00001F                     	ds	1
  1287   000020                     outputPrint@sec:
  1288                           	callstack 0
  1289   000020                     serialSendInt@buffer:
  1290                           	callstack 0
  1291                           
  1292                           ; 12 bytes @ 0x1F
  1293   000020                     	ds	1
  1294   000021                     eventRead@i:
  1295                           	callstack 0
  1296   000021                     outputPrint@hour_495:
  1297                           	callstack 0
  1298                           
  1299                           ; 1 bytes @ 0x20
  1300   000021                     	ds	1
  1301   000022                     eventRead@i_344:
  1302                           	callstack 0
  1303   000022                     outputPrint@min_496:
  1304                           	callstack 0
  1305                           
  1306                           ; 1 bytes @ 0x21
  1307   000022                     	ds	1
  1308   000023                     eventRead@i_347:
  1309                           	callstack 0
  1310   000023                     outputPrint@sec_497:
  1311                           	callstack 0
  1312                           
  1313                           ; 1 bytes @ 0x22
  1314   000023                     	ds	1
  1315   000024                     outputPrint@hour_499:
  1316                           	callstack 0
  1317   000024                     eventRead@key:
  1318                           	callstack 0
  1319                           
  1320                           ; 2 bytes @ 0x23
  1321   000024                     	ds	1
  1322   000025                     outputPrint@min_500:
  1323                           	callstack 0
  1324                           
  1325                           ; 1 bytes @ 0x24
  1326   000025                     	ds	1
  1327   000026                     outputPrint@sec_501:
  1328                           	callstack 0
  1329   000026                     eventRead@value:
  1330                           	callstack 0
  1331                           
  1332                           ; 2 bytes @ 0x25
  1333   000026                     	ds	6
  1334   00002C                     ??_smLoop:
  1335                           
  1336                           ; 1 bytes @ 0x2B
  1337   00002C                     	ds	3
  1338   00002F                     _smLoop$1245:
  1339                           	callstack 0
  1340                           
  1341                           ; 2 bytes @ 0x2E
  1342   00002F                     	ds	2
  1343   000031                     smLoop@evento:
  1344                           	callstack 0
  1345                           
  1346                           ; 1 bytes @ 0x30
  1347   000031                     	ds	1
  1348   000032                     
  1349                           ; 1 bytes @ 0x31
  1350 ;;
  1351 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1352 ;;
  1353 ;; *************** function _main *****************
  1354 ;; Defined at:
  1355 ;;		line 11 in file "main.c"
  1356 ;; Parameters:    Size  Location     Type
  1357 ;;		None
  1358 ;; Auto vars:     Size  Location     Type
  1359 ;;		None
  1360 ;; Return value:  Size  Location     Type
  1361 ;;                  1    wreg      void 
  1362 ;; Registers used:
  1363 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1364 ;; Tracked objects:
  1365 ;;		On entry : 0/0
  1366 ;;		On exit  : 0/0
  1367 ;;		Unchanged: 0/0
  1368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1369 ;;      Params:         0       0       0       0       0       0       0       0       0
  1370 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1371 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1372 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1373 ;;Total ram usage:        0 bytes
  1374 ;; Hardware stack levels required when called: 8
  1375 ;; This function calls:
  1376 ;;		_eventInit
  1377 ;;		_kpDebounce
  1378 ;;		_kpInit
  1379 ;;		_lcdInit
  1380 ;;		_outputInit
  1381 ;;		_serialInit
  1382 ;;		_smLoop
  1383 ;;		_varInit
  1384 ;; This function is called by:
  1385 ;;		Startup code after reset
  1386 ;; This function uses a non-reentrant model
  1387 ;;
  1388                           
  1389                           	psect	text0
  1390   005E72                     __ptext0:
  1391                           	callstack 0
  1392   005E72                     _main:
  1393                           	callstack 23
  1394   005E72                     
  1395                           ;main.c: 14:     serialInit();
  1396   005E72  EC9D  F02E         	call	_serialInit	;wreg free
  1397                           
  1398                           ;main.c: 15:     kpInit();
  1399   005E76  EC2E  F02E         	call	_kpInit	;wreg free
  1400                           
  1401                           ;main.c: 16:     lcdInit();
  1402   005E7A  EC7F  F032         	call	_lcdInit	;wreg free
  1403                           
  1404                           ;main.c: 17:     varInit();
  1405   005E7E  EC70  F02E         	call	_varInit	;wreg free
  1406                           
  1407                           ;main.c: 18:     eventInit();
  1408   005E82  EC38  F02E         	call	_eventInit	;wreg free
  1409                           
  1410                           ;main.c: 19:     outputInit();
  1411   005E86  EC24  F02E         	call	_outputInit	;wreg free
  1412   005E8A                     l21:
  1413                           
  1414                           ;main.c: 26:         kpDebounce();
  1415   005E8A  ECBB  F032         	call	_kpDebounce	;wreg free
  1416   005E8E                     
  1417                           ;main.c: 29:         smLoop();
  1418   005E8E  EC44  F039         	call	_smLoop	;wreg free
  1419                           
  1420                           ;main.c: 30:     }
  1421   005E92  EF45  F02F         	goto	l21
  1422   005E96  EF00  F000         	goto	start
  1423   005E9A                     __end_of_main:
  1424                           	callstack 0
  1425                           
  1426 ;; *************** function _varInit *****************
  1427 ;; Defined at:
  1428 ;;		line 21 in file "var.c"
  1429 ;; Parameters:    Size  Location     Type
  1430 ;;		None
  1431 ;; Auto vars:     Size  Location     Type
  1432 ;;		None
  1433 ;; Return value:  Size  Location     Type
  1434 ;;                  1    wreg      void 
  1435 ;; Registers used:
  1436 ;;		wreg, status,2, status,0, cstack
  1437 ;; Tracked objects:
  1438 ;;		On entry : 0/0
  1439 ;;		On exit  : 0/0
  1440 ;;		Unchanged: 0/0
  1441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1442 ;;      Params:         0       0       0       0       0       0       0       0       0
  1443 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1444 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1445 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1446 ;;Total ram usage:        0 bytes
  1447 ;; Hardware stack levels used: 1
  1448 ;; Hardware stack levels required when called: 6
  1449 ;; This function calls:
  1450 ;;		_dsInit
  1451 ;;		_getLanguage
  1452 ;;		_setLanguage
  1453 ;; This function is called by:
  1454 ;;		_main
  1455 ;; This function uses a non-reentrant model
  1456 ;;
  1457                           
  1458                           	psect	text1
  1459   005CE0                     __ptext1:
  1460                           	callstack 0
  1461   005CE0                     _varInit:
  1462                           	callstack 24
  1463   005CE0                     
  1464                           ;var.c: 22:     dsInit();
  1465   005CE0  EC27  F02E         	call	_dsInit	;wreg free
  1466   005CE4                     
  1467                           ;var.c: 23:     state = 0;
  1468   005CE4  0E00               	movlw	0
  1469   005CE6  6E58               	movwf	_state^0,c
  1470   005CE8                     
  1471                           ;var.c: 24:     setLanguage(getLanguage() % 4);
  1472   005CE8  EC47  F02E         	call	_getLanguage	;wreg free
  1473   005CEC  0B03               	andlw	3
  1474   005CEE  EC91  F02E         	call	_setLanguage
  1475   005CF2  0012               	return		;funcret
  1476   005CF4                     __end_of_varInit:
  1477                           	callstack 0
  1478                           
  1479 ;; *************** function _dsInit *****************
  1480 ;; Defined at:
  1481 ;;		line 17 in file "ds1307.c"
  1482 ;; Parameters:    Size  Location     Type
  1483 ;;		None
  1484 ;; Auto vars:     Size  Location     Type
  1485 ;;		None
  1486 ;; Return value:  Size  Location     Type
  1487 ;;                  1    wreg      void 
  1488 ;; Registers used:
  1489 ;;		wreg, status,2, status,0, cstack
  1490 ;; Tracked objects:
  1491 ;;		On entry : 0/0
  1492 ;;		On exit  : 0/0
  1493 ;;		Unchanged: 0/0
  1494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1495 ;;      Params:         0       0       0       0       0       0       0       0       0
  1496 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1497 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1498 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1499 ;;Total ram usage:        0 bytes
  1500 ;; Hardware stack levels used: 1
  1501 ;; Hardware stack levels required when called: 2
  1502 ;; This function calls:
  1503 ;;		_i2cInit
  1504 ;; This function is called by:
  1505 ;;		_varInit
  1506 ;; This function uses a non-reentrant model
  1507 ;;
  1508                           
  1509                           	psect	text2
  1510   005C4E                     __ptext2:
  1511                           	callstack 0
  1512   005C4E                     _dsInit:
  1513                           	callstack 27
  1514   005C4E                     
  1515                           ;ds1307.c: 18:  i2cInit();
  1516   005C4E  EC77  F02F         	call	_i2cInit	;wreg free
  1517   005C52  0012               	return		;funcret
  1518   005C54                     __end_of_dsInit:
  1519                           	callstack 0
  1520                           
  1521 ;; *************** function _i2cInit *****************
  1522 ;; Defined at:
  1523 ;;		line 14 in file "i2c.c"
  1524 ;; Parameters:    Size  Location     Type
  1525 ;;		None
  1526 ;; Auto vars:     Size  Location     Type
  1527 ;;		None
  1528 ;; Return value:  Size  Location     Type
  1529 ;;                  1    wreg      void 
  1530 ;; Registers used:
  1531 ;;		wreg, status,2, status,0, cstack
  1532 ;; Tracked objects:
  1533 ;;		On entry : 0/0
  1534 ;;		On exit  : 0/0
  1535 ;;		Unchanged: 0/0
  1536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1537 ;;      Params:         0       0       0       0       0       0       0       0       0
  1538 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1539 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1540 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1541 ;;Total ram usage:        0 bytes
  1542 ;; Hardware stack levels used: 1
  1543 ;; Hardware stack levels required when called: 1
  1544 ;; This function calls:
  1545 ;;		_pinMode
  1546 ;; This function is called by:
  1547 ;;		_dsInit
  1548 ;; This function uses a non-reentrant model
  1549 ;;
  1550                           
  1551                           	psect	text3
  1552   005EEE                     __ptext3:
  1553                           	callstack 0
  1554   005EEE                     _i2cInit:
  1555                           	callstack 27
  1556   005EEE                     
  1557                           ;i2c.c: 16:  pinMode(PIN_B0,1);
  1558   005EEE  0E00               	movlw	0
  1559   005EF0  6E02               	movwf	(pinMode@pin+1)^0,c
  1560   005EF2  0E08               	movlw	8
  1561   005EF4  6E01               	movwf	pinMode@pin^0,c
  1562   005EF6  0E00               	movlw	0
  1563   005EF8  6E04               	movwf	(pinMode@type+1)^0,c
  1564   005EFA  0E01               	movlw	1
  1565   005EFC  6E03               	movwf	pinMode@type^0,c
  1566   005EFE  ECCB  F036         	call	_pinMode	;wreg free
  1567                           
  1568                           ;i2c.c: 17:  pinMode(PIN_B1,1);
  1569   005F02  0E00               	movlw	0
  1570   005F04  6E02               	movwf	(pinMode@pin+1)^0,c
  1571   005F06  0E09               	movlw	9
  1572   005F08  6E01               	movwf	pinMode@pin^0,c
  1573   005F0A  0E00               	movlw	0
  1574   005F0C  6E04               	movwf	(pinMode@type+1)^0,c
  1575   005F0E  0E01               	movlw	1
  1576   005F10  6E03               	movwf	pinMode@type^0,c
  1577   005F12  ECCB  F036         	call	_pinMode	;wreg free
  1578   005F16  0012               	return		;funcret
  1579   005F18                     __end_of_i2cInit:
  1580                           	callstack 0
  1581                           
  1582 ;; *************** function _smLoop *****************
  1583 ;; Defined at:
  1584 ;;		line 23 in file "stateMachine.c"
  1585 ;; Parameters:    Size  Location     Type
  1586 ;;		None
  1587 ;; Auto vars:     Size  Location     Type
  1588 ;;  evento          1   48[COMRAM] unsigned char 
  1589 ;; Return value:  Size  Location     Type
  1590 ;;                  1    wreg      void 
  1591 ;; Registers used:
  1592 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1593 ;; Tracked objects:
  1594 ;;		On entry : 0/0
  1595 ;;		On exit  : 0/0
  1596 ;;		Unchanged: 0/0
  1597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1598 ;;      Params:         0       0       0       0       0       0       0       0       0
  1599 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1600 ;;      Temps:          3       0       0       0       0       0       0       0       0
  1601 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1602 ;;Total ram usage:        6 bytes
  1603 ;; Hardware stack levels used: 1
  1604 ;; Hardware stack levels required when called: 7
  1605 ;; This function calls:
  1606 ;;		_eventRead
  1607 ;;		_getAlarmLowerLevel
  1608 ;;		_getAlarmUpperLevel
  1609 ;;		_getHOUR
  1610 ;;		_getLanguage
  1611 ;;		_getLevel
  1612 ;;		_getMIN
  1613 ;;		_getSEC
  1614 ;;		_getState
  1615 ;;		_outputPrint
  1616 ;;		_serialSend
  1617 ;;		_serialSendInt
  1618 ;;		_serialSendString
  1619 ;;		_setAlarmLowerLevel
  1620 ;;		_setAlarmUpperLevel
  1621 ;;		_setHOUR
  1622 ;;		_setLanguage
  1623 ;;		_setMIN
  1624 ;;		_setSEC
  1625 ;;		_setState
  1626 ;;		_updateLevel
  1627 ;; This function is called by:
  1628 ;;		_main
  1629 ;; This function uses a non-reentrant model
  1630 ;;
  1631                           
  1632                           	psect	text4
  1633   007288                     __ptext4:
  1634                           	callstack 0
  1635   007288                     _smLoop:
  1636                           	callstack 23
  1637   007288                     
  1638                           ;stateMachine.c: 24:     unsigned char evento;;stateMachine.c: 26:     updateLevel();
  1639   007288  EC67  F02E         	call	_updateLevel	;wreg free
  1640   00728C                     
  1641                           ;stateMachine.c: 27:     level = getLevel();
  1642   00728C  EC33  F02E         	call	_getLevel	;wreg free
  1643   007290  C001  F049         	movff	?_getLevel,_level
  1644   007294  C002  F04A         	movff	?_getLevel+1,_level+1
  1645   007298                     
  1646                           ;stateMachine.c: 30:     evento = eventRead();
  1647   007298  ECF2  F037         	call	_eventRead	;wreg free
  1648   00729C  5019               	movf	?_eventRead^0,w,c
  1649   00729E  6E31               	movwf	smLoop@evento^0,c
  1650                           
  1651                           ;stateMachine.c: 32:     switch (getState()) {
  1652   0072A0  EFFA  F03A         	goto	l3621
  1653   0072A4                     l3507:
  1654                           
  1655                           ;stateMachine.c: 35:             if (evento == EV_RIGHT) {
  1656   0072A4  0E03               	movlw	3
  1657   0072A6  1831               	xorwf	smLoop@evento^0,w,c
  1658   0072A8  A4D8               	btfss	status,2,c
  1659   0072AA  EF59  F039         	goto	u3221
  1660   0072AE  EF5B  F039         	goto	u3220
  1661   0072B2                     u3221:
  1662   0072B2  EF65  F039         	goto	l3511
  1663   0072B6                     u3220:
  1664   0072B6                     
  1665                           ;stateMachine.c: 36:                 setAlarmUpperLevel(getAlarmUpperLevel() + 1);
  1666   0072B6  EC6B  F030         	call	_getAlarmUpperLevel	;wreg free
  1667   0072BA  0E01               	movlw	1
  1668   0072BC  2413               	addwf	?_getAlarmUpperLevel^0,w,c
  1669   0072BE  6E17               	movwf	setAlarmUpperLevel@newAlarmLevel^0,c
  1670   0072C0  0E00               	movlw	0
  1671   0072C2  2014               	addwfc	(?_getAlarmUpperLevel+1)^0,w,c
  1672   0072C4  6E18               	movwf	(setAlarmUpperLevel@newAlarmLevel+1)^0,c
  1673   0072C6  ECED  F02E         	call	_setAlarmUpperLevel	;wreg free
  1674   0072CA                     l3511:
  1675                           
  1676                           ;stateMachine.c: 38:             if (evento == EV_LEFT) {
  1677   0072CA  0E02               	movlw	2
  1678   0072CC  1831               	xorwf	smLoop@evento^0,w,c
  1679   0072CE  A4D8               	btfss	status,2,c
  1680   0072D0  EF6C  F039         	goto	u3231
  1681   0072D4  EF6E  F039         	goto	u3230
  1682   0072D8                     u3231:
  1683   0072D8  EF78  F039         	goto	l3515
  1684   0072DC                     u3230:
  1685   0072DC                     
  1686                           ;stateMachine.c: 39:                 setAlarmUpperLevel(getAlarmUpperLevel() - 1);
  1687   0072DC  EC6B  F030         	call	_getAlarmUpperLevel	;wreg free
  1688   0072E0  0EFF               	movlw	255
  1689   0072E2  2413               	addwf	?_getAlarmUpperLevel^0,w,c
  1690   0072E4  6E17               	movwf	setAlarmUpperLevel@newAlarmLevel^0,c
  1691   0072E6  0EFF               	movlw	255
  1692   0072E8  2014               	addwfc	(?_getAlarmUpperLevel+1)^0,w,c
  1693   0072EA  6E18               	movwf	(setAlarmUpperLevel@newAlarmLevel+1)^0,c
  1694   0072EC  ECED  F02E         	call	_setAlarmUpperLevel	;wreg free
  1695   0072F0                     l3515:
  1696                           
  1697                           ;stateMachine.c: 43:             if (evento == EV_ENTER) {
  1698   0072F0  0E04               	movlw	4
  1699   0072F2  1831               	xorwf	smLoop@evento^0,w,c
  1700   0072F4  A4D8               	btfss	status,2,c
  1701   0072F6  EF7F  F039         	goto	u3241
  1702   0072FA  EF81  F039         	goto	u3240
  1703   0072FE                     u3241:
  1704   0072FE  EF1A  F03B         	goto	l3623
  1705   007302                     u3240:
  1706   007302                     
  1707                           ;stateMachine.c: 44:                 setState(STATE_ALARM_LOWER);
  1708   007302  0E01               	movlw	1
  1709   007304  EC2A  F02E         	call	_setState
  1710   007308  EF1A  F03B         	goto	l3623
  1711   00730C                     l3519:
  1712                           
  1713                           ;stateMachine.c: 49:             if (evento == EV_RIGHT) {
  1714   00730C  0E03               	movlw	3
  1715   00730E  1831               	xorwf	smLoop@evento^0,w,c
  1716   007310  A4D8               	btfss	status,2,c
  1717   007312  EF8D  F039         	goto	u3251
  1718   007316  EF8F  F039         	goto	u3250
  1719   00731A                     u3251:
  1720   00731A  EF99  F039         	goto	l3523
  1721   00731E                     u3250:
  1722   00731E                     
  1723                           ;stateMachine.c: 50:                 setAlarmLowerLevel(getAlarmLowerLevel() + 1);
  1724   00731E  EC4F  F030         	call	_getAlarmLowerLevel	;wreg free
  1725   007322  0E01               	movlw	1
  1726   007324  2413               	addwf	?_getAlarmLowerLevel^0,w,c
  1727   007326  6E17               	movwf	setAlarmLowerLevel@newAlarmLevel^0,c
  1728   007328  0E00               	movlw	0
  1729   00732A  2014               	addwfc	(?_getAlarmLowerLevel+1)^0,w,c
  1730   00732C  6E18               	movwf	(setAlarmLowerLevel@newAlarmLevel+1)^0,c
  1731   00732E  ECDA  F02E         	call	_setAlarmLowerLevel	;wreg free
  1732   007332                     l3523:
  1733                           
  1734                           ;stateMachine.c: 52:             if (evento == EV_LEFT) {
  1735   007332  0E02               	movlw	2
  1736   007334  1831               	xorwf	smLoop@evento^0,w,c
  1737   007336  A4D8               	btfss	status,2,c
  1738   007338  EFA0  F039         	goto	u3261
  1739   00733C  EFA2  F039         	goto	u3260
  1740   007340                     u3261:
  1741   007340  EFAC  F039         	goto	l3527
  1742   007344                     u3260:
  1743   007344                     
  1744                           ;stateMachine.c: 53:                 setAlarmLowerLevel(getAlarmLowerLevel() - 1);
  1745   007344  EC4F  F030         	call	_getAlarmLowerLevel	;wreg free
  1746   007348  0EFF               	movlw	255
  1747   00734A  2413               	addwf	?_getAlarmLowerLevel^0,w,c
  1748   00734C  6E17               	movwf	setAlarmLowerLevel@newAlarmLevel^0,c
  1749   00734E  0EFF               	movlw	255
  1750   007350  2014               	addwfc	(?_getAlarmLowerLevel+1)^0,w,c
  1751   007352  6E18               	movwf	(setAlarmLowerLevel@newAlarmLevel+1)^0,c
  1752   007354  ECDA  F02E         	call	_setAlarmLowerLevel	;wreg free
  1753   007358                     l3527:
  1754                           
  1755                           ;stateMachine.c: 57:             if (evento == EV_ENTER) {
  1756   007358  0E04               	movlw	4
  1757   00735A  1831               	xorwf	smLoop@evento^0,w,c
  1758   00735C  A4D8               	btfss	status,2,c
  1759   00735E  EFB3  F039         	goto	u3271
  1760   007362  EFB5  F039         	goto	u3270
  1761   007366                     u3271:
  1762   007366  EF1A  F03B         	goto	l3623
  1763   00736A                     u3270:
  1764   00736A                     
  1765                           ;stateMachine.c: 58:                 setState(STATE_HOUR);
  1766   00736A  0E02               	movlw	2
  1767   00736C  EC2A  F02E         	call	_setState
  1768   007370  EF1A  F03B         	goto	l3623
  1769   007374                     l3531:
  1770                           
  1771                           ;stateMachine.c: 64:             if (evento == EV_RIGHT) {
  1772   007374  0E03               	movlw	3
  1773   007376  1831               	xorwf	smLoop@evento^0,w,c
  1774   007378  A4D8               	btfss	status,2,c
  1775   00737A  EFC1  F039         	goto	u3281
  1776   00737E  EFC3  F039         	goto	u3280
  1777   007382                     u3281:
  1778   007382  EFC9  F039         	goto	l3535
  1779   007386                     u3280:
  1780   007386                     
  1781                           ;stateMachine.c: 65:                 setHOUR(getHOUR() + 1);
  1782   007386  EC3F  F02E         	call	_getHOUR	;wreg free
  1783   00738A  6E2C               	movwf	??_smLoop^0,c
  1784   00738C  282C               	incf	??_smLoop^0,w,c
  1785   00738E  EC00  F02F         	call	_setHOUR
  1786   007392                     l3535:
  1787                           
  1788                           ;stateMachine.c: 67:             if (evento == EV_LEFT) {
  1789   007392  0E02               	movlw	2
  1790   007394  1831               	xorwf	smLoop@evento^0,w,c
  1791   007396  A4D8               	btfss	status,2,c
  1792   007398  EFD0  F039         	goto	u3291
  1793   00739C  EFD2  F039         	goto	u3290
  1794   0073A0                     u3291:
  1795   0073A0  EFD8  F039         	goto	l3539
  1796   0073A4                     u3290:
  1797   0073A4                     
  1798                           ;stateMachine.c: 68:                 setHOUR(getHOUR() - 1);
  1799   0073A4  EC3F  F02E         	call	_getHOUR	;wreg free
  1800   0073A8  6E2C               	movwf	??_smLoop^0,c
  1801   0073AA  042C               	decf	??_smLoop^0,w,c
  1802   0073AC  EC00  F02F         	call	_setHOUR
  1803   0073B0                     l3539:
  1804                           
  1805                           ;stateMachine.c: 72:             if (evento == EV_ENTER) {
  1806   0073B0  0E04               	movlw	4
  1807   0073B2  1831               	xorwf	smLoop@evento^0,w,c
  1808   0073B4  A4D8               	btfss	status,2,c
  1809   0073B6  EFDF  F039         	goto	u3301
  1810   0073BA  EFE1  F039         	goto	u3300
  1811   0073BE                     u3301:
  1812   0073BE  EF1A  F03B         	goto	l3623
  1813   0073C2                     u3300:
  1814   0073C2                     
  1815                           ;stateMachine.c: 73:                 setState(STATE_MIN);
  1816   0073C2  0E03               	movlw	3
  1817   0073C4  EC2A  F02E         	call	_setState
  1818   0073C8  EF1A  F03B         	goto	l3623
  1819   0073CC                     l3543:
  1820                           
  1821                           ;stateMachine.c: 80:             if (evento == EV_RIGHT) {
  1822   0073CC  0E03               	movlw	3
  1823   0073CE  1831               	xorwf	smLoop@evento^0,w,c
  1824   0073D0  A4D8               	btfss	status,2,c
  1825   0073D2  EFED  F039         	goto	u3311
  1826   0073D6  EFEF  F039         	goto	u3310
  1827   0073DA                     u3311:
  1828   0073DA  EFF5  F039         	goto	l3547
  1829   0073DE                     u3310:
  1830   0073DE                     
  1831                           ;stateMachine.c: 81:                 setMIN(getMIN() + 1);
  1832   0073DE  EC4F  F02E         	call	_getMIN	;wreg free
  1833   0073E2  6E2C               	movwf	??_smLoop^0,c
  1834   0073E4  282C               	incf	??_smLoop^0,w,c
  1835   0073E6  EC13  F02F         	call	_setMIN
  1836   0073EA                     l3547:
  1837                           
  1838                           ;stateMachine.c: 83:             if (evento == EV_LEFT) {
  1839   0073EA  0E02               	movlw	2
  1840   0073EC  1831               	xorwf	smLoop@evento^0,w,c
  1841   0073EE  A4D8               	btfss	status,2,c
  1842   0073F0  EFFC  F039         	goto	u3321
  1843   0073F4  EFFE  F039         	goto	u3320
  1844   0073F8                     u3321:
  1845   0073F8  EF04  F03A         	goto	l3551
  1846   0073FC                     u3320:
  1847   0073FC                     
  1848                           ;stateMachine.c: 84:                 setMIN(getMIN() - 1);
  1849   0073FC  EC4F  F02E         	call	_getMIN	;wreg free
  1850   007400  6E2C               	movwf	??_smLoop^0,c
  1851   007402  042C               	decf	??_smLoop^0,w,c
  1852   007404  EC13  F02F         	call	_setMIN
  1853   007408                     l3551:
  1854                           
  1855                           ;stateMachine.c: 88:             if (evento == EV_ENTER) {
  1856   007408  0E04               	movlw	4
  1857   00740A  1831               	xorwf	smLoop@evento^0,w,c
  1858   00740C  A4D8               	btfss	status,2,c
  1859   00740E  EF0B  F03A         	goto	u3331
  1860   007412  EF0D  F03A         	goto	u3330
  1861   007416                     u3331:
  1862   007416  EF1A  F03B         	goto	l3623
  1863   00741A                     u3330:
  1864   00741A                     
  1865                           ;stateMachine.c: 89:                 setState(STATE_SEC);
  1866   00741A  0E04               	movlw	4
  1867   00741C  EC2A  F02E         	call	_setState
  1868   007420  EF1A  F03B         	goto	l3623
  1869   007424                     l3555:
  1870                           
  1871                           ;stateMachine.c: 96:             if (evento == EV_RIGHT) {
  1872   007424  0E03               	movlw	3
  1873   007426  1831               	xorwf	smLoop@evento^0,w,c
  1874   007428  A4D8               	btfss	status,2,c
  1875   00742A  EF19  F03A         	goto	u3341
  1876   00742E  EF1B  F03A         	goto	u3340
  1877   007432                     u3341:
  1878   007432  EF21  F03A         	goto	l3559
  1879   007436                     u3340:
  1880   007436                     
  1881                           ;stateMachine.c: 97:                 setSEC(getSEC() + 1);
  1882   007436  EC57  F02E         	call	_getSEC	;wreg free
  1883   00743A  6E2C               	movwf	??_smLoop^0,c
  1884   00743C  282C               	incf	??_smLoop^0,w,c
  1885   00743E  EC26  F02F         	call	_setSEC
  1886   007442                     l3559:
  1887                           
  1888                           ;stateMachine.c: 99:             if (evento == EV_LEFT) {
  1889   007442  0E02               	movlw	2
  1890   007444  1831               	xorwf	smLoop@evento^0,w,c
  1891   007446  A4D8               	btfss	status,2,c
  1892   007448  EF28  F03A         	goto	u3351
  1893   00744C  EF2A  F03A         	goto	u3350
  1894   007450                     u3351:
  1895   007450  EF30  F03A         	goto	l3563
  1896   007454                     u3350:
  1897   007454                     
  1898                           ;stateMachine.c: 100:                 setSEC(getSEC() - 1);
  1899   007454  EC57  F02E         	call	_getSEC	;wreg free
  1900   007458  6E2C               	movwf	??_smLoop^0,c
  1901   00745A  042C               	decf	??_smLoop^0,w,c
  1902   00745C  EC26  F02F         	call	_setSEC
  1903   007460                     l3563:
  1904                           
  1905                           ;stateMachine.c: 104:             if (evento == EV_ENTER) {
  1906   007460  0E04               	movlw	4
  1907   007462  1831               	xorwf	smLoop@evento^0,w,c
  1908   007464  A4D8               	btfss	status,2,c
  1909   007466  EF37  F03A         	goto	u3361
  1910   00746A  EF39  F03A         	goto	u3360
  1911   00746E                     u3361:
  1912   00746E  EF1A  F03B         	goto	l3623
  1913   007472                     u3360:
  1914   007472                     
  1915                           ;stateMachine.c: 105:                 setState(STATE_IDIOMA);
  1916   007472  0E05               	movlw	5
  1917   007474  EC2A  F02E         	call	_setState
  1918   007478  EF1A  F03B         	goto	l3623
  1919   00747C                     l3567:
  1920                           
  1921                           ;stateMachine.c: 112:             if (evento == EV_RIGHT) {
  1922   00747C  0E03               	movlw	3
  1923   00747E  1831               	xorwf	smLoop@evento^0,w,c
  1924   007480  A4D8               	btfss	status,2,c
  1925   007482  EF45  F03A         	goto	u3371
  1926   007486  EF47  F03A         	goto	u3370
  1927   00748A                     u3371:
  1928   00748A  EF4D  F03A         	goto	l3571
  1929   00748E                     u3370:
  1930   00748E                     
  1931                           ;stateMachine.c: 113:                 setLanguage(getLanguage() + 1);
  1932   00748E  EC47  F02E         	call	_getLanguage	;wreg free
  1933   007492  6E2C               	movwf	??_smLoop^0,c
  1934   007494  282C               	incf	??_smLoop^0,w,c
  1935   007496  EC91  F02E         	call	_setLanguage
  1936   00749A                     l3571:
  1937                           
  1938                           ;stateMachine.c: 115:             if (evento == EV_LEFT) {
  1939   00749A  0E02               	movlw	2
  1940   00749C  1831               	xorwf	smLoop@evento^0,w,c
  1941   00749E  A4D8               	btfss	status,2,c
  1942   0074A0  EF54  F03A         	goto	u3381
  1943   0074A4  EF56  F03A         	goto	u3380
  1944   0074A8                     u3381:
  1945   0074A8  EF5C  F03A         	goto	l3575
  1946   0074AC                     u3380:
  1947   0074AC                     
  1948                           ;stateMachine.c: 116:                 setLanguage(getLanguage() - 1);
  1949   0074AC  EC47  F02E         	call	_getLanguage	;wreg free
  1950   0074B0  6E2C               	movwf	??_smLoop^0,c
  1951   0074B2  042C               	decf	??_smLoop^0,w,c
  1952   0074B4  EC91  F02E         	call	_setLanguage
  1953   0074B8                     l3575:
  1954                           
  1955                           ;stateMachine.c: 120:             if (evento == EV_ENTER) {
  1956   0074B8  0E04               	movlw	4
  1957   0074BA  1831               	xorwf	smLoop@evento^0,w,c
  1958   0074BC  A4D8               	btfss	status,2,c
  1959   0074BE  EF63  F03A         	goto	u3391
  1960   0074C2  EF65  F03A         	goto	u3390
  1961   0074C6                     u3391:
  1962   0074C6  EF1A  F03B         	goto	l3623
  1963   0074CA                     u3390:
  1964   0074CA                     
  1965                           ;stateMachine.c: 121:                 setState(STATE_ALARM_UPPER);
  1966   0074CA  0E00               	movlw	0
  1967   0074CC  EC2A  F02E         	call	_setState
  1968   0074D0  EF1A  F03B         	goto	l3623
  1969   0074D4                     l3579:
  1970                           
  1971                           ;stateMachine.c: 126:             if ((evento != EV_NOEVENT) && (flag > 0)) {
  1972   0074D4  0E05               	movlw	5
  1973   0074D6  1831               	xorwf	smLoop@evento^0,w,c
  1974   0074D8  B4D8               	btfsc	status,2,c
  1975   0074DA  EF71  F03A         	goto	u3401
  1976   0074DE  EF73  F03A         	goto	u3400
  1977   0074E2                     u3401:
  1978   0074E2  EF91  F03A         	goto	l3591
  1979   0074E6                     u3400:
  1980   0074E6  BE4C               	btfsc	(_flag+1)^0,7,c
  1981   0074E8  EF7E  F03A         	goto	u3411
  1982   0074EC  504C               	movf	(_flag+1)^0,w,c
  1983   0074EE  E108               	bnz	u3410
  1984   0074F0  044B               	decf	_flag^0,w,c
  1985   0074F2  A0D8               	btfss	status,0,c
  1986   0074F4  EF7E  F03A         	goto	u3411
  1987   0074F8  EF80  F03A         	goto	u3410
  1988   0074FC                     u3411:
  1989   0074FC  EF91  F03A         	goto	l3591
  1990   007500                     u3410:
  1991   007500                     
  1992                           ;stateMachine.c: 127:                 setState(STATE_ALARM_UPPER);
  1993   007500  0E00               	movlw	0
  1994   007502  EC2A  F02E         	call	_setState
  1995   007506                     l3585:
  1996                           
  1997                           ;stateMachine.c: 128:                 flag = 0;
  1998   007506  0E00               	movlw	0
  1999   007508  6E4C               	movwf	(_flag+1)^0,c
  2000   00750A  0E00               	movlw	0
  2001   00750C  6E4B               	movwf	_flag^0,c
  2002   00750E                     
  2003                           ;stateMachine.c: 129:                 send = 0;
  2004   00750E  0E00               	movlw	0
  2005   007510  6E48               	movwf	(_send+1)^0,c
  2006   007512  0E00               	movlw	0
  2007   007514  6E47               	movwf	_send^0,c
  2008   007516                     
  2009                           ;stateMachine.c: 130:                 timer = 700;
  2010   007516  0E02               	movlw	2
  2011   007518  6E46               	movwf	(_timer+1)^0,c
  2012   00751A  0EBC               	movlw	188
  2013   00751C  6E45               	movwf	_timer^0,c
  2014                           
  2015                           ;stateMachine.c: 131:             } else if ((evento != EV_NOEVENT) && (flag < 0)) {
  2016   00751E  EFA6  F03A         	goto	l3603
  2017   007522                     l3591:
  2018   007522  0E05               	movlw	5
  2019   007524  1831               	xorwf	smLoop@evento^0,w,c
  2020   007526  B4D8               	btfsc	status,2,c
  2021   007528  EF98  F03A         	goto	u3421
  2022   00752C  EF9A  F03A         	goto	u3420
  2023   007530                     u3421:
  2024   007530  EFA6  F03A         	goto	l3603
  2025   007534                     u3420:
  2026   007534  BE4C               	btfsc	(_flag+1)^0,7,c
  2027   007536  EFA1  F03A         	goto	u3430
  2028   00753A  EF9F  F03A         	goto	u3431
  2029   00753E                     u3431:
  2030   00753E  EFA6  F03A         	goto	l3603
  2031   007542                     u3430:
  2032   007542                     
  2033                           ;stateMachine.c: 132:                 setState(STATE_ALARM_LOWER);
  2034   007542  0E01               	movlw	1
  2035   007544  EC2A  F02E         	call	_setState
  2036   007548  EF83  F03A         	goto	l3585
  2037   00754C                     l3603:
  2038                           
  2039                           ;stateMachine.c: 138:             updateLevel();
  2040   00754C  EC67  F02E         	call	_updateLevel	;wreg free
  2041   007550                     
  2042                           ;stateMachine.c: 139:             if (flag > 0 && getLevel() < getAlarmUpperLevel())
  2043   007550  BE4C               	btfsc	(_flag+1)^0,7,c
  2044   007552  EFB3  F03A         	goto	u3441
  2045   007556  504C               	movf	(_flag+1)^0,w,c
  2046   007558  E108               	bnz	u3440
  2047   00755A  044B               	decf	_flag^0,w,c
  2048   00755C  A0D8               	btfss	status,0,c
  2049   00755E  EFB3  F03A         	goto	u3441
  2050   007562  EFB5  F03A         	goto	u3440
  2051   007566                     u3441:
  2052   007566  EFD3  F03A         	goto	l3613
  2053   00756A                     u3440:
  2054   00756A  EC33  F02E         	call	_getLevel	;wreg free
  2055   00756E  C001  F02C         	movff	?_getLevel,??_smLoop
  2056   007572  C002  F02D         	movff	?_getLevel+1,??_smLoop+1
  2057   007576  EC6B  F030         	call	_getAlarmUpperLevel	;wreg free
  2058   00757A  5013               	movf	?_getAlarmUpperLevel^0,w,c
  2059   00757C  5C2C               	subwf	??_smLoop^0,w,c
  2060   00757E  502D               	movf	(??_smLoop+1)^0,w,c
  2061   007580  0A80               	xorlw	128
  2062   007582  6E2E               	movwf	(??_smLoop+2)^0,c
  2063   007584  5014               	movf	(?_getAlarmUpperLevel+1)^0,w,c
  2064   007586  0A80               	xorlw	128
  2065   007588  582E               	subwfb	(??_smLoop+2)^0,w,c
  2066   00758A  B0D8               	btfsc	status,0,c
  2067   00758C  EFCA  F03A         	goto	u3451
  2068   007590  EFCC  F03A         	goto	u3450
  2069   007594                     u3451:
  2070   007594  EFD3  F03A         	goto	l3613
  2071   007598                     u3450:
  2072   007598                     
  2073                           ;stateMachine.c: 140:             {;stateMachine.c: 141:                 setState(STATE_
      +                          ALARM_UPPER);
  2074   007598  0E00               	movlw	0
  2075   00759A  EC2A  F02E         	call	_setState
  2076   00759E                     
  2077                           ;stateMachine.c: 142:                 timer = 0;
  2078   00759E  0E00               	movlw	0
  2079   0075A0  6E46               	movwf	(_timer+1)^0,c
  2080   0075A2  0E00               	movlw	0
  2081   0075A4  6E45               	movwf	_timer^0,c
  2082   0075A6                     l3613:
  2083                           
  2084                           ;stateMachine.c: 144:             if (flag < 0 && getLevel() > getAlarmLowerLevel())
  2085   0075A6  BE4C               	btfsc	(_flag+1)^0,7,c
  2086   0075A8  EFDA  F03A         	goto	u3460
  2087   0075AC  EFD8  F03A         	goto	u3461
  2088   0075B0                     u3461:
  2089   0075B0  EF1A  F03B         	goto	l3623
  2090   0075B4                     u3460:
  2091   0075B4  EC4F  F030         	call	_getAlarmLowerLevel	;wreg free
  2092   0075B8  C013  F02C         	movff	?_getAlarmLowerLevel,??_smLoop
  2093   0075BC  C014  F02D         	movff	?_getAlarmLowerLevel+1,??_smLoop+1
  2094   0075C0  EC33  F02E         	call	_getLevel	;wreg free
  2095   0075C4  5001               	movf	?_getLevel^0,w,c
  2096   0075C6  5C2C               	subwf	??_smLoop^0,w,c
  2097   0075C8  502D               	movf	(??_smLoop+1)^0,w,c
  2098   0075CA  0A80               	xorlw	128
  2099   0075CC  6E2E               	movwf	(??_smLoop+2)^0,c
  2100   0075CE  5002               	movf	(?_getLevel+1)^0,w,c
  2101   0075D0  0A80               	xorlw	128
  2102   0075D2  582E               	subwfb	(??_smLoop+2)^0,w,c
  2103   0075D4  B0D8               	btfsc	status,0,c
  2104   0075D6  EFEF  F03A         	goto	u3471
  2105   0075DA  EFF1  F03A         	goto	u3470
  2106   0075DE                     u3471:
  2107   0075DE  EF1A  F03B         	goto	l3623
  2108   0075E2                     u3470:
  2109   0075E2                     
  2110                           ;stateMachine.c: 145:             {;stateMachine.c: 146:                 setState(STATE_
      +                          ALARM_LOWER);
  2111   0075E2  0E01               	movlw	1
  2112   0075E4  EC2A  F02E         	call	_setState
  2113   0075E8                     
  2114                           ;stateMachine.c: 147:                 timer = 0;
  2115   0075E8  0E00               	movlw	0
  2116   0075EA  6E46               	movwf	(_timer+1)^0,c
  2117   0075EC  0E00               	movlw	0
  2118   0075EE  6E45               	movwf	_timer^0,c
  2119   0075F0  EF1A  F03B         	goto	l3623
  2120   0075F4                     l3621:
  2121   0075F4  EC1F  F02E         	call	_getState	;wreg free
  2122                           
  2123                           ; Switch size 1, requested type "simple"
  2124                           ; Number of cases is 7, Range of values is 0 to 6
  2125                           ; switch strategies available:
  2126                           ; Name         Instructions Cycles
  2127                           ; simple_byte           22    12 (average)
  2128                           ;	Chosen strategy is simple_byte
  2129   0075F8  0A00               	xorlw	0	; case 0
  2130   0075FA  B4D8               	btfsc	status,2,c
  2131   0075FC  EF52  F039         	goto	l3507
  2132   007600  0A01               	xorlw	1	; case 1
  2133   007602  B4D8               	btfsc	status,2,c
  2134   007604  EF86  F039         	goto	l3519
  2135   007608  0A03               	xorlw	3	; case 2
  2136   00760A  B4D8               	btfsc	status,2,c
  2137   00760C  EFBA  F039         	goto	l3531
  2138   007610  0A01               	xorlw	1	; case 3
  2139   007612  B4D8               	btfsc	status,2,c
  2140   007614  EFE6  F039         	goto	l3543
  2141   007618  0A07               	xorlw	7	; case 4
  2142   00761A  B4D8               	btfsc	status,2,c
  2143   00761C  EF12  F03A         	goto	l3555
  2144   007620  0A01               	xorlw	1	; case 5
  2145   007622  B4D8               	btfsc	status,2,c
  2146   007624  EF3E  F03A         	goto	l3567
  2147   007628  0A03               	xorlw	3	; case 6
  2148   00762A  B4D8               	btfsc	status,2,c
  2149   00762C  EF6A  F03A         	goto	l3579
  2150   007630  EF1A  F03B         	goto	l3623
  2151   007634                     l3623:
  2152                           
  2153                           ;stateMachine.c: 150:     outputPrint(getState(), getLanguage());
  2154   007634  EC47  F02E         	call	_getLanguage	;wreg free
  2155   007638  6E2C               	movwf	??_smLoop^0,c
  2156   00763A  502C               	movf	??_smLoop^0,w,c
  2157   00763C  6E2F               	movwf	_smLoop$1245^0,c
  2158   00763E  6A30               	clrf	(_smLoop$1245+1)^0,c
  2159   007640                     
  2160                           ;stateMachine.c: 150:     outputPrint(getState(), getLanguage());
  2161   007640  EC1F  F02E         	call	_getState	;wreg free
  2162   007644  6E2C               	movwf	??_smLoop^0,c
  2163   007646  502C               	movf	??_smLoop^0,w,c
  2164   007648  6E19               	movwf	outputPrint@numTela^0,c
  2165   00764A  6A1A               	clrf	(outputPrint@numTela+1)^0,c
  2166   00764C  C02F  F01B         	movff	_smLoop$1245,outputPrint@idioma
  2167   007650  C030  F01C         	movff	_smLoop$1245+1,outputPrint@idioma+1
  2168   007654  ECF3  F03B         	call	_outputPrint	;wreg free
  2169   007658                     
  2170                           ;stateMachine.c: 153:     if ((level <= getAlarmLowerLevel()) && (timer == 0)) {
  2171   007658  EC4F  F030         	call	_getAlarmLowerLevel	;wreg free
  2172   00765C  5049               	movf	_level^0,w,c
  2173   00765E  5C13               	subwf	?_getAlarmLowerLevel^0,w,c
  2174   007660  5014               	movf	(?_getAlarmLowerLevel+1)^0,w,c
  2175   007662  0A80               	xorlw	128
  2176   007664  6E2C               	movwf	??_smLoop^0,c
  2177   007666  504A               	movf	(_level+1)^0,w,c
  2178   007668  0A80               	xorlw	128
  2179   00766A  582C               	subwfb	??_smLoop^0,w,c
  2180   00766C  A0D8               	btfss	status,0,c
  2181   00766E  EF3B  F03B         	goto	u3481
  2182   007672  EF3D  F03B         	goto	u3480
  2183   007676                     u3481:
  2184   007676  EF89  F03B         	goto	l3653
  2185   00767A                     u3480:
  2186   00767A  5045               	movf	_timer^0,w,c
  2187   00767C  1046               	iorwf	(_timer+1)^0,w,c
  2188   00767E  A4D8               	btfss	status,2,c
  2189   007680  EF44  F03B         	goto	u3491
  2190   007684  EF46  F03B         	goto	u3490
  2191   007688                     u3491:
  2192   007688  EF89  F03B         	goto	l3653
  2193   00768C                     u3490:
  2194   00768C                     
  2195                           ;stateMachine.c: 154:         setState(STATE_OVER_LIMIT);
  2196   00768C  0E06               	movlw	6
  2197   00768E  EC2A  F02E         	call	_setState
  2198   007692                     
  2199                           ;stateMachine.c: 155:         flag = -1;
  2200   007692  684B               	setf	_flag^0,c
  2201   007694  684C               	setf	(_flag+1)^0,c
  2202   007696                     
  2203                           ;stateMachine.c: 156:         timer = 700;
  2204   007696  0E02               	movlw	2
  2205   007698  6E46               	movwf	(_timer+1)^0,c
  2206   00769A  0EBC               	movlw	188
  2207   00769C  6E45               	movwf	_timer^0,c
  2208   00769E                     
  2209                           ;stateMachine.c: 157:         if (!send) {
  2210   00769E  5047               	movf	_send^0,w,c
  2211   0076A0  1048               	iorwf	(_send+1)^0,w,c
  2212   0076A2  A4D8               	btfss	status,2,c
  2213   0076A4  EF56  F03B         	goto	u3501
  2214   0076A8  EF58  F03B         	goto	u3500
  2215   0076AC                     u3501:
  2216   0076AC  EFDC  F03B         	goto	l3679
  2217   0076B0                     u3500:
  2218   0076B0                     
  2219                           ;stateMachine.c: 158:             serialSendString(serial_out[getLanguage()]);
  2220   0076B0  EC47  F02E         	call	_getLanguage	;wreg free
  2221   0076B4  0D02               	mullw	2
  2222   0076B6  50F3               	movf	243,w,c
  2223   0076B8  0F98               	addlw	low _serial_out
  2224   0076BA  6ED9               	movwf	fsr2l,c
  2225   0076BC  6ADA               	clrf	fsr2h,c
  2226   0076BE  CFDE F013          	movff	postinc2,serialSendString@str
  2227   0076C2  CFDD F014          	movff	postdec2,serialSendString@str+1
  2228   0076C6  ECE4  F031         	call	_serialSendString	;wreg free
  2229   0076CA                     
  2230                           ;stateMachine.c: 159:             serialSendInt(getHOUR());
  2231   0076CA  EC3F  F02E         	call	_getHOUR	;wreg free
  2232   0076CE  6E2C               	movwf	??_smLoop^0,c
  2233   0076D0  502C               	movf	??_smLoop^0,w,c
  2234   0076D2  6E1E               	movwf	serialSendInt@value^0,c
  2235   0076D4  6A1F               	clrf	(serialSendInt@value+1)^0,c
  2236   0076D6  ECAA  F02E         	call	_serialSendInt	;wreg free
  2237   0076DA                     
  2238                           ;stateMachine.c: 160:             serialSend(':');
  2239   0076DA  0E3A               	movlw	58
  2240   0076DC  EC7A  F02E         	call	_serialSend
  2241   0076E0                     
  2242                           ;stateMachine.c: 161:             serialSendInt(getMIN());
  2243   0076E0  EC4F  F02E         	call	_getMIN	;wreg free
  2244   0076E4  6E2C               	movwf	??_smLoop^0,c
  2245   0076E6  502C               	movf	??_smLoop^0,w,c
  2246   0076E8  6E1E               	movwf	serialSendInt@value^0,c
  2247   0076EA  6A1F               	clrf	(serialSendInt@value+1)^0,c
  2248   0076EC  ECAA  F02E         	call	_serialSendInt	;wreg free
  2249   0076F0                     
  2250                           ;stateMachine.c: 162:             serialSend(':');
  2251   0076F0  0E3A               	movlw	58
  2252   0076F2  EC7A  F02E         	call	_serialSend
  2253   0076F6                     l3649:
  2254                           
  2255                           ;stateMachine.c: 163:             serialSendInt(getSEC());
  2256   0076F6  EC57  F02E         	call	_getSEC	;wreg free
  2257   0076FA  6E2C               	movwf	??_smLoop^0,c
  2258   0076FC  502C               	movf	??_smLoop^0,w,c
  2259   0076FE  6E1E               	movwf	serialSendInt@value^0,c
  2260   007700  6A1F               	clrf	(serialSendInt@value+1)^0,c
  2261   007702  ECAA  F02E         	call	_serialSendInt	;wreg free
  2262   007706                     
  2263                           ;stateMachine.c: 164:             send = 1;
  2264   007706  0E00               	movlw	0
  2265   007708  6E48               	movwf	(_send+1)^0,c
  2266   00770A  0E01               	movlw	1
  2267   00770C  6E47               	movwf	_send^0,c
  2268   00770E  EFDC  F03B         	goto	l3679
  2269   007712                     l3653:
  2270   007712  EC6B  F030         	call	_getAlarmUpperLevel	;wreg free
  2271   007716  5013               	movf	?_getAlarmUpperLevel^0,w,c
  2272   007718  5C49               	subwf	_level^0,w,c
  2273   00771A  504A               	movf	(_level+1)^0,w,c
  2274   00771C  0A80               	xorlw	128
  2275   00771E  6E2C               	movwf	??_smLoop^0,c
  2276   007720  5014               	movf	(?_getAlarmUpperLevel+1)^0,w,c
  2277   007722  0A80               	xorlw	128
  2278   007724  582C               	subwfb	??_smLoop^0,w,c
  2279   007726  A0D8               	btfss	status,0,c
  2280   007728  EF98  F03B         	goto	u3511
  2281   00772C  EF9A  F03B         	goto	u3510
  2282   007730                     u3511:
  2283   007730  EFDC  F03B         	goto	l3679
  2284   007734                     u3510:
  2285   007734  5045               	movf	_timer^0,w,c
  2286   007736  1046               	iorwf	(_timer+1)^0,w,c
  2287   007738  A4D8               	btfss	status,2,c
  2288   00773A  EFA1  F03B         	goto	u3521
  2289   00773E  EFA3  F03B         	goto	u3520
  2290   007742                     u3521:
  2291   007742  EFDC  F03B         	goto	l3679
  2292   007746                     u3520:
  2293   007746                     
  2294                           ;stateMachine.c: 167:         setState(STATE_OVER_LIMIT);
  2295   007746  0E06               	movlw	6
  2296   007748  EC2A  F02E         	call	_setState
  2297   00774C                     
  2298                           ;stateMachine.c: 168:         flag = 1;
  2299   00774C  0E00               	movlw	0
  2300   00774E  6E4C               	movwf	(_flag+1)^0,c
  2301   007750  0E01               	movlw	1
  2302   007752  6E4B               	movwf	_flag^0,c
  2303   007754                     
  2304                           ;stateMachine.c: 169:         timer = 700;
  2305   007754  0E02               	movlw	2
  2306   007756  6E46               	movwf	(_timer+1)^0,c
  2307   007758  0EBC               	movlw	188
  2308   00775A  6E45               	movwf	_timer^0,c
  2309   00775C                     
  2310                           ;stateMachine.c: 170:         if (!send) {
  2311   00775C  5047               	movf	_send^0,w,c
  2312   00775E  1048               	iorwf	(_send+1)^0,w,c
  2313   007760  A4D8               	btfss	status,2,c
  2314   007762  EFB5  F03B         	goto	u3531
  2315   007766  EFB7  F03B         	goto	u3530
  2316   00776A                     u3531:
  2317   00776A  EFDC  F03B         	goto	l3679
  2318   00776E                     u3530:
  2319   00776E                     
  2320                           ;stateMachine.c: 171:             serialSendString(serial_out[getLanguage()]);
  2321   00776E  EC47  F02E         	call	_getLanguage	;wreg free
  2322   007772  0D02               	mullw	2
  2323   007774  50F3               	movf	243,w,c
  2324   007776  0F98               	addlw	low _serial_out
  2325   007778  6ED9               	movwf	fsr2l,c
  2326   00777A  6ADA               	clrf	fsr2h,c
  2327   00777C  CFDE F013          	movff	postinc2,serialSendString@str
  2328   007780  CFDD F014          	movff	postdec2,serialSendString@str+1
  2329   007784  ECE4  F031         	call	_serialSendString	;wreg free
  2330   007788                     
  2331                           ;stateMachine.c: 172:             serialSendInt(getHOUR());
  2332   007788  EC3F  F02E         	call	_getHOUR	;wreg free
  2333   00778C  6E2C               	movwf	??_smLoop^0,c
  2334   00778E  502C               	movf	??_smLoop^0,w,c
  2335   007790  6E1E               	movwf	serialSendInt@value^0,c
  2336   007792  6A1F               	clrf	(serialSendInt@value+1)^0,c
  2337   007794  ECAA  F02E         	call	_serialSendInt	;wreg free
  2338   007798                     
  2339                           ;stateMachine.c: 173:             serialSend(':');
  2340   007798  0E3A               	movlw	58
  2341   00779A  EC7A  F02E         	call	_serialSend
  2342   00779E                     
  2343                           ;stateMachine.c: 174:             serialSendInt(getMIN());
  2344   00779E  EC4F  F02E         	call	_getMIN	;wreg free
  2345   0077A2  6E2C               	movwf	??_smLoop^0,c
  2346   0077A4  502C               	movf	??_smLoop^0,w,c
  2347   0077A6  6E1E               	movwf	serialSendInt@value^0,c
  2348   0077A8  6A1F               	clrf	(serialSendInt@value+1)^0,c
  2349   0077AA  ECAA  F02E         	call	_serialSendInt	;wreg free
  2350   0077AE                     
  2351                           ;stateMachine.c: 175:             serialSend(':');
  2352   0077AE  0E3A               	movlw	58
  2353   0077B0  EC7A  F02E         	call	_serialSend
  2354   0077B4  EF7B  F03B         	goto	l3649
  2355   0077B8                     l3679:
  2356                           
  2357                           ;stateMachine.c: 180:     if (timer > 0) {
  2358   0077B8  BE46               	btfsc	(_timer+1)^0,7,c
  2359   0077BA  EFE7  F03B         	goto	u3541
  2360   0077BE  5046               	movf	(_timer+1)^0,w,c
  2361   0077C0  E108               	bnz	u3540
  2362   0077C2  0445               	decf	_timer^0,w,c
  2363   0077C4  A0D8               	btfss	status,0,c
  2364   0077C6  EFE7  F03B         	goto	u3541
  2365   0077CA  EFE9  F03B         	goto	u3540
  2366   0077CE                     u3541:
  2367   0077CE  EFEE  F03B         	goto	l3683
  2368   0077D2                     u3540:
  2369   0077D2                     
  2370                           ;stateMachine.c: 181:         timer--;
  2371   0077D2  0645               	decf	_timer^0,f,c
  2372   0077D4  A0D8               	btfss	status,0,c
  2373   0077D6  0646               	decf	(_timer+1)^0,f,c
  2374                           
  2375                           ;stateMachine.c: 182:     } else {
  2376   0077D8  EFF2  F03B         	goto	l516
  2377   0077DC                     l3683:
  2378                           
  2379                           ;stateMachine.c: 183:         send = 0;
  2380   0077DC  0E00               	movlw	0
  2381   0077DE  6E48               	movwf	(_send+1)^0,c
  2382   0077E0  0E00               	movlw	0
  2383   0077E2  6E47               	movwf	_send^0,c
  2384   0077E4                     l516:
  2385   0077E4  0012               	return		;funcret
  2386   0077E6                     __end_of_smLoop:
  2387                           	callstack 0
  2388                           
  2389 ;; *************** function _updateLevel *****************
  2390 ;; Defined at:
  2391 ;;		line 31 in file "var.c"
  2392 ;; Parameters:    Size  Location     Type
  2393 ;;		None
  2394 ;; Auto vars:     Size  Location     Type
  2395 ;;		None
  2396 ;; Return value:  Size  Location     Type
  2397 ;;                  1    wreg      void 
  2398 ;; Registers used:
  2399 ;;		wreg, status,2, status,0, cstack
  2400 ;; Tracked objects:
  2401 ;;		On entry : 0/0
  2402 ;;		On exit  : 0/0
  2403 ;;		Unchanged: 0/0
  2404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2405 ;;      Params:         0       0       0       0       0       0       0       0       0
  2406 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2407 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2408 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2409 ;;Total ram usage:        0 bytes
  2410 ;; Hardware stack levels used: 1
  2411 ;; Hardware stack levels required when called: 1
  2412 ;; This function calls:
  2413 ;;		_adcInit
  2414 ;;		_adcRead
  2415 ;; This function is called by:
  2416 ;;		_smLoop
  2417 ;; This function uses a non-reentrant model
  2418 ;;
  2419                           
  2420                           	psect	text5
  2421   005CCE                     __ptext5:
  2422                           	callstack 0
  2423   005CCE                     _updateLevel:
  2424                           	callstack 28
  2425   005CCE                     
  2426                           ;var.c: 32:     adcInit();
  2427   005CCE  EC5F  F02E         	call	_adcInit	;wreg free
  2428                           
  2429                           ;var.c: 33:     level = adcRead();
  2430   005CD2  ECE7  F02F         	call	_adcRead	;wreg free
  2431   005CD6  C001  F03F         	movff	?_adcRead,_level@var$F528
  2432   005CDA  C002  F040         	movff	?_adcRead+1,_level@var$F528+1
  2433   005CDE  0012               	return		;funcret
  2434   005CE0                     __end_of_updateLevel:
  2435                           	callstack 0
  2436                           
  2437 ;; *************** function _adcRead *****************
  2438 ;; Defined at:
  2439 ;;		line 11 in file "adc.c"
  2440 ;; Parameters:    Size  Location     Type
  2441 ;;		None
  2442 ;; Auto vars:     Size  Location     Type
  2443 ;;  ADvalor         2    2[COMRAM] unsigned int 
  2444 ;; Return value:  Size  Location     Type
  2445 ;;                  2    0[COMRAM] int 
  2446 ;; Registers used:
  2447 ;;		wreg, status,2, status,0
  2448 ;; Tracked objects:
  2449 ;;		On entry : 0/0
  2450 ;;		On exit  : 0/0
  2451 ;;		Unchanged: 0/0
  2452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2453 ;;      Params:         2       0       0       0       0       0       0       0       0
  2454 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2455 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2456 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2457 ;;Total ram usage:        4 bytes
  2458 ;; Hardware stack levels used: 1
  2459 ;; This function calls:
  2460 ;;		Nothing
  2461 ;; This function is called by:
  2462 ;;		_updateLevel
  2463 ;; This function uses a non-reentrant model
  2464 ;;
  2465                           
  2466                           	psect	text6
  2467   005FCE                     __ptext6:
  2468                           	callstack 0
  2469   005FCE                     _adcRead:
  2470                           	callstack 28
  2471   005FCE                     
  2472                           ;adc.c: 12:     unsigned int ADvalor;;adc.c: 13:     ADCON0 |= 0b00000010;
  2473   005FCE  82C2               	bsf	194,1,c	;volatile
  2474   005FD0                     l674:
  2475   005FD0  B2C2               	btfsc	194,1,c	;volatile
  2476   005FD2  EFED  F02F         	goto	u2891
  2477   005FD6  EFEF  F02F         	goto	u2890
  2478   005FDA                     u2891:
  2479   005FDA  EFE8  F02F         	goto	l674
  2480   005FDE                     u2890:
  2481   005FDE                     
  2482                           ;adc.c: 17:     ADvalor = ADRESH;
  2483   005FDE  CFC4 F003          	movff	4036,adcRead@ADvalor	;volatile
  2484   005FE2  6A04               	clrf	(adcRead@ADvalor+1)^0,c
  2485   005FE4                     
  2486                           ;adc.c: 18:     ADvalor <<= 8;
  2487   005FE4  5003               	movf	adcRead@ADvalor^0,w,c
  2488   005FE6  6E04               	movwf	(adcRead@ADvalor+1)^0,c
  2489   005FE8  6A03               	clrf	adcRead@ADvalor^0,c
  2490   005FEA                     
  2491                           ;adc.c: 19:     ADvalor += ADRESL;
  2492   005FEA  50C3               	movf	195,w,c	;volatile
  2493   005FEC  2603               	addwf	adcRead@ADvalor^0,f,c
  2494   005FEE  0E00               	movlw	0
  2495   005FF0  2204               	addwfc	(adcRead@ADvalor+1)^0,f,c
  2496   005FF2                     
  2497                           ;adc.c: 20:     return ADvalor;
  2498   005FF2  C003  F001         	movff	adcRead@ADvalor,?_adcRead
  2499   005FF6  C004  F002         	movff	adcRead@ADvalor+1,?_adcRead+1
  2500   005FFA  0012               	return		;funcret
  2501   005FFC                     __end_of_adcRead:
  2502                           	callstack 0
  2503                           
  2504 ;; *************** function _adcInit *****************
  2505 ;; Defined at:
  2506 ;;		line 4 in file "adc.c"
  2507 ;; Parameters:    Size  Location     Type
  2508 ;;		None
  2509 ;; Auto vars:     Size  Location     Type
  2510 ;;		None
  2511 ;; Return value:  Size  Location     Type
  2512 ;;                  1    wreg      void 
  2513 ;; Registers used:
  2514 ;;		wreg, status,2, status,0
  2515 ;; Tracked objects:
  2516 ;;		On entry : 0/0
  2517 ;;		On exit  : 0/0
  2518 ;;		Unchanged: 0/0
  2519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2520 ;;      Params:         0       0       0       0       0       0       0       0       0
  2521 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2522 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2523 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2524 ;;Total ram usage:        0 bytes
  2525 ;; Hardware stack levels used: 1
  2526 ;; This function calls:
  2527 ;;		Nothing
  2528 ;; This function is called by:
  2529 ;;		_updateLevel
  2530 ;; This function uses a non-reentrant model
  2531 ;;
  2532                           
  2533                           	psect	text7
  2534   005CBE                     __ptext7:
  2535                           	callstack 0
  2536   005CBE                     _adcInit:
  2537                           	callstack 28
  2538   005CBE                     
  2539                           ;adc.c: 5:     ((TRISA) |= (1<<(5)));
  2540   005CBE  8A92               	bsf	146,5,c	;volatile
  2541   005CC0                     
  2542                           ;adc.c: 6:     ADCON0 = 0b00010001;
  2543   005CC0  0E11               	movlw	17
  2544   005CC2  6EC2               	movwf	194,c	;volatile
  2545   005CC4                     
  2546                           ;adc.c: 7:     ADCON1 = 0b00001010;
  2547   005CC4  0E0A               	movlw	10
  2548   005CC6  6EC1               	movwf	193,c	;volatile
  2549   005CC8                     
  2550                           ;adc.c: 8:     ADCON2 = 0b10101010;
  2551   005CC8  0EAA               	movlw	170
  2552   005CCA  6EC0               	movwf	192,c	;volatile
  2553   005CCC  0012               	return		;funcret
  2554   005CCE                     __end_of_adcInit:
  2555                           	callstack 0
  2556                           
  2557 ;; *************** function _setState *****************
  2558 ;; Defined at:
  2559 ;;		line 40 in file "var.c"
  2560 ;; Parameters:    Size  Location     Type
  2561 ;;  newState        1    wreg     unsigned char 
  2562 ;; Auto vars:     Size  Location     Type
  2563 ;;  newState        1    0[COMRAM] unsigned char 
  2564 ;; Return value:  Size  Location     Type
  2565 ;;                  1    wreg      void 
  2566 ;; Registers used:
  2567 ;;		wreg
  2568 ;; Tracked objects:
  2569 ;;		On entry : 0/0
  2570 ;;		On exit  : 0/0
  2571 ;;		Unchanged: 0/0
  2572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2573 ;;      Params:         0       0       0       0       0       0       0       0       0
  2574 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2575 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2576 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2577 ;;Total ram usage:        1 bytes
  2578 ;; Hardware stack levels used: 1
  2579 ;; This function calls:
  2580 ;;		Nothing
  2581 ;; This function is called by:
  2582 ;;		_smLoop
  2583 ;;		_smInit
  2584 ;; This function uses a non-reentrant model
  2585 ;;
  2586                           
  2587                           	psect	text8
  2588   005C54                     __ptext8:
  2589                           	callstack 0
  2590   005C54                     _setState:
  2591                           	callstack 29
  2592                           
  2593                           ;incstack = 0
  2594                           ;setState@newState stored from wreg
  2595   005C54  6E01               	movwf	setState@newState^0,c
  2596   005C56                     
  2597                           ;var.c: 41:     state = newState;
  2598   005C56  C001  F058         	movff	setState@newState,_state
  2599   005C5A  0012               	return		;funcret
  2600   005C5C                     __end_of_setState:
  2601                           	callstack 0
  2602                           
  2603 ;; *************** function _serialSendInt *****************
  2604 ;; Defined at:
  2605 ;;		line 82 in file "serial.c"
  2606 ;; Parameters:    Size  Location     Type
  2607 ;;  value           2   29[COMRAM] int 
  2608 ;; Auto vars:     Size  Location     Type
  2609 ;;  buffer         12   31[COMRAM] unsigned char [12]
  2610 ;; Return value:  Size  Location     Type
  2611 ;;                  1    wreg      void 
  2612 ;; Registers used:
  2613 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2614 ;; Tracked objects:
  2615 ;;		On entry : 0/0
  2616 ;;		On exit  : 0/0
  2617 ;;		Unchanged: 0/0
  2618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2619 ;;      Params:         2       0       0       0       0       0       0       0       0
  2620 ;;      Locals:        12       0       0       0       0       0       0       0       0
  2621 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2622 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2623 ;;Total ram usage:       14 bytes
  2624 ;; Hardware stack levels used: 1
  2625 ;; Hardware stack levels required when called: 2
  2626 ;; This function calls:
  2627 ;;		_intToStr
  2628 ;;		_serialSendString
  2629 ;; This function is called by:
  2630 ;;		_smLoop
  2631 ;; This function uses a non-reentrant model
  2632 ;;
  2633                           
  2634                           	psect	text9
  2635   005D54                     __ptext9:
  2636                           	callstack 0
  2637   005D54                     _serialSendInt:
  2638                           	callstack 27
  2639   005D54                     
  2640                           ;serial.c: 83:     char buffer[12];;serial.c: 84:     intToStr(value, buffer);
  2641   005D54  C01E  F00F         	movff	serialSendInt@value,intToStr@value
  2642   005D58  C01F  F010         	movff	serialSendInt@value+1,intToStr@value+1
  2643   005D5C  0E20               	movlw	low serialSendInt@buffer
  2644   005D5E  6E11               	movwf	intToStr@buffer^0,c
  2645   005D60  EC44  F034         	call	_intToStr	;wreg free
  2646   005D64                     
  2647                           ;serial.c: 85:     serialSendString(buffer);
  2648   005D64  0E20               	movlw	low serialSendInt@buffer
  2649   005D66  6E13               	movwf	serialSendString@str^0,c
  2650   005D68  6A14               	clrf	(serialSendString@str+1)^0,c
  2651   005D6A  ECE4  F031         	call	_serialSendString	;wreg free
  2652   005D6E  0012               	return		;funcret
  2653   005D70                     __end_of_serialSendInt:
  2654                           	callstack 0
  2655                           
  2656 ;; *************** function _serialSendString *****************
  2657 ;; Defined at:
  2658 ;;		line 33 in file "serial.c"
  2659 ;; Parameters:    Size  Location     Type
  2660 ;;  str             2   18[COMRAM] PTR const unsigned char 
  2661 ;;		 -> STR_4(12), STR_3(10), STR_2(14), STR_1(13), 
  2662 ;;		 -> serialSendInt@buffer(12), 
  2663 ;; Auto vars:     Size  Location     Type
  2664 ;;		None
  2665 ;; Return value:  Size  Location     Type
  2666 ;;                  1    wreg      void 
  2667 ;; Registers used:
  2668 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2669 ;; Tracked objects:
  2670 ;;		On entry : 0/0
  2671 ;;		On exit  : 0/0
  2672 ;;		Unchanged: 0/0
  2673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2674 ;;      Params:         2       0       0       0       0       0       0       0       0
  2675 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2676 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2677 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2678 ;;Total ram usage:        2 bytes
  2679 ;; Hardware stack levels used: 1
  2680 ;; Hardware stack levels required when called: 1
  2681 ;; This function calls:
  2682 ;;		_serialSend
  2683 ;; This function is called by:
  2684 ;;		_serialSendInt
  2685 ;;		_smLoop
  2686 ;; This function uses a non-reentrant model
  2687 ;;
  2688                           
  2689                           	psect	text10
  2690   0063C8                     __ptext10:
  2691                           	callstack 0
  2692   0063C8                     _serialSendString:
  2693                           	callstack 28
  2694   0063C8                     
  2695                           ;serial.c: 34:     while (*str) {
  2696   0063C8  EFFA  F031         	goto	l2981
  2697   0063CC                     l2977:
  2698                           
  2699                           ;serial.c: 35:         serialSend(*str++);
  2700   0063CC  C013  FFF6         	movff	serialSendString@str,tblptrl
  2701   0063D0  C014  FFF7         	movff	serialSendString@str+1,tblptrh
  2702   0063D4  6AF8               	clrf	tblptru,c
  2703   0063D6  0E07               	movlw	(high __ramtop+-1)
  2704   0063D8  64F7               	cpfsgt	tblptrh,c
  2705   0063DA  D003               	bra	u2717
  2706   0063DC  0008               	tblrd		*
  2707   0063DE  50F5               	movf	tablat,w,c
  2708   0063E0  D005               	bra	u2710
  2709   0063E2                     u2717:
  2710   0063E2  CFF6 FFE9          	movff	tblptrl,fsr0l
  2711   0063E6  CFF7 FFEA          	movff	tblptrh,fsr0h
  2712   0063EA  50EF               	movf	indf0,w,c
  2713   0063EC                     u2710:
  2714   0063EC  EC7A  F02E         	call	_serialSend
  2715   0063F0  4A13               	infsnz	serialSendString@str^0,f,c
  2716   0063F2  2A14               	incf	(serialSendString@str+1)^0,f,c
  2717   0063F4                     l2981:
  2718                           
  2719                           ;serial.c: 34:     while (*str) {
  2720   0063F4  C013  FFF6         	movff	serialSendString@str,tblptrl
  2721   0063F8  C014  FFF7         	movff	serialSendString@str+1,tblptrh
  2722   0063FC  6AF8               	clrf	tblptru,c
  2723   0063FE  0E07               	movlw	(high __ramtop+-1)
  2724   006400  64F7               	cpfsgt	tblptrh,c
  2725   006402  D003               	bra	u2727
  2726   006404  0008               	tblrd		*
  2727   006406  50F5               	movf	tablat,w,c
  2728   006408  D005               	bra	u2720
  2729   00640A                     u2727:
  2730   00640A  CFF6 FFE9          	movff	tblptrl,fsr0l
  2731   00640E  CFF7 FFEA          	movff	tblptrh,fsr0h
  2732   006412  50EF               	movf	indf0,w,c
  2733   006414                     u2720:
  2734   006414  0900               	iorlw	0
  2735   006416  A4D8               	btfss	status,2,c
  2736   006418  EF10  F032         	goto	u2731
  2737   00641C  EF12  F032         	goto	u2730
  2738   006420                     u2731:
  2739   006420  EFE6  F031         	goto	l2977
  2740   006424                     u2730:
  2741   006424  0012               	return		;funcret
  2742   006426                     __end_of_serialSendString:
  2743                           	callstack 0
  2744                           
  2745 ;; *************** function _serialSend *****************
  2746 ;; Defined at:
  2747 ;;		line 28 in file "serial.c"
  2748 ;; Parameters:    Size  Location     Type
  2749 ;;  c               1    wreg     unsigned char 
  2750 ;; Auto vars:     Size  Location     Type
  2751 ;;  c               1    0[COMRAM] unsigned char 
  2752 ;; Return value:  Size  Location     Type
  2753 ;;                  1    wreg      void 
  2754 ;; Registers used:
  2755 ;;		wreg
  2756 ;; Tracked objects:
  2757 ;;		On entry : 0/0
  2758 ;;		On exit  : 0/0
  2759 ;;		Unchanged: 0/0
  2760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2761 ;;      Params:         0       0       0       0       0       0       0       0       0
  2762 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2763 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2764 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2765 ;;Total ram usage:        1 bytes
  2766 ;; Hardware stack levels used: 1
  2767 ;; This function calls:
  2768 ;;		Nothing
  2769 ;; This function is called by:
  2770 ;;		_serialSendString
  2771 ;;		_smLoop
  2772 ;; This function uses a non-reentrant model
  2773 ;;
  2774                           
  2775                           	psect	text11
  2776   005CF4                     __ptext11:
  2777                           	callstack 0
  2778   005CF4                     _serialSend:
  2779                           	callstack 28
  2780                           
  2781                           ;incstack = 0
  2782                           ;serialSend@c stored from wreg
  2783   005CF4  6E01               	movwf	serialSend@c^0,c
  2784   005CF6                     l44:
  2785   005CF6  A89E               	btfss	158,4,c	;volatile
  2786   005CF8  EF80  F02E         	goto	u2561
  2787   005CFC  EF82  F02E         	goto	u2560
  2788   005D00                     u2561:
  2789   005D00  EF7B  F02E         	goto	l44
  2790   005D04                     u2560:
  2791   005D04                     
  2792                           ;serial.c: 30:     TXREG = c;
  2793   005D04  C001  FFAD         	movff	serialSend@c,4013	;volatile
  2794   005D08  0012               	return		;funcret
  2795   005D0A                     __end_of_serialSend:
  2796                           	callstack 0
  2797                           
  2798 ;; *************** function _intToStr *****************
  2799 ;; Defined at:
  2800 ;;		line 39 in file "serial.c"
  2801 ;; Parameters:    Size  Location     Type
  2802 ;;  value           2   14[COMRAM] int 
  2803 ;;  buffer          1   16[COMRAM] PTR unsigned char 
  2804 ;;		 -> serialSendInt@buffer(12), 
  2805 ;; Auto vars:     Size  Location     Type
  2806 ;;  temp            1   22[COMRAM] unsigned char 
  2807 ;;  digit           2   18[COMRAM] int 
  2808 ;;  i               2   27[COMRAM] int 
  2809 ;;  end             2   25[COMRAM] int 
  2810 ;;  start           2   23[COMRAM] int 
  2811 ;;  isNegative      2   20[COMRAM] int 
  2812 ;; Return value:  Size  Location     Type
  2813 ;;                  1    wreg      void 
  2814 ;; Registers used:
  2815 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2816 ;; Tracked objects:
  2817 ;;		On entry : 0/0
  2818 ;;		On exit  : 0/0
  2819 ;;		Unchanged: 0/0
  2820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2821 ;;      Params:         3       0       0       0       0       0       0       0       0
  2822 ;;      Locals:        11       0       0       0       0       0       0       0       0
  2823 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2824 ;;      Totals:        15       0       0       0       0       0       0       0       0
  2825 ;;Total ram usage:       15 bytes
  2826 ;; Hardware stack levels used: 1
  2827 ;; Hardware stack levels required when called: 1
  2828 ;; This function calls:
  2829 ;;		___awdiv
  2830 ;;		___awmod
  2831 ;; This function is called by:
  2832 ;;		_serialSendInt
  2833 ;; This function uses a non-reentrant model
  2834 ;;
  2835                           
  2836                           	psect	text12
  2837   006888                     __ptext12:
  2838                           	callstack 0
  2839   006888                     _intToStr:
  2840                           	callstack 27
  2841   006888                     
  2842                           ;serial.c: 40:     int i = 0;
  2843   006888  0E00               	movlw	0
  2844   00688A  6E1D               	movwf	(intToStr@i+1)^0,c
  2845   00688C  0E00               	movlw	0
  2846   00688E  6E1C               	movwf	intToStr@i^0,c
  2847                           
  2848                           ;serial.c: 41:     int isNegative = 0;
  2849   006890  0E00               	movlw	0
  2850   006892  6E16               	movwf	(intToStr@isNegative+1)^0,c
  2851   006894  0E00               	movlw	0
  2852   006896  6E15               	movwf	intToStr@isNegative^0,c
  2853   006898                     
  2854                           ;serial.c: 44:     if (value == 0) {
  2855   006898  500F               	movf	intToStr@value^0,w,c
  2856   00689A  1010               	iorwf	(intToStr@value+1)^0,w,c
  2857   00689C  A4D8               	btfss	status,2,c
  2858   00689E  EF53  F034         	goto	u2741
  2859   0068A2  EF55  F034         	goto	u2740
  2860   0068A6                     u2741:
  2861   0068A6  EF63  F034         	goto	l2995
  2862   0068AA                     u2740:
  2863   0068AA                     
  2864                           ;serial.c: 45:         buffer[i++] = '0';
  2865   0068AA  5011               	movf	intToStr@buffer^0,w,c
  2866   0068AC  6ED9               	movwf	fsr2l,c
  2867   0068AE  6ADA               	clrf	fsr2h,c
  2868   0068B0  0E30               	movlw	48
  2869   0068B2  6EDF               	movwf	indf2,c
  2870   0068B4  4A1C               	infsnz	intToStr@i^0,f,c
  2871   0068B6  2A1D               	incf	(intToStr@i+1)^0,f,c
  2872   0068B8                     
  2873                           ;serial.c: 46:         buffer[i] = '\0';
  2874   0068B8  5011               	movf	intToStr@buffer^0,w,c
  2875   0068BA  241C               	addwf	intToStr@i^0,w,c
  2876   0068BC  6ED9               	movwf	fsr2l,c
  2877   0068BE  6ADA               	clrf	fsr2h,c
  2878   0068C0  6ADF               	clrf	indf2,c
  2879   0068C2  EFEE  F034         	goto	l57
  2880   0068C6                     l2995:
  2881                           
  2882                           ;serial.c: 51:     if (value < 0) {
  2883   0068C6  BE10               	btfsc	(intToStr@value+1)^0,7,c
  2884   0068C8  EF6A  F034         	goto	u2750
  2885   0068CC  EF68  F034         	goto	u2751
  2886   0068D0                     u2751:
  2887   0068D0  EF99  F034         	goto	l3009
  2888   0068D4                     u2750:
  2889   0068D4                     
  2890                           ;serial.c: 52:         isNegative = 1;
  2891   0068D4  0E00               	movlw	0
  2892   0068D6  6E16               	movwf	(intToStr@isNegative+1)^0,c
  2893   0068D8  0E01               	movlw	1
  2894   0068DA  6E15               	movwf	intToStr@isNegative^0,c
  2895   0068DC                     
  2896                           ;serial.c: 53:         value = -value;
  2897   0068DC  6C0F               	negf	intToStr@value^0,c
  2898   0068DE  1E10               	comf	(intToStr@value+1)^0,f,c
  2899   0068E0  B0D8               	btfsc	status,0,c
  2900   0068E2  2A10               	incf	(intToStr@value+1)^0,f,c
  2901   0068E4  EF99  F034         	goto	l3009
  2902   0068E8                     l3001:
  2903                           
  2904                           ;serial.c: 58:         int digit = value % 10;
  2905   0068E8  C00F  F009         	movff	intToStr@value,___awmod@dividend
  2906   0068EC  C010  F00A         	movff	intToStr@value+1,___awmod@dividend+1
  2907   0068F0  0E00               	movlw	0
  2908   0068F2  6E0C               	movwf	(___awmod@divisor+1)^0,c
  2909   0068F4  0E0A               	movlw	10
  2910   0068F6  6E0B               	movwf	___awmod@divisor^0,c
  2911   0068F8  EC0D  F033         	call	___awmod	;wreg free
  2912   0068FC  C009  F013         	movff	?___awmod,intToStr@digit
  2913   006900  C00A  F014         	movff	?___awmod+1,intToStr@digit+1
  2914   006904                     
  2915                           ;serial.c: 59:         buffer[i++] = digit + '0';
  2916   006904  5011               	movf	intToStr@buffer^0,w,c
  2917   006906  241C               	addwf	intToStr@i^0,w,c
  2918   006908  6ED9               	movwf	fsr2l,c
  2919   00690A  6ADA               	clrf	fsr2h,c
  2920   00690C  5013               	movf	intToStr@digit^0,w,c
  2921   00690E  0F30               	addlw	48
  2922   006910  6EDF               	movwf	indf2,c
  2923   006912  4A1C               	infsnz	intToStr@i^0,f,c
  2924   006914  2A1D               	incf	(intToStr@i+1)^0,f,c
  2925   006916                     
  2926                           ;serial.c: 60:         value = value / 10;
  2927   006916  C00F  F001         	movff	intToStr@value,___awdiv@dividend
  2928   00691A  C010  F002         	movff	intToStr@value+1,___awdiv@dividend+1
  2929   00691E  0E00               	movlw	0
  2930   006920  6E04               	movwf	(___awdiv@divisor+1)^0,c
  2931   006922  0E0A               	movlw	10
  2932   006924  6E03               	movwf	___awdiv@divisor^0,c
  2933   006926  EC65  F033         	call	___awdiv	;wreg free
  2934   00692A  C001  F00F         	movff	?___awdiv,intToStr@value
  2935   00692E  C002  F010         	movff	?___awdiv+1,intToStr@value+1
  2936   006932                     l3009:
  2937                           
  2938                           ;serial.c: 57:     while (value != 0) {
  2939   006932  500F               	movf	intToStr@value^0,w,c
  2940   006934  1010               	iorwf	(intToStr@value+1)^0,w,c
  2941   006936  A4D8               	btfss	status,2,c
  2942   006938  EFA0  F034         	goto	u2761
  2943   00693C  EFA2  F034         	goto	u2760
  2944   006940                     u2761:
  2945   006940  EF74  F034         	goto	l3001
  2946   006944                     u2760:
  2947   006944                     
  2948                           ;serial.c: 64:     if (isNegative) {
  2949   006944  5015               	movf	intToStr@isNegative^0,w,c
  2950   006946  1016               	iorwf	(intToStr@isNegative+1)^0,w,c
  2951   006948  B4D8               	btfsc	status,2,c
  2952   00694A  EFA9  F034         	goto	u2771
  2953   00694E  EFAB  F034         	goto	u2770
  2954   006952                     u2771:
  2955   006952  EFB3  F034         	goto	l3017
  2956   006956                     u2770:
  2957   006956                     
  2958                           ;serial.c: 65:         buffer[i++] = '-';
  2959   006956  5011               	movf	intToStr@buffer^0,w,c
  2960   006958  241C               	addwf	intToStr@i^0,w,c
  2961   00695A  6ED9               	movwf	fsr2l,c
  2962   00695C  6ADA               	clrf	fsr2h,c
  2963   00695E  0E2D               	movlw	45
  2964   006960  6EDF               	movwf	indf2,c
  2965   006962  4A1C               	infsnz	intToStr@i^0,f,c
  2966   006964  2A1D               	incf	(intToStr@i+1)^0,f,c
  2967   006966                     l3017:
  2968                           
  2969                           ;serial.c: 68:     buffer[i] = '\0';
  2970   006966  5011               	movf	intToStr@buffer^0,w,c
  2971   006968  241C               	addwf	intToStr@i^0,w,c
  2972   00696A  6ED9               	movwf	fsr2l,c
  2973   00696C  6ADA               	clrf	fsr2h,c
  2974   00696E  6ADF               	clrf	indf2,c
  2975   006970                     
  2976                           ;serial.c: 71:     int start = 0;
  2977   006970  0E00               	movlw	0
  2978   006972  6E19               	movwf	(intToStr@start+1)^0,c
  2979   006974  0E00               	movlw	0
  2980   006976  6E18               	movwf	intToStr@start^0,c
  2981   006978                     
  2982                           ;serial.c: 72:     int end = i - 1;
  2983   006978  0EFF               	movlw	255
  2984   00697A  241C               	addwf	intToStr@i^0,w,c
  2985   00697C  6E1A               	movwf	intToStr@end^0,c
  2986   00697E  0EFF               	movlw	255
  2987   006980  201D               	addwfc	(intToStr@i+1)^0,w,c
  2988   006982  6E1B               	movwf	(intToStr@end+1)^0,c
  2989                           
  2990                           ;serial.c: 73:     while (start < end) {
  2991   006984  EFDF  F034         	goto	l3033
  2992   006988                     l3023:
  2993                           
  2994                           ;serial.c: 74:         char temp = buffer[start];
  2995   006988  5011               	movf	intToStr@buffer^0,w,c
  2996   00698A  2418               	addwf	intToStr@start^0,w,c
  2997   00698C  6ED9               	movwf	fsr2l,c
  2998   00698E  6ADA               	clrf	fsr2h,c
  2999   006990  50DF               	movf	indf2,w,c
  3000   006992  6E17               	movwf	intToStr@temp^0,c
  3001   006994                     
  3002                           ;serial.c: 75:         buffer[start] = buffer[end];
  3003   006994  5011               	movf	intToStr@buffer^0,w,c
  3004   006996  241A               	addwf	intToStr@end^0,w,c
  3005   006998  6ED9               	movwf	fsr2l,c
  3006   00699A  6ADA               	clrf	fsr2h,c
  3007   00699C  5011               	movf	intToStr@buffer^0,w,c
  3008   00699E  2418               	addwf	intToStr@start^0,w,c
  3009   0069A0  6EE1               	movwf	fsr1l,c
  3010   0069A2  6AE2               	clrf	fsr1h,c
  3011   0069A4  CFDF FFE7          	movff	indf2,indf1
  3012   0069A8                     
  3013                           ;serial.c: 76:         buffer[end] = temp;
  3014   0069A8  5011               	movf	intToStr@buffer^0,w,c
  3015   0069AA  241A               	addwf	intToStr@end^0,w,c
  3016   0069AC  6ED9               	movwf	fsr2l,c
  3017   0069AE  6ADA               	clrf	fsr2h,c
  3018   0069B0  C017  FFDF         	movff	intToStr@temp,indf2
  3019   0069B4                     
  3020                           ;serial.c: 77:         start++;
  3021   0069B4  4A18               	infsnz	intToStr@start^0,f,c
  3022   0069B6  2A19               	incf	(intToStr@start+1)^0,f,c
  3023   0069B8                     
  3024                           ;serial.c: 78:         end--;
  3025   0069B8  061A               	decf	intToStr@end^0,f,c
  3026   0069BA  A0D8               	btfss	status,0,c
  3027   0069BC  061B               	decf	(intToStr@end+1)^0,f,c
  3028   0069BE                     l3033:
  3029                           
  3030                           ;serial.c: 73:     while (start < end) {
  3031   0069BE  501A               	movf	intToStr@end^0,w,c
  3032   0069C0  5C18               	subwf	intToStr@start^0,w,c
  3033   0069C2  5019               	movf	(intToStr@start+1)^0,w,c
  3034   0069C4  0A80               	xorlw	128
  3035   0069C6  6E12               	movwf	??_intToStr^0,c
  3036   0069C8  501B               	movf	(intToStr@end+1)^0,w,c
  3037   0069CA  0A80               	xorlw	128
  3038   0069CC  5812               	subwfb	??_intToStr^0,w,c
  3039   0069CE  A0D8               	btfss	status,0,c
  3040   0069D0  EFEC  F034         	goto	u2781
  3041   0069D4  EFEE  F034         	goto	u2780
  3042   0069D8                     u2781:
  3043   0069D8  EFC4  F034         	goto	l3023
  3044   0069DC                     u2780:
  3045   0069DC                     l57:
  3046   0069DC  0012               	return		;funcret
  3047   0069DE                     __end_of_intToStr:
  3048                           	callstack 0
  3049                           
  3050 ;; *************** function _outputPrint *****************
  3051 ;; Defined at:
  3052 ;;		line 23 in file "output.c"
  3053 ;; Parameters:    Size  Location     Type
  3054 ;;  numTela         2   24[COMRAM] int 
  3055 ;;  idioma          2   26[COMRAM] int 
  3056 ;; Auto vars:     Size  Location     Type
  3057 ;;  sec             1   37[COMRAM] unsigned char 
  3058 ;;  min             1   36[COMRAM] unsigned char 
  3059 ;;  hour            1   35[COMRAM] unsigned char 
  3060 ;;  sec             1   34[COMRAM] unsigned char 
  3061 ;;  min             1   33[COMRAM] unsigned char 
  3062 ;;  hour            1   32[COMRAM] unsigned char 
  3063 ;;  sec             1   31[COMRAM] unsigned char 
  3064 ;;  min             1   30[COMRAM] unsigned char 
  3065 ;;  hour            1   29[COMRAM] unsigned char 
  3066 ;; Return value:  Size  Location     Type
  3067 ;;                  1    wreg      void 
  3068 ;; Registers used:
  3069 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3070 ;; Tracked objects:
  3071 ;;		On entry : 0/0
  3072 ;;		On exit  : 0/0
  3073 ;;		Unchanged: 0/0
  3074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3075 ;;      Params:         4       0       0       0       0       0       0       0       0
  3076 ;;      Locals:         9       0       0       0       0       0       0       0       0
  3077 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3078 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3079 ;;Total ram usage:       14 bytes
  3080 ;; Hardware stack levels used: 1
  3081 ;; Hardware stack levels required when called: 6
  3082 ;; This function calls:
  3083 ;;		___awdiv
  3084 ;;		___awmod
  3085 ;;		_getAlarmLowerLevel
  3086 ;;		_getAlarmUpperLevel
  3087 ;;		_getHOUR
  3088 ;;		_getLanguage
  3089 ;;		_getLevel
  3090 ;;		_getMIN
  3091 ;;		_getSEC
  3092 ;;		_lcdCommand
  3093 ;;		_lcdData
  3094 ;;		_lcdInt
  3095 ;;		_lcdString
  3096 ;; This function is called by:
  3097 ;;		_smLoop
  3098 ;; This function uses a non-reentrant model
  3099 ;;
  3100                           
  3101                           	psect	text13
  3102   0077E6                     __ptext13:
  3103                           	callstack 0
  3104   0077E6                     _outputPrint:
  3105                           	callstack 23
  3106   0077E6                     
  3107                           ;output.c: 25:     if (numTela == STATE_HOUR) {
  3108   0077E6  0E02               	movlw	2
  3109   0077E8  1819               	xorwf	outputPrint@numTela^0,w,c
  3110   0077EA  101A               	iorwf	(outputPrint@numTela+1)^0,w,c
  3111   0077EC  A4D8               	btfss	status,2,c
  3112   0077EE  EFFB  F03B         	goto	u3111
  3113   0077F2  EFFD  F03B         	goto	u3110
  3114   0077F6                     u3111:
  3115   0077F6  EF95  F03C         	goto	l3367
  3116   0077FA                     u3110:
  3117   0077FA                     
  3118                           ;output.c: 26:         lcdCommand(0x80);
  3119   0077FA  0E80               	movlw	128
  3120   0077FC  ECED  F030         	call	_lcdCommand
  3121   007800                     
  3122                           ;output.c: 27:         lcdString(msgs[numTela][idioma]);
  3123   007800  501B               	movf	outputPrint@idioma^0,w,c
  3124   007802  0D02               	mullw	2
  3125   007804  CFF3 F01D          	movff	prodl,??_outputPrint
  3126   007808  5019               	movf	outputPrint@numTela^0,w,c
  3127   00780A  0D08               	mullw	8
  3128   00780C  50F3               	movf	243,w,c
  3129   00780E  0F60               	addlw	low _msgs
  3130   007810  241D               	addwf	??_outputPrint^0,w,c
  3131   007812  6ED9               	movwf	fsr2l,c
  3132   007814  6ADA               	clrf	fsr2h,c
  3133   007816  CFDE F004          	movff	postinc2,lcdString@msg
  3134   00781A  CFDD F005          	movff	postdec2,lcdString@msg+1
  3135   00781E  EC5F  F031         	call	_lcdString	;wreg free
  3136   007822                     
  3137                           ;output.c: 28:         lcdCommand(0xC0);
  3138   007822  0EC0               	movlw	192
  3139   007824  ECED  F030         	call	_lcdCommand
  3140   007828                     
  3141                           ;output.c: 29:         char hour, min, sec;;output.c: 30:         hour = getHOUR();
  3142   007828  EC3F  F02E         	call	_getHOUR	;wreg free
  3143   00782C  6E1E               	movwf	outputPrint@hour^0,c
  3144   00782E                     
  3145                           ;output.c: 31:         min = getMIN();
  3146   00782E  EC4F  F02E         	call	_getMIN	;wreg free
  3147   007832  6E1F               	movwf	outputPrint@min^0,c
  3148   007834                     
  3149                           ;output.c: 32:         sec = getSEC();
  3150   007834  EC57  F02E         	call	_getSEC	;wreg free
  3151   007838  6E20               	movwf	outputPrint@sec^0,c
  3152   00783A                     
  3153                           ;output.c: 33:         lcdData((hour / 10) % 10 + 48);
  3154   00783A  0E00               	movlw	0
  3155   00783C  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3156   00783E  0E0A               	movlw	10
  3157   007840  6E03               	movwf	___awdiv@divisor^0,c
  3158   007842  C01E  F001         	movff	outputPrint@hour,___awdiv@dividend
  3159   007846  6A02               	clrf	(___awdiv@dividend+1)^0,c
  3160   007848  EC65  F033         	call	___awdiv	;wreg free
  3161   00784C  C001  F009         	movff	?___awdiv,___awmod@dividend
  3162   007850  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  3163   007854  0E00               	movlw	0
  3164   007856  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3165   007858  0E0A               	movlw	10
  3166   00785A  6E0B               	movwf	___awmod@divisor^0,c
  3167   00785C  EC0D  F033         	call	___awmod	;wreg free
  3168   007860  5009               	movf	?___awmod^0,w,c
  3169   007862  0F30               	addlw	48
  3170   007864  ECB8  F02E         	call	_lcdData
  3171   007868                     
  3172                           ;output.c: 34:         lcdData(hour % 10 + 48);
  3173   007868  C01E  F009         	movff	outputPrint@hour,___awmod@dividend
  3174   00786C  6A0A               	clrf	(___awmod@dividend+1)^0,c
  3175   00786E  0E00               	movlw	0
  3176   007870  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3177   007872  0E0A               	movlw	10
  3178   007874  6E0B               	movwf	___awmod@divisor^0,c
  3179   007876  EC0D  F033         	call	___awmod	;wreg free
  3180   00787A  5009               	movf	?___awmod^0,w,c
  3181   00787C  0F30               	addlw	48
  3182   00787E  ECB8  F02E         	call	_lcdData
  3183   007882                     
  3184                           ;output.c: 35:         lcdData(':');
  3185   007882  0E3A               	movlw	58
  3186   007884  ECB8  F02E         	call	_lcdData
  3187   007888                     
  3188                           ;output.c: 36:         lcdData((min / 10) % 10 + 48);
  3189   007888  0E00               	movlw	0
  3190   00788A  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3191   00788C  0E0A               	movlw	10
  3192   00788E  6E03               	movwf	___awdiv@divisor^0,c
  3193   007890  C01F  F001         	movff	outputPrint@min,___awdiv@dividend
  3194   007894  6A02               	clrf	(___awdiv@dividend+1)^0,c
  3195   007896  EC65  F033         	call	___awdiv	;wreg free
  3196   00789A  C001  F009         	movff	?___awdiv,___awmod@dividend
  3197   00789E  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  3198   0078A2  0E00               	movlw	0
  3199   0078A4  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3200   0078A6  0E0A               	movlw	10
  3201   0078A8  6E0B               	movwf	___awmod@divisor^0,c
  3202   0078AA  EC0D  F033         	call	___awmod	;wreg free
  3203   0078AE  5009               	movf	?___awmod^0,w,c
  3204   0078B0  0F30               	addlw	48
  3205   0078B2  ECB8  F02E         	call	_lcdData
  3206   0078B6                     
  3207                           ;output.c: 37:         lcdData(min % 10 + 48);
  3208   0078B6  C01F  F009         	movff	outputPrint@min,___awmod@dividend
  3209   0078BA  6A0A               	clrf	(___awmod@dividend+1)^0,c
  3210   0078BC  0E00               	movlw	0
  3211   0078BE  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3212   0078C0  0E0A               	movlw	10
  3213   0078C2  6E0B               	movwf	___awmod@divisor^0,c
  3214   0078C4  EC0D  F033         	call	___awmod	;wreg free
  3215   0078C8  5009               	movf	?___awmod^0,w,c
  3216   0078CA  0F30               	addlw	48
  3217   0078CC  ECB8  F02E         	call	_lcdData
  3218   0078D0                     
  3219                           ;output.c: 38:         lcdData(':');
  3220   0078D0  0E3A               	movlw	58
  3221   0078D2  ECB8  F02E         	call	_lcdData
  3222   0078D6                     
  3223                           ;output.c: 39:         lcdData((sec / 10) % 10 + 48);
  3224   0078D6  0E00               	movlw	0
  3225   0078D8  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3226   0078DA  0E0A               	movlw	10
  3227   0078DC  6E03               	movwf	___awdiv@divisor^0,c
  3228   0078DE  C020  F001         	movff	outputPrint@sec,___awdiv@dividend
  3229   0078E2  6A02               	clrf	(___awdiv@dividend+1)^0,c
  3230   0078E4  EC65  F033         	call	___awdiv	;wreg free
  3231   0078E8  C001  F009         	movff	?___awdiv,___awmod@dividend
  3232   0078EC  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  3233   0078F0  0E00               	movlw	0
  3234   0078F2  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3235   0078F4  0E0A               	movlw	10
  3236   0078F6  6E0B               	movwf	___awmod@divisor^0,c
  3237   0078F8  EC0D  F033         	call	___awmod	;wreg free
  3238   0078FC  5009               	movf	?___awmod^0,w,c
  3239   0078FE  0F30               	addlw	48
  3240   007900  ECB8  F02E         	call	_lcdData
  3241   007904                     
  3242                           ;output.c: 40:         lcdData(sec % 10 + 48);
  3243   007904  C020  F009         	movff	outputPrint@sec,___awmod@dividend
  3244   007908  6A0A               	clrf	(___awmod@dividend+1)^0,c
  3245   00790A  0E00               	movlw	0
  3246   00790C  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3247   00790E  0E0A               	movlw	10
  3248   007910  6E0B               	movwf	___awmod@divisor^0,c
  3249   007912  EC0D  F033         	call	___awmod	;wreg free
  3250   007916  5009               	movf	?___awmod^0,w,c
  3251   007918  0F30               	addlw	48
  3252   00791A  ECB8  F02E         	call	_lcdData
  3253   00791E                     
  3254                           ;output.c: 41:         lcdString("        ");
  3255   00791E  0EA5               	movlw	low (STR_42+8)
  3256   007920  6E04               	movwf	lcdString@msg^0,c
  3257   007922  0E7D               	movlw	high (STR_42+8)
  3258   007924  6E05               	movwf	(lcdString@msg+1)^0,c
  3259   007926  EC5F  F031         	call	_lcdString	;wreg free
  3260   00792A                     l3367:
  3261                           
  3262                           ;output.c: 44:     if (numTela == STATE_MIN) {
  3263   00792A  0E03               	movlw	3
  3264   00792C  1819               	xorwf	outputPrint@numTela^0,w,c
  3265   00792E  101A               	iorwf	(outputPrint@numTela+1)^0,w,c
  3266   007930  A4D8               	btfss	status,2,c
  3267   007932  EF9D  F03C         	goto	u3121
  3268   007936  EF9F  F03C         	goto	u3120
  3269   00793A                     u3121:
  3270   00793A  EF37  F03D         	goto	l3399
  3271   00793E                     u3120:
  3272   00793E                     
  3273                           ;output.c: 45:         lcdCommand(0x80);
  3274   00793E  0E80               	movlw	128
  3275   007940  ECED  F030         	call	_lcdCommand
  3276   007944                     
  3277                           ;output.c: 46:         lcdString(msgs[numTela][idioma]);
  3278   007944  501B               	movf	outputPrint@idioma^0,w,c
  3279   007946  0D02               	mullw	2
  3280   007948  CFF3 F01D          	movff	prodl,??_outputPrint
  3281   00794C  5019               	movf	outputPrint@numTela^0,w,c
  3282   00794E  0D08               	mullw	8
  3283   007950  50F3               	movf	243,w,c
  3284   007952  0F60               	addlw	low _msgs
  3285   007954  241D               	addwf	??_outputPrint^0,w,c
  3286   007956  6ED9               	movwf	fsr2l,c
  3287   007958  6ADA               	clrf	fsr2h,c
  3288   00795A  CFDE F004          	movff	postinc2,lcdString@msg
  3289   00795E  CFDD F005          	movff	postdec2,lcdString@msg+1
  3290   007962  EC5F  F031         	call	_lcdString	;wreg free
  3291   007966                     
  3292                           ;output.c: 47:         lcdCommand(0xC0);
  3293   007966  0EC0               	movlw	192
  3294   007968  ECED  F030         	call	_lcdCommand
  3295   00796C                     
  3296                           ;output.c: 48:         char hour, min, sec;;output.c: 49:         hour = getHOUR();
  3297   00796C  EC3F  F02E         	call	_getHOUR	;wreg free
  3298   007970  6E21               	movwf	outputPrint@hour_495^0,c
  3299   007972                     
  3300                           ;output.c: 50:         min = getMIN();
  3301   007972  EC4F  F02E         	call	_getMIN	;wreg free
  3302   007976  6E22               	movwf	outputPrint@min_496^0,c
  3303   007978                     
  3304                           ;output.c: 51:         sec = getSEC();
  3305   007978  EC57  F02E         	call	_getSEC	;wreg free
  3306   00797C  6E23               	movwf	outputPrint@sec_497^0,c
  3307   00797E                     
  3308                           ;output.c: 52:         lcdData((hour / 10) % 10 + 48);
  3309   00797E  0E00               	movlw	0
  3310   007980  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3311   007982  0E0A               	movlw	10
  3312   007984  6E03               	movwf	___awdiv@divisor^0,c
  3313   007986  C021  F001         	movff	outputPrint@hour_495,___awdiv@dividend
  3314   00798A  6A02               	clrf	(___awdiv@dividend+1)^0,c
  3315   00798C  EC65  F033         	call	___awdiv	;wreg free
  3316   007990  C001  F009         	movff	?___awdiv,___awmod@dividend
  3317   007994  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  3318   007998  0E00               	movlw	0
  3319   00799A  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3320   00799C  0E0A               	movlw	10
  3321   00799E  6E0B               	movwf	___awmod@divisor^0,c
  3322   0079A0  EC0D  F033         	call	___awmod	;wreg free
  3323   0079A4  5009               	movf	?___awmod^0,w,c
  3324   0079A6  0F30               	addlw	48
  3325   0079A8  ECB8  F02E         	call	_lcdData
  3326   0079AC                     
  3327                           ;output.c: 53:         lcdData(hour % 10 + 48);
  3328   0079AC  C021  F009         	movff	outputPrint@hour_495,___awmod@dividend
  3329   0079B0  6A0A               	clrf	(___awmod@dividend+1)^0,c
  3330   0079B2  0E00               	movlw	0
  3331   0079B4  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3332   0079B6  0E0A               	movlw	10
  3333   0079B8  6E0B               	movwf	___awmod@divisor^0,c
  3334   0079BA  EC0D  F033         	call	___awmod	;wreg free
  3335   0079BE  5009               	movf	?___awmod^0,w,c
  3336   0079C0  0F30               	addlw	48
  3337   0079C2  ECB8  F02E         	call	_lcdData
  3338   0079C6                     
  3339                           ;output.c: 54:         lcdData(':');
  3340   0079C6  0E3A               	movlw	58
  3341   0079C8  ECB8  F02E         	call	_lcdData
  3342   0079CC                     
  3343                           ;output.c: 55:         lcdData((min / 10) % 10 + 48);
  3344   0079CC  0E00               	movlw	0
  3345   0079CE  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3346   0079D0  0E0A               	movlw	10
  3347   0079D2  6E03               	movwf	___awdiv@divisor^0,c
  3348   0079D4  C022  F001         	movff	outputPrint@min_496,___awdiv@dividend
  3349   0079D8  6A02               	clrf	(___awdiv@dividend+1)^0,c
  3350   0079DA  EC65  F033         	call	___awdiv	;wreg free
  3351   0079DE  C001  F009         	movff	?___awdiv,___awmod@dividend
  3352   0079E2  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  3353   0079E6  0E00               	movlw	0
  3354   0079E8  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3355   0079EA  0E0A               	movlw	10
  3356   0079EC  6E0B               	movwf	___awmod@divisor^0,c
  3357   0079EE  EC0D  F033         	call	___awmod	;wreg free
  3358   0079F2  5009               	movf	?___awmod^0,w,c
  3359   0079F4  0F30               	addlw	48
  3360   0079F6  ECB8  F02E         	call	_lcdData
  3361   0079FA                     
  3362                           ;output.c: 56:         lcdData(min % 10 + 48);
  3363   0079FA  C022  F009         	movff	outputPrint@min_496,___awmod@dividend
  3364   0079FE  6A0A               	clrf	(___awmod@dividend+1)^0,c
  3365   007A00  0E00               	movlw	0
  3366   007A02  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3367   007A04  0E0A               	movlw	10
  3368   007A06  6E0B               	movwf	___awmod@divisor^0,c
  3369   007A08  EC0D  F033         	call	___awmod	;wreg free
  3370   007A0C  5009               	movf	?___awmod^0,w,c
  3371   007A0E  0F30               	addlw	48
  3372   007A10  ECB8  F02E         	call	_lcdData
  3373   007A14                     
  3374                           ;output.c: 57:         lcdData(':');
  3375   007A14  0E3A               	movlw	58
  3376   007A16  ECB8  F02E         	call	_lcdData
  3377   007A1A                     
  3378                           ;output.c: 58:         lcdData((sec / 10) % 10 + 48);
  3379   007A1A  0E00               	movlw	0
  3380   007A1C  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3381   007A1E  0E0A               	movlw	10
  3382   007A20  6E03               	movwf	___awdiv@divisor^0,c
  3383   007A22  C023  F001         	movff	outputPrint@sec_497,___awdiv@dividend
  3384   007A26  6A02               	clrf	(___awdiv@dividend+1)^0,c
  3385   007A28  EC65  F033         	call	___awdiv	;wreg free
  3386   007A2C  C001  F009         	movff	?___awdiv,___awmod@dividend
  3387   007A30  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  3388   007A34  0E00               	movlw	0
  3389   007A36  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3390   007A38  0E0A               	movlw	10
  3391   007A3A  6E0B               	movwf	___awmod@divisor^0,c
  3392   007A3C  EC0D  F033         	call	___awmod	;wreg free
  3393   007A40  5009               	movf	?___awmod^0,w,c
  3394   007A42  0F30               	addlw	48
  3395   007A44  ECB8  F02E         	call	_lcdData
  3396   007A48                     
  3397                           ;output.c: 59:         lcdData(sec % 10 + 48);
  3398   007A48  C023  F009         	movff	outputPrint@sec_497,___awmod@dividend
  3399   007A4C  6A0A               	clrf	(___awmod@dividend+1)^0,c
  3400   007A4E  0E00               	movlw	0
  3401   007A50  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3402   007A52  0E0A               	movlw	10
  3403   007A54  6E0B               	movwf	___awmod@divisor^0,c
  3404   007A56  EC0D  F033         	call	___awmod	;wreg free
  3405   007A5A  5009               	movf	?___awmod^0,w,c
  3406   007A5C  0F30               	addlw	48
  3407   007A5E  ECB8  F02E         	call	_lcdData
  3408   007A62                     
  3409                           ;output.c: 60:         lcdString("        ");
  3410   007A62  0EA5               	movlw	low (STR_42+8)
  3411   007A64  6E04               	movwf	lcdString@msg^0,c
  3412   007A66  0E7D               	movlw	high (STR_42+8)
  3413   007A68  6E05               	movwf	(lcdString@msg+1)^0,c
  3414   007A6A  EC5F  F031         	call	_lcdString	;wreg free
  3415   007A6E                     l3399:
  3416                           
  3417                           ;output.c: 63:     if (numTela == STATE_SEC) {
  3418   007A6E  0E04               	movlw	4
  3419   007A70  1819               	xorwf	outputPrint@numTela^0,w,c
  3420   007A72  101A               	iorwf	(outputPrint@numTela+1)^0,w,c
  3421   007A74  A4D8               	btfss	status,2,c
  3422   007A76  EF3F  F03D         	goto	u3131
  3423   007A7A  EF41  F03D         	goto	u3130
  3424   007A7E                     u3131:
  3425   007A7E  EFD9  F03D         	goto	l3431
  3426   007A82                     u3130:
  3427   007A82                     
  3428                           ;output.c: 64:         lcdCommand(0x80);
  3429   007A82  0E80               	movlw	128
  3430   007A84  ECED  F030         	call	_lcdCommand
  3431   007A88                     
  3432                           ;output.c: 65:         lcdString(msgs[numTela][idioma]);
  3433   007A88  501B               	movf	outputPrint@idioma^0,w,c
  3434   007A8A  0D02               	mullw	2
  3435   007A8C  CFF3 F01D          	movff	prodl,??_outputPrint
  3436   007A90  5019               	movf	outputPrint@numTela^0,w,c
  3437   007A92  0D08               	mullw	8
  3438   007A94  50F3               	movf	243,w,c
  3439   007A96  0F60               	addlw	low _msgs
  3440   007A98  241D               	addwf	??_outputPrint^0,w,c
  3441   007A9A  6ED9               	movwf	fsr2l,c
  3442   007A9C  6ADA               	clrf	fsr2h,c
  3443   007A9E  CFDE F004          	movff	postinc2,lcdString@msg
  3444   007AA2  CFDD F005          	movff	postdec2,lcdString@msg+1
  3445   007AA6  EC5F  F031         	call	_lcdString	;wreg free
  3446   007AAA                     
  3447                           ;output.c: 66:         lcdCommand(0xC0);
  3448   007AAA  0EC0               	movlw	192
  3449   007AAC  ECED  F030         	call	_lcdCommand
  3450   007AB0                     
  3451                           ;output.c: 67:         char hour, min, sec;;output.c: 68:         hour = getHOUR();
  3452   007AB0  EC3F  F02E         	call	_getHOUR	;wreg free
  3453   007AB4  6E24               	movwf	outputPrint@hour_499^0,c
  3454   007AB6                     
  3455                           ;output.c: 69:         min = getMIN();
  3456   007AB6  EC4F  F02E         	call	_getMIN	;wreg free
  3457   007ABA  6E25               	movwf	outputPrint@min_500^0,c
  3458   007ABC                     
  3459                           ;output.c: 70:         sec = getSEC();
  3460   007ABC  EC57  F02E         	call	_getSEC	;wreg free
  3461   007AC0  6E26               	movwf	outputPrint@sec_501^0,c
  3462   007AC2                     
  3463                           ;output.c: 71:         lcdData((hour / 10) % 10 + 48);
  3464   007AC2  0E00               	movlw	0
  3465   007AC4  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3466   007AC6  0E0A               	movlw	10
  3467   007AC8  6E03               	movwf	___awdiv@divisor^0,c
  3468   007ACA  C024  F001         	movff	outputPrint@hour_499,___awdiv@dividend
  3469   007ACE  6A02               	clrf	(___awdiv@dividend+1)^0,c
  3470   007AD0  EC65  F033         	call	___awdiv	;wreg free
  3471   007AD4  C001  F009         	movff	?___awdiv,___awmod@dividend
  3472   007AD8  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  3473   007ADC  0E00               	movlw	0
  3474   007ADE  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3475   007AE0  0E0A               	movlw	10
  3476   007AE2  6E0B               	movwf	___awmod@divisor^0,c
  3477   007AE4  EC0D  F033         	call	___awmod	;wreg free
  3478   007AE8  5009               	movf	?___awmod^0,w,c
  3479   007AEA  0F30               	addlw	48
  3480   007AEC  ECB8  F02E         	call	_lcdData
  3481   007AF0                     
  3482                           ;output.c: 72:         lcdData(hour % 10 + 48);
  3483   007AF0  C024  F009         	movff	outputPrint@hour_499,___awmod@dividend
  3484   007AF4  6A0A               	clrf	(___awmod@dividend+1)^0,c
  3485   007AF6  0E00               	movlw	0
  3486   007AF8  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3487   007AFA  0E0A               	movlw	10
  3488   007AFC  6E0B               	movwf	___awmod@divisor^0,c
  3489   007AFE  EC0D  F033         	call	___awmod	;wreg free
  3490   007B02  5009               	movf	?___awmod^0,w,c
  3491   007B04  0F30               	addlw	48
  3492   007B06  ECB8  F02E         	call	_lcdData
  3493   007B0A                     
  3494                           ;output.c: 73:         lcdData(':');
  3495   007B0A  0E3A               	movlw	58
  3496   007B0C  ECB8  F02E         	call	_lcdData
  3497   007B10                     
  3498                           ;output.c: 74:         lcdData((min / 10) % 10 + 48);
  3499   007B10  0E00               	movlw	0
  3500   007B12  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3501   007B14  0E0A               	movlw	10
  3502   007B16  6E03               	movwf	___awdiv@divisor^0,c
  3503   007B18  C025  F001         	movff	outputPrint@min_500,___awdiv@dividend
  3504   007B1C  6A02               	clrf	(___awdiv@dividend+1)^0,c
  3505   007B1E  EC65  F033         	call	___awdiv	;wreg free
  3506   007B22  C001  F009         	movff	?___awdiv,___awmod@dividend
  3507   007B26  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  3508   007B2A  0E00               	movlw	0
  3509   007B2C  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3510   007B2E  0E0A               	movlw	10
  3511   007B30  6E0B               	movwf	___awmod@divisor^0,c
  3512   007B32  EC0D  F033         	call	___awmod	;wreg free
  3513   007B36  5009               	movf	?___awmod^0,w,c
  3514   007B38  0F30               	addlw	48
  3515   007B3A  ECB8  F02E         	call	_lcdData
  3516   007B3E                     
  3517                           ;output.c: 75:         lcdData(min % 10 + 48);
  3518   007B3E  C025  F009         	movff	outputPrint@min_500,___awmod@dividend
  3519   007B42  6A0A               	clrf	(___awmod@dividend+1)^0,c
  3520   007B44  0E00               	movlw	0
  3521   007B46  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3522   007B48  0E0A               	movlw	10
  3523   007B4A  6E0B               	movwf	___awmod@divisor^0,c
  3524   007B4C  EC0D  F033         	call	___awmod	;wreg free
  3525   007B50  5009               	movf	?___awmod^0,w,c
  3526   007B52  0F30               	addlw	48
  3527   007B54  ECB8  F02E         	call	_lcdData
  3528   007B58                     
  3529                           ;output.c: 76:         lcdData(':');
  3530   007B58  0E3A               	movlw	58
  3531   007B5A  ECB8  F02E         	call	_lcdData
  3532   007B5E                     
  3533                           ;output.c: 77:         lcdData((sec / 10) % 10 + 48);
  3534   007B5E  0E00               	movlw	0
  3535   007B60  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3536   007B62  0E0A               	movlw	10
  3537   007B64  6E03               	movwf	___awdiv@divisor^0,c
  3538   007B66  C026  F001         	movff	outputPrint@sec_501,___awdiv@dividend
  3539   007B6A  6A02               	clrf	(___awdiv@dividend+1)^0,c
  3540   007B6C  EC65  F033         	call	___awdiv	;wreg free
  3541   007B70  C001  F009         	movff	?___awdiv,___awmod@dividend
  3542   007B74  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  3543   007B78  0E00               	movlw	0
  3544   007B7A  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3545   007B7C  0E0A               	movlw	10
  3546   007B7E  6E0B               	movwf	___awmod@divisor^0,c
  3547   007B80  EC0D  F033         	call	___awmod	;wreg free
  3548   007B84  5009               	movf	?___awmod^0,w,c
  3549   007B86  0F30               	addlw	48
  3550   007B88  ECB8  F02E         	call	_lcdData
  3551   007B8C                     
  3552                           ;output.c: 78:         lcdData(sec % 10 + 48);
  3553   007B8C  C026  F009         	movff	outputPrint@sec_501,___awmod@dividend
  3554   007B90  6A0A               	clrf	(___awmod@dividend+1)^0,c
  3555   007B92  0E00               	movlw	0
  3556   007B94  6E0C               	movwf	(___awmod@divisor+1)^0,c
  3557   007B96  0E0A               	movlw	10
  3558   007B98  6E0B               	movwf	___awmod@divisor^0,c
  3559   007B9A  EC0D  F033         	call	___awmod	;wreg free
  3560   007B9E  5009               	movf	?___awmod^0,w,c
  3561   007BA0  0F30               	addlw	48
  3562   007BA2  ECB8  F02E         	call	_lcdData
  3563   007BA6                     
  3564                           ;output.c: 79:         lcdString("        ");
  3565   007BA6  0EA5               	movlw	low (STR_42+8)
  3566   007BA8  6E04               	movwf	lcdString@msg^0,c
  3567   007BAA  0E7D               	movlw	high (STR_42+8)
  3568   007BAC  6E05               	movwf	(lcdString@msg+1)^0,c
  3569   007BAE  EC5F  F031         	call	_lcdString	;wreg free
  3570   007BB2                     l3431:
  3571                           
  3572                           ;output.c: 82:     if (numTela == STATE_ALARM_UPPER) {
  3573   007BB2  5019               	movf	outputPrint@numTela^0,w,c
  3574   007BB4  101A               	iorwf	(outputPrint@numTela+1)^0,w,c
  3575   007BB6  A4D8               	btfss	status,2,c
  3576   007BB8  EFE0  F03D         	goto	u3141
  3577   007BBC  EFE2  F03D         	goto	u3140
  3578   007BC0                     u3141:
  3579   007BC0  EF0F  F03E         	goto	l3445
  3580   007BC4                     u3140:
  3581   007BC4                     
  3582                           ;output.c: 83:         lcdCommand(0x80);
  3583   007BC4  0E80               	movlw	128
  3584   007BC6  ECED  F030         	call	_lcdCommand
  3585   007BCA                     
  3586                           ;output.c: 84:         lcdString(msgs[numTela][idioma]);
  3587   007BCA  501B               	movf	outputPrint@idioma^0,w,c
  3588   007BCC  0D02               	mullw	2
  3589   007BCE  CFF3 F01D          	movff	prodl,??_outputPrint
  3590   007BD2  5019               	movf	outputPrint@numTela^0,w,c
  3591   007BD4  0D08               	mullw	8
  3592   007BD6  50F3               	movf	243,w,c
  3593   007BD8  0F60               	addlw	low _msgs
  3594   007BDA  241D               	addwf	??_outputPrint^0,w,c
  3595   007BDC  6ED9               	movwf	fsr2l,c
  3596   007BDE  6ADA               	clrf	fsr2h,c
  3597   007BE0  CFDE F004          	movff	postinc2,lcdString@msg
  3598   007BE4  CFDD F005          	movff	postdec2,lcdString@msg+1
  3599   007BE8  EC5F  F031         	call	_lcdString	;wreg free
  3600   007BEC                     
  3601                           ;output.c: 85:         lcdCommand(0xC0);
  3602   007BEC  0EC0               	movlw	192
  3603   007BEE  ECED  F030         	call	_lcdCommand
  3604   007BF2                     
  3605                           ;output.c: 86:         lcdInt(getAlarmUpperLevel());
  3606   007BF2  EC6B  F030         	call	_getAlarmUpperLevel	;wreg free
  3607   007BF6  C013  F017         	movff	?_getAlarmUpperLevel,lcdInt@val
  3608   007BFA  C014  F018         	movff	?_getAlarmUpperLevel+1,lcdInt@val+1
  3609   007BFE  ECC7  F033         	call	_lcdInt	;wreg free
  3610   007C02                     
  3611                           ;output.c: 87:         lcdString("      ");
  3612   007C02  0EA7               	movlw	low (STR_42+10)
  3613   007C04  6E04               	movwf	lcdString@msg^0,c
  3614   007C06  0E7D               	movlw	high (STR_42+10)
  3615   007C08  6E05               	movwf	(lcdString@msg+1)^0,c
  3616   007C0A  EC5F  F031         	call	_lcdString	;wreg free
  3617   007C0E                     
  3618                           ;output.c: 88:         lcdInt(getLevel());
  3619   007C0E  EC33  F02E         	call	_getLevel	;wreg free
  3620   007C12  C001  F017         	movff	?_getLevel,lcdInt@val
  3621   007C16  C002  F018         	movff	?_getLevel+1,lcdInt@val+1
  3622   007C1A  ECC7  F033         	call	_lcdInt	;wreg free
  3623   007C1E                     l3445:
  3624                           
  3625                           ;output.c: 90:     if (numTela == STATE_ALARM_LOWER) {
  3626   007C1E  0419               	decf	outputPrint@numTela^0,w,c
  3627   007C20  101A               	iorwf	(outputPrint@numTela+1)^0,w,c
  3628   007C22  A4D8               	btfss	status,2,c
  3629   007C24  EF16  F03E         	goto	u3151
  3630   007C28  EF18  F03E         	goto	u3150
  3631   007C2C                     u3151:
  3632   007C2C  EF45  F03E         	goto	l3459
  3633   007C30                     u3150:
  3634   007C30                     
  3635                           ;output.c: 91:         lcdCommand(0x80);
  3636   007C30  0E80               	movlw	128
  3637   007C32  ECED  F030         	call	_lcdCommand
  3638   007C36                     
  3639                           ;output.c: 92:         lcdString(msgs[numTela][idioma]);
  3640   007C36  501B               	movf	outputPrint@idioma^0,w,c
  3641   007C38  0D02               	mullw	2
  3642   007C3A  CFF3 F01D          	movff	prodl,??_outputPrint
  3643   007C3E  5019               	movf	outputPrint@numTela^0,w,c
  3644   007C40  0D08               	mullw	8
  3645   007C42  50F3               	movf	243,w,c
  3646   007C44  0F60               	addlw	low _msgs
  3647   007C46  241D               	addwf	??_outputPrint^0,w,c
  3648   007C48  6ED9               	movwf	fsr2l,c
  3649   007C4A  6ADA               	clrf	fsr2h,c
  3650   007C4C  CFDE F004          	movff	postinc2,lcdString@msg
  3651   007C50  CFDD F005          	movff	postdec2,lcdString@msg+1
  3652   007C54  EC5F  F031         	call	_lcdString	;wreg free
  3653   007C58                     
  3654                           ;output.c: 93:         lcdCommand(0xC0);
  3655   007C58  0EC0               	movlw	192
  3656   007C5A  ECED  F030         	call	_lcdCommand
  3657   007C5E                     
  3658                           ;output.c: 94:         lcdInt(getAlarmLowerLevel());
  3659   007C5E  EC4F  F030         	call	_getAlarmLowerLevel	;wreg free
  3660   007C62  C013  F017         	movff	?_getAlarmLowerLevel,lcdInt@val
  3661   007C66  C014  F018         	movff	?_getAlarmLowerLevel+1,lcdInt@val+1
  3662   007C6A  ECC7  F033         	call	_lcdInt	;wreg free
  3663   007C6E                     
  3664                           ;output.c: 95:         lcdString("      ");
  3665   007C6E  0EA7               	movlw	low (STR_42+10)
  3666   007C70  6E04               	movwf	lcdString@msg^0,c
  3667   007C72  0E7D               	movlw	high (STR_42+10)
  3668   007C74  6E05               	movwf	(lcdString@msg+1)^0,c
  3669   007C76  EC5F  F031         	call	_lcdString	;wreg free
  3670   007C7A                     
  3671                           ;output.c: 96:         lcdInt(getLevel());
  3672   007C7A  EC33  F02E         	call	_getLevel	;wreg free
  3673   007C7E  C001  F017         	movff	?_getLevel,lcdInt@val
  3674   007C82  C002  F018         	movff	?_getLevel+1,lcdInt@val+1
  3675   007C86  ECC7  F033         	call	_lcdInt	;wreg free
  3676   007C8A                     l3459:
  3677                           
  3678                           ;output.c: 98:     if (numTela == STATE_IDIOMA) {
  3679   007C8A  0E05               	movlw	5
  3680   007C8C  1819               	xorwf	outputPrint@numTela^0,w,c
  3681   007C8E  101A               	iorwf	(outputPrint@numTela+1)^0,w,c
  3682   007C90  A4D8               	btfss	status,2,c
  3683   007C92  EF4D  F03E         	goto	u3161
  3684   007C96  EF4F  F03E         	goto	u3160
  3685   007C9A                     u3161:
  3686   007C9A  EFA6  F03E         	goto	l3483
  3687   007C9E                     u3160:
  3688   007C9E                     
  3689                           ;output.c: 99:         lcdCommand(0x80);
  3690   007C9E  0E80               	movlw	128
  3691   007CA0  ECED  F030         	call	_lcdCommand
  3692   007CA4                     
  3693                           ;output.c: 100:         lcdString(msgs[numTela][idioma]);
  3694   007CA4  501B               	movf	outputPrint@idioma^0,w,c
  3695   007CA6  0D02               	mullw	2
  3696   007CA8  CFF3 F01D          	movff	prodl,??_outputPrint
  3697   007CAC  5019               	movf	outputPrint@numTela^0,w,c
  3698   007CAE  0D08               	mullw	8
  3699   007CB0  50F3               	movf	243,w,c
  3700   007CB2  0F60               	addlw	low _msgs
  3701   007CB4  241D               	addwf	??_outputPrint^0,w,c
  3702   007CB6  6ED9               	movwf	fsr2l,c
  3703   007CB8  6ADA               	clrf	fsr2h,c
  3704   007CBA  CFDE F004          	movff	postinc2,lcdString@msg
  3705   007CBE  CFDD F005          	movff	postdec2,lcdString@msg+1
  3706   007CC2  EC5F  F031         	call	_lcdString	;wreg free
  3707   007CC6                     
  3708                           ;output.c: 101:         lcdCommand(0xC0);
  3709   007CC6  0EC0               	movlw	192
  3710   007CC8  ECED  F030         	call	_lcdCommand
  3711   007CCC                     
  3712                           ;output.c: 102:         if (getLanguage() == 0) {
  3713   007CCC  EC47  F02E         	call	_getLanguage	;wreg free
  3714   007CD0  0900               	iorlw	0
  3715   007CD2  A4D8               	btfss	status,2,c
  3716   007CD4  EF6E  F03E         	goto	u3171
  3717   007CD8  EF70  F03E         	goto	u3170
  3718   007CDC                     u3171:
  3719   007CDC  EF76  F03E         	goto	l3471
  3720   007CE0                     u3170:
  3721   007CE0                     
  3722                           ;output.c: 103:             lcdString("Portugues       ");
  3723   007CE0  0EE1               	movlw	low STR_38
  3724   007CE2  6E04               	movwf	lcdString@msg^0,c
  3725   007CE4  0E7D               	movlw	high STR_38
  3726   007CE6  6E05               	movwf	(lcdString@msg+1)^0,c
  3727   007CE8  EC5F  F031         	call	_lcdString	;wreg free
  3728   007CEC                     l3471:
  3729                           
  3730                           ;output.c: 105:         if (getLanguage() == 1) {
  3731   007CEC  EC47  F02E         	call	_getLanguage	;wreg free
  3732   007CF0  06E8               	decf	wreg,f,c
  3733   007CF2  A4D8               	btfss	status,2,c
  3734   007CF4  EF7E  F03E         	goto	u3181
  3735   007CF8  EF80  F03E         	goto	u3180
  3736   007CFC                     u3181:
  3737   007CFC  EF86  F03E         	goto	l3475
  3738   007D00                     u3180:
  3739   007D00                     
  3740                           ;output.c: 106:             lcdString("English         ");
  3741   007D00  0EAE               	movlw	low STR_39
  3742   007D02  6E04               	movwf	lcdString@msg^0,c
  3743   007D04  0E7D               	movlw	high STR_39
  3744   007D06  6E05               	movwf	(lcdString@msg+1)^0,c
  3745   007D08  EC5F  F031         	call	_lcdString	;wreg free
  3746   007D0C                     l3475:
  3747                           
  3748                           ;output.c: 108:         if (getLanguage() == 2) {
  3749   007D0C  EC47  F02E         	call	_getLanguage	;wreg free
  3750   007D10  0A02               	xorlw	2
  3751   007D12  A4D8               	btfss	status,2,c
  3752   007D14  EF8E  F03E         	goto	u3191
  3753   007D18  EF90  F03E         	goto	u3190
  3754   007D1C                     u3191:
  3755   007D1C  EF96  F03E         	goto	l3479
  3756   007D20                     u3190:
  3757   007D20                     
  3758                           ;output.c: 109:             lcdString("Francaise       ");
  3759   007D20  0ED0               	movlw	low STR_40
  3760   007D22  6E04               	movwf	lcdString@msg^0,c
  3761   007D24  0E7D               	movlw	high STR_40
  3762   007D26  6E05               	movwf	(lcdString@msg+1)^0,c
  3763   007D28  EC5F  F031         	call	_lcdString	;wreg free
  3764   007D2C                     l3479:
  3765                           
  3766                           ;output.c: 111:         if (getLanguage() == 3) {
  3767   007D2C  EC47  F02E         	call	_getLanguage	;wreg free
  3768   007D30  0A03               	xorlw	3
  3769   007D32  A4D8               	btfss	status,2,c
  3770   007D34  EF9E  F03E         	goto	u3201
  3771   007D38  EFA0  F03E         	goto	u3200
  3772   007D3C                     u3201:
  3773   007D3C  EFA6  F03E         	goto	l3483
  3774   007D40                     u3200:
  3775   007D40                     
  3776                           ;output.c: 112:             lcdString("Espanol         ");
  3777   007D40  0EBF               	movlw	low STR_41
  3778   007D42  6E04               	movwf	lcdString@msg^0,c
  3779   007D44  0E7D               	movlw	high STR_41
  3780   007D46  6E05               	movwf	(lcdString@msg+1)^0,c
  3781   007D48  EC5F  F031         	call	_lcdString	;wreg free
  3782   007D4C                     l3483:
  3783                           
  3784                           ;output.c: 116:     if (numTela == STATE_OVER_LIMIT) {
  3785   007D4C  0E06               	movlw	6
  3786   007D4E  1819               	xorwf	outputPrint@numTela^0,w,c
  3787   007D50  101A               	iorwf	(outputPrint@numTela+1)^0,w,c
  3788   007D52  A4D8               	btfss	status,2,c
  3789   007D54  EFAE  F03E         	goto	u3211
  3790   007D58  EFB0  F03E         	goto	u3210
  3791   007D5C                     u3211:
  3792   007D5C  EFCD  F03E         	goto	l559
  3793   007D60                     u3210:
  3794   007D60                     
  3795                           ;output.c: 117:         lcdCommand(0x80);
  3796   007D60  0E80               	movlw	128
  3797   007D62  ECED  F030         	call	_lcdCommand
  3798   007D66                     
  3799                           ;output.c: 118:         lcdString(msgs[numTela][idioma]);
  3800   007D66  501B               	movf	outputPrint@idioma^0,w,c
  3801   007D68  0D02               	mullw	2
  3802   007D6A  CFF3 F01D          	movff	prodl,??_outputPrint
  3803   007D6E  5019               	movf	outputPrint@numTela^0,w,c
  3804   007D70  0D08               	mullw	8
  3805   007D72  50F3               	movf	243,w,c
  3806   007D74  0F60               	addlw	low _msgs
  3807   007D76  241D               	addwf	??_outputPrint^0,w,c
  3808   007D78  6ED9               	movwf	fsr2l,c
  3809   007D7A  6ADA               	clrf	fsr2h,c
  3810   007D7C  CFDE F004          	movff	postinc2,lcdString@msg
  3811   007D80  CFDD F005          	movff	postdec2,lcdString@msg+1
  3812   007D84  EC5F  F031         	call	_lcdString	;wreg free
  3813   007D88                     
  3814                           ;output.c: 119:         lcdCommand(0xC0);
  3815   007D88  0EC0               	movlw	192
  3816   007D8A  ECED  F030         	call	_lcdCommand
  3817   007D8E                     
  3818                           ;output.c: 120:         lcdString("                ");
  3819   007D8E  0E9D               	movlw	low STR_42
  3820   007D90  6E04               	movwf	lcdString@msg^0,c
  3821   007D92  0E7D               	movlw	high STR_42
  3822   007D94  6E05               	movwf	(lcdString@msg+1)^0,c
  3823   007D96  EC5F  F031         	call	_lcdString	;wreg free
  3824   007D9A                     l559:
  3825   007D9A  0012               	return		;funcret
  3826   007D9C                     __end_of_outputPrint:
  3827                           	callstack 0
  3828                           
  3829 ;; *************** function _lcdString *****************
  3830 ;; Defined at:
  3831 ;;		line 151 in file "lcd.c"
  3832 ;; Parameters:    Size  Location     Type
  3833 ;;  msg             2    3[COMRAM] PTR unsigned char 
  3834 ;;		 -> STR_42(17), STR_41(17), STR_40(17), STR_39(17), 
  3835 ;;		 -> STR_38(17), STR_37(7), STR_36(7), STR_35(9), 
  3836 ;;		 -> STR_34(9), STR_33(9), STR_32(17), STR_31(17), 
  3837 ;;		 -> STR_30(17), STR_29(17), STR_28(17), STR_27(17), 
  3838 ;;		 -> STR_26(17), STR_25(17), STR_24(17), STR_23(17), 
  3839 ;;		 -> STR_22(17), STR_21(17), STR_20(17), STR_19(17), 
  3840 ;;		 -> STR_18(17), STR_17(17), STR_16(17), STR_15(17), 
  3841 ;;		 -> STR_14(17), STR_13(17), STR_12(17), STR_11(17), 
  3842 ;;		 -> STR_10(17), STR_9(17), STR_8(17), STR_7(17), 
  3843 ;;		 -> STR_6(17), STR_5(17), 
  3844 ;; Auto vars:     Size  Location     Type
  3845 ;;  i               2    7[COMRAM] int 
  3846 ;; Return value:  Size  Location     Type
  3847 ;;                  1    wreg      void 
  3848 ;; Registers used:
  3849 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3850 ;; Tracked objects:
  3851 ;;		On entry : 0/0
  3852 ;;		On exit  : 0/0
  3853 ;;		Unchanged: 0/0
  3854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3855 ;;      Params:         2       0       0       0       0       0       0       0       0
  3856 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3857 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3858 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3859 ;;Total ram usage:        6 bytes
  3860 ;; Hardware stack levels used: 1
  3861 ;; Hardware stack levels required when called: 3
  3862 ;; This function calls:
  3863 ;;		_lcdData
  3864 ;; This function is called by:
  3865 ;;		_outputPrint
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869                           	psect	text14
  3870   0062BE                     __ptext14:
  3871                           	callstack 0
  3872   0062BE                     _lcdString:
  3873                           	callstack 25
  3874   0062BE                     
  3875                           ;lcd.c: 151: void lcdString(char msg[]);lcd.c: 152: {;lcd.c: 153:     int i=0;
  3876   0062BE  0E00               	movlw	0
  3877   0062C0  6E09               	movwf	(lcdString@i+1)^0,c
  3878   0062C2  0E00               	movlw	0
  3879   0062C4  6E08               	movwf	lcdString@i^0,c
  3880                           
  3881                           ;lcd.c: 154:     while(msg[i] != 0)
  3882   0062C6  EF75  F031         	goto	l3065
  3883   0062CA                     l3061:
  3884                           
  3885                           ;lcd.c: 155:     {;lcd.c: 156:         lcdData(msg[i]);
  3886   0062CA  5008               	movf	lcdString@i^0,w,c
  3887   0062CC  2404               	addwf	lcdString@msg^0,w,c
  3888   0062CE  6E06               	movwf	??_lcdString^0,c
  3889   0062D0  5009               	movf	(lcdString@i+1)^0,w,c
  3890   0062D2  2005               	addwfc	(lcdString@msg+1)^0,w,c
  3891   0062D4  6E07               	movwf	(??_lcdString+1)^0,c
  3892   0062D6  C006  FFF6         	movff	??_lcdString,tblptrl
  3893   0062DA  C007  FFF7         	movff	??_lcdString+1,tblptrh
  3894   0062DE                     	if	0	;tblptru may be non-zero
  3895   0062DE                     	endif
  3896   0062DE                     	if	0	;tblptru may be non-zero
  3897   0062DE                     	endif
  3898   0062DE  0008               	tblrd		*
  3899   0062E0  50F5               	movf	tablat,w,c
  3900   0062E2  ECB8  F02E         	call	_lcdData
  3901   0062E6                     
  3902                           ;lcd.c: 157:         i++;
  3903   0062E6  4A08               	infsnz	lcdString@i^0,f,c
  3904   0062E8  2A09               	incf	(lcdString@i+1)^0,f,c
  3905   0062EA                     l3065:
  3906                           
  3907                           ;lcd.c: 154:     while(msg[i] != 0)
  3908   0062EA  5008               	movf	lcdString@i^0,w,c
  3909   0062EC  2404               	addwf	lcdString@msg^0,w,c
  3910   0062EE  6E06               	movwf	??_lcdString^0,c
  3911   0062F0  5009               	movf	(lcdString@i+1)^0,w,c
  3912   0062F2  2005               	addwfc	(lcdString@msg+1)^0,w,c
  3913   0062F4  6E07               	movwf	(??_lcdString+1)^0,c
  3914   0062F6  C006  FFF6         	movff	??_lcdString,tblptrl
  3915   0062FA  C007  FFF7         	movff	??_lcdString+1,tblptrh
  3916   0062FE                     	if	0	;tblptru may be non-zero
  3917   0062FE                     	endif
  3918   0062FE                     	if	0	;tblptru may be non-zero
  3919   0062FE                     	endif
  3920   0062FE  0008               	tblrd		*
  3921   006300  50F5               	movf	tablat,w,c
  3922   006302  0900               	iorlw	0
  3923   006304  A4D8               	btfss	status,2,c
  3924   006306  EF87  F031         	goto	u2831
  3925   00630A  EF89  F031         	goto	u2830
  3926   00630E                     u2831:
  3927   00630E  EF65  F031         	goto	l3061
  3928   006312                     u2830:
  3929   006312  0012               	return		;funcret
  3930   006314                     __end_of_lcdString:
  3931                           	callstack 0
  3932                           
  3933 ;; *************** function _lcdInt *****************
  3934 ;; Defined at:
  3935 ;;		line 161 in file "lcd.c"
  3936 ;; Parameters:    Size  Location     Type
  3937 ;;  val             2   22[COMRAM] int 
  3938 ;; Auto vars:     Size  Location     Type
  3939 ;;		None
  3940 ;; Return value:  Size  Location     Type
  3941 ;;                  1    wreg      void 
  3942 ;; Registers used:
  3943 ;;		wreg, status,2, status,0, cstack
  3944 ;; Tracked objects:
  3945 ;;		On entry : 0/0
  3946 ;;		On exit  : 0/0
  3947 ;;		Unchanged: 0/0
  3948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3949 ;;      Params:         2       0       0       0       0       0       0       0       0
  3950 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3951 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3952 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3953 ;;Total ram usage:        2 bytes
  3954 ;; Hardware stack levels used: 1
  3955 ;; Hardware stack levels required when called: 3
  3956 ;; This function calls:
  3957 ;;		___awdiv
  3958 ;;		___awmod
  3959 ;;		_lcdData
  3960 ;; This function is called by:
  3961 ;;		_outputPrint
  3962 ;; This function uses a non-reentrant model
  3963 ;;
  3964                           
  3965                           	psect	text15
  3966   00678E                     __ptext15:
  3967                           	callstack 0
  3968   00678E                     _lcdInt:
  3969                           	callstack 25
  3970   00678E                     
  3971                           ;lcd.c: 162:     if (val < 0) {
  3972   00678E  BE18               	btfsc	(lcdInt@val+1)^0,7,c
  3973   006790  EFCE  F033         	goto	u2840
  3974   006794  EFCC  F033         	goto	u2841
  3975   006798                     u2841:
  3976   006798  EFD5  F033         	goto	l3073
  3977   00679C                     u2840:
  3978   00679C                     
  3979                           ;lcd.c: 163:         val = val * (-1);
  3980   00679C  6C17               	negf	lcdInt@val^0,c
  3981   00679E  1E18               	comf	(lcdInt@val+1)^0,f,c
  3982   0067A0  B0D8               	btfsc	status,0,c
  3983   0067A2  2A18               	incf	(lcdInt@val+1)^0,f,c
  3984   0067A4                     
  3985                           ;lcd.c: 164:         lcdData('-');
  3986   0067A4  0E2D               	movlw	45
  3987   0067A6  ECB8  F02E         	call	_lcdData
  3988   0067AA                     l3073:
  3989                           
  3990                           ;lcd.c: 166:     lcdData((val / 10000) % 10 + 48);
  3991   0067AA  0E27               	movlw	39
  3992   0067AC  6E04               	movwf	(___awdiv@divisor+1)^0,c
  3993   0067AE  0E10               	movlw	16
  3994   0067B0  6E03               	movwf	___awdiv@divisor^0,c
  3995   0067B2  C017  F001         	movff	lcdInt@val,___awdiv@dividend
  3996   0067B6  C018  F002         	movff	lcdInt@val+1,___awdiv@dividend+1
  3997   0067BA  EC65  F033         	call	___awdiv	;wreg free
  3998   0067BE  C001  F009         	movff	?___awdiv,___awmod@dividend
  3999   0067C2  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  4000   0067C6  0E00               	movlw	0
  4001   0067C8  6E0C               	movwf	(___awmod@divisor+1)^0,c
  4002   0067CA  0E0A               	movlw	10
  4003   0067CC  6E0B               	movwf	___awmod@divisor^0,c
  4004   0067CE  EC0D  F033         	call	___awmod	;wreg free
  4005   0067D2  5009               	movf	?___awmod^0,w,c
  4006   0067D4  0F30               	addlw	48
  4007   0067D6  ECB8  F02E         	call	_lcdData
  4008   0067DA                     
  4009                           ;lcd.c: 167:     lcdData((val / 1000) % 10 + 48);
  4010   0067DA  0E03               	movlw	3
  4011   0067DC  6E04               	movwf	(___awdiv@divisor+1)^0,c
  4012   0067DE  0EE8               	movlw	232
  4013   0067E0  6E03               	movwf	___awdiv@divisor^0,c
  4014   0067E2  C017  F001         	movff	lcdInt@val,___awdiv@dividend
  4015   0067E6  C018  F002         	movff	lcdInt@val+1,___awdiv@dividend+1
  4016   0067EA  EC65  F033         	call	___awdiv	;wreg free
  4017   0067EE  C001  F009         	movff	?___awdiv,___awmod@dividend
  4018   0067F2  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  4019   0067F6  0E00               	movlw	0
  4020   0067F8  6E0C               	movwf	(___awmod@divisor+1)^0,c
  4021   0067FA  0E0A               	movlw	10
  4022   0067FC  6E0B               	movwf	___awmod@divisor^0,c
  4023   0067FE  EC0D  F033         	call	___awmod	;wreg free
  4024   006802  5009               	movf	?___awmod^0,w,c
  4025   006804  0F30               	addlw	48
  4026   006806  ECB8  F02E         	call	_lcdData
  4027   00680A                     
  4028                           ;lcd.c: 168:     lcdData((val / 100) % 10 + 48);
  4029   00680A  0E00               	movlw	0
  4030   00680C  6E04               	movwf	(___awdiv@divisor+1)^0,c
  4031   00680E  0E64               	movlw	100
  4032   006810  6E03               	movwf	___awdiv@divisor^0,c
  4033   006812  C017  F001         	movff	lcdInt@val,___awdiv@dividend
  4034   006816  C018  F002         	movff	lcdInt@val+1,___awdiv@dividend+1
  4035   00681A  EC65  F033         	call	___awdiv	;wreg free
  4036   00681E  C001  F009         	movff	?___awdiv,___awmod@dividend
  4037   006822  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  4038   006826  0E00               	movlw	0
  4039   006828  6E0C               	movwf	(___awmod@divisor+1)^0,c
  4040   00682A  0E0A               	movlw	10
  4041   00682C  6E0B               	movwf	___awmod@divisor^0,c
  4042   00682E  EC0D  F033         	call	___awmod	;wreg free
  4043   006832  5009               	movf	?___awmod^0,w,c
  4044   006834  0F30               	addlw	48
  4045   006836  ECB8  F02E         	call	_lcdData
  4046   00683A                     
  4047                           ;lcd.c: 169:     lcdData((val / 10) % 10 + 48);
  4048   00683A  0E00               	movlw	0
  4049   00683C  6E04               	movwf	(___awdiv@divisor+1)^0,c
  4050   00683E  0E0A               	movlw	10
  4051   006840  6E03               	movwf	___awdiv@divisor^0,c
  4052   006842  C017  F001         	movff	lcdInt@val,___awdiv@dividend
  4053   006846  C018  F002         	movff	lcdInt@val+1,___awdiv@dividend+1
  4054   00684A  EC65  F033         	call	___awdiv	;wreg free
  4055   00684E  C001  F009         	movff	?___awdiv,___awmod@dividend
  4056   006852  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  4057   006856  0E00               	movlw	0
  4058   006858  6E0C               	movwf	(___awmod@divisor+1)^0,c
  4059   00685A  0E0A               	movlw	10
  4060   00685C  6E0B               	movwf	___awmod@divisor^0,c
  4061   00685E  EC0D  F033         	call	___awmod	;wreg free
  4062   006862  5009               	movf	?___awmod^0,w,c
  4063   006864  0F30               	addlw	48
  4064   006866  ECB8  F02E         	call	_lcdData
  4065   00686A                     
  4066                           ;lcd.c: 170:     lcdData((val / 1) % 10 + 48);
  4067   00686A  C017  F009         	movff	lcdInt@val,___awmod@dividend
  4068   00686E  C018  F00A         	movff	lcdInt@val+1,___awmod@dividend+1
  4069   006872  0E00               	movlw	0
  4070   006874  6E0C               	movwf	(___awmod@divisor+1)^0,c
  4071   006876  0E0A               	movlw	10
  4072   006878  6E0B               	movwf	___awmod@divisor^0,c
  4073   00687A  EC0D  F033         	call	___awmod	;wreg free
  4074   00687E  5009               	movf	?___awmod^0,w,c
  4075   006880  0F30               	addlw	48
  4076   006882  ECB8  F02E         	call	_lcdData
  4077   006886  0012               	return		;funcret
  4078   006888                     __end_of_lcdInt:
  4079                           	callstack 0
  4080                           
  4081 ;; *************** function _lcdData *****************
  4082 ;; Defined at:
  4083 ;;		line 102 in file "lcd.c"
  4084 ;; Parameters:    Size  Location     Type
  4085 ;;  valor           1    wreg     unsigned char 
  4086 ;; Auto vars:     Size  Location     Type
  4087 ;;  valor           1    2[COMRAM] unsigned char 
  4088 ;; Return value:  Size  Location     Type
  4089 ;;                  1    wreg      void 
  4090 ;; Registers used:
  4091 ;;		wreg, status,2, status,0, cstack
  4092 ;; Tracked objects:
  4093 ;;		On entry : 0/0
  4094 ;;		On exit  : 0/0
  4095 ;;		Unchanged: 0/0
  4096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4097 ;;      Params:         0       0       0       0       0       0       0       0       0
  4098 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4099 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4100 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4101 ;;Total ram usage:        1 bytes
  4102 ;; Hardware stack levels used: 1
  4103 ;; Hardware stack levels required when called: 2
  4104 ;; This function calls:
  4105 ;;		_Delay40us
  4106 ;;		_lcdCommand4bits
  4107 ;; This function is called by:
  4108 ;;		_lcdString
  4109 ;;		_lcdInt
  4110 ;;		_outputPrint
  4111 ;;		_lcd_write_string
  4112 ;; This function uses a non-reentrant model
  4113 ;;
  4114                           
  4115                           	psect	text16
  4116   005D70                     __ptext16:
  4117                           	callstack 0
  4118   005D70                     _lcdData:
  4119                           	callstack 25
  4120                           
  4121                           ;incstack = 0
  4122                           ;lcdData@valor stored from wreg
  4123   005D70  6E03               	movwf	lcdData@valor^0,c
  4124   005D72                     
  4125                           ;lcd.c: 103:     lcdCommand4bits(valor, 1);
  4126   005D72  0E01               	movlw	1
  4127   005D74  6E01               	movwf	lcdCommand4bits@data^0,c
  4128   005D76  5003               	movf	lcdData@valor^0,w,c
  4129   005D78  EC43  F032         	call	_lcdCommand4bits
  4130                           
  4131                           ;lcd.c: 104:     lcdCommand4bits(valor << 4, 1);
  4132   005D7C  0E01               	movlw	1
  4133   005D7E  6E01               	movwf	lcdCommand4bits@data^0,c
  4134   005D80  3803               	swapf	lcdData@valor^0,w,c
  4135   005D82  0BF0               	andlw	240
  4136   005D84  EC43  F032         	call	_lcdCommand4bits
  4137                           
  4138                           ;lcd.c: 107:     Delay40us();
  4139   005D88  EC85  F02E         	call	_Delay40us	;wreg free
  4140   005D8C  0012               	return		;funcret
  4141   005D8E                     __end_of_lcdData:
  4142                           	callstack 0
  4143                           
  4144 ;; *************** function ___awmod *****************
  4145 ;; Defined at:
  4146 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
  4147 ;; Parameters:    Size  Location     Type
  4148 ;;  dividend        2    8[COMRAM] int 
  4149 ;;  divisor         2   10[COMRAM] int 
  4150 ;; Auto vars:     Size  Location     Type
  4151 ;;  sign            1   13[COMRAM] unsigned char 
  4152 ;;  counter         1   12[COMRAM] unsigned char 
  4153 ;; Return value:  Size  Location     Type
  4154 ;;                  2    8[COMRAM] int 
  4155 ;; Registers used:
  4156 ;;		wreg, status,2, status,0
  4157 ;; Tracked objects:
  4158 ;;		On entry : 0/0
  4159 ;;		On exit  : 0/0
  4160 ;;		Unchanged: 0/0
  4161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4162 ;;      Params:         4       0       0       0       0       0       0       0       0
  4163 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4164 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4165 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4166 ;;Total ram usage:        6 bytes
  4167 ;; Hardware stack levels used: 1
  4168 ;; This function calls:
  4169 ;;		Nothing
  4170 ;; This function is called by:
  4171 ;;		_intToStr
  4172 ;;		_lcdInt
  4173 ;;		_outputPrint
  4174 ;;		_dec2bcd
  4175 ;; This function uses a non-reentrant model
  4176 ;;
  4177                           
  4178                           	psect	text17
  4179   00661A                     __ptext17:
  4180                           	callstack 0
  4181   00661A                     ___awmod:
  4182                           	callstack 27
  4183   00661A  0E00               	movlw	0
  4184   00661C  6E0E               	movwf	___awmod@sign^0,c
  4185   00661E  BE0A               	btfsc	(___awmod@dividend+1)^0,7,c
  4186   006620  EF16  F033         	goto	u2650
  4187   006624  EF14  F033         	goto	u2651
  4188   006628                     u2651:
  4189   006628  EF1C  F033         	goto	l2947
  4190   00662C                     u2650:
  4191   00662C  6C09               	negf	___awmod@dividend^0,c
  4192   00662E  1E0A               	comf	(___awmod@dividend+1)^0,f,c
  4193   006630  B0D8               	btfsc	status,0,c
  4194   006632  2A0A               	incf	(___awmod@dividend+1)^0,f,c
  4195   006634  0E01               	movlw	1
  4196   006636  6E0E               	movwf	___awmod@sign^0,c
  4197   006638                     l2947:
  4198   006638  BE0C               	btfsc	(___awmod@divisor+1)^0,7,c
  4199   00663A  EF23  F033         	goto	u2660
  4200   00663E  EF21  F033         	goto	u2661
  4201   006642                     u2661:
  4202   006642  EF27  F033         	goto	l2951
  4203   006646                     u2660:
  4204   006646  6C0B               	negf	___awmod@divisor^0,c
  4205   006648  1E0C               	comf	(___awmod@divisor+1)^0,f,c
  4206   00664A  B0D8               	btfsc	status,0,c
  4207   00664C  2A0C               	incf	(___awmod@divisor+1)^0,f,c
  4208   00664E                     l2951:
  4209   00664E  500B               	movf	___awmod@divisor^0,w,c
  4210   006650  100C               	iorwf	(___awmod@divisor+1)^0,w,c
  4211   006652  B4D8               	btfsc	status,2,c
  4212   006654  EF2E  F033         	goto	u2671
  4213   006658  EF30  F033         	goto	u2670
  4214   00665C                     u2671:
  4215   00665C  EF54  F033         	goto	l2967
  4216   006660                     u2670:
  4217   006660  0E01               	movlw	1
  4218   006662  6E0D               	movwf	___awmod@counter^0,c
  4219   006664  EF38  F033         	goto	l2957
  4220   006668                     l2955:
  4221   006668  90D8               	bcf	status,0,c
  4222   00666A  360B               	rlcf	___awmod@divisor^0,f,c
  4223   00666C  360C               	rlcf	(___awmod@divisor+1)^0,f,c
  4224   00666E  2A0D               	incf	___awmod@counter^0,f,c
  4225   006670                     l2957:
  4226   006670  AE0C               	btfss	(___awmod@divisor+1)^0,7,c
  4227   006672  EF3D  F033         	goto	u2681
  4228   006676  EF3F  F033         	goto	u2680
  4229   00667A                     u2681:
  4230   00667A  EF34  F033         	goto	l2955
  4231   00667E                     u2680:
  4232   00667E                     l2959:
  4233   00667E  500B               	movf	___awmod@divisor^0,w,c
  4234   006680  5C09               	subwf	___awmod@dividend^0,w,c
  4235   006682  500C               	movf	(___awmod@divisor+1)^0,w,c
  4236   006684  580A               	subwfb	(___awmod@dividend+1)^0,w,c
  4237   006686  A0D8               	btfss	status,0,c
  4238   006688  EF48  F033         	goto	u2691
  4239   00668C  EF4A  F033         	goto	u2690
  4240   006690                     u2691:
  4241   006690  EF4E  F033         	goto	l2963
  4242   006694                     u2690:
  4243   006694  500B               	movf	___awmod@divisor^0,w,c
  4244   006696  5E09               	subwf	___awmod@dividend^0,f,c
  4245   006698  500C               	movf	(___awmod@divisor+1)^0,w,c
  4246   00669A  5A0A               	subwfb	(___awmod@dividend+1)^0,f,c
  4247   00669C                     l2963:
  4248   00669C  90D8               	bcf	status,0,c
  4249   00669E  320C               	rrcf	(___awmod@divisor+1)^0,f,c
  4250   0066A0  320B               	rrcf	___awmod@divisor^0,f,c
  4251   0066A2  2E0D               	decfsz	___awmod@counter^0,f,c
  4252   0066A4  EF3F  F033         	goto	l2959
  4253   0066A8                     l2967:
  4254   0066A8  500E               	movf	___awmod@sign^0,w,c
  4255   0066AA  B4D8               	btfsc	status,2,c
  4256   0066AC  EF5A  F033         	goto	u2701
  4257   0066B0  EF5C  F033         	goto	u2700
  4258   0066B4                     u2701:
  4259   0066B4  EF60  F033         	goto	l2971
  4260   0066B8                     u2700:
  4261   0066B8  6C09               	negf	___awmod@dividend^0,c
  4262   0066BA  1E0A               	comf	(___awmod@dividend+1)^0,f,c
  4263   0066BC  B0D8               	btfsc	status,0,c
  4264   0066BE  2A0A               	incf	(___awmod@dividend+1)^0,f,c
  4265   0066C0                     l2971:
  4266   0066C0  C009  F009         	movff	___awmod@dividend,?___awmod
  4267   0066C4  C00A  F00A         	movff	___awmod@dividend+1,?___awmod+1
  4268   0066C8  0012               	return		;funcret
  4269   0066CA                     __end_of___awmod:
  4270                           	callstack 0
  4271                           
  4272 ;; *************** function ___awdiv *****************
  4273 ;; Defined at:
  4274 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awdiv.c"
  4275 ;; Parameters:    Size  Location     Type
  4276 ;;  dividend        2    0[COMRAM] int 
  4277 ;;  divisor         2    2[COMRAM] int 
  4278 ;; Auto vars:     Size  Location     Type
  4279 ;;  quotient        2    6[COMRAM] int 
  4280 ;;  sign            1    5[COMRAM] unsigned char 
  4281 ;;  counter         1    4[COMRAM] unsigned char 
  4282 ;; Return value:  Size  Location     Type
  4283 ;;                  2    0[COMRAM] int 
  4284 ;; Registers used:
  4285 ;;		wreg, status,2, status,0
  4286 ;; Tracked objects:
  4287 ;;		On entry : 0/0
  4288 ;;		On exit  : 0/0
  4289 ;;		Unchanged: 0/0
  4290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4291 ;;      Params:         4       0       0       0       0       0       0       0       0
  4292 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4293 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4294 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4295 ;;Total ram usage:        8 bytes
  4296 ;; Hardware stack levels used: 1
  4297 ;; This function calls:
  4298 ;;		Nothing
  4299 ;; This function is called by:
  4300 ;;		_intToStr
  4301 ;;		_lcdInt
  4302 ;;		_outputPrint
  4303 ;;		_dec2bcd
  4304 ;;		_bcd2dec
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           	psect	text18
  4309   0066CA                     __ptext18:
  4310                           	callstack 0
  4311   0066CA                     ___awdiv:
  4312                           	callstack 27
  4313   0066CA  0E00               	movlw	0
  4314   0066CC  6E06               	movwf	___awdiv@sign^0,c
  4315   0066CE  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  4316   0066D0  EF6E  F033         	goto	u2590
  4317   0066D4  EF6C  F033         	goto	u2591
  4318   0066D8                     u2591:
  4319   0066D8  EF74  F033         	goto	l2903
  4320   0066DC                     u2590:
  4321   0066DC  6C03               	negf	___awdiv@divisor^0,c
  4322   0066DE  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  4323   0066E0  B0D8               	btfsc	status,0,c
  4324   0066E2  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  4325   0066E4  0E01               	movlw	1
  4326   0066E6  6E06               	movwf	___awdiv@sign^0,c
  4327   0066E8                     l2903:
  4328   0066E8  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  4329   0066EA  EF7B  F033         	goto	u2600
  4330   0066EE  EF79  F033         	goto	u2601
  4331   0066F2                     u2601:
  4332   0066F2  EF81  F033         	goto	l2909
  4333   0066F6                     u2600:
  4334   0066F6  6C01               	negf	___awdiv@dividend^0,c
  4335   0066F8  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  4336   0066FA  B0D8               	btfsc	status,0,c
  4337   0066FC  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  4338   0066FE  0E01               	movlw	1
  4339   006700  1A06               	xorwf	___awdiv@sign^0,f,c
  4340   006702                     l2909:
  4341   006702  0E00               	movlw	0
  4342   006704  6E08               	movwf	(___awdiv@quotient+1)^0,c
  4343   006706  0E00               	movlw	0
  4344   006708  6E07               	movwf	___awdiv@quotient^0,c
  4345   00670A  5003               	movf	___awdiv@divisor^0,w,c
  4346   00670C  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  4347   00670E  B4D8               	btfsc	status,2,c
  4348   006710  EF8C  F033         	goto	u2611
  4349   006714  EF8E  F033         	goto	u2610
  4350   006718                     u2611:
  4351   006718  EFB6  F033         	goto	l2931
  4352   00671C                     u2610:
  4353   00671C  0E01               	movlw	1
  4354   00671E  6E05               	movwf	___awdiv@counter^0,c
  4355   006720  EF96  F033         	goto	l2917
  4356   006724                     l2915:
  4357   006724  90D8               	bcf	status,0,c
  4358   006726  3603               	rlcf	___awdiv@divisor^0,f,c
  4359   006728  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  4360   00672A  2A05               	incf	___awdiv@counter^0,f,c
  4361   00672C                     l2917:
  4362   00672C  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  4363   00672E  EF9B  F033         	goto	u2621
  4364   006732  EF9D  F033         	goto	u2620
  4365   006736                     u2621:
  4366   006736  EF92  F033         	goto	l2915
  4367   00673A                     u2620:
  4368   00673A                     l2919:
  4369   00673A  90D8               	bcf	status,0,c
  4370   00673C  3607               	rlcf	___awdiv@quotient^0,f,c
  4371   00673E  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  4372   006740  5003               	movf	___awdiv@divisor^0,w,c
  4373   006742  5C01               	subwf	___awdiv@dividend^0,w,c
  4374   006744  5004               	movf	(___awdiv@divisor+1)^0,w,c
  4375   006746  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  4376   006748  A0D8               	btfss	status,0,c
  4377   00674A  EFA9  F033         	goto	u2631
  4378   00674E  EFAB  F033         	goto	u2630
  4379   006752                     u2631:
  4380   006752  EFB0  F033         	goto	l2927
  4381   006756                     u2630:
  4382   006756  5003               	movf	___awdiv@divisor^0,w,c
  4383   006758  5E01               	subwf	___awdiv@dividend^0,f,c
  4384   00675A  5004               	movf	(___awdiv@divisor+1)^0,w,c
  4385   00675C  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  4386   00675E  8007               	bsf	___awdiv@quotient^0,0,c
  4387   006760                     l2927:
  4388   006760  90D8               	bcf	status,0,c
  4389   006762  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  4390   006764  3203               	rrcf	___awdiv@divisor^0,f,c
  4391   006766  2E05               	decfsz	___awdiv@counter^0,f,c
  4392   006768  EF9D  F033         	goto	l2919
  4393   00676C                     l2931:
  4394   00676C  5006               	movf	___awdiv@sign^0,w,c
  4395   00676E  B4D8               	btfsc	status,2,c
  4396   006770  EFBC  F033         	goto	u2641
  4397   006774  EFBE  F033         	goto	u2640
  4398   006778                     u2641:
  4399   006778  EFC2  F033         	goto	l2935
  4400   00677C                     u2640:
  4401   00677C  6C07               	negf	___awdiv@quotient^0,c
  4402   00677E  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  4403   006780  B0D8               	btfsc	status,0,c
  4404   006782  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  4405   006784                     l2935:
  4406   006784  C007  F001         	movff	___awdiv@quotient,?___awdiv
  4407   006788  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  4408   00678C  0012               	return		;funcret
  4409   00678E                     __end_of___awdiv:
  4410                           	callstack 0
  4411                           
  4412 ;; *************** function _getSEC *****************
  4413 ;; Defined at:
  4414 ;;		line 44 in file "var.c"
  4415 ;; Parameters:    Size  Location     Type
  4416 ;;		None
  4417 ;; Auto vars:     Size  Location     Type
  4418 ;;		None
  4419 ;; Return value:  Size  Location     Type
  4420 ;;                  1    wreg      unsigned char 
  4421 ;; Registers used:
  4422 ;;		wreg, status,2, status,0, cstack
  4423 ;; Tracked objects:
  4424 ;;		On entry : 0/0
  4425 ;;		On exit  : 0/0
  4426 ;;		Unchanged: 0/0
  4427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4428 ;;      Params:         0       0       0       0       0       0       0       0       0
  4429 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4430 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4431 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4432 ;;Total ram usage:        0 bytes
  4433 ;; Hardware stack levels used: 1
  4434 ;; Hardware stack levels required when called: 5
  4435 ;; This function calls:
  4436 ;;		_dsReadData
  4437 ;; This function is called by:
  4438 ;;		_smLoop
  4439 ;;		_outputPrint
  4440 ;; This function uses a non-reentrant model
  4441 ;;
  4442                           
  4443                           	psect	text19
  4444   005CAE                     __ptext19:
  4445                           	callstack 0
  4446   005CAE                     _getSEC:
  4447                           	callstack 23
  4448   005CAE                     
  4449                           ;var.c: 45:     return dsReadData(0);
  4450   005CAE  0E00               	movlw	0
  4451   005CB0  6E0F               	movwf	(dsReadData@address+1)^0,c
  4452   005CB2  0E00               	movlw	0
  4453   005CB4  6E0E               	movwf	dsReadData@address^0,c
  4454   005CB6  ECCA  F030         	call	_dsReadData	;wreg free
  4455   005CBA  500E               	movf	?_dsReadData^0,w,c
  4456   005CBC  0012               	return		;funcret
  4457   005CBE                     __end_of_getSEC:
  4458                           	callstack 0
  4459                           
  4460 ;; *************** function _getMIN *****************
  4461 ;; Defined at:
  4462 ;;		line 48 in file "var.c"
  4463 ;; Parameters:    Size  Location     Type
  4464 ;;		None
  4465 ;; Auto vars:     Size  Location     Type
  4466 ;;		None
  4467 ;; Return value:  Size  Location     Type
  4468 ;;                  1    wreg      unsigned char 
  4469 ;; Registers used:
  4470 ;;		wreg, status,2, status,0, cstack
  4471 ;; Tracked objects:
  4472 ;;		On entry : 0/0
  4473 ;;		On exit  : 0/0
  4474 ;;		Unchanged: 0/0
  4475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4476 ;;      Params:         0       0       0       0       0       0       0       0       0
  4477 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4478 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4479 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4480 ;;Total ram usage:        0 bytes
  4481 ;; Hardware stack levels used: 1
  4482 ;; Hardware stack levels required when called: 5
  4483 ;; This function calls:
  4484 ;;		_dsReadData
  4485 ;; This function is called by:
  4486 ;;		_smLoop
  4487 ;;		_outputPrint
  4488 ;; This function uses a non-reentrant model
  4489 ;;
  4490                           
  4491                           	psect	text20
  4492   005C9E                     __ptext20:
  4493                           	callstack 0
  4494   005C9E                     _getMIN:
  4495                           	callstack 23
  4496   005C9E                     
  4497                           ;var.c: 49:     return dsReadData(1);
  4498   005C9E  0E00               	movlw	0
  4499   005CA0  6E0F               	movwf	(dsReadData@address+1)^0,c
  4500   005CA2  0E01               	movlw	1
  4501   005CA4  6E0E               	movwf	dsReadData@address^0,c
  4502   005CA6  ECCA  F030         	call	_dsReadData	;wreg free
  4503   005CAA  500E               	movf	?_dsReadData^0,w,c
  4504   005CAC  0012               	return		;funcret
  4505   005CAE                     __end_of_getMIN:
  4506                           	callstack 0
  4507                           
  4508 ;; *************** function _getLevel *****************
  4509 ;; Defined at:
  4510 ;;		line 27 in file "var.c"
  4511 ;; Parameters:    Size  Location     Type
  4512 ;;		None
  4513 ;; Auto vars:     Size  Location     Type
  4514 ;;		None
  4515 ;; Return value:  Size  Location     Type
  4516 ;;                  2    0[COMRAM] int 
  4517 ;; Registers used:
  4518 ;;		None
  4519 ;; Tracked objects:
  4520 ;;		On entry : 0/0
  4521 ;;		On exit  : 0/0
  4522 ;;		Unchanged: 0/0
  4523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4524 ;;      Params:         2       0       0       0       0       0       0       0       0
  4525 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4526 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4527 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4528 ;;Total ram usage:        2 bytes
  4529 ;; Hardware stack levels used: 1
  4530 ;; This function calls:
  4531 ;;		Nothing
  4532 ;; This function is called by:
  4533 ;;		_smLoop
  4534 ;;		_outputPrint
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           	psect	text21
  4539   005C66                     __ptext21:
  4540                           	callstack 0
  4541   005C66                     _getLevel:
  4542                           	callstack 28
  4543   005C66                     
  4544                           ;var.c: 28:     return level;
  4545   005C66  C03F  F001         	movff	_level@var$F528,?_getLevel
  4546   005C6A  C040  F002         	movff	_level@var$F528+1,?_getLevel+1
  4547   005C6E  0012               	return		;funcret
  4548   005C70                     __end_of_getLevel:
  4549                           	callstack 0
  4550                           
  4551 ;; *************** function _getLanguage *****************
  4552 ;; Defined at:
  4553 ;;		line 104 in file "var.c"
  4554 ;; Parameters:    Size  Location     Type
  4555 ;;		None
  4556 ;; Auto vars:     Size  Location     Type
  4557 ;;		None
  4558 ;; Return value:  Size  Location     Type
  4559 ;;                  1    wreg      unsigned char 
  4560 ;; Registers used:
  4561 ;;		wreg, status,2, status,0, cstack
  4562 ;; Tracked objects:
  4563 ;;		On entry : 0/0
  4564 ;;		On exit  : 0/0
  4565 ;;		Unchanged: 0/0
  4566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4567 ;;      Params:         0       0       0       0       0       0       0       0       0
  4568 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4569 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4570 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4571 ;;Total ram usage:        0 bytes
  4572 ;; Hardware stack levels used: 1
  4573 ;; Hardware stack levels required when called: 5
  4574 ;; This function calls:
  4575 ;;		_dsReadData
  4576 ;; This function is called by:
  4577 ;;		_smLoop
  4578 ;;		_outputPrint
  4579 ;;		_varInit
  4580 ;; This function uses a non-reentrant model
  4581 ;;
  4582                           
  4583                           	psect	text22
  4584   005C8E                     __ptext22:
  4585                           	callstack 0
  4586   005C8E                     _getLanguage:
  4587                           	callstack 24
  4588   005C8E                     
  4589                           ;var.c: 105:     return dsReadData(0x26);
  4590   005C8E  0E00               	movlw	0
  4591   005C90  6E0F               	movwf	(dsReadData@address+1)^0,c
  4592   005C92  0E26               	movlw	38
  4593   005C94  6E0E               	movwf	dsReadData@address^0,c
  4594   005C96  ECCA  F030         	call	_dsReadData	;wreg free
  4595   005C9A  500E               	movf	?_dsReadData^0,w,c
  4596   005C9C  0012               	return		;funcret
  4597   005C9E                     __end_of_getLanguage:
  4598                           	callstack 0
  4599                           
  4600 ;; *************** function _getHOUR *****************
  4601 ;; Defined at:
  4602 ;;		line 52 in file "var.c"
  4603 ;; Parameters:    Size  Location     Type
  4604 ;;		None
  4605 ;; Auto vars:     Size  Location     Type
  4606 ;;		None
  4607 ;; Return value:  Size  Location     Type
  4608 ;;                  1    wreg      unsigned char 
  4609 ;; Registers used:
  4610 ;;		wreg, status,2, status,0, cstack
  4611 ;; Tracked objects:
  4612 ;;		On entry : 0/0
  4613 ;;		On exit  : 0/0
  4614 ;;		Unchanged: 0/0
  4615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4616 ;;      Params:         0       0       0       0       0       0       0       0       0
  4617 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4618 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4619 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4620 ;;Total ram usage:        0 bytes
  4621 ;; Hardware stack levels used: 1
  4622 ;; Hardware stack levels required when called: 5
  4623 ;; This function calls:
  4624 ;;		_dsReadData
  4625 ;; This function is called by:
  4626 ;;		_smLoop
  4627 ;;		_outputPrint
  4628 ;; This function uses a non-reentrant model
  4629 ;;
  4630                           
  4631                           	psect	text23
  4632   005C7E                     __ptext23:
  4633                           	callstack 0
  4634   005C7E                     _getHOUR:
  4635                           	callstack 23
  4636   005C7E                     
  4637                           ;var.c: 53:     return dsReadData(2);
  4638   005C7E  0E00               	movlw	0
  4639   005C80  6E0F               	movwf	(dsReadData@address+1)^0,c
  4640   005C82  0E02               	movlw	2
  4641   005C84  6E0E               	movwf	dsReadData@address^0,c
  4642   005C86  ECCA  F030         	call	_dsReadData	;wreg free
  4643   005C8A  500E               	movf	?_dsReadData^0,w,c
  4644   005C8C  0012               	return		;funcret
  4645   005C8E                     __end_of_getHOUR:
  4646                           	callstack 0
  4647                           
  4648 ;; *************** function _getAlarmUpperLevel *****************
  4649 ;; Defined at:
  4650 ;;		line 74 in file "var.c"
  4651 ;; Parameters:    Size  Location     Type
  4652 ;;		None
  4653 ;; Auto vars:     Size  Location     Type
  4654 ;;		None
  4655 ;; Return value:  Size  Location     Type
  4656 ;;                  2   18[COMRAM] int 
  4657 ;; Registers used:
  4658 ;;		wreg, status,2, status,0, cstack
  4659 ;; Tracked objects:
  4660 ;;		On entry : 0/0
  4661 ;;		On exit  : 0/0
  4662 ;;		Unchanged: 0/0
  4663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4664 ;;      Params:         2       0       0       0       0       0       0       0       0
  4665 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4666 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4667 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4668 ;;Total ram usage:        4 bytes
  4669 ;; Hardware stack levels used: 1
  4670 ;; Hardware stack levels required when called: 5
  4671 ;; This function calls:
  4672 ;;		_dsReadData
  4673 ;; This function is called by:
  4674 ;;		_smLoop
  4675 ;;		_outputPrint
  4676 ;; This function uses a non-reentrant model
  4677 ;;
  4678                           
  4679                           	psect	text24
  4680   0060D6                     __ptext24:
  4681                           	callstack 0
  4682   0060D6                     _getAlarmUpperLevel:
  4683                           	callstack 23
  4684   0060D6                     
  4685                           ;var.c: 75:     unsigned static char a, b;;var.c: 76:     a = dsReadData(0x22);
  4686   0060D6  0E00               	movlw	0
  4687   0060D8  6E0F               	movwf	(dsReadData@address+1)^0,c
  4688   0060DA  0E22               	movlw	34
  4689   0060DC  6E0E               	movwf	dsReadData@address^0,c
  4690   0060DE  ECCA  F030         	call	_dsReadData	;wreg free
  4691   0060E2  500E               	movf	?_dsReadData^0,w,c
  4692   0060E4  6E56               	movwf	getAlarmUpperLevel@a^0,c
  4693                           
  4694                           ;var.c: 77:     b = dsReadData(0x23);
  4695   0060E6  0E00               	movlw	0
  4696   0060E8  6E0F               	movwf	(dsReadData@address+1)^0,c
  4697   0060EA  0E23               	movlw	35
  4698   0060EC  6E0E               	movwf	dsReadData@address^0,c
  4699   0060EE  ECCA  F030         	call	_dsReadData	;wreg free
  4700   0060F2  500E               	movf	?_dsReadData^0,w,c
  4701   0060F4  6E55               	movwf	getAlarmUpperLevel@b^0,c
  4702   0060F6                     
  4703                           ;var.c: 78:     return (a << 8) | b;
  4704   0060F6  5055               	movf	getAlarmUpperLevel@b^0,w,c
  4705   0060F8  C056  F015         	movff	getAlarmUpperLevel@a,??_getAlarmUpperLevel
  4706   0060FC  6A16               	clrf	(??_getAlarmUpperLevel+1)^0,c
  4707   0060FE  C015  F016         	movff	??_getAlarmUpperLevel,??_getAlarmUpperLevel+1
  4708   006102  6A15               	clrf	??_getAlarmUpperLevel^0,c
  4709   006104  1015               	iorwf	??_getAlarmUpperLevel^0,w,c
  4710   006106  6E13               	movwf	?_getAlarmUpperLevel^0,c
  4711   006108  5016               	movf	(??_getAlarmUpperLevel+1)^0,w,c
  4712   00610A  6E14               	movwf	(?_getAlarmUpperLevel+1)^0,c
  4713   00610C  0012               	return		;funcret
  4714   00610E                     __end_of_getAlarmUpperLevel:
  4715                           	callstack 0
  4716                           
  4717 ;; *************** function _getAlarmLowerLevel *****************
  4718 ;; Defined at:
  4719 ;;		line 89 in file "var.c"
  4720 ;; Parameters:    Size  Location     Type
  4721 ;;		None
  4722 ;; Auto vars:     Size  Location     Type
  4723 ;;		None
  4724 ;; Return value:  Size  Location     Type
  4725 ;;                  2   18[COMRAM] int 
  4726 ;; Registers used:
  4727 ;;		wreg, status,2, status,0, cstack
  4728 ;; Tracked objects:
  4729 ;;		On entry : 0/0
  4730 ;;		On exit  : 0/0
  4731 ;;		Unchanged: 0/0
  4732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4733 ;;      Params:         2       0       0       0       0       0       0       0       0
  4734 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4735 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4736 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4737 ;;Total ram usage:        4 bytes
  4738 ;; Hardware stack levels used: 1
  4739 ;; Hardware stack levels required when called: 5
  4740 ;; This function calls:
  4741 ;;		_dsReadData
  4742 ;; This function is called by:
  4743 ;;		_smLoop
  4744 ;;		_outputPrint
  4745 ;; This function uses a non-reentrant model
  4746 ;;
  4747                           
  4748                           	psect	text25
  4749   00609E                     __ptext25:
  4750                           	callstack 0
  4751   00609E                     _getAlarmLowerLevel:
  4752                           	callstack 23
  4753   00609E                     
  4754                           ;var.c: 90:     unsigned static char a, b;;var.c: 91:     a = dsReadData(0x24);
  4755   00609E  0E00               	movlw	0
  4756   0060A0  6E0F               	movwf	(dsReadData@address+1)^0,c
  4757   0060A2  0E24               	movlw	36
  4758   0060A4  6E0E               	movwf	dsReadData@address^0,c
  4759   0060A6  ECCA  F030         	call	_dsReadData	;wreg free
  4760   0060AA  500E               	movf	?_dsReadData^0,w,c
  4761   0060AC  6E52               	movwf	getAlarmLowerLevel@a^0,c
  4762                           
  4763                           ;var.c: 92:     b = dsReadData(0x25);
  4764   0060AE  0E00               	movlw	0
  4765   0060B0  6E0F               	movwf	(dsReadData@address+1)^0,c
  4766   0060B2  0E25               	movlw	37
  4767   0060B4  6E0E               	movwf	dsReadData@address^0,c
  4768   0060B6  ECCA  F030         	call	_dsReadData	;wreg free
  4769   0060BA  500E               	movf	?_dsReadData^0,w,c
  4770   0060BC  6E51               	movwf	getAlarmLowerLevel@b^0,c
  4771   0060BE                     
  4772                           ;var.c: 93:     return (a << 8) | b;
  4773   0060BE  5051               	movf	getAlarmLowerLevel@b^0,w,c
  4774   0060C0  C052  F015         	movff	getAlarmLowerLevel@a,??_getAlarmLowerLevel
  4775   0060C4  6A16               	clrf	(??_getAlarmLowerLevel+1)^0,c
  4776   0060C6  C015  F016         	movff	??_getAlarmLowerLevel,??_getAlarmLowerLevel+1
  4777   0060CA  6A15               	clrf	??_getAlarmLowerLevel^0,c
  4778   0060CC  1015               	iorwf	??_getAlarmLowerLevel^0,w,c
  4779   0060CE  6E13               	movwf	?_getAlarmLowerLevel^0,c
  4780   0060D0  5016               	movf	(??_getAlarmLowerLevel+1)^0,w,c
  4781   0060D2  6E14               	movwf	(?_getAlarmLowerLevel+1)^0,c
  4782   0060D4  0012               	return		;funcret
  4783   0060D6                     __end_of_getAlarmLowerLevel:
  4784                           	callstack 0
  4785                           
  4786 ;; *************** function _dsReadData *****************
  4787 ;; Defined at:
  4788 ;;		line 31 in file "ds1307.c"
  4789 ;; Parameters:    Size  Location     Type
  4790 ;;  address         2   13[COMRAM] int 
  4791 ;; Auto vars:     Size  Location     Type
  4792 ;;  result          2   16[COMRAM] int 
  4793 ;; Return value:  Size  Location     Type
  4794 ;;                  2   13[COMRAM] int 
  4795 ;; Registers used:
  4796 ;;		wreg, status,2, status,0, cstack
  4797 ;; Tracked objects:
  4798 ;;		On entry : 0/0
  4799 ;;		On exit  : 0/0
  4800 ;;		Unchanged: 0/0
  4801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4802 ;;      Params:         2       0       0       0       0       0       0       0       0
  4803 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4804 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4805 ;;      Totals:         5       0       0       0       0       0       0       0       0
  4806 ;;Total ram usage:        5 bytes
  4807 ;; Hardware stack levels used: 1
  4808 ;; Hardware stack levels required when called: 4
  4809 ;; This function calls:
  4810 ;;		_i2cReadByte
  4811 ;;		_i2cWriteByte
  4812 ;; This function is called by:
  4813 ;;		_getSEC
  4814 ;;		_getMIN
  4815 ;;		_getHOUR
  4816 ;;		_getAlarmUpperLevel
  4817 ;;		_getAlarmLowerLevel
  4818 ;;		_getLanguage
  4819 ;;		_dsStartClock
  4820 ;; This function uses a non-reentrant model
  4821 ;;
  4822                           
  4823                           	psect	text26
  4824   006194                     __ptext26:
  4825                           	callstack 0
  4826   006194                     _dsReadData:
  4827                           	callstack 24
  4828   006194                     
  4829                           ;ds1307.c: 32:  int result;;ds1307.c: 33:  i2cWriteByte(1,0,(0x6f<<1) | 0);
  4830   006194  0E00               	movlw	0
  4831   006196  6E08               	movwf	i2cWriteByte@send_stop^0,c
  4832   006198  0EDE               	movlw	222
  4833   00619A  6E09               	movwf	i2cWriteByte@byte^0,c
  4834   00619C  0E01               	movlw	1
  4835   00619E  EC13  F032         	call	_i2cWriteByte
  4836                           
  4837                           ;ds1307.c: 34:  i2cWriteByte(0,0,address);
  4838   0061A2  0E00               	movlw	0
  4839   0061A4  6E08               	movwf	i2cWriteByte@send_stop^0,c
  4840   0061A6  C00E  F009         	movff	dsReadData@address,i2cWriteByte@byte
  4841   0061AA  0E00               	movlw	0
  4842   0061AC  EC13  F032         	call	_i2cWriteByte
  4843                           
  4844                           ;ds1307.c: 35:  i2cWriteByte(1,0, (0x6f<<1) | 1);
  4845   0061B0  0E00               	movlw	0
  4846   0061B2  6E08               	movwf	i2cWriteByte@send_stop^0,c
  4847   0061B4  0EDF               	movlw	223
  4848   0061B6  6E09               	movwf	i2cWriteByte@byte^0,c
  4849   0061B8  0E01               	movlw	1
  4850   0061BA  EC13  F032         	call	_i2cWriteByte
  4851                           
  4852                           ;ds1307.c: 36:  result = i2cReadByte(1,1 );
  4853   0061BE  0E01               	movlw	1
  4854   0061C0  6E08               	movwf	i2cReadByte@send_stop^0,c
  4855   0061C2  0E01               	movlw	1
  4856   0061C4  EC35  F031         	call	_i2cReadByte
  4857   0061C8  6E10               	movwf	??_dsReadData^0,c
  4858   0061CA  5010               	movf	??_dsReadData^0,w,c
  4859   0061CC  6E11               	movwf	dsReadData@result^0,c
  4860   0061CE  6A12               	clrf	(dsReadData@result+1)^0,c
  4861   0061D0                     
  4862                           ;ds1307.c: 37:  return result;
  4863   0061D0  C011  F00E         	movff	dsReadData@result,?_dsReadData
  4864   0061D4  C012  F00F         	movff	dsReadData@result+1,?_dsReadData+1
  4865   0061D8  0012               	return		;funcret
  4866   0061DA                     __end_of_dsReadData:
  4867                           	callstack 0
  4868                           
  4869 ;; *************** function _i2cReadByte *****************
  4870 ;; Defined at:
  4871 ;;		line 131 in file "i2c.c"
  4872 ;; Parameters:    Size  Location     Type
  4873 ;;  nack            1    wreg     unsigned char 
  4874 ;;  send_stop       1    7[COMRAM] unsigned char 
  4875 ;; Auto vars:     Size  Location     Type
  4876 ;;  nack            1    9[COMRAM] unsigned char 
  4877 ;;  bit             2   10[COMRAM] unsigned int 
  4878 ;;  byte            1   12[COMRAM] unsigned char 
  4879 ;; Return value:  Size  Location     Type
  4880 ;;                  1    wreg      unsigned char 
  4881 ;; Registers used:
  4882 ;;		wreg, status,2, status,0, cstack
  4883 ;; Tracked objects:
  4884 ;;		On entry : 0/0
  4885 ;;		On exit  : 0/0
  4886 ;;		Unchanged: 0/0
  4887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4888 ;;      Params:         1       0       0       0       0       0       0       0       0
  4889 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4890 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4891 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4892 ;;Total ram usage:        6 bytes
  4893 ;; Hardware stack levels used: 1
  4894 ;; Hardware stack levels required when called: 3
  4895 ;; This function calls:
  4896 ;;		_i2c_read_bit
  4897 ;;		_i2c_stop
  4898 ;;		_i2c_write_bit
  4899 ;; This function is called by:
  4900 ;;		_dsReadData
  4901 ;; This function uses a non-reentrant model
  4902 ;;
  4903                           
  4904                           	psect	text27
  4905   00626A                     __ptext27:
  4906                           	callstack 0
  4907   00626A                     _i2cReadByte:
  4908                           	callstack 24
  4909                           
  4910                           ;incstack = 0
  4911                           ;i2cReadByte@nack stored from wreg
  4912   00626A  6E0A               	movwf	i2cReadByte@nack^0,c
  4913   00626C                     
  4914                           ;i2c.c: 132:  unsigned char byte = 0;
  4915   00626C  0E00               	movlw	0
  4916   00626E  6E0D               	movwf	i2cReadByte@byte^0,c
  4917                           
  4918                           ;i2c.c: 133:  unsigned bit;;i2c.c: 134:  for (bit = 0; bit < 8; bit++) {
  4919   006270  0E00               	movlw	0
  4920   006272  6E0C               	movwf	(i2cReadByte@bit+1)^0,c
  4921   006274  0E00               	movlw	0
  4922   006276  6E0B               	movwf	i2cReadByte@bit^0,c
  4923   006278                     l2839:
  4924                           
  4925                           ;i2c.c: 135:   byte = (byte << 1) | i2c_read_bit();
  4926   006278  ECFE  F02F         	call	_i2c_read_bit	;wreg free
  4927   00627C  6E09               	movwf	??_i2cReadByte^0,c
  4928   00627E  500D               	movf	i2cReadByte@byte^0,w,c
  4929   006280  240D               	addwf	i2cReadByte@byte^0,w,c
  4930   006282  1009               	iorwf	??_i2cReadByte^0,w,c
  4931   006284  6E0D               	movwf	i2cReadByte@byte^0,c
  4932   006286                     
  4933                           ;i2c.c: 136:  }
  4934   006286  4A0B               	infsnz	i2cReadByte@bit^0,f,c
  4935   006288  2A0C               	incf	(i2cReadByte@bit+1)^0,f,c
  4936   00628A  500C               	movf	(i2cReadByte@bit+1)^0,w,c
  4937   00628C  E109               	bnz	u2540
  4938   00628E  0E08               	movlw	8
  4939   006290  5C0B               	subwf	i2cReadByte@bit^0,w,c
  4940   006292  A0D8               	btfss	status,0,c
  4941   006294  EF4E  F031         	goto	u2541
  4942   006298  EF50  F031         	goto	u2540
  4943   00629C                     u2541:
  4944   00629C  EF3C  F031         	goto	l2839
  4945   0062A0                     u2540:
  4946   0062A0                     
  4947                           ;i2c.c: 137:  i2c_write_bit(nack);
  4948   0062A0  500A               	movf	i2cReadByte@nack^0,w,c
  4949   0062A2  EC8A  F031         	call	_i2c_write_bit
  4950   0062A6                     
  4951                           ;i2c.c: 138:  if (send_stop) {
  4952   0062A6  5008               	movf	i2cReadByte@send_stop^0,w,c
  4953   0062A8  B4D8               	btfsc	status,2,c
  4954   0062AA  EF59  F031         	goto	u2551
  4955   0062AE  EF5B  F031         	goto	u2550
  4956   0062B2                     u2551:
  4957   0062B2  EF5D  F031         	goto	l2851
  4958   0062B6                     u2550:
  4959   0062B6                     
  4960                           ;i2c.c: 139:   i2c_stop();
  4961   0062B6  ECB9  F02F         	call	_i2c_stop	;wreg free
  4962   0062BA                     l2851:
  4963                           
  4964                           ;i2c.c: 141:  return byte;
  4965   0062BA  500D               	movf	i2cReadByte@byte^0,w,c
  4966   0062BC  0012               	return		;funcret
  4967   0062BE                     __end_of_i2cReadByte:
  4968                           	callstack 0
  4969                           
  4970 ;; *************** function _getState *****************
  4971 ;; Defined at:
  4972 ;;		line 36 in file "var.c"
  4973 ;; Parameters:    Size  Location     Type
  4974 ;;		None
  4975 ;; Auto vars:     Size  Location     Type
  4976 ;;		None
  4977 ;; Return value:  Size  Location     Type
  4978 ;;                  1    wreg      unsigned char 
  4979 ;; Registers used:
  4980 ;;		wreg, status,2
  4981 ;; Tracked objects:
  4982 ;;		On entry : 0/0
  4983 ;;		On exit  : 0/0
  4984 ;;		Unchanged: 0/0
  4985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4986 ;;      Params:         0       0       0       0       0       0       0       0       0
  4987 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4988 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4989 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4990 ;;Total ram usage:        0 bytes
  4991 ;; Hardware stack levels used: 1
  4992 ;; This function calls:
  4993 ;;		Nothing
  4994 ;; This function is called by:
  4995 ;;		_smLoop
  4996 ;; This function uses a non-reentrant model
  4997 ;;
  4998                           
  4999                           	psect	text28
  5000   005C3E                     __ptext28:
  5001                           	callstack 0
  5002   005C3E                     _getState:
  5003                           	callstack 29
  5004   005C3E                     
  5005                           ;var.c: 37:     return state;
  5006   005C3E  5058               	movf	_state^0,w,c
  5007   005C40  0012               	return		;funcret
  5008   005C42                     __end_of_getState:
  5009                           	callstack 0
  5010                           
  5011 ;; *************** function _eventRead *****************
  5012 ;; Defined at:
  5013 ;;		line 25 in file "event.c"
  5014 ;; Parameters:    Size  Location     Type
  5015 ;;		None
  5016 ;; Auto vars:     Size  Location     Type
  5017 ;;  i               1   34[COMRAM] unsigned char 
  5018 ;;  i               1   33[COMRAM] unsigned char 
  5019 ;;  i               1   32[COMRAM] unsigned char 
  5020 ;;  value           2   37[COMRAM] unsigned int 
  5021 ;;  key             2   35[COMRAM] int 
  5022 ;;  ev              2   30[COMRAM] int 
  5023 ;; Return value:  Size  Location     Type
  5024 ;;                  2   24[COMRAM] unsigned int 
  5025 ;; Registers used:
  5026 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5027 ;; Tracked objects:
  5028 ;;		On entry : 0/0
  5029 ;;		On exit  : 0/0
  5030 ;;		Unchanged: 0/0
  5031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5032 ;;      Params:         2       0       0       0       0       0       0       0       0
  5033 ;;      Locals:        11       0       0       0       0       0       0       0       0
  5034 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5035 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5036 ;;Total ram usage:       15 bytes
  5037 ;; Hardware stack levels used: 1
  5038 ;; Hardware stack levels required when called: 6
  5039 ;; This function calls:
  5040 ;;		___wmul
  5041 ;;		_kpRead
  5042 ;;		_pow10
  5043 ;;		_serialRead
  5044 ;;		_setAlarmLowerLevel
  5045 ;;		_setAlarmUpperLevel
  5046 ;;		_setHOUR
  5047 ;;		_setLanguage
  5048 ;;		_setMIN
  5049 ;;		_setSEC
  5050 ;; This function is called by:
  5051 ;;		_smLoop
  5052 ;; This function uses a non-reentrant model
  5053 ;;
  5054                           
  5055                           	psect	text29
  5056   006FE4                     __ptext29:
  5057                           	callstack 0
  5058   006FE4                     _eventRead:
  5059                           	callstack 23
  5060   006FE4                     
  5061                           ;event.c: 26:     int key;;event.c: 27:     int ev = EV_NOEVENT;
  5062   006FE4  0E00               	movlw	0
  5063   006FE6  6E20               	movwf	(eventRead@ev+1)^0,c
  5064   006FE8  0E05               	movlw	5
  5065   006FEA  6E1F               	movwf	eventRead@ev^0,c
  5066   006FEC                     
  5067                           ;event.c: 28:     key = kpRead();
  5068   006FEC  EC1D  F02E         	call	_kpRead	;wreg free
  5069   006FF0  6E1B               	movwf	??_eventRead^0,c
  5070   006FF2  501B               	movf	??_eventRead^0,w,c
  5071   006FF4  6E24               	movwf	eventRead@key^0,c
  5072   006FF6  6A25               	clrf	(eventRead@key+1)^0,c
  5073   006FF8                     
  5074                           ;event.c: 29:     if (key != key_ant) {
  5075   006FF8  504D               	movf	_key_ant^0,w,c
  5076   006FFA  1824               	xorwf	eventRead@key^0,w,c
  5077   006FFC  E109               	bnz	u2910
  5078   006FFE  504E               	movf	(_key_ant+1)^0,w,c
  5079   007000  1825               	xorwf	(eventRead@key+1)^0,w,c
  5080   007002  B4D8               	btfsc	status,2,c
  5081   007004  EF06  F038         	goto	u2911
  5082   007008  EF08  F038         	goto	u2910
  5083   00700C                     u2911:
  5084   00700C  EF29  F038         	goto	l3229
  5085   007010                     u2910:
  5086   007010                     
  5087                           ;event.c: 30:         if (((key) & (1<<(0)))) {
  5088   007010  A024               	btfss	eventRead@key^0,0,c
  5089   007012  EF0D  F038         	goto	u2921
  5090   007016  EF0F  F038         	goto	u2920
  5091   00701A                     u2921:
  5092   00701A  EF13  F038         	goto	l3221
  5093   00701E                     u2920:
  5094   00701E                     
  5095                           ;event.c: 31:             ev = EV_RIGHT;
  5096   00701E  0E00               	movlw	0
  5097   007020  6E20               	movwf	(eventRead@ev+1)^0,c
  5098   007022  0E03               	movlw	3
  5099   007024  6E1F               	movwf	eventRead@ev^0,c
  5100   007026                     l3221:
  5101                           
  5102                           ;event.c: 34:         if (((key) & (1<<(1)))) {
  5103   007026  A224               	btfss	eventRead@key^0,1,c
  5104   007028  EF18  F038         	goto	u2931
  5105   00702C  EF1A  F038         	goto	u2930
  5106   007030                     u2931:
  5107   007030  EF1E  F038         	goto	l3225
  5108   007034                     u2930:
  5109   007034                     
  5110                           ;event.c: 35:             ev = EV_LEFT;
  5111   007034  0E00               	movlw	0
  5112   007036  6E20               	movwf	(eventRead@ev+1)^0,c
  5113   007038  0E02               	movlw	2
  5114   00703A  6E1F               	movwf	eventRead@ev^0,c
  5115   00703C                     l3225:
  5116                           
  5117                           ;event.c: 38:         if (((key) & (1<<(2)))) {
  5118   00703C  A424               	btfss	eventRead@key^0,2,c
  5119   00703E  EF23  F038         	goto	u2941
  5120   007042  EF25  F038         	goto	u2940
  5121   007046                     u2941:
  5122   007046  EF29  F038         	goto	l3229
  5123   00704A                     u2940:
  5124   00704A                     
  5125                           ;event.c: 39:             ev = EV_ENTER;
  5126   00704A  0E00               	movlw	0
  5127   00704C  6E20               	movwf	(eventRead@ev+1)^0,c
  5128   00704E  0E04               	movlw	4
  5129   007050  6E1F               	movwf	eventRead@ev^0,c
  5130   007052                     l3229:
  5131                           
  5132                           ;event.c: 42:     key_ant = key;
  5133   007052  C024  F04D         	movff	eventRead@key,_key_ant
  5134   007056  C025  F04E         	movff	eventRead@key+1,_key_ant+1
  5135   00705A                     
  5136                           ;event.c: 45:     static unsigned char msg[6];;event.c: 46:     unsigned char static dat
      +                          a;;event.c: 47:     data = serialRead();
  5137   00705A  EC8C  F02F         	call	_serialRead	;wreg free
  5138   00705E  6E59               	movwf	eventRead@data^0,c
  5139   007060                     
  5140                           ;event.c: 48:     if (data != 0) {
  5141   007060  5059               	movf	eventRead@data^0,w,c
  5142   007062  B4D8               	btfsc	status,2,c
  5143   007064  EF36  F038         	goto	u2951
  5144   007068  EF38  F038         	goto	u2950
  5145   00706C                     u2951:
  5146   00706C  EF3F  F039         	goto	l3323
  5147   007070                     u2950:
  5148   007070                     
  5149                           ;event.c: 49:         if (reading_protocol) {
  5150   007070  505A               	movf	_reading_protocol^0,w,c
  5151   007072  B4D8               	btfsc	status,2,c
  5152   007074  EF3E  F038         	goto	u2961
  5153   007078  EF40  F038         	goto	u2960
  5154   00707C                     u2961:
  5155   00707C  EF49  F038         	goto	l3241
  5156   007080                     u2960:
  5157   007080                     
  5158                           ;event.c: 50:             msg[reading_protocol - 1] = data;
  5159   007080  505A               	movf	_reading_protocol^0,w,c
  5160   007082  0F38               	addlw	low (eventRead@msg+255)
  5161   007084  6ED9               	movwf	fsr2l,c
  5162   007086  6ADA               	clrf	fsr2h,c
  5163   007088  C059  FFDF         	movff	eventRead@data,indf2
  5164   00708C                     
  5165                           ;event.c: 51:             reading_protocol++;
  5166   00708C  2A5A               	incf	_reading_protocol^0,f,c
  5167                           
  5168                           ;event.c: 52:         } else if (data == 'w') ev = EV_ENTER;
  5169   00708E  EF76  F038         	goto	l3253
  5170   007092                     l3241:
  5171   007092  0E77               	movlw	119
  5172   007094  1859               	xorwf	eventRead@data^0,w,c
  5173   007096  A4D8               	btfss	status,2,c
  5174   007098  EF50  F038         	goto	u2971
  5175   00709C  EF52  F038         	goto	u2970
  5176   0070A0                     u2971:
  5177   0070A0  EF58  F038         	goto	l3245
  5178   0070A4                     u2970:
  5179   0070A4  0E00               	movlw	0
  5180   0070A6  6E20               	movwf	(eventRead@ev+1)^0,c
  5181   0070A8  0E04               	movlw	4
  5182   0070AA  6E1F               	movwf	eventRead@ev^0,c
  5183   0070AC  EF76  F038         	goto	l3253
  5184   0070B0                     l3245:
  5185   0070B0  0E61               	movlw	97
  5186   0070B2  1859               	xorwf	eventRead@data^0,w,c
  5187   0070B4  A4D8               	btfss	status,2,c
  5188   0070B6  EF5F  F038         	goto	u2981
  5189   0070BA  EF61  F038         	goto	u2980
  5190   0070BE                     u2981:
  5191   0070BE  EF67  F038         	goto	l3249
  5192   0070C2                     u2980:
  5193   0070C2  0E00               	movlw	0
  5194   0070C4  6E20               	movwf	(eventRead@ev+1)^0,c
  5195   0070C6  0E02               	movlw	2
  5196   0070C8  6E1F               	movwf	eventRead@ev^0,c
  5197   0070CA  EF76  F038         	goto	l3253
  5198   0070CE                     l3249:
  5199   0070CE  0E64               	movlw	100
  5200   0070D0  1859               	xorwf	eventRead@data^0,w,c
  5201   0070D2  A4D8               	btfss	status,2,c
  5202   0070D4  EF6E  F038         	goto	u2991
  5203   0070D8  EF70  F038         	goto	u2990
  5204   0070DC                     u2991:
  5205   0070DC  EF76  F038         	goto	l398
  5206   0070E0                     u2990:
  5207   0070E0  0E00               	movlw	0
  5208   0070E2  6E20               	movwf	(eventRead@ev+1)^0,c
  5209   0070E4  0E03               	movlw	3
  5210   0070E6  6E1F               	movwf	eventRead@ev^0,c
  5211   0070E8  EF76  F038         	goto	l3253
  5212   0070EC                     l398:
  5213   0070EC                     l3253:
  5214                           
  5215                           ;event.c: 56:         if (data == 'p') {
  5216   0070EC  0E70               	movlw	112
  5217   0070EE  1859               	xorwf	eventRead@data^0,w,c
  5218   0070F0  A4D8               	btfss	status,2,c
  5219   0070F2  EF7D  F038         	goto	u3001
  5220   0070F6  EF7F  F038         	goto	u3000
  5221   0070FA                     u3001:
  5222   0070FA  EF3F  F039         	goto	l3323
  5223   0070FE                     u3000:
  5224   0070FE                     
  5225                           ;event.c: 57:             if (reading_protocol == 0) {
  5226   0070FE  505A               	movf	_reading_protocol^0,w,c
  5227   007100  A4D8               	btfss	status,2,c
  5228   007102  EF85  F038         	goto	u3011
  5229   007106  EF87  F038         	goto	u3010
  5230   00710A                     u3011:
  5231   00710A  EF9C  F038         	goto	l3269
  5232   00710E                     u3010:
  5233   00710E                     
  5234                           ;event.c: 58:                 reading_protocol = 1;
  5235   00710E  0E01               	movlw	1
  5236   007110  6E5A               	movwf	_reading_protocol^0,c
  5237                           
  5238                           ;event.c: 59:                 for (char i = 0; i < 6; i++) {
  5239   007112  0E00               	movlw	0
  5240   007114  6E21               	movwf	eventRead@i^0,c
  5241   007116                     l3263:
  5242                           
  5243                           ;event.c: 60:                     msg[i] = '0';
  5244   007116  5021               	movf	eventRead@i^0,w,c
  5245   007118  0F39               	addlw	low eventRead@msg
  5246   00711A  6ED9               	movwf	fsr2l,c
  5247   00711C  6ADA               	clrf	fsr2h,c
  5248   00711E  0E30               	movlw	48
  5249   007120  6EDF               	movwf	indf2,c
  5250   007122                     
  5251                           ;event.c: 61:                 }
  5252   007122  2A21               	incf	eventRead@i^0,f,c
  5253   007124  0E05               	movlw	5
  5254   007126  6421               	cpfsgt	eventRead@i^0,c
  5255   007128  EF98  F038         	goto	u3021
  5256   00712C  EF9A  F038         	goto	u3020
  5257   007130                     u3021:
  5258   007130  EF8B  F038         	goto	l3263
  5259   007134                     u3020:
  5260   007134  EF3F  F039         	goto	l3323
  5261   007138                     l3269:
  5262                           
  5263                           ;event.c: 63:                 unsigned int value = 0;
  5264   007138  0E00               	movlw	0
  5265   00713A  6E27               	movwf	(eventRead@value+1)^0,c
  5266   00713C  0E00               	movlw	0
  5267   00713E  6E26               	movwf	eventRead@value^0,c
  5268   007140                     
  5269                           ;event.c: 64:                 for (char i = reading_protocol - 3; i > 0; i--) {
  5270   007140  505A               	movf	_reading_protocol^0,w,c
  5271   007142  0FFD               	addlw	253
  5272   007144  6E22               	movwf	eventRead@i_344^0,c
  5273   007146                     l3273:
  5274   007146  5022               	movf	eventRead@i_344^0,w,c
  5275   007148  A4D8               	btfss	status,2,c
  5276   00714A  EFA9  F038         	goto	u3031
  5277   00714E  EFAB  F038         	goto	u3030
  5278   007152                     u3031:
  5279   007152  EFAD  F038         	goto	l3277
  5280   007156                     u3030:
  5281   007156  EFD9  F038         	goto	l3285
  5282   00715A                     l3277:
  5283                           
  5284                           ;event.c: 65:                     value += (msg[i] - '0') * pow10(reading_protocol - 3 -
      +                           i);
  5285   00715A  5022               	movf	eventRead@i_344^0,w,c
  5286   00715C  C05A  F01B         	movff	_reading_protocol,??_eventRead
  5287   007160  6A1C               	clrf	(??_eventRead+1)^0,c
  5288   007162  5E1B               	subwf	??_eventRead^0,f,c
  5289   007164  0E00               	movlw	0
  5290   007166  5A1C               	subwfb	(??_eventRead+1)^0,f,c
  5291   007168  0EFD               	movlw	253
  5292   00716A  241B               	addwf	??_eventRead^0,w,c
  5293   00716C  6E07               	movwf	pow10@expoent^0,c
  5294   00716E  0EFF               	movlw	255
  5295   007170  201C               	addwfc	(??_eventRead+1)^0,w,c
  5296   007172  6E08               	movwf	(pow10@expoent+1)^0,c
  5297   007174  ECB6  F031         	call	_pow10	;wreg free
  5298   007178  C007  F01D         	movff	?_pow10,_eventRead$1244
  5299   00717C  C008  F01E         	movff	?_pow10+1,_eventRead$1244+1
  5300   007180                     
  5301                           ;event.c: 65:                     value += (msg[i] - '0') * pow10(reading_protocol - 3 -
      +                           i);
  5302   007180  5022               	movf	eventRead@i_344^0,w,c
  5303   007182  0F39               	addlw	low eventRead@msg
  5304   007184  6ED9               	movwf	fsr2l,c
  5305   007186  6ADA               	clrf	fsr2h,c
  5306   007188  50DF               	movf	indf2,w,c
  5307   00718A  6E1B               	movwf	??_eventRead^0,c
  5308   00718C  0ED0               	movlw	208
  5309   00718E  241B               	addwf	??_eventRead^0,w,c
  5310   007190  6E01               	movwf	___wmul@multiplier^0,c
  5311   007192  6A02               	clrf	(___wmul@multiplier+1)^0,c
  5312   007194  0EFF               	movlw	255
  5313   007196  2202               	addwfc	(___wmul@multiplier+1)^0,f,c
  5314   007198  C01D  F003         	movff	_eventRead$1244,___wmul@multiplicand
  5315   00719C  C01E  F004         	movff	_eventRead$1244+1,___wmul@multiplicand+1
  5316   0071A0  ECC7  F02E         	call	___wmul	;wreg free
  5317   0071A4  5001               	movf	?___wmul^0,w,c
  5318   0071A6  2626               	addwf	eventRead@value^0,f,c
  5319   0071A8  5002               	movf	(?___wmul+1)^0,w,c
  5320   0071AA  2227               	addwfc	(eventRead@value+1)^0,f,c
  5321   0071AC                     
  5322                           ;event.c: 66:                 }
  5323   0071AC  0622               	decf	eventRead@i_344^0,f,c
  5324   0071AE  EFA3  F038         	goto	l3273
  5325   0071B2                     l3285:
  5326                           
  5327                           ;event.c: 68:                 if (msg[0] == 'H') {
  5328   0071B2  0E48               	movlw	72
  5329   0071B4  1839               	xorwf	eventRead@msg^0,w,c
  5330   0071B6  A4D8               	btfss	status,2,c
  5331   0071B8  EFE0  F038         	goto	u3041
  5332   0071BC  EFE2  F038         	goto	u3040
  5333   0071C0                     u3041:
  5334   0071C0  EFE5  F038         	goto	l3289
  5335   0071C4                     u3040:
  5336   0071C4                     
  5337                           ;event.c: 69:                     setHOUR(value);
  5338   0071C4  5026               	movf	eventRead@value^0,w,c
  5339   0071C6  EC00  F02F         	call	_setHOUR
  5340   0071CA                     l3289:
  5341                           
  5342                           ;event.c: 72:                 if (msg[0] == 'M') {
  5343   0071CA  0E4D               	movlw	77
  5344   0071CC  1839               	xorwf	eventRead@msg^0,w,c
  5345   0071CE  A4D8               	btfss	status,2,c
  5346   0071D0  EFEC  F038         	goto	u3051
  5347   0071D4  EFEE  F038         	goto	u3050
  5348   0071D8                     u3051:
  5349   0071D8  EFF1  F038         	goto	l3293
  5350   0071DC                     u3050:
  5351   0071DC                     
  5352                           ;event.c: 73:                     setMIN(value);
  5353   0071DC  5026               	movf	eventRead@value^0,w,c
  5354   0071DE  EC13  F02F         	call	_setMIN
  5355   0071E2                     l3293:
  5356                           
  5357                           ;event.c: 76:                 if (msg[0] == 'S') {
  5358   0071E2  0E53               	movlw	83
  5359   0071E4  1839               	xorwf	eventRead@msg^0,w,c
  5360   0071E6  A4D8               	btfss	status,2,c
  5361   0071E8  EFF8  F038         	goto	u3061
  5362   0071EC  EFFA  F038         	goto	u3060
  5363   0071F0                     u3061:
  5364   0071F0  EFFD  F038         	goto	l3297
  5365   0071F4                     u3060:
  5366   0071F4                     
  5367                           ;event.c: 77:                     setSEC(value);
  5368   0071F4  5026               	movf	eventRead@value^0,w,c
  5369   0071F6  EC26  F02F         	call	_setSEC
  5370   0071FA                     l3297:
  5371                           
  5372                           ;event.c: 80:                 if (msg[0] == 'L') {
  5373   0071FA  0E4C               	movlw	76
  5374   0071FC  1839               	xorwf	eventRead@msg^0,w,c
  5375   0071FE  A4D8               	btfss	status,2,c
  5376   007200  EF04  F039         	goto	u3071
  5377   007204  EF06  F039         	goto	u3070
  5378   007208                     u3071:
  5379   007208  EF0A  F039         	goto	l3301
  5380   00720C                     u3070:
  5381   00720C                     
  5382                           ;event.c: 81:                     setLanguage(value % 4);
  5383   00720C  5026               	movf	eventRead@value^0,w,c
  5384   00720E  0B03               	andlw	3
  5385   007210  EC91  F02E         	call	_setLanguage
  5386   007214                     l3301:
  5387                           
  5388                           ;event.c: 84:                 if (msg[0] == 'A') {
  5389   007214  0E41               	movlw	65
  5390   007216  1839               	xorwf	eventRead@msg^0,w,c
  5391   007218  A4D8               	btfss	status,2,c
  5392   00721A  EF11  F039         	goto	u3081
  5393   00721E  EF13  F039         	goto	u3080
  5394   007222                     u3081:
  5395   007222  EF19  F039         	goto	l3305
  5396   007226                     u3080:
  5397   007226                     
  5398                           ;event.c: 85:                     setAlarmUpperLevel(value);
  5399   007226  C026  F017         	movff	eventRead@value,setAlarmUpperLevel@newAlarmLevel
  5400   00722A  C027  F018         	movff	eventRead@value+1,setAlarmUpperLevel@newAlarmLevel+1
  5401   00722E  ECED  F02E         	call	_setAlarmUpperLevel	;wreg free
  5402   007232                     l3305:
  5403                           
  5404                           ;event.c: 88:                 if (msg[0] == 'a') {
  5405   007232  0E61               	movlw	97
  5406   007234  1839               	xorwf	eventRead@msg^0,w,c
  5407   007236  A4D8               	btfss	status,2,c
  5408   007238  EF20  F039         	goto	u3091
  5409   00723C  EF22  F039         	goto	u3090
  5410   007240                     u3091:
  5411   007240  EF28  F039         	goto	l3309
  5412   007244                     u3090:
  5413   007244                     
  5414                           ;event.c: 89:                     setAlarmLowerLevel(value);
  5415   007244  C026  F017         	movff	eventRead@value,setAlarmLowerLevel@newAlarmLevel
  5416   007248  C027  F018         	movff	eventRead@value+1,setAlarmLowerLevel@newAlarmLevel+1
  5417   00724C  ECDA  F02E         	call	_setAlarmLowerLevel	;wreg free
  5418   007250                     l3309:
  5419                           
  5420                           ;event.c: 91:                 static char envio[7];;event.c: 92:                 for (ch
      +                          ar i = 0; i < 6; i++) {
  5421   007250  0E00               	movlw	0
  5422   007252  6E23               	movwf	eventRead@i_347^0,c
  5423   007254                     l3315:
  5424                           
  5425                           ;event.c: 93:                     envio[i] = msg[i];
  5426   007254  5023               	movf	eventRead@i_347^0,w,c
  5427   007256  0F39               	addlw	low eventRead@msg
  5428   007258  6ED9               	movwf	fsr2l,c
  5429   00725A  6ADA               	clrf	fsr2h,c
  5430   00725C  5023               	movf	eventRead@i_347^0,w,c
  5431   00725E  0F32               	addlw	low eventRead@envio
  5432   007260  6EE1               	movwf	fsr1l,c
  5433   007262  6AE2               	clrf	fsr1h,c
  5434   007264  CFDF FFE7          	movff	indf2,indf1
  5435   007268                     
  5436                           ;event.c: 94:                 }
  5437   007268  2A23               	incf	eventRead@i_347^0,f,c
  5438   00726A  0E05               	movlw	5
  5439   00726C  6423               	cpfsgt	eventRead@i_347^0,c
  5440   00726E  EF3B  F039         	goto	u3101
  5441   007272  EF3D  F039         	goto	u3100
  5442   007276                     u3101:
  5443   007276  EF2A  F039         	goto	l3315
  5444   00727A                     u3100:
  5445   00727A                     
  5446                           ;event.c: 95:                 reading_protocol = 0;
  5447   00727A  0E00               	movlw	0
  5448   00727C  6E5A               	movwf	_reading_protocol^0,c
  5449   00727E                     l3323:
  5450                           
  5451                           ;event.c: 99:     return ev;
  5452   00727E  C01F  F019         	movff	eventRead@ev,?_eventRead
  5453   007282  C020  F01A         	movff	eventRead@ev+1,?_eventRead+1
  5454   007286  0012               	return		;funcret
  5455   007288                     __end_of_eventRead:
  5456                           	callstack 0
  5457                           
  5458 ;; *************** function _setSEC *****************
  5459 ;; Defined at:
  5460 ;;		line 56 in file "var.c"
  5461 ;; Parameters:    Size  Location     Type
  5462 ;;  value           1    wreg     unsigned char 
  5463 ;; Auto vars:     Size  Location     Type
  5464 ;;  value           1   14[COMRAM] unsigned char 
  5465 ;; Return value:  Size  Location     Type
  5466 ;;                  1    wreg      void 
  5467 ;; Registers used:
  5468 ;;		wreg, status,2, status,0, cstack
  5469 ;; Tracked objects:
  5470 ;;		On entry : 0/0
  5471 ;;		On exit  : 0/0
  5472 ;;		Unchanged: 0/0
  5473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5474 ;;      Params:         0       0       0       0       0       0       0       0       0
  5475 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5476 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5477 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5478 ;;Total ram usage:        1 bytes
  5479 ;; Hardware stack levels used: 1
  5480 ;; Hardware stack levels required when called: 5
  5481 ;; This function calls:
  5482 ;;		_dsWriteData
  5483 ;; This function is called by:
  5484 ;;		_eventRead
  5485 ;;		_smLoop
  5486 ;; This function uses a non-reentrant model
  5487 ;;
  5488                           
  5489                           	psect	text30
  5490   005E4C                     __ptext30:
  5491                           	callstack 0
  5492   005E4C                     _setSEC:
  5493                           	callstack 24
  5494                           
  5495                           ;incstack = 0
  5496                           ;setSEC@value stored from wreg
  5497   005E4C  6E0F               	movwf	setSEC@value^0,c
  5498   005E4E                     
  5499                           ;var.c: 57:     if (value > 59) value = 0;
  5500   005E4E  0E3B               	movlw	59
  5501   005E50  640F               	cpfsgt	setSEC@value^0,c
  5502   005E52  EF2D  F02F         	goto	u2881
  5503   005E56  EF2F  F02F         	goto	u2880
  5504   005E5A                     u2881:
  5505   005E5A  EF31  F02F         	goto	l3119
  5506   005E5E                     u2880:
  5507   005E5E  0E00               	movlw	0
  5508   005E60  6E0F               	movwf	setSEC@value^0,c
  5509   005E62                     l3119:
  5510                           
  5511                           ;var.c: 59:     dsWriteData(value, 0);
  5512   005E62  0E00               	movlw	0
  5513   005E64  6E0D               	movwf	(dsWriteData@address+1)^0,c
  5514   005E66  0E00               	movlw	0
  5515   005E68  6E0C               	movwf	dsWriteData@address^0,c
  5516   005E6A  500F               	movf	setSEC@value^0,w,c
  5517   005E6C  ECD0  F02F         	call	_dsWriteData
  5518   005E70  0012               	return		;funcret
  5519   005E72                     __end_of_setSEC:
  5520                           	callstack 0
  5521                           
  5522 ;; *************** function _setMIN *****************
  5523 ;; Defined at:
  5524 ;;		line 62 in file "var.c"
  5525 ;; Parameters:    Size  Location     Type
  5526 ;;  value           1    wreg     unsigned char 
  5527 ;; Auto vars:     Size  Location     Type
  5528 ;;  value           1   14[COMRAM] unsigned char 
  5529 ;; Return value:  Size  Location     Type
  5530 ;;                  1    wreg      void 
  5531 ;; Registers used:
  5532 ;;		wreg, status,2, status,0, cstack
  5533 ;; Tracked objects:
  5534 ;;		On entry : 0/0
  5535 ;;		On exit  : 0/0
  5536 ;;		Unchanged: 0/0
  5537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5538 ;;      Params:         0       0       0       0       0       0       0       0       0
  5539 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5540 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5541 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5542 ;;Total ram usage:        1 bytes
  5543 ;; Hardware stack levels used: 1
  5544 ;; Hardware stack levels required when called: 5
  5545 ;; This function calls:
  5546 ;;		_dsWriteData
  5547 ;; This function is called by:
  5548 ;;		_eventRead
  5549 ;;		_smLoop
  5550 ;; This function uses a non-reentrant model
  5551 ;;
  5552                           
  5553                           	psect	text31
  5554   005E26                     __ptext31:
  5555                           	callstack 0
  5556   005E26                     _setMIN:
  5557                           	callstack 24
  5558                           
  5559                           ;incstack = 0
  5560                           ;setMIN@value stored from wreg
  5561   005E26  6E0F               	movwf	setMIN@value^0,c
  5562   005E28                     
  5563                           ;var.c: 63:     if (value > 59) value = 0;
  5564   005E28  0E3B               	movlw	59
  5565   005E2A  640F               	cpfsgt	setMIN@value^0,c
  5566   005E2C  EF1A  F02F         	goto	u2871
  5567   005E30  EF1C  F02F         	goto	u2870
  5568   005E34                     u2871:
  5569   005E34  EF1E  F02F         	goto	l3111
  5570   005E38                     u2870:
  5571   005E38  0E00               	movlw	0
  5572   005E3A  6E0F               	movwf	setMIN@value^0,c
  5573   005E3C                     l3111:
  5574                           
  5575                           ;var.c: 65:     dsWriteData(value, 1);
  5576   005E3C  0E00               	movlw	0
  5577   005E3E  6E0D               	movwf	(dsWriteData@address+1)^0,c
  5578   005E40  0E01               	movlw	1
  5579   005E42  6E0C               	movwf	dsWriteData@address^0,c
  5580   005E44  500F               	movf	setMIN@value^0,w,c
  5581   005E46  ECD0  F02F         	call	_dsWriteData
  5582   005E4A  0012               	return		;funcret
  5583   005E4C                     __end_of_setMIN:
  5584                           	callstack 0
  5585                           
  5586 ;; *************** function _setLanguage *****************
  5587 ;; Defined at:
  5588 ;;		line 108 in file "var.c"
  5589 ;; Parameters:    Size  Location     Type
  5590 ;;  newLanguage     1    wreg     unsigned char 
  5591 ;; Auto vars:     Size  Location     Type
  5592 ;;  newLanguage     1   14[COMRAM] unsigned char 
  5593 ;; Return value:  Size  Location     Type
  5594 ;;                  1    wreg      void 
  5595 ;; Registers used:
  5596 ;;		wreg, status,2, status,0, cstack
  5597 ;; Tracked objects:
  5598 ;;		On entry : 0/0
  5599 ;;		On exit  : 0/0
  5600 ;;		Unchanged: 0/0
  5601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5602 ;;      Params:         0       0       0       0       0       0       0       0       0
  5603 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5604 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5605 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5606 ;;Total ram usage:        1 bytes
  5607 ;; Hardware stack levels used: 1
  5608 ;; Hardware stack levels required when called: 5
  5609 ;; This function calls:
  5610 ;;		_dsWriteData
  5611 ;; This function is called by:
  5612 ;;		_eventRead
  5613 ;;		_smLoop
  5614 ;;		_varInit
  5615 ;; This function uses a non-reentrant model
  5616 ;;
  5617                           
  5618                           	psect	text32
  5619   005D22                     __ptext32:
  5620                           	callstack 0
  5621   005D22                     _setLanguage:
  5622                           	callstack 24
  5623                           
  5624                           ;incstack = 0
  5625                           ;setLanguage@newLanguage stored from wreg
  5626   005D22  6E0F               	movwf	setLanguage@newLanguage^0,c
  5627   005D24                     
  5628                           ;var.c: 111:     language = newLanguage % 4;
  5629   005D24  500F               	movf	setLanguage@newLanguage^0,w,c
  5630   005D26  0B03               	andlw	3
  5631   005D28  6E57               	movwf	_language^0,c
  5632   005D2A                     
  5633                           ;var.c: 112:     dsWriteData(language, 0x26);
  5634   005D2A  0E00               	movlw	0
  5635   005D2C  6E0D               	movwf	(dsWriteData@address+1)^0,c
  5636   005D2E  0E26               	movlw	38
  5637   005D30  6E0C               	movwf	dsWriteData@address^0,c
  5638   005D32  5057               	movf	_language^0,w,c
  5639   005D34  ECD0  F02F         	call	_dsWriteData
  5640   005D38  0012               	return		;funcret
  5641   005D3A                     __end_of_setLanguage:
  5642                           	callstack 0
  5643                           
  5644 ;; *************** function _setHOUR *****************
  5645 ;; Defined at:
  5646 ;;		line 68 in file "var.c"
  5647 ;; Parameters:    Size  Location     Type
  5648 ;;  value           1    wreg     unsigned char 
  5649 ;; Auto vars:     Size  Location     Type
  5650 ;;  value           1   14[COMRAM] unsigned char 
  5651 ;; Return value:  Size  Location     Type
  5652 ;;                  1    wreg      void 
  5653 ;; Registers used:
  5654 ;;		wreg, status,2, status,0, cstack
  5655 ;; Tracked objects:
  5656 ;;		On entry : 0/0
  5657 ;;		On exit  : 0/0
  5658 ;;		Unchanged: 0/0
  5659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5660 ;;      Params:         0       0       0       0       0       0       0       0       0
  5661 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5662 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5663 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5664 ;;Total ram usage:        1 bytes
  5665 ;; Hardware stack levels used: 1
  5666 ;; Hardware stack levels required when called: 5
  5667 ;; This function calls:
  5668 ;;		_dsWriteData
  5669 ;; This function is called by:
  5670 ;;		_eventRead
  5671 ;;		_smLoop
  5672 ;; This function uses a non-reentrant model
  5673 ;;
  5674                           
  5675                           	psect	text33
  5676   005E00                     __ptext33:
  5677                           	callstack 0
  5678   005E00                     _setHOUR:
  5679                           	callstack 24
  5680                           
  5681                           ;incstack = 0
  5682                           ;setHOUR@value stored from wreg
  5683   005E00  6E0F               	movwf	setHOUR@value^0,c
  5684   005E02                     
  5685                           ;var.c: 69:     if (value > 23) value = 0;
  5686   005E02  0E17               	movlw	23
  5687   005E04  640F               	cpfsgt	setHOUR@value^0,c
  5688   005E06  EF07  F02F         	goto	u2861
  5689   005E0A  EF09  F02F         	goto	u2860
  5690   005E0E                     u2861:
  5691   005E0E  EF0B  F02F         	goto	l3103
  5692   005E12                     u2860:
  5693   005E12  0E00               	movlw	0
  5694   005E14  6E0F               	movwf	setHOUR@value^0,c
  5695   005E16                     l3103:
  5696                           
  5697                           ;var.c: 71:     dsWriteData(value, 2);
  5698   005E16  0E00               	movlw	0
  5699   005E18  6E0D               	movwf	(dsWriteData@address+1)^0,c
  5700   005E1A  0E02               	movlw	2
  5701   005E1C  6E0C               	movwf	dsWriteData@address^0,c
  5702   005E1E  500F               	movf	setHOUR@value^0,w,c
  5703   005E20  ECD0  F02F         	call	_dsWriteData
  5704   005E24  0012               	return		;funcret
  5705   005E26                     __end_of_setHOUR:
  5706                           	callstack 0
  5707                           
  5708 ;; *************** function _setAlarmUpperLevel *****************
  5709 ;; Defined at:
  5710 ;;		line 81 in file "var.c"
  5711 ;; Parameters:    Size  Location     Type
  5712 ;;  newAlarmLeve    2   22[COMRAM] int 
  5713 ;; Auto vars:     Size  Location     Type
  5714 ;;		None
  5715 ;; Return value:  Size  Location     Type
  5716 ;;                  1    wreg      void 
  5717 ;; Registers used:
  5718 ;;		wreg, status,2, status,0, cstack
  5719 ;; Tracked objects:
  5720 ;;		On entry : 0/0
  5721 ;;		On exit  : 0/0
  5722 ;;		Unchanged: 0/0
  5723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5724 ;;      Params:         2       0       0       0       0       0       0       0       0
  5725 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5726 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5727 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5728 ;;Total ram usage:        2 bytes
  5729 ;; Hardware stack levels used: 1
  5730 ;; Hardware stack levels required when called: 5
  5731 ;; This function calls:
  5732 ;;		_dsWriteData
  5733 ;; This function is called by:
  5734 ;;		_eventRead
  5735 ;;		_smLoop
  5736 ;; This function uses a non-reentrant model
  5737 ;;
  5738                           
  5739                           	psect	text34
  5740   005DDA                     __ptext34:
  5741                           	callstack 0
  5742   005DDA                     _setAlarmUpperLevel:
  5743                           	callstack 24
  5744   005DDA                     
  5745                           ;var.c: 82:     static unsigned char a, b;;var.c: 83:     a = (newAlarmLevel >> 8);
  5746   005DDA  5018               	movf	(setAlarmUpperLevel@newAlarmLevel+1)^0,w,c
  5747   005DDC  6E54               	movwf	setAlarmUpperLevel@a^0,c
  5748   005DDE                     
  5749                           ;var.c: 84:     b = newAlarmLevel;
  5750   005DDE  C017  F053         	movff	setAlarmUpperLevel@newAlarmLevel,setAlarmUpperLevel@b
  5751   005DE2                     
  5752                           ;var.c: 85:     dsWriteData(a, 0x22);
  5753   005DE2  0E00               	movlw	0
  5754   005DE4  6E0D               	movwf	(dsWriteData@address+1)^0,c
  5755   005DE6  0E22               	movlw	34
  5756   005DE8  6E0C               	movwf	dsWriteData@address^0,c
  5757   005DEA  5054               	movf	setAlarmUpperLevel@a^0,w,c
  5758   005DEC  ECD0  F02F         	call	_dsWriteData
  5759   005DF0                     
  5760                           ;var.c: 86:     dsWriteData(b, 0x23);
  5761   005DF0  0E00               	movlw	0
  5762   005DF2  6E0D               	movwf	(dsWriteData@address+1)^0,c
  5763   005DF4  0E23               	movlw	35
  5764   005DF6  6E0C               	movwf	dsWriteData@address^0,c
  5765   005DF8  5053               	movf	setAlarmUpperLevel@b^0,w,c
  5766   005DFA  ECD0  F02F         	call	_dsWriteData
  5767   005DFE  0012               	return		;funcret
  5768   005E00                     __end_of_setAlarmUpperLevel:
  5769                           	callstack 0
  5770                           
  5771 ;; *************** function _setAlarmLowerLevel *****************
  5772 ;; Defined at:
  5773 ;;		line 96 in file "var.c"
  5774 ;; Parameters:    Size  Location     Type
  5775 ;;  newAlarmLeve    2   22[COMRAM] int 
  5776 ;; Auto vars:     Size  Location     Type
  5777 ;;		None
  5778 ;; Return value:  Size  Location     Type
  5779 ;;                  1    wreg      void 
  5780 ;; Registers used:
  5781 ;;		wreg, status,2, status,0, cstack
  5782 ;; Tracked objects:
  5783 ;;		On entry : 0/0
  5784 ;;		On exit  : 0/0
  5785 ;;		Unchanged: 0/0
  5786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5787 ;;      Params:         2       0       0       0       0       0       0       0       0
  5788 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5789 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5790 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5791 ;;Total ram usage:        2 bytes
  5792 ;; Hardware stack levels used: 1
  5793 ;; Hardware stack levels required when called: 5
  5794 ;; This function calls:
  5795 ;;		_dsWriteData
  5796 ;; This function is called by:
  5797 ;;		_eventRead
  5798 ;;		_smLoop
  5799 ;; This function uses a non-reentrant model
  5800 ;;
  5801                           
  5802                           	psect	text35
  5803   005DB4                     __ptext35:
  5804                           	callstack 0
  5805   005DB4                     _setAlarmLowerLevel:
  5806                           	callstack 24
  5807   005DB4                     
  5808                           ;var.c: 97:     static unsigned char a, b;;var.c: 98:     a = (newAlarmLevel >> 8);
  5809   005DB4  5018               	movf	(setAlarmLowerLevel@newAlarmLevel+1)^0,w,c
  5810   005DB6  6E50               	movwf	setAlarmLowerLevel@a^0,c
  5811   005DB8                     
  5812                           ;var.c: 99:     b = newAlarmLevel;
  5813   005DB8  C017  F04F         	movff	setAlarmLowerLevel@newAlarmLevel,setAlarmLowerLevel@b
  5814   005DBC                     
  5815                           ;var.c: 100:     dsWriteData(a, 0x24);
  5816   005DBC  0E00               	movlw	0
  5817   005DBE  6E0D               	movwf	(dsWriteData@address+1)^0,c
  5818   005DC0  0E24               	movlw	36
  5819   005DC2  6E0C               	movwf	dsWriteData@address^0,c
  5820   005DC4  5050               	movf	setAlarmLowerLevel@a^0,w,c
  5821   005DC6  ECD0  F02F         	call	_dsWriteData
  5822   005DCA                     
  5823                           ;var.c: 101:     dsWriteData(b, 0x25);
  5824   005DCA  0E00               	movlw	0
  5825   005DCC  6E0D               	movwf	(dsWriteData@address+1)^0,c
  5826   005DCE  0E25               	movlw	37
  5827   005DD0  6E0C               	movwf	dsWriteData@address^0,c
  5828   005DD2  504F               	movf	setAlarmLowerLevel@b^0,w,c
  5829   005DD4  ECD0  F02F         	call	_dsWriteData
  5830   005DD8  0012               	return		;funcret
  5831   005DDA                     __end_of_setAlarmLowerLevel:
  5832                           	callstack 0
  5833                           
  5834 ;; *************** function _dsWriteData *****************
  5835 ;; Defined at:
  5836 ;;		line 26 in file "ds1307.c"
  5837 ;; Parameters:    Size  Location     Type
  5838 ;;  value           1    wreg     unsigned char 
  5839 ;;  address         2   11[COMRAM] int 
  5840 ;; Auto vars:     Size  Location     Type
  5841 ;;  value           1   13[COMRAM] unsigned char 
  5842 ;; Return value:  Size  Location     Type
  5843 ;;                  1    wreg      void 
  5844 ;; Registers used:
  5845 ;;		wreg, status,2, status,0, cstack
  5846 ;; Tracked objects:
  5847 ;;		On entry : 0/0
  5848 ;;		On exit  : 0/0
  5849 ;;		Unchanged: 0/0
  5850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5851 ;;      Params:         2       0       0       0       0       0       0       0       0
  5852 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5853 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5854 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5855 ;;Total ram usage:        3 bytes
  5856 ;; Hardware stack levels used: 1
  5857 ;; Hardware stack levels required when called: 4
  5858 ;; This function calls:
  5859 ;;		_i2cWriteByte
  5860 ;; This function is called by:
  5861 ;;		_setSEC
  5862 ;;		_setMIN
  5863 ;;		_setHOUR
  5864 ;;		_setAlarmUpperLevel
  5865 ;;		_setAlarmLowerLevel
  5866 ;;		_setLanguage
  5867 ;;		_dsStartClock
  5868 ;; This function uses a non-reentrant model
  5869 ;;
  5870                           
  5871                           	psect	text36
  5872   005FA0                     __ptext36:
  5873                           	callstack 0
  5874   005FA0                     _dsWriteData:
  5875                           	callstack 24
  5876                           
  5877                           ;incstack = 0
  5878                           ;dsWriteData@value stored from wreg
  5879   005FA0  6E0E               	movwf	dsWriteData@value^0,c
  5880   005FA2                     
  5881                           ;ds1307.c: 27:  i2cWriteByte(1,0, (0x6f<<1)|0);
  5882   005FA2  0E00               	movlw	0
  5883   005FA4  6E08               	movwf	i2cWriteByte@send_stop^0,c
  5884   005FA6  0EDE               	movlw	222
  5885   005FA8  6E09               	movwf	i2cWriteByte@byte^0,c
  5886   005FAA  0E01               	movlw	1
  5887   005FAC  EC13  F032         	call	_i2cWriteByte
  5888                           
  5889                           ;ds1307.c: 28:  i2cWriteByte(0,0,address);
  5890   005FB0  0E00               	movlw	0
  5891   005FB2  6E08               	movwf	i2cWriteByte@send_stop^0,c
  5892   005FB4  C00C  F009         	movff	dsWriteData@address,i2cWriteByte@byte
  5893   005FB8  0E00               	movlw	0
  5894   005FBA  EC13  F032         	call	_i2cWriteByte
  5895                           
  5896                           ;ds1307.c: 29:  i2cWriteByte(0,1,value);
  5897   005FBE  0E01               	movlw	1
  5898   005FC0  6E08               	movwf	i2cWriteByte@send_stop^0,c
  5899   005FC2  C00E  F009         	movff	dsWriteData@value,i2cWriteByte@byte
  5900   005FC6  0E00               	movlw	0
  5901   005FC8  EC13  F032         	call	_i2cWriteByte
  5902   005FCC  0012               	return		;funcret
  5903   005FCE                     __end_of_dsWriteData:
  5904                           	callstack 0
  5905                           
  5906 ;; *************** function _i2cWriteByte *****************
  5907 ;; Defined at:
  5908 ;;		line 113 in file "i2c.c"
  5909 ;; Parameters:    Size  Location     Type
  5910 ;;  send_start      1    wreg     unsigned char 
  5911 ;;  send_stop       1    7[COMRAM] unsigned char 
  5912 ;;  byte            1    8[COMRAM] unsigned char 
  5913 ;; Auto vars:     Size  Location     Type
  5914 ;;  send_start      1    9[COMRAM] unsigned char 
  5915 ;;  bit             1   10[COMRAM] unsigned char 
  5916 ;;  nack            1    0        unsigned char 
  5917 ;; Return value:  Size  Location     Type
  5918 ;;                  1    wreg      unsigned char 
  5919 ;; Registers used:
  5920 ;;		wreg, status,2, status,0, cstack
  5921 ;; Tracked objects:
  5922 ;;		On entry : 0/0
  5923 ;;		On exit  : 0/0
  5924 ;;		Unchanged: 0/0
  5925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5926 ;;      Params:         2       0       0       0       0       0       0       0       0
  5927 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5928 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5929 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5930 ;;Total ram usage:        4 bytes
  5931 ;; Hardware stack levels used: 1
  5932 ;; Hardware stack levels required when called: 3
  5933 ;; This function calls:
  5934 ;;		_i2c_read_bit
  5935 ;;		_i2c_start
  5936 ;;		_i2c_stop
  5937 ;;		_i2c_write_bit
  5938 ;; This function is called by:
  5939 ;;		_dsWriteData
  5940 ;;		_dsReadData
  5941 ;; This function uses a non-reentrant model
  5942 ;;
  5943                           
  5944                           	psect	text37
  5945   006426                     __ptext37:
  5946                           	callstack 0
  5947   006426                     _i2cWriteByte:
  5948                           	callstack 24
  5949                           
  5950                           ;incstack = 0
  5951                           ;i2cWriteByte@send_start stored from wreg
  5952   006426  6E0A               	movwf	i2cWriteByte@send_start^0,c
  5953   006428                     
  5954                           ;i2c.c: 114:  unsigned char bit;;i2c.c: 115:  unsigned char nack;;i2c.c: 116:  if (send_
      +                          start) {
  5955   006428  500A               	movf	i2cWriteByte@send_start^0,w,c
  5956   00642A  B4D8               	btfsc	status,2,c
  5957   00642C  EF1A  F032         	goto	u2491
  5958   006430  EF1C  F032         	goto	u2490
  5959   006434                     u2491:
  5960   006434  EF1E  F032         	goto	l2811
  5961   006438                     u2490:
  5962   006438                     
  5963                           ;i2c.c: 117:   i2c_start();
  5964   006438  ECA7  F030         	call	_i2c_start	;wreg free
  5965   00643C                     l2811:
  5966                           
  5967                           ;i2c.c: 119:  for (bit = 0; bit < 8; bit++) {
  5968   00643C  0E00               	movlw	0
  5969   00643E  6E0B               	movwf	i2cWriteByte@bit^0,c
  5970   006440                     l2817:
  5971                           
  5972                           ;i2c.c: 120:   i2c_write_bit((byte & 0x80) != 0);
  5973   006440  BE09               	btfsc	i2cWriteByte@byte^0,7,c
  5974   006442  EF25  F032         	goto	u2501
  5975   006446  EF28  F032         	goto	u2500
  5976   00644A                     u2501:
  5977   00644A  0E01               	movlw	1
  5978   00644C  EF29  F032         	goto	u2510
  5979   006450                     u2500:
  5980   006450  0E00               	movlw	0
  5981   006452                     u2510:
  5982   006452  EC8A  F031         	call	_i2c_write_bit
  5983   006456                     
  5984                           ;i2c.c: 121:   byte <<= 1;
  5985   006456  90D8               	bcf	status,0,c
  5986   006458  3609               	rlcf	i2cWriteByte@byte^0,f,c
  5987   00645A                     
  5988                           ;i2c.c: 122:  }
  5989   00645A  2A0B               	incf	i2cWriteByte@bit^0,f,c
  5990   00645C  0E07               	movlw	7
  5991   00645E  640B               	cpfsgt	i2cWriteByte@bit^0,c
  5992   006460  EF34  F032         	goto	u2521
  5993   006464  EF36  F032         	goto	u2520
  5994   006468                     u2521:
  5995   006468  EF20  F032         	goto	l2817
  5996   00646C                     u2520:
  5997   00646C  ECFE  F02F         	call	_i2c_read_bit	;wreg free
  5998   006470                     
  5999                           ;i2c.c: 124:  if (send_stop) {
  6000   006470  5008               	movf	i2cWriteByte@send_stop^0,w,c
  6001   006472  B4D8               	btfsc	status,2,c
  6002   006474  EF3E  F032         	goto	u2531
  6003   006478  EF40  F032         	goto	u2530
  6004   00647C                     u2531:
  6005   00647C  EF42  F032         	goto	l270
  6006   006480                     u2530:
  6007   006480                     
  6008                           ;i2c.c: 125:   i2c_stop();
  6009   006480  ECB9  F02F         	call	_i2c_stop	;wreg free
  6010   006484                     l270:
  6011   006484  0012               	return		;funcret
  6012   006486                     __end_of_i2cWriteByte:
  6013                           	callstack 0
  6014                           
  6015 ;; *************** function _i2c_write_bit *****************
  6016 ;; Defined at:
  6017 ;;		line 84 in file "i2c.c"
  6018 ;; Parameters:    Size  Location     Type
  6019 ;;  bit             1    wreg     unsigned char 
  6020 ;; Auto vars:     Size  Location     Type
  6021 ;;  bit             1    6[COMRAM] unsigned char 
  6022 ;; Return value:  Size  Location     Type
  6023 ;;                  1    wreg      void 
  6024 ;; Registers used:
  6025 ;;		wreg, status,2, status,0, cstack
  6026 ;; Tracked objects:
  6027 ;;		On entry : 0/0
  6028 ;;		On exit  : 0/0
  6029 ;;		Unchanged: 0/0
  6030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6031 ;;      Params:         0       0       0       0       0       0       0       0       0
  6032 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6033 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6034 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6035 ;;Total ram usage:        1 bytes
  6036 ;; Hardware stack levels used: 1
  6037 ;; Hardware stack levels required when called: 2
  6038 ;; This function calls:
  6039 ;;		_I2C_delay
  6040 ;;		_clear_SCL
  6041 ;;		_clear_SDA
  6042 ;;		_read_SCL
  6043 ;;		_read_SDA
  6044 ;; This function is called by:
  6045 ;;		_i2cWriteByte
  6046 ;;		_i2cReadByte
  6047 ;; This function uses a non-reentrant model
  6048 ;;
  6049                           
  6050                           	psect	text38
  6051   006314                     __ptext38:
  6052                           	callstack 0
  6053   006314                     _i2c_write_bit:
  6054                           	callstack 24
  6055                           
  6056                           ;incstack = 0
  6057                           ;i2c_write_bit@bit stored from wreg
  6058   006314  6E07               	movwf	i2c_write_bit@bit^0,c
  6059   006316                     
  6060                           ;i2c.c: 85:  if (bit) {
  6061   006316  5007               	movf	i2c_write_bit@bit^0,w,c
  6062   006318  B4D8               	btfsc	status,2,c
  6063   00631A  EF91  F031         	goto	u2391
  6064   00631E  EF93  F031         	goto	u2390
  6065   006322                     u2391:
  6066   006322  EF97  F031         	goto	l2733
  6067   006326                     u2390:
  6068   006326                     
  6069                           ;i2c.c: 86:   read_SDA();
  6070   006326  EC33  F030         	call	_read_SDA	;wreg free
  6071                           
  6072                           ;i2c.c: 87:  } else {
  6073   00632A  EF99  F031         	goto	l2735
  6074   00632E                     l2733:
  6075                           
  6076                           ;i2c.c: 88:   clear_SDA();
  6077   00632E  EC62  F02F         	call	_clear_SDA	;wreg free
  6078   006332                     l2735:
  6079                           
  6080                           ;i2c.c: 90:  I2C_delay();
  6081   006332  EC1C  F02E         	call	_I2C_delay	;wreg free
  6082   006336                     l2737:
  6083   006336  EC17  F030         	call	_read_SCL	;wreg free
  6084   00633A  0900               	iorlw	0
  6085   00633C  B4D8               	btfsc	status,2,c
  6086   00633E  EFA3  F031         	goto	u2401
  6087   006342  EFA5  F031         	goto	u2400
  6088   006346                     u2401:
  6089   006346  EF9B  F031         	goto	l2737
  6090   00634A                     u2400:
  6091   00634A                     
  6092                           ;i2c.c: 92:  if (bit && read_SDA() == 0) {
  6093   00634A  5007               	movf	i2c_write_bit@bit^0,w,c
  6094   00634C  B4D8               	btfsc	status,2,c
  6095   00634E  EFAB  F031         	goto	u2411
  6096   006352  EFAD  F031         	goto	u2410
  6097   006356                     u2411:
  6098   006356  EFAF  F031         	goto	l2743
  6099   00635A                     u2410:
  6100   00635A  EC33  F030         	call	_read_SDA	;wreg free
  6101   00635E                     l2743:
  6102                           
  6103                           ;i2c.c: 95:  I2C_delay();
  6104   00635E  EC1C  F02E         	call	_I2C_delay	;wreg free
  6105   006362                     
  6106                           ;i2c.c: 96:  clear_SCL();
  6107   006362  EC4D  F02F         	call	_clear_SCL	;wreg free
  6108   006366                     
  6109                           ;i2c.c: 97:  I2C_delay();
  6110   006366  EC1C  F02E         	call	_I2C_delay	;wreg free
  6111   00636A  0012               	return		;funcret
  6112   00636C                     __end_of_i2c_write_bit:
  6113                           	callstack 0
  6114                           
  6115 ;; *************** function _i2c_stop *****************
  6116 ;; Defined at:
  6117 ;;		line 71 in file "i2c.c"
  6118 ;; Parameters:    Size  Location     Type
  6119 ;;		None
  6120 ;; Auto vars:     Size  Location     Type
  6121 ;;		None
  6122 ;; Return value:  Size  Location     Type
  6123 ;;                  1    wreg      void 
  6124 ;; Registers used:
  6125 ;;		wreg, status,2, status,0, cstack
  6126 ;; Tracked objects:
  6127 ;;		On entry : 0/0
  6128 ;;		On exit  : 0/0
  6129 ;;		Unchanged: 0/0
  6130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6131 ;;      Params:         0       0       0       0       0       0       0       0       0
  6132 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6133 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6134 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6135 ;;Total ram usage:        0 bytes
  6136 ;; Hardware stack levels used: 1
  6137 ;; Hardware stack levels required when called: 2
  6138 ;; This function calls:
  6139 ;;		_I2C_delay
  6140 ;;		_clear_SDA
  6141 ;;		_read_SCL
  6142 ;;		_read_SDA
  6143 ;; This function is called by:
  6144 ;;		_i2cWriteByte
  6145 ;;		_i2cReadByte
  6146 ;; This function uses a non-reentrant model
  6147 ;;
  6148                           
  6149                           	psect	text39
  6150   005F72                     __ptext39:
  6151                           	callstack 0
  6152   005F72                     _i2c_stop:
  6153                           	callstack 24
  6154   005F72                     
  6155                           ;i2c.c: 73:  clear_SDA();
  6156   005F72  EC62  F02F         	call	_clear_SDA	;wreg free
  6157   005F76                     
  6158                           ;i2c.c: 74:  I2C_delay();
  6159   005F76  EC1C  F02E         	call	_I2C_delay	;wreg free
  6160   005F7A                     l2719:
  6161   005F7A  EC17  F030         	call	_read_SCL	;wreg free
  6162   005F7E  0900               	iorlw	0
  6163   005F80  B4D8               	btfsc	status,2,c
  6164   005F82  EFC5  F02F         	goto	u2381
  6165   005F86  EFC7  F02F         	goto	u2380
  6166   005F8A                     u2381:
  6167   005F8A  EFBD  F02F         	goto	l2719
  6168   005F8E                     u2380:
  6169   005F8E                     
  6170                           ;i2c.c: 76:  I2C_delay();
  6171   005F8E  EC1C  F02E         	call	_I2C_delay	;wreg free
  6172   005F92                     
  6173                           ;i2c.c: 77:  if (read_SDA() == 0) {
  6174   005F92  EC33  F030         	call	_read_SDA	;wreg free
  6175   005F96                     
  6176                           ;i2c.c: 80:  I2C_delay();
  6177   005F96  EC1C  F02E         	call	_I2C_delay	;wreg free
  6178   005F9A                     
  6179                           ;i2c.c: 81:  started = 0;
  6180   005F9A  0E00               	movlw	0
  6181   005F9C  6E5B               	movwf	_started^0,c
  6182   005F9E  0012               	return		;funcret
  6183   005FA0                     __end_of_i2c_stop:
  6184                           	callstack 0
  6185                           
  6186 ;; *************** function _i2c_start *****************
  6187 ;; Defined at:
  6188 ;;		line 52 in file "i2c.c"
  6189 ;; Parameters:    Size  Location     Type
  6190 ;;		None
  6191 ;; Auto vars:     Size  Location     Type
  6192 ;;		None
  6193 ;; Return value:  Size  Location     Type
  6194 ;;                  1    wreg      void 
  6195 ;; Registers used:
  6196 ;;		wreg, status,2, status,0, cstack
  6197 ;; Tracked objects:
  6198 ;;		On entry : 0/0
  6199 ;;		On exit  : 0/0
  6200 ;;		Unchanged: 0/0
  6201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6202 ;;      Params:         0       0       0       0       0       0       0       0       0
  6203 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6204 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6205 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6206 ;;Total ram usage:        0 bytes
  6207 ;; Hardware stack levels used: 1
  6208 ;; Hardware stack levels required when called: 2
  6209 ;; This function calls:
  6210 ;;		_I2C_delay
  6211 ;;		_clear_SCL
  6212 ;;		_clear_SDA
  6213 ;;		_read_SCL
  6214 ;;		_read_SDA
  6215 ;; This function is called by:
  6216 ;;		_i2cWriteByte
  6217 ;; This function uses a non-reentrant model
  6218 ;;
  6219                           
  6220                           	psect	text40
  6221   00614E                     __ptext40:
  6222                           	callstack 0
  6223   00614E                     _i2c_start:
  6224                           	callstack 24
  6225   00614E                     
  6226                           ;i2c.c: 54:  if (started) {
  6227   00614E  505B               	movf	_started^0,w,c
  6228   006150  B4D8               	btfsc	status,2,c
  6229   006152  EFAD  F030         	goto	u2361
  6230   006156  EFAF  F030         	goto	u2360
  6231   00615A                     u2361:
  6232   00615A  EFBF  F030         	goto	l2705
  6233   00615E                     u2360:
  6234   00615E                     
  6235                           ;i2c.c: 55:   read_SDA();
  6236   00615E  EC33  F030         	call	_read_SDA	;wreg free
  6237   006162                     
  6238                           ;i2c.c: 56:   I2C_delay();
  6239   006162  EC1C  F02E         	call	_I2C_delay	;wreg free
  6240   006166                     l2701:
  6241   006166  EC17  F030         	call	_read_SCL	;wreg free
  6242   00616A  0900               	iorlw	0
  6243   00616C  B4D8               	btfsc	status,2,c
  6244   00616E  EFBB  F030         	goto	u2371
  6245   006172  EFBD  F030         	goto	u2370
  6246   006176                     u2371:
  6247   006176  EFB3  F030         	goto	l2701
  6248   00617A                     u2370:
  6249   00617A                     
  6250                           ;i2c.c: 59:   I2C_delay();
  6251   00617A  EC1C  F02E         	call	_I2C_delay	;wreg free
  6252   00617E                     l2705:
  6253                           
  6254                           ;i2c.c: 61:  if (read_SDA() == 0) {
  6255   00617E  EC33  F030         	call	_read_SDA	;wreg free
  6256   006182                     
  6257                           ;i2c.c: 65:  clear_SDA();
  6258   006182  EC62  F02F         	call	_clear_SDA	;wreg free
  6259   006186                     
  6260                           ;i2c.c: 66:  I2C_delay();
  6261   006186  EC1C  F02E         	call	_I2C_delay	;wreg free
  6262   00618A                     
  6263                           ;i2c.c: 67:  clear_SCL();
  6264   00618A  EC4D  F02F         	call	_clear_SCL	;wreg free
  6265   00618E                     
  6266                           ;i2c.c: 68:  started = 1;
  6267   00618E  0E01               	movlw	1
  6268   006190  6E5B               	movwf	_started^0,c
  6269   006192  0012               	return		;funcret
  6270   006194                     __end_of_i2c_start:
  6271                           	callstack 0
  6272                           
  6273 ;; *************** function _clear_SDA *****************
  6274 ;; Defined at:
  6275 ;;		line 45 in file "i2c.c"
  6276 ;; Parameters:    Size  Location     Type
  6277 ;;		None
  6278 ;; Auto vars:     Size  Location     Type
  6279 ;;		None
  6280 ;; Return value:  Size  Location     Type
  6281 ;;                  1    wreg      void 
  6282 ;; Registers used:
  6283 ;;		wreg, status,2, status,0, cstack
  6284 ;; Tracked objects:
  6285 ;;		On entry : 0/0
  6286 ;;		On exit  : 0/0
  6287 ;;		Unchanged: 0/0
  6288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6289 ;;      Params:         0       0       0       0       0       0       0       0       0
  6290 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6291 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6292 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6293 ;;Total ram usage:        0 bytes
  6294 ;; Hardware stack levels used: 1
  6295 ;; Hardware stack levels required when called: 1
  6296 ;; This function calls:
  6297 ;;		_digitalWrite
  6298 ;;		_pinMode
  6299 ;; This function is called by:
  6300 ;;		_i2c_start
  6301 ;;		_i2c_stop
  6302 ;;		_i2c_write_bit
  6303 ;; This function uses a non-reentrant model
  6304 ;;
  6305                           
  6306                           	psect	text41
  6307   005EC4                     __ptext41:
  6308                           	callstack 0
  6309   005EC4                     _clear_SDA:
  6310                           	callstack 24
  6311   005EC4                     
  6312                           ;i2c.c: 47:  pinMode(PIN_B0,0);
  6313   005EC4  0E00               	movlw	0
  6314   005EC6  6E02               	movwf	(pinMode@pin+1)^0,c
  6315   005EC8  0E08               	movlw	8
  6316   005ECA  6E01               	movwf	pinMode@pin^0,c
  6317   005ECC  0E00               	movlw	0
  6318   005ECE  6E04               	movwf	(pinMode@type+1)^0,c
  6319   005ED0  0E00               	movlw	0
  6320   005ED2  6E03               	movwf	pinMode@type^0,c
  6321   005ED4  ECCB  F036         	call	_pinMode	;wreg free
  6322                           
  6323                           ;i2c.c: 48:  digitalWrite(PIN_B0,0);
  6324   005ED8  0E00               	movlw	0
  6325   005EDA  6E02               	movwf	(digitalWrite@pin+1)^0,c
  6326   005EDC  0E08               	movlw	8
  6327   005EDE  6E01               	movwf	digitalWrite@pin^0,c
  6328   005EE0  0E00               	movlw	0
  6329   005EE2  6E04               	movwf	(digitalWrite@value+1)^0,c
  6330   005EE4  0E00               	movlw	0
  6331   005EE6  6E03               	movwf	digitalWrite@value^0,c
  6332   005EE8  ECA4  F035         	call	_digitalWrite	;wreg free
  6333   005EEC  0012               	return		;funcret
  6334   005EEE                     __end_of_clear_SDA:
  6335                           	callstack 0
  6336                           
  6337 ;; *************** function _i2c_read_bit *****************
  6338 ;; Defined at:
  6339 ;;		line 100 in file "i2c.c"
  6340 ;; Parameters:    Size  Location     Type
  6341 ;;		None
  6342 ;; Auto vars:     Size  Location     Type
  6343 ;;  bit             1    6[COMRAM] unsigned char 
  6344 ;; Return value:  Size  Location     Type
  6345 ;;                  1    wreg      unsigned char 
  6346 ;; Registers used:
  6347 ;;		wreg, status,2, status,0, cstack
  6348 ;; Tracked objects:
  6349 ;;		On entry : 0/0
  6350 ;;		On exit  : 0/0
  6351 ;;		Unchanged: 0/0
  6352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6353 ;;      Params:         0       0       0       0       0       0       0       0       0
  6354 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6355 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6356 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6357 ;;Total ram usage:        1 bytes
  6358 ;; Hardware stack levels used: 1
  6359 ;; Hardware stack levels required when called: 2
  6360 ;; This function calls:
  6361 ;;		_I2C_delay
  6362 ;;		_clear_SCL
  6363 ;;		_read_SCL
  6364 ;;		_read_SDA
  6365 ;; This function is called by:
  6366 ;;		_i2cWriteByte
  6367 ;;		_i2cReadByte
  6368 ;; This function uses a non-reentrant model
  6369 ;;
  6370                           
  6371                           	psect	text42
  6372   005FFC                     __ptext42:
  6373                           	callstack 0
  6374   005FFC                     _i2c_read_bit:
  6375                           	callstack 24
  6376   005FFC                     
  6377                           ;i2c.c: 101:  unsigned char bit;;i2c.c: 102:  read_SDA();
  6378   005FFC  EC33  F030         	call	_read_SDA	;wreg free
  6379   006000                     
  6380                           ;i2c.c: 103:  I2C_delay();
  6381   006000  EC1C  F02E         	call	_I2C_delay	;wreg free
  6382   006004                     l2753:
  6383   006004  EC17  F030         	call	_read_SCL	;wreg free
  6384   006008  0900               	iorlw	0
  6385   00600A  B4D8               	btfsc	status,2,c
  6386   00600C  EF0A  F030         	goto	u2421
  6387   006010  EF0C  F030         	goto	u2420
  6388   006014                     u2421:
  6389   006014  EF02  F030         	goto	l2753
  6390   006018                     u2420:
  6391   006018                     
  6392                           ;i2c.c: 105:  bit = read_SDA();
  6393   006018  EC33  F030         	call	_read_SDA	;wreg free
  6394   00601C  6E07               	movwf	i2c_read_bit@bit^0,c
  6395   00601E                     
  6396                           ;i2c.c: 106:  I2C_delay();
  6397   00601E  EC1C  F02E         	call	_I2C_delay	;wreg free
  6398   006022                     
  6399                           ;i2c.c: 107:  clear_SCL();
  6400   006022  EC4D  F02F         	call	_clear_SCL	;wreg free
  6401                           
  6402                           ;i2c.c: 108:  I2C_delay();
  6403   006026  EC1C  F02E         	call	_I2C_delay	;wreg free
  6404   00602A                     
  6405                           ;i2c.c: 109:  return bit;
  6406   00602A  5007               	movf	i2c_read_bit@bit^0,w,c
  6407   00602C  0012               	return		;funcret
  6408   00602E                     __end_of_i2c_read_bit:
  6409                           	callstack 0
  6410                           
  6411 ;; *************** function _read_SDA *****************
  6412 ;; Defined at:
  6413 ;;		line 34 in file "i2c.c"
  6414 ;; Parameters:    Size  Location     Type
  6415 ;;		None
  6416 ;; Auto vars:     Size  Location     Type
  6417 ;;		None
  6418 ;; Return value:  Size  Location     Type
  6419 ;;                  1    wreg      unsigned char 
  6420 ;; Registers used:
  6421 ;;		wreg, status,2, status,0, cstack
  6422 ;; Tracked objects:
  6423 ;;		On entry : 0/0
  6424 ;;		On exit  : 0/0
  6425 ;;		Unchanged: 0/0
  6426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6427 ;;      Params:         0       0       0       0       0       0       0       0       0
  6428 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6429 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6430 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6431 ;;Total ram usage:        0 bytes
  6432 ;; Hardware stack levels used: 1
  6433 ;; Hardware stack levels required when called: 1
  6434 ;; This function calls:
  6435 ;;		_digitalRead
  6436 ;;		_pinMode
  6437 ;; This function is called by:
  6438 ;;		_i2c_start
  6439 ;;		_i2c_stop
  6440 ;;		_i2c_write_bit
  6441 ;;		_i2c_read_bit
  6442 ;; This function uses a non-reentrant model
  6443 ;;
  6444                           
  6445                           	psect	text43
  6446   006066                     __ptext43:
  6447                           	callstack 0
  6448   006066                     _read_SDA:
  6449                           	callstack 24
  6450   006066                     
  6451                           ;i2c.c: 36:  pinMode(PIN_B0,1);
  6452   006066  0E00               	movlw	0
  6453   006068  6E02               	movwf	(pinMode@pin+1)^0,c
  6454   00606A  0E08               	movlw	8
  6455   00606C  6E01               	movwf	pinMode@pin^0,c
  6456   00606E  0E00               	movlw	0
  6457   006070  6E04               	movwf	(pinMode@type+1)^0,c
  6458   006072  0E01               	movlw	1
  6459   006074  6E03               	movwf	pinMode@type^0,c
  6460   006076  ECCB  F036         	call	_pinMode	;wreg free
  6461                           
  6462                           ;i2c.c: 37:  return !!digitalRead(PIN_B0);
  6463   00607A  0E00               	movlw	0
  6464   00607C  6E02               	movwf	(digitalRead@pin+1)^0,c
  6465   00607E  0E08               	movlw	8
  6466   006080  6E01               	movwf	digitalRead@pin^0,c
  6467   006082  ECEF  F034         	call	_digitalRead	;wreg free
  6468   006086  5001               	movf	?_digitalRead^0,w,c
  6469   006088  1002               	iorwf	(?_digitalRead+1)^0,w,c
  6470   00608A  A4D8               	btfss	status,2,c
  6471   00608C  EF4A  F030         	goto	u2341
  6472   006090  EF4D  F030         	goto	u2340
  6473   006094                     u2341:
  6474   006094  0E01               	movlw	1
  6475   006096  EF4E  F030         	goto	u2350
  6476   00609A                     u2340:
  6477   00609A  0E00               	movlw	0
  6478   00609C                     u2350:
  6479   00609C  0012               	return		;funcret
  6480   00609E                     __end_of_read_SDA:
  6481                           	callstack 0
  6482                           
  6483 ;; *************** function _read_SCL *****************
  6484 ;; Defined at:
  6485 ;;		line 29 in file "i2c.c"
  6486 ;; Parameters:    Size  Location     Type
  6487 ;;		None
  6488 ;; Auto vars:     Size  Location     Type
  6489 ;;		None
  6490 ;; Return value:  Size  Location     Type
  6491 ;;                  1    wreg      unsigned char 
  6492 ;; Registers used:
  6493 ;;		wreg, status,2, status,0, cstack
  6494 ;; Tracked objects:
  6495 ;;		On entry : 0/0
  6496 ;;		On exit  : 0/0
  6497 ;;		Unchanged: 0/0
  6498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6499 ;;      Params:         0       0       0       0       0       0       0       0       0
  6500 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6501 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6502 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6503 ;;Total ram usage:        0 bytes
  6504 ;; Hardware stack levels used: 1
  6505 ;; Hardware stack levels required when called: 1
  6506 ;; This function calls:
  6507 ;;		_digitalRead
  6508 ;;		_pinMode
  6509 ;; This function is called by:
  6510 ;;		_i2c_start
  6511 ;;		_i2c_stop
  6512 ;;		_i2c_write_bit
  6513 ;;		_i2c_read_bit
  6514 ;; This function uses a non-reentrant model
  6515 ;;
  6516                           
  6517                           	psect	text44
  6518   00602E                     __ptext44:
  6519                           	callstack 0
  6520   00602E                     _read_SCL:
  6521                           	callstack 24
  6522   00602E                     
  6523                           ;i2c.c: 31:  pinMode(PIN_B1,1);
  6524   00602E  0E00               	movlw	0
  6525   006030  6E02               	movwf	(pinMode@pin+1)^0,c
  6526   006032  0E09               	movlw	9
  6527   006034  6E01               	movwf	pinMode@pin^0,c
  6528   006036  0E00               	movlw	0
  6529   006038  6E04               	movwf	(pinMode@type+1)^0,c
  6530   00603A  0E01               	movlw	1
  6531   00603C  6E03               	movwf	pinMode@type^0,c
  6532   00603E  ECCB  F036         	call	_pinMode	;wreg free
  6533                           
  6534                           ;i2c.c: 32:  return !!digitalRead(PIN_B1);
  6535   006042  0E00               	movlw	0
  6536   006044  6E02               	movwf	(digitalRead@pin+1)^0,c
  6537   006046  0E09               	movlw	9
  6538   006048  6E01               	movwf	digitalRead@pin^0,c
  6539   00604A  ECEF  F034         	call	_digitalRead	;wreg free
  6540   00604E  5001               	movf	?_digitalRead^0,w,c
  6541   006050  1002               	iorwf	(?_digitalRead+1)^0,w,c
  6542   006052  A4D8               	btfss	status,2,c
  6543   006054  EF2E  F030         	goto	u2321
  6544   006058  EF31  F030         	goto	u2320
  6545   00605C                     u2321:
  6546   00605C  0E01               	movlw	1
  6547   00605E  EF32  F030         	goto	u2330
  6548   006062                     u2320:
  6549   006062  0E00               	movlw	0
  6550   006064                     u2330:
  6551   006064  0012               	return		;funcret
  6552   006066                     __end_of_read_SCL:
  6553                           	callstack 0
  6554                           
  6555 ;; *************** function _digitalRead *****************
  6556 ;; Defined at:
  6557 ;;		line 39 in file "io.c"
  6558 ;; Parameters:    Size  Location     Type
  6559 ;;  pin             2    0[COMRAM] int 
  6560 ;; Auto vars:     Size  Location     Type
  6561 ;;		None
  6562 ;; Return value:  Size  Location     Type
  6563 ;;                  2    0[COMRAM] int 
  6564 ;; Registers used:
  6565 ;;		wreg, status,2, status,0
  6566 ;; Tracked objects:
  6567 ;;		On entry : 0/0
  6568 ;;		On exit  : 0/0
  6569 ;;		Unchanged: 0/0
  6570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6571 ;;      Params:         2       0       0       0       0       0       0       0       0
  6572 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6573 ;;      Temps:          3       0       0       0       0       0       0       0       0
  6574 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6575 ;;Total ram usage:        5 bytes
  6576 ;; Hardware stack levels used: 1
  6577 ;; This function calls:
  6578 ;;		Nothing
  6579 ;; This function is called by:
  6580 ;;		_read_SCL
  6581 ;;		_read_SDA
  6582 ;; This function uses a non-reentrant model
  6583 ;;
  6584                           
  6585                           	psect	text45
  6586   0069DE                     __ptext45:
  6587                           	callstack 0
  6588   0069DE                     _digitalRead:
  6589                           	callstack 24
  6590   0069DE                     
  6591                           ;io.c: 40:     if(pin <8){
  6592   0069DE  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  6593   0069E0  EFFD  F034         	goto	u2020
  6594   0069E4  5002               	movf	(digitalRead@pin+1)^0,w,c
  6595   0069E6  E107               	bnz	u2021
  6596   0069E8  0E08               	movlw	8
  6597   0069EA  5C01               	subwf	digitalRead@pin^0,w,c
  6598   0069EC  B0D8               	btfsc	status,0,c
  6599   0069EE  EFFB  F034         	goto	u2021
  6600   0069F2  EFFD  F034         	goto	u2020
  6601   0069F6                     u2021:
  6602   0069F6  EF11  F035         	goto	l2611
  6603   0069FA                     u2020:
  6604   0069FA                     
  6605                           ;io.c: 41:         return ((PORTA) & (1<<(pin)));
  6606   0069FA  C001  F003         	movff	digitalRead@pin,??_digitalRead
  6607   0069FE  0E01               	movlw	1
  6608   006A00  6E04               	movwf	(??_digitalRead+1)^0,c
  6609   006A02  2A03               	incf	??_digitalRead^0,f,c
  6610   006A04  EF06  F035         	goto	u2034
  6611   006A08                     u2035:
  6612   006A08  90D8               	bcf	status,0,c
  6613   006A0A  3604               	rlcf	(??_digitalRead+1)^0,f,c
  6614   006A0C                     u2034:
  6615   006A0C  2E03               	decfsz	??_digitalRead^0,f,c
  6616   006A0E  EF04  F035         	goto	u2035
  6617   006A12  5004               	movf	(??_digitalRead+1)^0,w,c
  6618   006A14  1480               	andwf	128,w,c	;volatile
  6619   006A16  6E05               	movwf	(??_digitalRead+2)^0,c
  6620   006A18  5005               	movf	(??_digitalRead+2)^0,w,c
  6621   006A1A  6E01               	movwf	?_digitalRead^0,c
  6622   006A1C  6A02               	clrf	(?_digitalRead+1)^0,c
  6623   006A1E  EFA3  F035         	goto	l322
  6624   006A22                     l2611:
  6625   006A22  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  6626   006A24  EF1F  F035         	goto	u2040
  6627   006A28  5002               	movf	(digitalRead@pin+1)^0,w,c
  6628   006A2A  E107               	bnz	u2041
  6629   006A2C  0E10               	movlw	16
  6630   006A2E  5C01               	subwf	digitalRead@pin^0,w,c
  6631   006A30  B0D8               	btfsc	status,0,c
  6632   006A32  EF1D  F035         	goto	u2041
  6633   006A36  EF1F  F035         	goto	u2040
  6634   006A3A                     u2041:
  6635   006A3A  EF35  F035         	goto	l2619
  6636   006A3E                     u2040:
  6637   006A3E                     
  6638                           ;io.c: 43:         return ((PORTB) & (1<<(pin-8)));
  6639   006A3E  C001  F003         	movff	digitalRead@pin,??_digitalRead
  6640   006A42  0EF8               	movlw	-8
  6641   006A44  2603               	addwf	??_digitalRead^0,f,c
  6642   006A46  0E01               	movlw	1
  6643   006A48  6E04               	movwf	(??_digitalRead+1)^0,c
  6644   006A4A  2A03               	incf	??_digitalRead^0,f,c
  6645   006A4C  EF2A  F035         	goto	u2054
  6646   006A50                     u2055:
  6647   006A50  90D8               	bcf	status,0,c
  6648   006A52  3604               	rlcf	(??_digitalRead+1)^0,f,c
  6649   006A54                     u2054:
  6650   006A54  2E03               	decfsz	??_digitalRead^0,f,c
  6651   006A56  EF28  F035         	goto	u2055
  6652   006A5A  5004               	movf	(??_digitalRead+1)^0,w,c
  6653   006A5C  1481               	andwf	129,w,c	;volatile
  6654   006A5E  6E05               	movwf	(??_digitalRead+2)^0,c
  6655   006A60  5005               	movf	(??_digitalRead+2)^0,w,c
  6656   006A62  6E01               	movwf	?_digitalRead^0,c
  6657   006A64  6A02               	clrf	(?_digitalRead+1)^0,c
  6658   006A66  EFA3  F035         	goto	l322
  6659   006A6A                     l2619:
  6660   006A6A  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  6661   006A6C  EF43  F035         	goto	u2060
  6662   006A70  5002               	movf	(digitalRead@pin+1)^0,w,c
  6663   006A72  E107               	bnz	u2061
  6664   006A74  0E18               	movlw	24
  6665   006A76  5C01               	subwf	digitalRead@pin^0,w,c
  6666   006A78  B0D8               	btfsc	status,0,c
  6667   006A7A  EF41  F035         	goto	u2061
  6668   006A7E  EF43  F035         	goto	u2060
  6669   006A82                     u2061:
  6670   006A82  EF59  F035         	goto	l2627
  6671   006A86                     u2060:
  6672   006A86                     
  6673                           ;io.c: 45:         return ((PORTC) & (1<<(pin-16)));
  6674   006A86  C001  F003         	movff	digitalRead@pin,??_digitalRead
  6675   006A8A  0EF0               	movlw	-16
  6676   006A8C  2603               	addwf	??_digitalRead^0,f,c
  6677   006A8E  0E01               	movlw	1
  6678   006A90  6E04               	movwf	(??_digitalRead+1)^0,c
  6679   006A92  2A03               	incf	??_digitalRead^0,f,c
  6680   006A94  EF4E  F035         	goto	u2074
  6681   006A98                     u2075:
  6682   006A98  90D8               	bcf	status,0,c
  6683   006A9A  3604               	rlcf	(??_digitalRead+1)^0,f,c
  6684   006A9C                     u2074:
  6685   006A9C  2E03               	decfsz	??_digitalRead^0,f,c
  6686   006A9E  EF4C  F035         	goto	u2075
  6687   006AA2  5004               	movf	(??_digitalRead+1)^0,w,c
  6688   006AA4  1482               	andwf	130,w,c	;volatile
  6689   006AA6  6E05               	movwf	(??_digitalRead+2)^0,c
  6690   006AA8  5005               	movf	(??_digitalRead+2)^0,w,c
  6691   006AAA  6E01               	movwf	?_digitalRead^0,c
  6692   006AAC  6A02               	clrf	(?_digitalRead+1)^0,c
  6693   006AAE  EFA3  F035         	goto	l322
  6694   006AB2                     l2627:
  6695   006AB2  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  6696   006AB4  EF67  F035         	goto	u2080
  6697   006AB8  5002               	movf	(digitalRead@pin+1)^0,w,c
  6698   006ABA  E107               	bnz	u2081
  6699   006ABC  0E20               	movlw	32
  6700   006ABE  5C01               	subwf	digitalRead@pin^0,w,c
  6701   006AC0  B0D8               	btfsc	status,0,c
  6702   006AC2  EF65  F035         	goto	u2081
  6703   006AC6  EF67  F035         	goto	u2080
  6704   006ACA                     u2081:
  6705   006ACA  EF7D  F035         	goto	l2635
  6706   006ACE                     u2080:
  6707   006ACE                     
  6708                           ;io.c: 47:         return ((PORTD) & (1<<(pin-24)));
  6709   006ACE  C001  F003         	movff	digitalRead@pin,??_digitalRead
  6710   006AD2  0EE8               	movlw	-24
  6711   006AD4  2603               	addwf	??_digitalRead^0,f,c
  6712   006AD6  0E01               	movlw	1
  6713   006AD8  6E04               	movwf	(??_digitalRead+1)^0,c
  6714   006ADA  2A03               	incf	??_digitalRead^0,f,c
  6715   006ADC  EF72  F035         	goto	u2094
  6716   006AE0                     u2095:
  6717   006AE0  90D8               	bcf	status,0,c
  6718   006AE2  3604               	rlcf	(??_digitalRead+1)^0,f,c
  6719   006AE4                     u2094:
  6720   006AE4  2E03               	decfsz	??_digitalRead^0,f,c
  6721   006AE6  EF70  F035         	goto	u2095
  6722   006AEA  5004               	movf	(??_digitalRead+1)^0,w,c
  6723   006AEC  1483               	andwf	131,w,c	;volatile
  6724   006AEE  6E05               	movwf	(??_digitalRead+2)^0,c
  6725   006AF0  5005               	movf	(??_digitalRead+2)^0,w,c
  6726   006AF2  6E01               	movwf	?_digitalRead^0,c
  6727   006AF4  6A02               	clrf	(?_digitalRead+1)^0,c
  6728   006AF6  EFA3  F035         	goto	l322
  6729   006AFA                     l2635:
  6730   006AFA  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  6731   006AFC  EF8B  F035         	goto	u2100
  6732   006B00  5002               	movf	(digitalRead@pin+1)^0,w,c
  6733   006B02  E107               	bnz	u2101
  6734   006B04  0E28               	movlw	40
  6735   006B06  5C01               	subwf	digitalRead@pin^0,w,c
  6736   006B08  B0D8               	btfsc	status,0,c
  6737   006B0A  EF89  F035         	goto	u2101
  6738   006B0E  EF8B  F035         	goto	u2100
  6739   006B12                     u2101:
  6740   006B12  EFA1  F035         	goto	l327
  6741   006B16                     u2100:
  6742   006B16                     
  6743                           ;io.c: 49:         return ((PORTE) & (1<<(pin-32)));
  6744   006B16  C001  F003         	movff	digitalRead@pin,??_digitalRead
  6745   006B1A  0EE0               	movlw	-32
  6746   006B1C  2603               	addwf	??_digitalRead^0,f,c
  6747   006B1E  0E01               	movlw	1
  6748   006B20  6E04               	movwf	(??_digitalRead+1)^0,c
  6749   006B22  2A03               	incf	??_digitalRead^0,f,c
  6750   006B24  EF96  F035         	goto	u2114
  6751   006B28                     u2115:
  6752   006B28  90D8               	bcf	status,0,c
  6753   006B2A  3604               	rlcf	(??_digitalRead+1)^0,f,c
  6754   006B2C                     u2114:
  6755   006B2C  2E03               	decfsz	??_digitalRead^0,f,c
  6756   006B2E  EF94  F035         	goto	u2115
  6757   006B32  5004               	movf	(??_digitalRead+1)^0,w,c
  6758   006B34  1484               	andwf	132,w,c	;volatile
  6759   006B36  6E05               	movwf	(??_digitalRead+2)^0,c
  6760   006B38  5005               	movf	(??_digitalRead+2)^0,w,c
  6761   006B3A  6E01               	movwf	?_digitalRead^0,c
  6762   006B3C  6A02               	clrf	(?_digitalRead+1)^0,c
  6763   006B3E  EFA3  F035         	goto	l322
  6764   006B42                     l327:
  6765   006B42                     
  6766                           ;io.c: 51:     return -1;
  6767   006B42  6801               	setf	?_digitalRead^0,c
  6768   006B44  6802               	setf	(?_digitalRead+1)^0,c
  6769   006B46                     l322:
  6770   006B46  0012               	return		;funcret
  6771   006B48                     __end_of_digitalRead:
  6772                           	callstack 0
  6773                           
  6774 ;; *************** function _clear_SCL *****************
  6775 ;; Defined at:
  6776 ;;		line 39 in file "i2c.c"
  6777 ;; Parameters:    Size  Location     Type
  6778 ;;		None
  6779 ;; Auto vars:     Size  Location     Type
  6780 ;;		None
  6781 ;; Return value:  Size  Location     Type
  6782 ;;                  1    wreg      void 
  6783 ;; Registers used:
  6784 ;;		wreg, status,2, status,0, cstack
  6785 ;; Tracked objects:
  6786 ;;		On entry : 0/0
  6787 ;;		On exit  : 0/0
  6788 ;;		Unchanged: 0/0
  6789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6790 ;;      Params:         0       0       0       0       0       0       0       0       0
  6791 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6792 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6793 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6794 ;;Total ram usage:        0 bytes
  6795 ;; Hardware stack levels used: 1
  6796 ;; Hardware stack levels required when called: 1
  6797 ;; This function calls:
  6798 ;;		_digitalWrite
  6799 ;;		_pinMode
  6800 ;; This function is called by:
  6801 ;;		_i2c_start
  6802 ;;		_i2c_write_bit
  6803 ;;		_i2c_read_bit
  6804 ;; This function uses a non-reentrant model
  6805 ;;
  6806                           
  6807                           	psect	text46
  6808   005E9A                     __ptext46:
  6809                           	callstack 0
  6810   005E9A                     _clear_SCL:
  6811                           	callstack 24
  6812   005E9A                     
  6813                           ;i2c.c: 41:  pinMode(PIN_B1,0);
  6814   005E9A  0E00               	movlw	0
  6815   005E9C  6E02               	movwf	(pinMode@pin+1)^0,c
  6816   005E9E  0E09               	movlw	9
  6817   005EA0  6E01               	movwf	pinMode@pin^0,c
  6818   005EA2  0E00               	movlw	0
  6819   005EA4  6E04               	movwf	(pinMode@type+1)^0,c
  6820   005EA6  0E00               	movlw	0
  6821   005EA8  6E03               	movwf	pinMode@type^0,c
  6822   005EAA  ECCB  F036         	call	_pinMode	;wreg free
  6823                           
  6824                           ;i2c.c: 42:  digitalWrite(PIN_B1,0);
  6825   005EAE  0E00               	movlw	0
  6826   005EB0  6E02               	movwf	(digitalWrite@pin+1)^0,c
  6827   005EB2  0E09               	movlw	9
  6828   005EB4  6E01               	movwf	digitalWrite@pin^0,c
  6829   005EB6  0E00               	movlw	0
  6830   005EB8  6E04               	movwf	(digitalWrite@value+1)^0,c
  6831   005EBA  0E00               	movlw	0
  6832   005EBC  6E03               	movwf	digitalWrite@value^0,c
  6833   005EBE  ECA4  F035         	call	_digitalWrite	;wreg free
  6834   005EC2  0012               	return		;funcret
  6835   005EC4                     __end_of_clear_SCL:
  6836                           	callstack 0
  6837                           
  6838 ;; *************** function _pinMode *****************
  6839 ;; Defined at:
  6840 ;;		line 54 in file "io.c"
  6841 ;; Parameters:    Size  Location     Type
  6842 ;;  pin             2    0[COMRAM] int 
  6843 ;;  type            2    2[COMRAM] int 
  6844 ;; Auto vars:     Size  Location     Type
  6845 ;;		None
  6846 ;; Return value:  Size  Location     Type
  6847 ;;                  1    wreg      void 
  6848 ;; Registers used:
  6849 ;;		wreg, status,2, status,0
  6850 ;; Tracked objects:
  6851 ;;		On entry : 0/0
  6852 ;;		On exit  : 0/0
  6853 ;;		Unchanged: 0/0
  6854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6855 ;;      Params:         4       0       0       0       0       0       0       0       0
  6856 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6857 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6858 ;;      Totals:         6       0       0       0       0       0       0       0       0
  6859 ;;Total ram usage:        6 bytes
  6860 ;; Hardware stack levels used: 1
  6861 ;; This function calls:
  6862 ;;		Nothing
  6863 ;; This function is called by:
  6864 ;;		_i2cInit
  6865 ;;		_read_SCL
  6866 ;;		_read_SDA
  6867 ;;		_clear_SCL
  6868 ;;		_clear_SDA
  6869 ;; This function uses a non-reentrant model
  6870 ;;
  6871                           
  6872                           	psect	text47
  6873   006D96                     __ptext47:
  6874                           	callstack 0
  6875   006D96                     _pinMode:
  6876                           	callstack 24
  6877   006D96                     
  6878                           ;io.c: 56:     if(pin <8){
  6879   006D96  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  6880   006D98  EFD9  F036         	goto	u1820
  6881   006D9C  5002               	movf	(pinMode@pin+1)^0,w,c
  6882   006D9E  E107               	bnz	u1821
  6883   006DA0  0E08               	movlw	8
  6884   006DA2  5C01               	subwf	pinMode@pin^0,w,c
  6885   006DA4  B0D8               	btfsc	status,0,c
  6886   006DA6  EFD7  F036         	goto	u1821
  6887   006DAA  EFD9  F036         	goto	u1820
  6888   006DAE                     u1821:
  6889   006DAE  EF03  F037         	goto	l2571
  6890   006DB2                     u1820:
  6891   006DB2                     
  6892                           ;io.c: 57:         if (type){ ((TRISA) |= (1<<(pin)));}
  6893   006DB2  5003               	movf	pinMode@type^0,w,c
  6894   006DB4  1004               	iorwf	(pinMode@type+1)^0,w,c
  6895   006DB6  B4D8               	btfsc	status,2,c
  6896   006DB8  EFE0  F036         	goto	u1831
  6897   006DBC  EFE2  F036         	goto	u1830
  6898   006DC0                     u1831:
  6899   006DC0  EFF2  F036         	goto	l2569
  6900   006DC4                     u1830:
  6901   006DC4  C001  F005         	movff	pinMode@pin,??_pinMode
  6902   006DC8  0E01               	movlw	1
  6903   006DCA  6E06               	movwf	(??_pinMode+1)^0,c
  6904   006DCC  2A05               	incf	??_pinMode^0,f,c
  6905   006DCE  EFEB  F036         	goto	u1844
  6906   006DD2                     u1845:
  6907   006DD2  90D8               	bcf	status,0,c
  6908   006DD4  3606               	rlcf	(??_pinMode+1)^0,f,c
  6909   006DD6                     u1844:
  6910   006DD6  2E05               	decfsz	??_pinMode^0,f,c
  6911   006DD8  EFE9  F036         	goto	u1845
  6912   006DDC  5006               	movf	(??_pinMode+1)^0,w,c
  6913   006DDE  1292               	iorwf	146,f,c	;volatile
  6914   006DE0  EFF1  F037         	goto	l352
  6915   006DE4                     l2569:
  6916   006DE4  C001  F005         	movff	pinMode@pin,??_pinMode
  6917   006DE8  0E01               	movlw	1
  6918   006DEA  6E06               	movwf	(??_pinMode+1)^0,c
  6919   006DEC  2A05               	incf	??_pinMode^0,f,c
  6920   006DEE  EFFB  F036         	goto	u1854
  6921   006DF2                     u1855:
  6922   006DF2  90D8               	bcf	status,0,c
  6923   006DF4  3606               	rlcf	(??_pinMode+1)^0,f,c
  6924   006DF6                     u1854:
  6925   006DF6  2E05               	decfsz	??_pinMode^0,f,c
  6926   006DF8  EFF9  F036         	goto	u1855
  6927   006DFC  5006               	movf	(??_pinMode+1)^0,w,c
  6928   006DFE  0AFF               	xorlw	255
  6929   006E00  1692               	andwf	146,f,c	;volatile
  6930   006E02  EFF1  F037         	goto	l352
  6931   006E06                     l2571:
  6932   006E06  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  6933   006E08  EF11  F037         	goto	u1860
  6934   006E0C  5002               	movf	(pinMode@pin+1)^0,w,c
  6935   006E0E  E107               	bnz	u1861
  6936   006E10  0E10               	movlw	16
  6937   006E12  5C01               	subwf	pinMode@pin^0,w,c
  6938   006E14  B0D8               	btfsc	status,0,c
  6939   006E16  EF0F  F037         	goto	u1861
  6940   006E1A  EF11  F037         	goto	u1860
  6941   006E1E                     u1861:
  6942   006E1E  EF3F  F037         	goto	l2579
  6943   006E22                     u1860:
  6944   006E22                     
  6945                           ;io.c: 60:         if (type){ ((TRISB) |= (1<<(pin-8)));}
  6946   006E22  5003               	movf	pinMode@type^0,w,c
  6947   006E24  1004               	iorwf	(pinMode@type+1)^0,w,c
  6948   006E26  B4D8               	btfsc	status,2,c
  6949   006E28  EF18  F037         	goto	u1871
  6950   006E2C  EF1A  F037         	goto	u1870
  6951   006E30                     u1871:
  6952   006E30  EF2C  F037         	goto	l2577
  6953   006E34                     u1870:
  6954   006E34  C001  F005         	movff	pinMode@pin,??_pinMode
  6955   006E38  0EF8               	movlw	-8
  6956   006E3A  2605               	addwf	??_pinMode^0,f,c
  6957   006E3C  0E01               	movlw	1
  6958   006E3E  6E06               	movwf	(??_pinMode+1)^0,c
  6959   006E40  2A05               	incf	??_pinMode^0,f,c
  6960   006E42  EF25  F037         	goto	u1884
  6961   006E46                     u1885:
  6962   006E46  90D8               	bcf	status,0,c
  6963   006E48  3606               	rlcf	(??_pinMode+1)^0,f,c
  6964   006E4A                     u1884:
  6965   006E4A  2E05               	decfsz	??_pinMode^0,f,c
  6966   006E4C  EF23  F037         	goto	u1885
  6967   006E50  5006               	movf	(??_pinMode+1)^0,w,c
  6968   006E52  1293               	iorwf	147,f,c	;volatile
  6969   006E54  EFF1  F037         	goto	l352
  6970   006E58                     l2577:
  6971   006E58  C001  F005         	movff	pinMode@pin,??_pinMode
  6972   006E5C  0EF8               	movlw	-8
  6973   006E5E  2605               	addwf	??_pinMode^0,f,c
  6974   006E60  0E01               	movlw	1
  6975   006E62  6E06               	movwf	(??_pinMode+1)^0,c
  6976   006E64  2A05               	incf	??_pinMode^0,f,c
  6977   006E66  EF37  F037         	goto	u1894
  6978   006E6A                     u1895:
  6979   006E6A  90D8               	bcf	status,0,c
  6980   006E6C  3606               	rlcf	(??_pinMode+1)^0,f,c
  6981   006E6E                     u1894:
  6982   006E6E  2E05               	decfsz	??_pinMode^0,f,c
  6983   006E70  EF35  F037         	goto	u1895
  6984   006E74  5006               	movf	(??_pinMode+1)^0,w,c
  6985   006E76  0AFF               	xorlw	255
  6986   006E78  1693               	andwf	147,f,c	;volatile
  6987   006E7A  EFF1  F037         	goto	l352
  6988   006E7E                     l2579:
  6989   006E7E  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  6990   006E80  EF4D  F037         	goto	u1900
  6991   006E84  5002               	movf	(pinMode@pin+1)^0,w,c
  6992   006E86  E107               	bnz	u1901
  6993   006E88  0E18               	movlw	24
  6994   006E8A  5C01               	subwf	pinMode@pin^0,w,c
  6995   006E8C  B0D8               	btfsc	status,0,c
  6996   006E8E  EF4B  F037         	goto	u1901
  6997   006E92  EF4D  F037         	goto	u1900
  6998   006E96                     u1901:
  6999   006E96  EF7B  F037         	goto	l2587
  7000   006E9A                     u1900:
  7001   006E9A                     
  7002                           ;io.c: 63:         if (type){ ((TRISC) |= (1<<(pin-16)));}
  7003   006E9A  5003               	movf	pinMode@type^0,w,c
  7004   006E9C  1004               	iorwf	(pinMode@type+1)^0,w,c
  7005   006E9E  B4D8               	btfsc	status,2,c
  7006   006EA0  EF54  F037         	goto	u1911
  7007   006EA4  EF56  F037         	goto	u1910
  7008   006EA8                     u1911:
  7009   006EA8  EF68  F037         	goto	l2585
  7010   006EAC                     u1910:
  7011   006EAC  C001  F005         	movff	pinMode@pin,??_pinMode
  7012   006EB0  0EF0               	movlw	-16
  7013   006EB2  2605               	addwf	??_pinMode^0,f,c
  7014   006EB4  0E01               	movlw	1
  7015   006EB6  6E06               	movwf	(??_pinMode+1)^0,c
  7016   006EB8  2A05               	incf	??_pinMode^0,f,c
  7017   006EBA  EF61  F037         	goto	u1924
  7018   006EBE                     u1925:
  7019   006EBE  90D8               	bcf	status,0,c
  7020   006EC0  3606               	rlcf	(??_pinMode+1)^0,f,c
  7021   006EC2                     u1924:
  7022   006EC2  2E05               	decfsz	??_pinMode^0,f,c
  7023   006EC4  EF5F  F037         	goto	u1925
  7024   006EC8  5006               	movf	(??_pinMode+1)^0,w,c
  7025   006ECA  1294               	iorwf	148,f,c	;volatile
  7026   006ECC  EFF1  F037         	goto	l352
  7027   006ED0                     l2585:
  7028   006ED0  C001  F005         	movff	pinMode@pin,??_pinMode
  7029   006ED4  0EF0               	movlw	-16
  7030   006ED6  2605               	addwf	??_pinMode^0,f,c
  7031   006ED8  0E01               	movlw	1
  7032   006EDA  6E06               	movwf	(??_pinMode+1)^0,c
  7033   006EDC  2A05               	incf	??_pinMode^0,f,c
  7034   006EDE  EF73  F037         	goto	u1934
  7035   006EE2                     u1935:
  7036   006EE2  90D8               	bcf	status,0,c
  7037   006EE4  3606               	rlcf	(??_pinMode+1)^0,f,c
  7038   006EE6                     u1934:
  7039   006EE6  2E05               	decfsz	??_pinMode^0,f,c
  7040   006EE8  EF71  F037         	goto	u1935
  7041   006EEC  5006               	movf	(??_pinMode+1)^0,w,c
  7042   006EEE  0AFF               	xorlw	255
  7043   006EF0  1694               	andwf	148,f,c	;volatile
  7044   006EF2  EFF1  F037         	goto	l352
  7045   006EF6                     l2587:
  7046   006EF6  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  7047   006EF8  EF89  F037         	goto	u1940
  7048   006EFC  5002               	movf	(pinMode@pin+1)^0,w,c
  7049   006EFE  E107               	bnz	u1941
  7050   006F00  0E20               	movlw	32
  7051   006F02  5C01               	subwf	pinMode@pin^0,w,c
  7052   006F04  B0D8               	btfsc	status,0,c
  7053   006F06  EF87  F037         	goto	u1941
  7054   006F0A  EF89  F037         	goto	u1940
  7055   006F0E                     u1941:
  7056   006F0E  EFB7  F037         	goto	l2595
  7057   006F12                     u1940:
  7058   006F12                     
  7059                           ;io.c: 66:         if (type){ ((TRISD) |= (1<<(pin-24)));}
  7060   006F12  5003               	movf	pinMode@type^0,w,c
  7061   006F14  1004               	iorwf	(pinMode@type+1)^0,w,c
  7062   006F16  B4D8               	btfsc	status,2,c
  7063   006F18  EF90  F037         	goto	u1951
  7064   006F1C  EF92  F037         	goto	u1950
  7065   006F20                     u1951:
  7066   006F20  EFA4  F037         	goto	l2593
  7067   006F24                     u1950:
  7068   006F24  C001  F005         	movff	pinMode@pin,??_pinMode
  7069   006F28  0EE8               	movlw	-24
  7070   006F2A  2605               	addwf	??_pinMode^0,f,c
  7071   006F2C  0E01               	movlw	1
  7072   006F2E  6E06               	movwf	(??_pinMode+1)^0,c
  7073   006F30  2A05               	incf	??_pinMode^0,f,c
  7074   006F32  EF9D  F037         	goto	u1964
  7075   006F36                     u1965:
  7076   006F36  90D8               	bcf	status,0,c
  7077   006F38  3606               	rlcf	(??_pinMode+1)^0,f,c
  7078   006F3A                     u1964:
  7079   006F3A  2E05               	decfsz	??_pinMode^0,f,c
  7080   006F3C  EF9B  F037         	goto	u1965
  7081   006F40  5006               	movf	(??_pinMode+1)^0,w,c
  7082   006F42  1295               	iorwf	149,f,c	;volatile
  7083   006F44  EFF1  F037         	goto	l352
  7084   006F48                     l2593:
  7085   006F48  C001  F005         	movff	pinMode@pin,??_pinMode
  7086   006F4C  0EE8               	movlw	-24
  7087   006F4E  2605               	addwf	??_pinMode^0,f,c
  7088   006F50  0E01               	movlw	1
  7089   006F52  6E06               	movwf	(??_pinMode+1)^0,c
  7090   006F54  2A05               	incf	??_pinMode^0,f,c
  7091   006F56  EFAF  F037         	goto	u1974
  7092   006F5A                     u1975:
  7093   006F5A  90D8               	bcf	status,0,c
  7094   006F5C  3606               	rlcf	(??_pinMode+1)^0,f,c
  7095   006F5E                     u1974:
  7096   006F5E  2E05               	decfsz	??_pinMode^0,f,c
  7097   006F60  EFAD  F037         	goto	u1975
  7098   006F64  5006               	movf	(??_pinMode+1)^0,w,c
  7099   006F66  0AFF               	xorlw	255
  7100   006F68  1695               	andwf	149,f,c	;volatile
  7101   006F6A  EFF1  F037         	goto	l352
  7102   006F6E                     l2595:
  7103   006F6E  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  7104   006F70  EFC5  F037         	goto	u1980
  7105   006F74  5002               	movf	(pinMode@pin+1)^0,w,c
  7106   006F76  E107               	bnz	u1981
  7107   006F78  0E28               	movlw	40
  7108   006F7A  5C01               	subwf	pinMode@pin^0,w,c
  7109   006F7C  B0D8               	btfsc	status,0,c
  7110   006F7E  EFC3  F037         	goto	u1981
  7111   006F82  EFC5  F037         	goto	u1980
  7112   006F86                     u1981:
  7113   006F86  EFF1  F037         	goto	l352
  7114   006F8A                     u1980:
  7115   006F8A                     
  7116                           ;io.c: 69:         if (type){ ((TRISE) |= (1<<(pin-32)));}
  7117   006F8A  5003               	movf	pinMode@type^0,w,c
  7118   006F8C  1004               	iorwf	(pinMode@type+1)^0,w,c
  7119   006F8E  B4D8               	btfsc	status,2,c
  7120   006F90  EFCC  F037         	goto	u1991
  7121   006F94  EFCE  F037         	goto	u1990
  7122   006F98                     u1991:
  7123   006F98  EFE0  F037         	goto	l2601
  7124   006F9C                     u1990:
  7125   006F9C  C001  F005         	movff	pinMode@pin,??_pinMode
  7126   006FA0  0EE0               	movlw	-32
  7127   006FA2  2605               	addwf	??_pinMode^0,f,c
  7128   006FA4  0E01               	movlw	1
  7129   006FA6  6E06               	movwf	(??_pinMode+1)^0,c
  7130   006FA8  2A05               	incf	??_pinMode^0,f,c
  7131   006FAA  EFD9  F037         	goto	u2004
  7132   006FAE                     u2005:
  7133   006FAE  90D8               	bcf	status,0,c
  7134   006FB0  3606               	rlcf	(??_pinMode+1)^0,f,c
  7135   006FB2                     u2004:
  7136   006FB2  2E05               	decfsz	??_pinMode^0,f,c
  7137   006FB4  EFD7  F037         	goto	u2005
  7138   006FB8  5006               	movf	(??_pinMode+1)^0,w,c
  7139   006FBA  1296               	iorwf	150,f,c	;volatile
  7140   006FBC  EFF1  F037         	goto	l352
  7141   006FC0                     l2601:
  7142   006FC0  C001  F005         	movff	pinMode@pin,??_pinMode
  7143   006FC4  0EE0               	movlw	-32
  7144   006FC6  2605               	addwf	??_pinMode^0,f,c
  7145   006FC8  0E01               	movlw	1
  7146   006FCA  6E06               	movwf	(??_pinMode+1)^0,c
  7147   006FCC  2A05               	incf	??_pinMode^0,f,c
  7148   006FCE  EFEB  F037         	goto	u2014
  7149   006FD2                     u2015:
  7150   006FD2  90D8               	bcf	status,0,c
  7151   006FD4  3606               	rlcf	(??_pinMode+1)^0,f,c
  7152   006FD6                     u2014:
  7153   006FD6  2E05               	decfsz	??_pinMode^0,f,c
  7154   006FD8  EFE9  F037         	goto	u2015
  7155   006FDC  5006               	movf	(??_pinMode+1)^0,w,c
  7156   006FDE  0AFF               	xorlw	255
  7157   006FE0  1696               	andwf	150,f,c	;volatile
  7158   006FE2                     l352:
  7159   006FE2  0012               	return		;funcret
  7160   006FE4                     __end_of_pinMode:
  7161                           	callstack 0
  7162                           
  7163 ;; *************** function _digitalWrite *****************
  7164 ;; Defined at:
  7165 ;;		line 14 in file "io.c"
  7166 ;; Parameters:    Size  Location     Type
  7167 ;;  pin             2    0[COMRAM] int 
  7168 ;;  value           2    2[COMRAM] int 
  7169 ;; Auto vars:     Size  Location     Type
  7170 ;;		None
  7171 ;; Return value:  Size  Location     Type
  7172 ;;                  1    wreg      void 
  7173 ;; Registers used:
  7174 ;;		wreg, status,2, status,0
  7175 ;; Tracked objects:
  7176 ;;		On entry : 0/0
  7177 ;;		On exit  : 0/0
  7178 ;;		Unchanged: 0/0
  7179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7180 ;;      Params:         4       0       0       0       0       0       0       0       0
  7181 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7182 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7183 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7184 ;;Total ram usage:        6 bytes
  7185 ;; Hardware stack levels used: 1
  7186 ;; This function calls:
  7187 ;;		Nothing
  7188 ;; This function is called by:
  7189 ;;		_clear_SCL
  7190 ;;		_clear_SDA
  7191 ;; This function uses a non-reentrant model
  7192 ;;
  7193                           
  7194                           	psect	text48
  7195   006B48                     __ptext48:
  7196                           	callstack 0
  7197   006B48                     _digitalWrite:
  7198                           	callstack 24
  7199   006B48                     
  7200                           ;io.c: 16:     if(pin <8){
  7201   006B48  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  7202   006B4A  EFB2  F035         	goto	u2120
  7203   006B4E  5002               	movf	(digitalWrite@pin+1)^0,w,c
  7204   006B50  E107               	bnz	u2121
  7205   006B52  0E08               	movlw	8
  7206   006B54  5C01               	subwf	digitalWrite@pin^0,w,c
  7207   006B56  B0D8               	btfsc	status,0,c
  7208   006B58  EFB0  F035         	goto	u2121
  7209   006B5C  EFB2  F035         	goto	u2120
  7210   006B60                     u2121:
  7211   006B60  EFDC  F035         	goto	l2649
  7212   006B64                     u2120:
  7213   006B64                     
  7214                           ;io.c: 17:         if (value){ ((PORTA) |= (1<<(pin)));}
  7215   006B64  5003               	movf	digitalWrite@value^0,w,c
  7216   006B66  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  7217   006B68  B4D8               	btfsc	status,2,c
  7218   006B6A  EFB9  F035         	goto	u2131
  7219   006B6E  EFBB  F035         	goto	u2130
  7220   006B72                     u2131:
  7221   006B72  EFCB  F035         	goto	l2647
  7222   006B76                     u2130:
  7223   006B76  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  7224   006B7A  0E01               	movlw	1
  7225   006B7C  6E06               	movwf	(??_digitalWrite+1)^0,c
  7226   006B7E  2A05               	incf	??_digitalWrite^0,f,c
  7227   006B80  EFC4  F035         	goto	u2144
  7228   006B84                     u2145:
  7229   006B84  90D8               	bcf	status,0,c
  7230   006B86  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  7231   006B88                     u2144:
  7232   006B88  2E05               	decfsz	??_digitalWrite^0,f,c
  7233   006B8A  EFC2  F035         	goto	u2145
  7234   006B8E  5006               	movf	(??_digitalWrite+1)^0,w,c
  7235   006B90  1280               	iorwf	128,f,c	;volatile
  7236   006B92  EFCA  F036         	goto	l318
  7237   006B96                     l2647:
  7238   006B96  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  7239   006B9A  0E01               	movlw	1
  7240   006B9C  6E06               	movwf	(??_digitalWrite+1)^0,c
  7241   006B9E  2A05               	incf	??_digitalWrite^0,f,c
  7242   006BA0  EFD4  F035         	goto	u2154
  7243   006BA4                     u2155:
  7244   006BA4  90D8               	bcf	status,0,c
  7245   006BA6  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  7246   006BA8                     u2154:
  7247   006BA8  2E05               	decfsz	??_digitalWrite^0,f,c
  7248   006BAA  EFD2  F035         	goto	u2155
  7249   006BAE  5006               	movf	(??_digitalWrite+1)^0,w,c
  7250   006BB0  0AFF               	xorlw	255
  7251   006BB2  1680               	andwf	128,f,c	;volatile
  7252   006BB4  EFCA  F036         	goto	l318
  7253   006BB8                     l2649:
  7254   006BB8  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  7255   006BBA  EFEA  F035         	goto	u2160
  7256   006BBE  5002               	movf	(digitalWrite@pin+1)^0,w,c
  7257   006BC0  E107               	bnz	u2161
  7258   006BC2  0E10               	movlw	16
  7259   006BC4  5C01               	subwf	digitalWrite@pin^0,w,c
  7260   006BC6  B0D8               	btfsc	status,0,c
  7261   006BC8  EFE8  F035         	goto	u2161
  7262   006BCC  EFEA  F035         	goto	u2160
  7263   006BD0                     u2161:
  7264   006BD0  EF18  F036         	goto	l2657
  7265   006BD4                     u2160:
  7266   006BD4                     
  7267                           ;io.c: 20:         pin -=8;
  7268   006BD4  0EF8               	movlw	248
  7269   006BD6  2601               	addwf	digitalWrite@pin^0,f,c
  7270   006BD8  0EFF               	movlw	255
  7271   006BDA  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  7272                           
  7273                           ;io.c: 21:         if (value){ ((PORTB) |= (1<<(pin)));}
  7274   006BDC  5003               	movf	digitalWrite@value^0,w,c
  7275   006BDE  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  7276   006BE0  B4D8               	btfsc	status,2,c
  7277   006BE2  EFF5  F035         	goto	u2171
  7278   006BE6  EFF7  F035         	goto	u2170
  7279   006BEA                     u2171:
  7280   006BEA  EF07  F036         	goto	l2655
  7281   006BEE                     u2170:
  7282   006BEE  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  7283   006BF2  0E01               	movlw	1
  7284   006BF4  6E06               	movwf	(??_digitalWrite+1)^0,c
  7285   006BF6  2A05               	incf	??_digitalWrite^0,f,c
  7286   006BF8  EF00  F036         	goto	u2184
  7287   006BFC                     u2185:
  7288   006BFC  90D8               	bcf	status,0,c
  7289   006BFE  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  7290   006C00                     u2184:
  7291   006C00  2E05               	decfsz	??_digitalWrite^0,f,c
  7292   006C02  EFFE  F035         	goto	u2185
  7293   006C06  5006               	movf	(??_digitalWrite+1)^0,w,c
  7294   006C08  1281               	iorwf	129,f,c	;volatile
  7295   006C0A  EFCA  F036         	goto	l318
  7296   006C0E                     l2655:
  7297   006C0E  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  7298   006C12  0E01               	movlw	1
  7299   006C14  6E06               	movwf	(??_digitalWrite+1)^0,c
  7300   006C16  2A05               	incf	??_digitalWrite^0,f,c
  7301   006C18  EF10  F036         	goto	u2194
  7302   006C1C                     u2195:
  7303   006C1C  90D8               	bcf	status,0,c
  7304   006C1E  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  7305   006C20                     u2194:
  7306   006C20  2E05               	decfsz	??_digitalWrite^0,f,c
  7307   006C22  EF0E  F036         	goto	u2195
  7308   006C26  5006               	movf	(??_digitalWrite+1)^0,w,c
  7309   006C28  0AFF               	xorlw	255
  7310   006C2A  1681               	andwf	129,f,c	;volatile
  7311   006C2C  EFCA  F036         	goto	l318
  7312   006C30                     l2657:
  7313   006C30  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  7314   006C32  EF26  F036         	goto	u2200
  7315   006C36  5002               	movf	(digitalWrite@pin+1)^0,w,c
  7316   006C38  E107               	bnz	u2201
  7317   006C3A  0E18               	movlw	24
  7318   006C3C  5C01               	subwf	digitalWrite@pin^0,w,c
  7319   006C3E  B0D8               	btfsc	status,0,c
  7320   006C40  EF24  F036         	goto	u2201
  7321   006C44  EF26  F036         	goto	u2200
  7322   006C48                     u2201:
  7323   006C48  EF54  F036         	goto	l2665
  7324   006C4C                     u2200:
  7325   006C4C                     
  7326                           ;io.c: 24:         pin -=16;
  7327   006C4C  0EF0               	movlw	240
  7328   006C4E  2601               	addwf	digitalWrite@pin^0,f,c
  7329   006C50  0EFF               	movlw	255
  7330   006C52  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  7331                           
  7332                           ;io.c: 25:         if (value){ ((PORTC) |= (1<<(pin)));}
  7333   006C54  5003               	movf	digitalWrite@value^0,w,c
  7334   006C56  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  7335   006C58  B4D8               	btfsc	status,2,c
  7336   006C5A  EF31  F036         	goto	u2211
  7337   006C5E  EF33  F036         	goto	u2210
  7338   006C62                     u2211:
  7339   006C62  EF43  F036         	goto	l2663
  7340   006C66                     u2210:
  7341   006C66  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  7342   006C6A  0E01               	movlw	1
  7343   006C6C  6E06               	movwf	(??_digitalWrite+1)^0,c
  7344   006C6E  2A05               	incf	??_digitalWrite^0,f,c
  7345   006C70  EF3C  F036         	goto	u2224
  7346   006C74                     u2225:
  7347   006C74  90D8               	bcf	status,0,c
  7348   006C76  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  7349   006C78                     u2224:
  7350   006C78  2E05               	decfsz	??_digitalWrite^0,f,c
  7351   006C7A  EF3A  F036         	goto	u2225
  7352   006C7E  5006               	movf	(??_digitalWrite+1)^0,w,c
  7353   006C80  1282               	iorwf	130,f,c	;volatile
  7354   006C82  EFCA  F036         	goto	l318
  7355   006C86                     l2663:
  7356   006C86  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  7357   006C8A  0E01               	movlw	1
  7358   006C8C  6E06               	movwf	(??_digitalWrite+1)^0,c
  7359   006C8E  2A05               	incf	??_digitalWrite^0,f,c
  7360   006C90  EF4C  F036         	goto	u2234
  7361   006C94                     u2235:
  7362   006C94  90D8               	bcf	status,0,c
  7363   006C96  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  7364   006C98                     u2234:
  7365   006C98  2E05               	decfsz	??_digitalWrite^0,f,c
  7366   006C9A  EF4A  F036         	goto	u2235
  7367   006C9E  5006               	movf	(??_digitalWrite+1)^0,w,c
  7368   006CA0  0AFF               	xorlw	255
  7369   006CA2  1682               	andwf	130,f,c	;volatile
  7370   006CA4  EFCA  F036         	goto	l318
  7371   006CA8                     l2665:
  7372   006CA8  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  7373   006CAA  EF62  F036         	goto	u2240
  7374   006CAE  5002               	movf	(digitalWrite@pin+1)^0,w,c
  7375   006CB0  E107               	bnz	u2241
  7376   006CB2  0E20               	movlw	32
  7377   006CB4  5C01               	subwf	digitalWrite@pin^0,w,c
  7378   006CB6  B0D8               	btfsc	status,0,c
  7379   006CB8  EF60  F036         	goto	u2241
  7380   006CBC  EF62  F036         	goto	u2240
  7381   006CC0                     u2241:
  7382   006CC0  EF90  F036         	goto	l2673
  7383   006CC4                     u2240:
  7384   006CC4                     
  7385                           ;io.c: 28:         pin -=24;
  7386   006CC4  0EE8               	movlw	232
  7387   006CC6  2601               	addwf	digitalWrite@pin^0,f,c
  7388   006CC8  0EFF               	movlw	255
  7389   006CCA  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  7390                           
  7391                           ;io.c: 29:         if (value){ ((PORTD) |= (1<<(pin)));}
  7392   006CCC  5003               	movf	digitalWrite@value^0,w,c
  7393   006CCE  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  7394   006CD0  B4D8               	btfsc	status,2,c
  7395   006CD2  EF6D  F036         	goto	u2251
  7396   006CD6  EF6F  F036         	goto	u2250
  7397   006CDA                     u2251:
  7398   006CDA  EF7F  F036         	goto	l2671
  7399   006CDE                     u2250:
  7400   006CDE  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  7401   006CE2  0E01               	movlw	1
  7402   006CE4  6E06               	movwf	(??_digitalWrite+1)^0,c
  7403   006CE6  2A05               	incf	??_digitalWrite^0,f,c
  7404   006CE8  EF78  F036         	goto	u2264
  7405   006CEC                     u2265:
  7406   006CEC  90D8               	bcf	status,0,c
  7407   006CEE  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  7408   006CF0                     u2264:
  7409   006CF0  2E05               	decfsz	??_digitalWrite^0,f,c
  7410   006CF2  EF76  F036         	goto	u2265
  7411   006CF6  5006               	movf	(??_digitalWrite+1)^0,w,c
  7412   006CF8  1283               	iorwf	131,f,c	;volatile
  7413   006CFA  EFCA  F036         	goto	l318
  7414   006CFE                     l2671:
  7415   006CFE  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  7416   006D02  0E01               	movlw	1
  7417   006D04  6E06               	movwf	(??_digitalWrite+1)^0,c
  7418   006D06  2A05               	incf	??_digitalWrite^0,f,c
  7419   006D08  EF88  F036         	goto	u2274
  7420   006D0C                     u2275:
  7421   006D0C  90D8               	bcf	status,0,c
  7422   006D0E  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  7423   006D10                     u2274:
  7424   006D10  2E05               	decfsz	??_digitalWrite^0,f,c
  7425   006D12  EF86  F036         	goto	u2275
  7426   006D16  5006               	movf	(??_digitalWrite+1)^0,w,c
  7427   006D18  0AFF               	xorlw	255
  7428   006D1A  1683               	andwf	131,f,c	;volatile
  7429   006D1C  EFCA  F036         	goto	l318
  7430   006D20                     l2673:
  7431   006D20  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  7432   006D22  EF9E  F036         	goto	u2280
  7433   006D26  5002               	movf	(digitalWrite@pin+1)^0,w,c
  7434   006D28  E107               	bnz	u2281
  7435   006D2A  0E28               	movlw	40
  7436   006D2C  5C01               	subwf	digitalWrite@pin^0,w,c
  7437   006D2E  B0D8               	btfsc	status,0,c
  7438   006D30  EF9C  F036         	goto	u2281
  7439   006D34  EF9E  F036         	goto	u2280
  7440   006D38                     u2281:
  7441   006D38  EFCA  F036         	goto	l318
  7442   006D3C                     u2280:
  7443   006D3C                     
  7444                           ;io.c: 32:         pin -=32;
  7445   006D3C  0EE0               	movlw	224
  7446   006D3E  2601               	addwf	digitalWrite@pin^0,f,c
  7447   006D40  0EFF               	movlw	255
  7448   006D42  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  7449                           
  7450                           ;io.c: 33:         if (value){ ((PORTE) |= (1<<(pin)));}
  7451   006D44  5003               	movf	digitalWrite@value^0,w,c
  7452   006D46  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  7453   006D48  B4D8               	btfsc	status,2,c
  7454   006D4A  EFA9  F036         	goto	u2291
  7455   006D4E  EFAB  F036         	goto	u2290
  7456   006D52                     u2291:
  7457   006D52  EFBB  F036         	goto	l2679
  7458   006D56                     u2290:
  7459   006D56  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  7460   006D5A  0E01               	movlw	1
  7461   006D5C  6E06               	movwf	(??_digitalWrite+1)^0,c
  7462   006D5E  2A05               	incf	??_digitalWrite^0,f,c
  7463   006D60  EFB4  F036         	goto	u2304
  7464   006D64                     u2305:
  7465   006D64  90D8               	bcf	status,0,c
  7466   006D66  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  7467   006D68                     u2304:
  7468   006D68  2E05               	decfsz	??_digitalWrite^0,f,c
  7469   006D6A  EFB2  F036         	goto	u2305
  7470   006D6E  5006               	movf	(??_digitalWrite+1)^0,w,c
  7471   006D70  1284               	iorwf	132,f,c	;volatile
  7472   006D72  EFCA  F036         	goto	l318
  7473   006D76                     l2679:
  7474   006D76  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  7475   006D7A  0E01               	movlw	1
  7476   006D7C  6E06               	movwf	(??_digitalWrite+1)^0,c
  7477   006D7E  2A05               	incf	??_digitalWrite^0,f,c
  7478   006D80  EFC4  F036         	goto	u2314
  7479   006D84                     u2315:
  7480   006D84  90D8               	bcf	status,0,c
  7481   006D86  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  7482   006D88                     u2314:
  7483   006D88  2E05               	decfsz	??_digitalWrite^0,f,c
  7484   006D8A  EFC2  F036         	goto	u2315
  7485   006D8E  5006               	movf	(??_digitalWrite+1)^0,w,c
  7486   006D90  0AFF               	xorlw	255
  7487   006D92  1684               	andwf	132,f,c	;volatile
  7488   006D94                     l318:
  7489   006D94  0012               	return		;funcret
  7490   006D96                     __end_of_digitalWrite:
  7491                           	callstack 0
  7492                           
  7493 ;; *************** function _I2C_delay *****************
  7494 ;; Defined at:
  7495 ;;		line 22 in file "i2c.c"
  7496 ;; Parameters:    Size  Location     Type
  7497 ;;		None
  7498 ;; Auto vars:     Size  Location     Type
  7499 ;;  i               2    0        int 
  7500 ;;  v               2    0        volatile int 
  7501 ;; Return value:  Size  Location     Type
  7502 ;;                  1    wreg      void 
  7503 ;; Registers used:
  7504 ;;		None
  7505 ;; Tracked objects:
  7506 ;;		On entry : 0/0
  7507 ;;		On exit  : 0/0
  7508 ;;		Unchanged: 0/0
  7509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7510 ;;      Params:         0       0       0       0       0       0       0       0       0
  7511 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7512 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7513 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7514 ;;Total ram usage:        0 bytes
  7515 ;; Hardware stack levels used: 1
  7516 ;; This function calls:
  7517 ;;		Nothing
  7518 ;; This function is called by:
  7519 ;;		_i2c_start
  7520 ;;		_i2c_stop
  7521 ;;		_i2c_write_bit
  7522 ;;		_i2c_read_bit
  7523 ;; This function uses a non-reentrant model
  7524 ;;
  7525                           
  7526                           	psect	text49
  7527   005C38                     __ptext49:
  7528                           	callstack 0
  7529   005C38                     _I2C_delay:
  7530                           	callstack 25
  7531   005C38  0012               	return		;funcret
  7532   005C3A                     __end_of_I2C_delay:
  7533                           	callstack 0
  7534                           
  7535 ;; *************** function _serialRead *****************
  7536 ;; Defined at:
  7537 ;;		line 88 in file "serial.c"
  7538 ;; Parameters:    Size  Location     Type
  7539 ;;		None
  7540 ;; Auto vars:     Size  Location     Type
  7541 ;;  resp            1    0[COMRAM] unsigned char 
  7542 ;; Return value:  Size  Location     Type
  7543 ;;                  1    wreg      unsigned char 
  7544 ;; Registers used:
  7545 ;;		wreg, status,2, status,0
  7546 ;; Tracked objects:
  7547 ;;		On entry : 0/0
  7548 ;;		On exit  : 0/0
  7549 ;;		Unchanged: 0/0
  7550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7551 ;;      Params:         0       0       0       0       0       0       0       0       0
  7552 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7553 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7554 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7555 ;;Total ram usage:        1 bytes
  7556 ;; Hardware stack levels used: 1
  7557 ;; This function calls:
  7558 ;;		Nothing
  7559 ;; This function is called by:
  7560 ;;		_eventRead
  7561 ;; This function uses a non-reentrant model
  7562 ;;
  7563                           
  7564                           	psect	text50
  7565   005F18                     __ptext50:
  7566                           	callstack 0
  7567   005F18                     _serialRead:
  7568                           	callstack 28
  7569   005F18                     
  7570                           ;serial.c: 89:     char resp = 0;
  7571   005F18  0E00               	movlw	0
  7572   005F1A  6E01               	movwf	serialRead@resp^0,c
  7573   005F1C                     
  7574                           ;serial.c: 91:     if (((RCSTA) & (1<<1)))
  7575   005F1C  A2AB               	btfss	171,1,c	;volatile
  7576   005F1E  EF93  F02F         	goto	u2791
  7577   005F22  EF95  F02F         	goto	u2790
  7578   005F26                     u2791:
  7579   005F26  EF97  F02F         	goto	l3041
  7580   005F2A                     u2790:
  7581   005F2A                     
  7582                           ;serial.c: 92:     {;serial.c: 93:         ((RCSTA) &= ~(1<<4));
  7583   005F2A  98AB               	bcf	171,4,c	;volatile
  7584                           
  7585                           ;serial.c: 94:         ((RCSTA) |= (1<<4));
  7586   005F2C  88AB               	bsf	171,4,c	;volatile
  7587   005F2E                     l3041:
  7588                           
  7589                           ;serial.c: 97:     if (((PIR1) & (1<<5)))
  7590   005F2E  AA9E               	btfss	158,5,c	;volatile
  7591   005F30  EF9C  F02F         	goto	u2801
  7592   005F34  EF9E  F02F         	goto	u2800
  7593   005F38                     u2801:
  7594   005F38  EFA0  F02F         	goto	l3045
  7595   005F3C                     u2800:
  7596   005F3C                     
  7597                           ;serial.c: 98:     {;serial.c: 99:         resp = RCREG;
  7598   005F3C  CFAE F001          	movff	4014,serialRead@resp	;volatile
  7599   005F40                     l3045:
  7600                           
  7601                           ;serial.c: 101:     return resp;
  7602   005F40  5001               	movf	serialRead@resp^0,w,c
  7603   005F42  0012               	return		;funcret
  7604   005F44                     __end_of_serialRead:
  7605                           	callstack 0
  7606                           
  7607 ;; *************** function _pow10 *****************
  7608 ;; Defined at:
  7609 ;;		line 9 in file "event.c"
  7610 ;; Parameters:    Size  Location     Type
  7611 ;;  expoent         2    6[COMRAM] int 
  7612 ;; Auto vars:     Size  Location     Type
  7613 ;;  i               2    9[COMRAM] int 
  7614 ;;  result          2   11[COMRAM] int 
  7615 ;; Return value:  Size  Location     Type
  7616 ;;                  2    6[COMRAM] int 
  7617 ;; Registers used:
  7618 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7619 ;; Tracked objects:
  7620 ;;		On entry : 0/0
  7621 ;;		On exit  : 0/0
  7622 ;;		Unchanged: 0/0
  7623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7624 ;;      Params:         2       0       0       0       0       0       0       0       0
  7625 ;;      Locals:         4       0       0       0       0       0       0       0       0
  7626 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7627 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7628 ;;Total ram usage:        7 bytes
  7629 ;; Hardware stack levels used: 1
  7630 ;; Hardware stack levels required when called: 1
  7631 ;; This function calls:
  7632 ;;		___wmul
  7633 ;; This function is called by:
  7634 ;;		_eventRead
  7635 ;; This function uses a non-reentrant model
  7636 ;;
  7637                           
  7638                           	psect	text51
  7639   00636C                     __ptext51:
  7640                           	callstack 0
  7641   00636C                     _pow10:
  7642                           	callstack 27
  7643   00636C                     
  7644                           ;event.c: 10:     int result = 1;
  7645   00636C  0E00               	movlw	0
  7646   00636E  6E0D               	movwf	(pow10@result+1)^0,c
  7647   006370  0E01               	movlw	1
  7648   006372  6E0C               	movwf	pow10@result^0,c
  7649                           
  7650                           ;event.c: 11:     for (int i = 0; i < expoent; i++) {
  7651   006374  0E00               	movlw	0
  7652   006376  6E0B               	movwf	(pow10@i+1)^0,c
  7653   006378  0E00               	movlw	0
  7654   00637A  6E0A               	movwf	pow10@i^0,c
  7655   00637C  EFD0  F031         	goto	l3095
  7656   006380                     l3091:
  7657                           
  7658                           ;event.c: 12:         result *= 10;
  7659   006380  C00C  F001         	movff	pow10@result,___wmul@multiplier
  7660   006384  C00D  F002         	movff	pow10@result+1,___wmul@multiplier+1
  7661   006388  0E00               	movlw	0
  7662   00638A  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  7663   00638C  0E0A               	movlw	10
  7664   00638E  6E03               	movwf	___wmul@multiplicand^0,c
  7665   006390  ECC7  F02E         	call	___wmul	;wreg free
  7666   006394  C001  F00C         	movff	?___wmul,pow10@result
  7667   006398  C002  F00D         	movff	?___wmul+1,pow10@result+1
  7668   00639C                     
  7669                           ;event.c: 13:     }
  7670   00639C  4A0A               	infsnz	pow10@i^0,f,c
  7671   00639E  2A0B               	incf	(pow10@i+1)^0,f,c
  7672   0063A0                     l3095:
  7673   0063A0  5007               	movf	pow10@expoent^0,w,c
  7674   0063A2  5C0A               	subwf	pow10@i^0,w,c
  7675   0063A4  500B               	movf	(pow10@i+1)^0,w,c
  7676   0063A6  0A80               	xorlw	128
  7677   0063A8  6E09               	movwf	??_pow10^0,c
  7678   0063AA  5008               	movf	(pow10@expoent+1)^0,w,c
  7679   0063AC  0A80               	xorlw	128
  7680   0063AE  5809               	subwfb	??_pow10^0,w,c
  7681   0063B0  A0D8               	btfss	status,0,c
  7682   0063B2  EFDD  F031         	goto	u2851
  7683   0063B6  EFDF  F031         	goto	u2850
  7684   0063BA                     u2851:
  7685   0063BA  EFC0  F031         	goto	l3091
  7686   0063BE                     u2850:
  7687   0063BE                     
  7688                           ;event.c: 14:     return result;
  7689   0063BE  C00C  F007         	movff	pow10@result,?_pow10
  7690   0063C2  C00D  F008         	movff	pow10@result+1,?_pow10+1
  7691   0063C6  0012               	return		;funcret
  7692   0063C8                     __end_of_pow10:
  7693                           	callstack 0
  7694                           
  7695 ;; *************** function ___wmul *****************
  7696 ;; Defined at:
  7697 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
  7698 ;; Parameters:    Size  Location     Type
  7699 ;;  multiplier      2    0[COMRAM] unsigned int 
  7700 ;;  multiplicand    2    2[COMRAM] unsigned int 
  7701 ;; Auto vars:     Size  Location     Type
  7702 ;;  product         2    4[COMRAM] unsigned int 
  7703 ;; Return value:  Size  Location     Type
  7704 ;;                  2    0[COMRAM] unsigned int 
  7705 ;; Registers used:
  7706 ;;		wreg, status,2, status,0, prodl, prodh
  7707 ;; Tracked objects:
  7708 ;;		On entry : 0/0
  7709 ;;		On exit  : 0/0
  7710 ;;		Unchanged: 0/0
  7711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7712 ;;      Params:         4       0       0       0       0       0       0       0       0
  7713 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7714 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7715 ;;      Totals:         6       0       0       0       0       0       0       0       0
  7716 ;;Total ram usage:        6 bytes
  7717 ;; Hardware stack levels used: 1
  7718 ;; This function calls:
  7719 ;;		Nothing
  7720 ;; This function is called by:
  7721 ;;		_pow10
  7722 ;;		_eventRead
  7723 ;;		_bcd2dec
  7724 ;; This function uses a non-reentrant model
  7725 ;;
  7726                           
  7727                           	psect	text52
  7728   005D8E                     __ptext52:
  7729                           	callstack 0
  7730   005D8E                     ___wmul:
  7731                           	callstack 27
  7732   005D8E  5001               	movf	___wmul@multiplier^0,w,c
  7733   005D90  0203               	mulwf	___wmul@multiplicand^0,c
  7734   005D92  CFF3 F005          	movff	prodl,___wmul@product
  7735   005D96  CFF4 F006          	movff	prodh,___wmul@product+1
  7736   005D9A  5001               	movf	___wmul@multiplier^0,w,c
  7737   005D9C  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  7738   005D9E  50F3               	movf	243,w,c
  7739   005DA0  2606               	addwf	(___wmul@product+1)^0,f,c
  7740   005DA2  5002               	movf	(___wmul@multiplier+1)^0,w,c
  7741   005DA4  0203               	mulwf	___wmul@multiplicand^0,c
  7742   005DA6  50F3               	movf	243,w,c
  7743   005DA8  2606               	addwf	(___wmul@product+1)^0,f,c
  7744   005DAA  C005  F001         	movff	___wmul@product,?___wmul
  7745   005DAE  C006  F002         	movff	___wmul@product+1,?___wmul+1
  7746   005DB2  0012               	return		;funcret
  7747   005DB4                     __end_of___wmul:
  7748                           	callstack 0
  7749                           
  7750 ;; *************** function _kpRead *****************
  7751 ;; Defined at:
  7752 ;;		line 21 in file "keypad.c"
  7753 ;; Parameters:    Size  Location     Type
  7754 ;;		None
  7755 ;; Auto vars:     Size  Location     Type
  7756 ;;		None
  7757 ;; Return value:  Size  Location     Type
  7758 ;;                  1    wreg      unsigned char 
  7759 ;; Registers used:
  7760 ;;		wreg, status,2
  7761 ;; Tracked objects:
  7762 ;;		On entry : 0/0
  7763 ;;		On exit  : 0/0
  7764 ;;		Unchanged: 0/0
  7765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7766 ;;      Params:         0       0       0       0       0       0       0       0       0
  7767 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7768 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7769 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7770 ;;Total ram usage:        0 bytes
  7771 ;; Hardware stack levels used: 1
  7772 ;; This function calls:
  7773 ;;		Nothing
  7774 ;; This function is called by:
  7775 ;;		_eventRead
  7776 ;; This function uses a non-reentrant model
  7777 ;;
  7778                           
  7779                           	psect	text53
  7780   005C3A                     __ptext53:
  7781                           	callstack 0
  7782   005C3A                     _kpRead:
  7783                           	callstack 28
  7784   005C3A                     
  7785                           ;keypad.c: 22:     return tecla;
  7786   005C3A  505E               	movf	_tecla^0,w,c
  7787   005C3C  0012               	return		;funcret
  7788   005C3E                     __end_of_kpRead:
  7789                           	callstack 0
  7790                           
  7791 ;; *************** function _serialInit *****************
  7792 ;; Defined at:
  7793 ;;		line 106 in file "serial.c"
  7794 ;; Parameters:    Size  Location     Type
  7795 ;;		None
  7796 ;; Auto vars:     Size  Location     Type
  7797 ;;		None
  7798 ;; Return value:  Size  Location     Type
  7799 ;;                  1    wreg      void 
  7800 ;; Registers used:
  7801 ;;		wreg, status,2, status,0
  7802 ;; Tracked objects:
  7803 ;;		On entry : 0/0
  7804 ;;		On exit  : 0/0
  7805 ;;		Unchanged: 0/0
  7806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7807 ;;      Params:         0       0       0       0       0       0       0       0       0
  7808 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7809 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7810 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7811 ;;Total ram usage:        0 bytes
  7812 ;; Hardware stack levels used: 1
  7813 ;; This function calls:
  7814 ;;		Nothing
  7815 ;; This function is called by:
  7816 ;;		_main
  7817 ;; This function uses a non-reentrant model
  7818 ;;
  7819                           
  7820                           	psect	text54
  7821   005D3A                     __ptext54:
  7822                           	callstack 0
  7823   005D3A                     _serialInit:
  7824                           	callstack 30
  7825   005D3A                     
  7826                           ;serial.c: 107:     TXSTA = 0b00101100;
  7827   005D3A  0E2C               	movlw	44
  7828   005D3C  6EAC               	movwf	172,c	;volatile
  7829                           
  7830                           ;serial.c: 108:     RCSTA = 0b10010000;
  7831   005D3E  0E90               	movlw	144
  7832   005D40  6EAB               	movwf	171,c	;volatile
  7833                           
  7834                           ;serial.c: 109:     BAUDCON = 0b00001000;
  7835   005D42  0E08               	movlw	8
  7836   005D44  6EB8               	movwf	184,c	;volatile
  7837                           
  7838                           ;serial.c: 110:     SPBRGH = 0b00000000;
  7839   005D46  0E00               	movlw	0
  7840   005D48  6EB0               	movwf	176,c	;volatile
  7841                           
  7842                           ;serial.c: 111:     SPBRG = 0b00100010;
  7843   005D4A  0E22               	movlw	34
  7844   005D4C  6EAF               	movwf	175,c	;volatile
  7845   005D4E                     
  7846                           ;serial.c: 112:     ((TRISC) |= (1<<6));
  7847   005D4E  8C94               	bsf	148,6,c	;volatile
  7848   005D50                     
  7849                           ;serial.c: 113:     ((TRISC) |= (1<<7));
  7850   005D50  8E94               	bsf	148,7,c	;volatile
  7851   005D52  0012               	return		;funcret
  7852   005D54                     __end_of_serialInit:
  7853                           	callstack 0
  7854                           
  7855 ;; *************** function _outputInit *****************
  7856 ;; Defined at:
  7857 ;;		line 19 in file "output.c"
  7858 ;; Parameters:    Size  Location     Type
  7859 ;;		None
  7860 ;; Auto vars:     Size  Location     Type
  7861 ;;		None
  7862 ;; Return value:  Size  Location     Type
  7863 ;;                  1    wreg      void 
  7864 ;; Registers used:
  7865 ;;		wreg, status,2, status,0, cstack
  7866 ;; Tracked objects:
  7867 ;;		On entry : 0/0
  7868 ;;		On exit  : 0/0
  7869 ;;		Unchanged: 0/0
  7870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7871 ;;      Params:         0       0       0       0       0       0       0       0       0
  7872 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7873 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7874 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7875 ;;Total ram usage:        0 bytes
  7876 ;; Hardware stack levels used: 1
  7877 ;; Hardware stack levels required when called: 4
  7878 ;; This function calls:
  7879 ;;		_lcdInit
  7880 ;; This function is called by:
  7881 ;;		_main
  7882 ;; This function uses a non-reentrant model
  7883 ;;
  7884                           
  7885                           	psect	text55
  7886   005C48                     __ptext55:
  7887                           	callstack 0
  7888   005C48                     _outputInit:
  7889                           	callstack 26
  7890   005C48                     
  7891                           ;output.c: 20:     lcdInit();
  7892   005C48  EC7F  F032         	call	_lcdInit	;wreg free
  7893   005C4C  0012               	return		;funcret
  7894   005C4E                     __end_of_outputInit:
  7895                           	callstack 0
  7896                           
  7897 ;; *************** function _lcdInit *****************
  7898 ;; Defined at:
  7899 ;;		line 110 in file "lcd.c"
  7900 ;; Parameters:    Size  Location     Type
  7901 ;;		None
  7902 ;; Auto vars:     Size  Location     Type
  7903 ;;  i               1    3[COMRAM] unsigned char 
  7904 ;; Return value:  Size  Location     Type
  7905 ;;                  1    wreg      void 
  7906 ;; Registers used:
  7907 ;;		wreg, status,2, status,0, cstack
  7908 ;; Tracked objects:
  7909 ;;		On entry : 0/0
  7910 ;;		On exit  : 0/0
  7911 ;;		Unchanged: 0/0
  7912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7913 ;;      Params:         0       0       0       0       0       0       0       0       0
  7914 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7915 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7916 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7917 ;;Total ram usage:        1 bytes
  7918 ;; Hardware stack levels used: 1
  7919 ;; Hardware stack levels required when called: 3
  7920 ;; This function calls:
  7921 ;;		_Delay2ms
  7922 ;;		_lcdCommand
  7923 ;;		_lcdCommand4bits
  7924 ;; This function is called by:
  7925 ;;		_main
  7926 ;;		_outputInit
  7927 ;; This function uses a non-reentrant model
  7928 ;;
  7929                           
  7930                           	psect	text56
  7931   0064FE                     __ptext56:
  7932                           	callstack 0
  7933   0064FE                     _lcdInit:
  7934                           	callstack 26
  7935   0064FE                     
  7936                           ;lcd.c: 111:     unsigned char i;;lcd.c: 113:     ((TRISD) &= ~(1<<(0)));
  7937   0064FE  9095               	bcf	149,0,c	;volatile
  7938                           
  7939                           ;lcd.c: 114:     ((TRISD) &= ~(1<<(7)));
  7940   006500  9E95               	bcf	149,7,c	;volatile
  7941                           
  7942                           ;lcd.c: 115:     ((TRISD) &= ~(1<<(6)));
  7943   006502  9C95               	bcf	149,6,c	;volatile
  7944                           
  7945                           ;lcd.c: 116:     ((TRISD) &= ~(1<<(5)));
  7946   006504  9A95               	bcf	149,5,c	;volatile
  7947                           
  7948                           ;lcd.c: 117:     ((TRISD) &= ~(1<<(4)));
  7949   006506  9895               	bcf	149,4,c	;volatile
  7950                           
  7951                           ;lcd.c: 118:     ((TRISD) &= ~(1<<(2)));
  7952   006508  9495               	bcf	149,2,c	;volatile
  7953   00650A                     
  7954                           ;lcd.c: 121:     for (i = 0; i < 7; i++)
  7955   00650A  0E00               	movlw	0
  7956   00650C  6E04               	movwf	lcdInit@i^0,c
  7957   00650E                     l3197:
  7958                           
  7959                           ;lcd.c: 122:         Delay2ms();
  7960   00650E  ECA2  F02F         	call	_Delay2ms	;wreg free
  7961   006512  2A04               	incf	lcdInit@i^0,f,c
  7962   006514  0E06               	movlw	6
  7963   006516  6404               	cpfsgt	lcdInit@i^0,c
  7964   006518  EF90  F032         	goto	u2901
  7965   00651C  EF92  F032         	goto	u2900
  7966   006520                     u2901:
  7967   006520  EF87  F032         	goto	l3197
  7968   006524                     u2900:
  7969   006524                     
  7970                           ;lcd.c: 125:     lcdCommand4bits(0x30, 0);
  7971   006524  0E00               	movlw	0
  7972   006526  6E01               	movwf	lcdCommand4bits@data^0,c
  7973   006528  0E30               	movlw	48
  7974   00652A  EC43  F032         	call	_lcdCommand4bits
  7975                           
  7976                           ;lcd.c: 126:     Delay2ms();
  7977   00652E  ECA2  F02F         	call	_Delay2ms	;wreg free
  7978                           
  7979                           ;lcd.c: 128:     lcdCommand4bits(0x30, 0);
  7980   006532  0E00               	movlw	0
  7981   006534  6E01               	movwf	lcdCommand4bits@data^0,c
  7982   006536  0E30               	movlw	48
  7983   006538  EC43  F032         	call	_lcdCommand4bits
  7984                           
  7985                           ;lcd.c: 129:     Delay2ms();
  7986   00653C  ECA2  F02F         	call	_Delay2ms	;wreg free
  7987                           
  7988                           ;lcd.c: 131:     lcdCommand4bits(0x30, 0);
  7989   006540  0E00               	movlw	0
  7990   006542  6E01               	movwf	lcdCommand4bits@data^0,c
  7991   006544  0E30               	movlw	48
  7992   006546  EC43  F032         	call	_lcdCommand4bits
  7993                           
  7994                           ;lcd.c: 132:     Delay2ms();
  7995   00654A  ECA2  F02F         	call	_Delay2ms	;wreg free
  7996                           
  7997                           ;lcd.c: 134:     lcdCommand4bits(0x20, 0);
  7998   00654E  0E00               	movlw	0
  7999   006550  6E01               	movwf	lcdCommand4bits@data^0,c
  8000   006552  0E20               	movlw	32
  8001   006554  EC43  F032         	call	_lcdCommand4bits
  8002                           
  8003                           ;lcd.c: 135:     Delay2ms();
  8004   006558  ECA2  F02F         	call	_Delay2ms	;wreg free
  8005                           
  8006                           ;lcd.c: 137:     lcdCommand(0x28);
  8007   00655C  0E28               	movlw	40
  8008   00655E  ECED  F030         	call	_lcdCommand
  8009                           
  8010                           ;lcd.c: 138:     lcdCommand(0x06);
  8011   006562  0E06               	movlw	6
  8012   006564  ECED  F030         	call	_lcdCommand
  8013                           
  8014                           ;lcd.c: 140:     lcdCommand(0x0C);
  8015   006568  0E0C               	movlw	12
  8016   00656A  ECED  F030         	call	_lcdCommand
  8017                           
  8018                           ;lcd.c: 141:     lcdCommand(0x01);
  8019   00656E  0E01               	movlw	1
  8020   006570  ECED  F030         	call	_lcdCommand
  8021   006574  0012               	return		;funcret
  8022   006576                     __end_of_lcdInit:
  8023                           	callstack 0
  8024                           
  8025 ;; *************** function _lcdCommand *****************
  8026 ;; Defined at:
  8027 ;;		line 89 in file "lcd.c"
  8028 ;; Parameters:    Size  Location     Type
  8029 ;;  cmd             1    wreg     unsigned char 
  8030 ;; Auto vars:     Size  Location     Type
  8031 ;;  cmd             1    2[COMRAM] unsigned char 
  8032 ;; Return value:  Size  Location     Type
  8033 ;;                  1    wreg      void 
  8034 ;; Registers used:
  8035 ;;		wreg, status,2, status,0, cstack
  8036 ;; Tracked objects:
  8037 ;;		On entry : 0/0
  8038 ;;		On exit  : 0/0
  8039 ;;		Unchanged: 0/0
  8040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8041 ;;      Params:         0       0       0       0       0       0       0       0       0
  8042 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8043 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8044 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8045 ;;Total ram usage:        1 bytes
  8046 ;; Hardware stack levels used: 1
  8047 ;; Hardware stack levels required when called: 2
  8048 ;; This function calls:
  8049 ;;		_Delay2ms
  8050 ;;		_Delay40us
  8051 ;;		_lcdCommand4bits
  8052 ;; This function is called by:
  8053 ;;		_lcdInit
  8054 ;;		_outputPrint
  8055 ;; This function uses a non-reentrant model
  8056 ;;
  8057                           
  8058                           	psect	text57
  8059   0061DA                     __ptext57:
  8060                           	callstack 0
  8061   0061DA                     _lcdCommand:
  8062                           	callstack 26
  8063                           
  8064                           ;incstack = 0
  8065                           ;lcdCommand@cmd stored from wreg
  8066   0061DA  6E03               	movwf	lcdCommand@cmd^0,c
  8067   0061DC                     
  8068                           ;lcd.c: 91:     lcdCommand4bits(cmd, 0);
  8069   0061DC  0E00               	movlw	0
  8070   0061DE  6E01               	movwf	lcdCommand4bits@data^0,c
  8071   0061E0  5003               	movf	lcdCommand@cmd^0,w,c
  8072   0061E2  EC43  F032         	call	_lcdCommand4bits
  8073                           
  8074                           ;lcd.c: 92:     lcdCommand4bits(cmd << 4, 0);
  8075   0061E6  0E00               	movlw	0
  8076   0061E8  6E01               	movwf	lcdCommand4bits@data^0,c
  8077   0061EA  3803               	swapf	lcdCommand@cmd^0,w,c
  8078   0061EC  0BF0               	andlw	240
  8079   0061EE  EC43  F032         	call	_lcdCommand4bits
  8080   0061F2                     
  8081                           ;lcd.c: 95:     if ((cmd == 0x02) || (cmd == 0x01)) {
  8082   0061F2  0E02               	movlw	2
  8083   0061F4  1803               	xorwf	lcdCommand@cmd^0,w,c
  8084   0061F6  B4D8               	btfsc	status,2,c
  8085   0061F8  EF00  F031         	goto	u2811
  8086   0061FC  EF02  F031         	goto	u2810
  8087   006200                     u2811:
  8088   006200  EF0A  F031         	goto	l3055
  8089   006204                     u2810:
  8090   006204  0403               	decf	lcdCommand@cmd^0,w,c
  8091   006206  A4D8               	btfss	status,2,c
  8092   006208  EF08  F031         	goto	u2821
  8093   00620C  EF0A  F031         	goto	u2820
  8094   006210                     u2821:
  8095   006210  EF0E  F031         	goto	l3057
  8096   006214                     u2820:
  8097   006214                     l3055:
  8098                           
  8099                           ;lcd.c: 96:         Delay2ms();
  8100   006214  ECA2  F02F         	call	_Delay2ms	;wreg free
  8101                           
  8102                           ;lcd.c: 97:     } else {
  8103   006218  EF10  F031         	goto	l115
  8104   00621C                     l3057:
  8105                           
  8106                           ;lcd.c: 98:         Delay40us();
  8107   00621C  EC85  F02E         	call	_Delay40us	;wreg free
  8108   006220                     l115:
  8109   006220  0012               	return		;funcret
  8110   006222                     __end_of_lcdCommand:
  8111                           	callstack 0
  8112                           
  8113 ;; *************** function _lcdCommand4bits *****************
  8114 ;; Defined at:
  8115 ;;		line 51 in file "lcd.c"
  8116 ;; Parameters:    Size  Location     Type
  8117 ;;  cmd             1    wreg     unsigned char 
  8118 ;;  data            1    0[COMRAM] unsigned char 
  8119 ;; Auto vars:     Size  Location     Type
  8120 ;;  cmd             1    1[COMRAM] unsigned char 
  8121 ;; Return value:  Size  Location     Type
  8122 ;;                  1    wreg      void 
  8123 ;; Registers used:
  8124 ;;		wreg, status,2, status,0, cstack
  8125 ;; Tracked objects:
  8126 ;;		On entry : 0/0
  8127 ;;		On exit  : 0/0
  8128 ;;		Unchanged: 0/0
  8129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8130 ;;      Params:         1       0       0       0       0       0       0       0       0
  8131 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8132 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8133 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8134 ;;Total ram usage:        2 bytes
  8135 ;; Hardware stack levels used: 1
  8136 ;; Hardware stack levels required when called: 1
  8137 ;; This function calls:
  8138 ;;		_pulseEnable
  8139 ;; This function is called by:
  8140 ;;		_lcdCommand
  8141 ;;		_lcdData
  8142 ;;		_lcdInit
  8143 ;; This function uses a non-reentrant model
  8144 ;;
  8145                           
  8146                           	psect	text58
  8147   006486                     __ptext58:
  8148                           	callstack 0
  8149   006486                     _lcdCommand4bits:
  8150                           	callstack 25
  8151                           
  8152                           ;incstack = 0
  8153                           ;lcdCommand4bits@cmd stored from wreg
  8154   006486  6E02               	movwf	lcdCommand4bits@cmd^0,c
  8155   006488                     
  8156                           ;lcd.c: 53:     if (data) {
  8157   006488  5001               	movf	lcdCommand4bits@data^0,w,c
  8158   00648A  B4D8               	btfsc	status,2,c
  8159   00648C  EF4A  F032         	goto	u2441
  8160   006490  EF4C  F032         	goto	u2440
  8161   006494                     u2441:
  8162   006494  EF4F  F032         	goto	l2779
  8163   006498                     u2440:
  8164   006498                     
  8165                           ;lcd.c: 54:         ((PORTD) |= (1<<(0)));
  8166   006498  8083               	bsf	131,0,c	;volatile
  8167                           
  8168                           ;lcd.c: 55:     } else {
  8169   00649A  EF50  F032         	goto	l2781
  8170   00649E                     l2779:
  8171                           
  8172                           ;lcd.c: 56:         ((PORTD) &= ~(1<<(0)));
  8173   00649E  9083               	bcf	131,0,c	;volatile
  8174   0064A0                     l2781:
  8175                           
  8176                           ;lcd.c: 59:     if (((cmd) & (1<<(7)))) {
  8177   0064A0  AE02               	btfss	lcdCommand4bits@cmd^0,7,c
  8178   0064A2  EF55  F032         	goto	u2451
  8179   0064A6  EF57  F032         	goto	u2450
  8180   0064AA                     u2451:
  8181   0064AA  EF5A  F032         	goto	l2785
  8182   0064AE                     u2450:
  8183   0064AE                     
  8184                           ;lcd.c: 60:         ((PORTD) |= (1<<(2)));
  8185   0064AE  8483               	bsf	131,2,c	;volatile
  8186                           
  8187                           ;lcd.c: 61:     } else {
  8188   0064B0  EF5B  F032         	goto	l2787
  8189   0064B4                     l2785:
  8190                           
  8191                           ;lcd.c: 62:         ((PORTD) &= ~(1<<(2)));
  8192   0064B4  9483               	bcf	131,2,c	;volatile
  8193   0064B6                     l2787:
  8194                           
  8195                           ;lcd.c: 66:     if (((cmd) & (1<<(6)))) {
  8196   0064B6  AC02               	btfss	lcdCommand4bits@cmd^0,6,c
  8197   0064B8  EF60  F032         	goto	u2461
  8198   0064BC  EF62  F032         	goto	u2460
  8199   0064C0                     u2461:
  8200   0064C0  EF65  F032         	goto	l2791
  8201   0064C4                     u2460:
  8202   0064C4                     
  8203                           ;lcd.c: 67:         ((PORTD) |= (1<<(4)));
  8204   0064C4  8883               	bsf	131,4,c	;volatile
  8205                           
  8206                           ;lcd.c: 68:     } else {
  8207   0064C6  EF66  F032         	goto	l2793
  8208   0064CA                     l2791:
  8209                           
  8210                           ;lcd.c: 69:         ((PORTD) &= ~(1<<(4)));
  8211   0064CA  9883               	bcf	131,4,c	;volatile
  8212   0064CC                     l2793:
  8213                           
  8214                           ;lcd.c: 73:     if (((cmd) & (1<<(5)))) {
  8215   0064CC  AA02               	btfss	lcdCommand4bits@cmd^0,5,c
  8216   0064CE  EF6B  F032         	goto	u2471
  8217   0064D2  EF6D  F032         	goto	u2470
  8218   0064D6                     u2471:
  8219   0064D6  EF70  F032         	goto	l2797
  8220   0064DA                     u2470:
  8221   0064DA                     
  8222                           ;lcd.c: 74:         ((PORTD) |= (1<<(5)));
  8223   0064DA  8A83               	bsf	131,5,c	;volatile
  8224                           
  8225                           ;lcd.c: 75:     } else {
  8226   0064DC  EF71  F032         	goto	l2799
  8227   0064E0                     l2797:
  8228                           
  8229                           ;lcd.c: 76:         ((PORTD) &= ~(1<<(5)));
  8230   0064E0  9A83               	bcf	131,5,c	;volatile
  8231   0064E2                     l2799:
  8232                           
  8233                           ;lcd.c: 80:     if (((cmd) & (1<<(4)))) {
  8234   0064E2  A802               	btfss	lcdCommand4bits@cmd^0,4,c
  8235   0064E4  EF76  F032         	goto	u2481
  8236   0064E8  EF78  F032         	goto	u2480
  8237   0064EC                     u2481:
  8238   0064EC  EF7B  F032         	goto	l2803
  8239   0064F0                     u2480:
  8240   0064F0                     
  8241                           ;lcd.c: 81:         ((PORTD) |= (1<<(6)));
  8242   0064F0  8C83               	bsf	131,6,c	;volatile
  8243                           
  8244                           ;lcd.c: 82:     } else {
  8245   0064F2  EF7C  F032         	goto	l2805
  8246   0064F6                     l2803:
  8247                           
  8248                           ;lcd.c: 83:         ((PORTD) &= ~(1<<(6)));
  8249   0064F6  9C83               	bcf	131,6,c	;volatile
  8250   0064F8                     l2805:
  8251                           
  8252                           ;lcd.c: 86:     pulseEnable();
  8253   0064F8  EC21  F02E         	call	_pulseEnable	;wreg free
  8254   0064FC  0012               	return		;funcret
  8255   0064FE                     __end_of_lcdCommand4bits:
  8256                           	callstack 0
  8257                           
  8258 ;; *************** function _pulseEnable *****************
  8259 ;; Defined at:
  8260 ;;		line 46 in file "lcd.c"
  8261 ;; Parameters:    Size  Location     Type
  8262 ;;		None
  8263 ;; Auto vars:     Size  Location     Type
  8264 ;;		None
  8265 ;; Return value:  Size  Location     Type
  8266 ;;                  1    wreg      void 
  8267 ;; Registers used:
  8268 ;;		status,2, status,0
  8269 ;; Tracked objects:
  8270 ;;		On entry : 0/0
  8271 ;;		On exit  : 0/0
  8272 ;;		Unchanged: 0/0
  8273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8274 ;;      Params:         0       0       0       0       0       0       0       0       0
  8275 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8276 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8277 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8278 ;;Total ram usage:        0 bytes
  8279 ;; Hardware stack levels used: 1
  8280 ;; This function calls:
  8281 ;;		Nothing
  8282 ;; This function is called by:
  8283 ;;		_lcdCommand4bits
  8284 ;; This function uses a non-reentrant model
  8285 ;;
  8286                           
  8287                           	psect	text59
  8288   005C42                     __ptext59:
  8289                           	callstack 0
  8290   005C42                     _pulseEnable:
  8291                           	callstack 25
  8292   005C42                     
  8293                           ;lcd.c: 47:     ((PORTD) |= (1<<(7)));
  8294   005C42  8E83               	bsf	131,7,c	;volatile
  8295                           
  8296                           ;lcd.c: 48:     ((PORTD) &= ~(1<<(7)));
  8297   005C44  9E83               	bcf	131,7,c	;volatile
  8298   005C46  0012               	return		;funcret
  8299   005C48                     __end_of_pulseEnable:
  8300                           	callstack 0
  8301                           
  8302 ;; *************** function _Delay40us *****************
  8303 ;; Defined at:
  8304 ;;		line 35 in file "lcd.c"
  8305 ;; Parameters:    Size  Location     Type
  8306 ;;		None
  8307 ;; Auto vars:     Size  Location     Type
  8308 ;;  j               1    0[COMRAM] unsigned char 
  8309 ;; Return value:  Size  Location     Type
  8310 ;;                  1    wreg      void 
  8311 ;; Registers used:
  8312 ;;		wreg, status,2, status,0
  8313 ;; Tracked objects:
  8314 ;;		On entry : 0/0
  8315 ;;		On exit  : 0/0
  8316 ;;		Unchanged: 0/0
  8317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8318 ;;      Params:         0       0       0       0       0       0       0       0       0
  8319 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8320 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8321 ;;      Totals:         1       0       0       0       0       0       0       0       0
  8322 ;;Total ram usage:        1 bytes
  8323 ;; Hardware stack levels used: 1
  8324 ;; This function calls:
  8325 ;;		Nothing
  8326 ;; This function is called by:
  8327 ;;		_lcdCommand
  8328 ;;		_lcdData
  8329 ;; This function uses a non-reentrant model
  8330 ;;
  8331                           
  8332                           	psect	text60
  8333   005D0A                     __ptext60:
  8334                           	callstack 0
  8335   005D0A                     _Delay40us:
  8336                           	callstack 26
  8337   005D0A                     
  8338                           ;lcd.c: 36:     unsigned char j;;lcd.c: 37:     for (j = 0; j < 68; j++);
  8339   005D0A  0E00               	movlw	0
  8340   005D0C  6E01               	movwf	Delay40us@j^0,c
  8341   005D0E                     l2771:
  8342   005D0E  2A01               	incf	Delay40us@j^0,f,c
  8343   005D10  0E43               	movlw	67
  8344   005D12  6401               	cpfsgt	Delay40us@j^0,c
  8345   005D14  EF8E  F02E         	goto	u2431
  8346   005D18  EF90  F02E         	goto	u2430
  8347   005D1C                     u2431:
  8348   005D1C  EF87  F02E         	goto	l2771
  8349   005D20                     u2430:
  8350   005D20  0012               	return		;funcret
  8351   005D22                     __end_of_Delay40us:
  8352                           	callstack 0
  8353                           
  8354 ;; *************** function _Delay2ms *****************
  8355 ;; Defined at:
  8356 ;;		line 40 in file "lcd.c"
  8357 ;; Parameters:    Size  Location     Type
  8358 ;;		None
  8359 ;; Auto vars:     Size  Location     Type
  8360 ;;  k               1    1[COMRAM] unsigned char 
  8361 ;;  j               1    0[COMRAM] unsigned char 
  8362 ;; Return value:  Size  Location     Type
  8363 ;;                  1    wreg      void 
  8364 ;; Registers used:
  8365 ;;		wreg, status,2, status,0
  8366 ;; Tracked objects:
  8367 ;;		On entry : 0/0
  8368 ;;		On exit  : 0/0
  8369 ;;		Unchanged: 0/0
  8370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8371 ;;      Params:         0       0       0       0       0       0       0       0       0
  8372 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8373 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8374 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8375 ;;Total ram usage:        2 bytes
  8376 ;; Hardware stack levels used: 1
  8377 ;; This function calls:
  8378 ;;		Nothing
  8379 ;; This function is called by:
  8380 ;;		_lcdCommand
  8381 ;;		_lcdInit
  8382 ;; This function uses a non-reentrant model
  8383 ;;
  8384                           
  8385                           	psect	text61
  8386   005F44                     __ptext61:
  8387                           	callstack 0
  8388   005F44                     _Delay2ms:
  8389                           	callstack 27
  8390   005F44                     
  8391                           ;lcd.c: 41:     unsigned char j, k;;lcd.c: 42:     for (j = 0; j < 20; j++)
  8392   005F44  0E00               	movlw	0
  8393   005F46  6E01               	movwf	Delay2ms@j^0,c
  8394   005F48                     l2865:
  8395                           
  8396                           ;lcd.c: 43:         for (k = 0; k < 178; k++);
  8397   005F48  0E00               	movlw	0
  8398   005F4A  6E02               	movwf	Delay2ms@k^0,c
  8399   005F4C                     l2871:
  8400   005F4C  2A02               	incf	Delay2ms@k^0,f,c
  8401   005F4E  0EB1               	movlw	177
  8402   005F50  6402               	cpfsgt	Delay2ms@k^0,c
  8403   005F52  EFAD  F02F         	goto	u2571
  8404   005F56  EFAF  F02F         	goto	u2570
  8405   005F5A                     u2571:
  8406   005F5A  EFA6  F02F         	goto	l2871
  8407   005F5E                     u2570:
  8408   005F5E  2A01               	incf	Delay2ms@j^0,f,c
  8409   005F60  0E13               	movlw	19
  8410   005F62  6401               	cpfsgt	Delay2ms@j^0,c
  8411   005F64  EFB6  F02F         	goto	u2581
  8412   005F68  EFB8  F02F         	goto	u2580
  8413   005F6C                     u2581:
  8414   005F6C  EFA4  F02F         	goto	l2865
  8415   005F70                     u2580:
  8416   005F70  0012               	return		;funcret
  8417   005F72                     __end_of_Delay2ms:
  8418                           	callstack 0
  8419                           
  8420 ;; *************** function _kpDebounce *****************
  8421 ;; Defined at:
  8422 ;;		line 25 in file "keypad.c"
  8423 ;; Parameters:    Size  Location     Type
  8424 ;;		None
  8425 ;; Auto vars:     Size  Location     Type
  8426 ;;  j               1    0        unsigned char 
  8427 ;;  i               1    0        unsigned char 
  8428 ;; Return value:  Size  Location     Type
  8429 ;;                  1    wreg      void 
  8430 ;; Registers used:
  8431 ;;		wreg, status,2, status,0
  8432 ;; Tracked objects:
  8433 ;;		On entry : 0/0
  8434 ;;		On exit  : 0/0
  8435 ;;		Unchanged: 0/0
  8436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8437 ;;      Params:         0       0       0       0       0       0       0       0       0
  8438 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8439 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8440 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8441 ;;Total ram usage:        0 bytes
  8442 ;; Hardware stack levels used: 1
  8443 ;; This function calls:
  8444 ;;		Nothing
  8445 ;; This function is called by:
  8446 ;;		_main
  8447 ;; This function uses a non-reentrant model
  8448 ;;
  8449                           
  8450                           	psect	text62
  8451   006576                     __ptext62:
  8452                           	callstack 0
  8453   006576                     _kpDebounce:
  8454                           	callstack 30
  8455   006576                     
  8456                           ;keypad.c: 26:     unsigned char i, j;;keypad.c: 27:     static unsigned char tempo;;key
      +                          pad.c: 28:     static unsigned char teclaNew = 0x0000;;keypad.c: 29:     static unsigned
      +                           char teclaOld = 0x0001;;keypad.c: 31:     if (!((PORTB) & (1<<(2)))) ((teclaNew) |= (1<
      +                          <(0)));
  8457   006576  B481               	btfsc	129,2,c	;volatile
  8458   006578  EFC0  F032         	goto	u1411
  8459   00657C  EFC2  F032         	goto	u1410
  8460   006580                     u1411:
  8461   006580  EFC5  F032         	goto	l2311
  8462   006584                     u1410:
  8463   006584  805C               	bsf	kpDebounce@teclaNew^0,0,c
  8464   006586  EFC6  F032         	goto	l2313
  8465   00658A                     l2311:
  8466   00658A  905C               	bcf	kpDebounce@teclaNew^0,0,c
  8467   00658C                     l2313:
  8468                           
  8469                           ;keypad.c: 34:     if (!((PORTB) & (1<<(3)))) ((teclaNew) |= (1<<(1)));
  8470   00658C  B681               	btfsc	129,3,c	;volatile
  8471   00658E  EFCB  F032         	goto	u1421
  8472   006592  EFCD  F032         	goto	u1420
  8473   006596                     u1421:
  8474   006596  EFD0  F032         	goto	l2317
  8475   00659A                     u1420:
  8476   00659A  825C               	bsf	kpDebounce@teclaNew^0,1,c
  8477   00659C  EFD1  F032         	goto	l2319
  8478   0065A0                     l2317:
  8479   0065A0  925C               	bcf	kpDebounce@teclaNew^0,1,c
  8480   0065A2                     l2319:
  8481                           
  8482                           ;keypad.c: 37:     if (!((PORTB) & (1<<(5)))) ((teclaNew) |= (1<<(2)));
  8483   0065A2  BA81               	btfsc	129,5,c	;volatile
  8484   0065A4  EFD6  F032         	goto	u1431
  8485   0065A8  EFD8  F032         	goto	u1430
  8486   0065AC                     u1431:
  8487   0065AC  EFDB  F032         	goto	l2323
  8488   0065B0                     u1430:
  8489   0065B0  845C               	bsf	kpDebounce@teclaNew^0,2,c
  8490   0065B2  EFDC  F032         	goto	l2325
  8491   0065B6                     l2323:
  8492   0065B6  945C               	bcf	kpDebounce@teclaNew^0,2,c
  8493   0065B8                     l2325:
  8494                           
  8495                           ;keypad.c: 40:     if (!((PORTB) & (1<<(4)))) ((teclaNew) |= (1<<(3)));
  8496   0065B8  B881               	btfsc	129,4,c	;volatile
  8497   0065BA  EFE1  F032         	goto	u1441
  8498   0065BE  EFE3  F032         	goto	u1440
  8499   0065C2                     u1441:
  8500   0065C2  EFE6  F032         	goto	l2329
  8501   0065C6                     u1440:
  8502   0065C6  865C               	bsf	kpDebounce@teclaNew^0,3,c
  8503   0065C8  EFE7  F032         	goto	l2331
  8504   0065CC                     l2329:
  8505   0065CC  965C               	bcf	kpDebounce@teclaNew^0,3,c
  8506   0065CE                     l2331:
  8507                           
  8508                           ;keypad.c: 43:     if (!((PORTE) & (1<<(1)))) ((teclaNew) |= (1<<(4)));
  8509   0065CE  B284               	btfsc	132,1,c	;volatile
  8510   0065D0  EFEC  F032         	goto	u1451
  8511   0065D4  EFEE  F032         	goto	u1450
  8512   0065D8                     u1451:
  8513   0065D8  EFF1  F032         	goto	l2335
  8514   0065DC                     u1450:
  8515   0065DC  885C               	bsf	kpDebounce@teclaNew^0,4,c
  8516   0065DE  EFF2  F032         	goto	l2337
  8517   0065E2                     l2335:
  8518   0065E2  985C               	bcf	kpDebounce@teclaNew^0,4,c
  8519   0065E4                     l2337:
  8520                           
  8521                           ;keypad.c: 46:     if (teclaOld == teclaNew) tempo--;
  8522   0065E4  505C               	movf	kpDebounce@teclaNew^0,w,c
  8523   0065E6  185F               	xorwf	kpDebounce@teclaOld^0,w,c
  8524   0065E8  A4D8               	btfss	status,2,c
  8525   0065EA  EFF9  F032         	goto	u1461
  8526   0065EE  EFFB  F032         	goto	u1460
  8527   0065F2                     u1461:
  8528   0065F2  EFFE  F032         	goto	l2341
  8529   0065F6                     u1460:
  8530   0065F6  065D               	decf	kpDebounce@tempo^0,f,c
  8531   0065F8  EF02  F033         	goto	l205
  8532   0065FC                     l2341:
  8533                           
  8534                           ;keypad.c: 48:         tempo = 1;
  8535   0065FC  0E01               	movlw	1
  8536   0065FE  6E5D               	movwf	kpDebounce@tempo^0,c
  8537   006600                     
  8538                           ;keypad.c: 49:         teclaOld = teclaNew;
  8539   006600  C05C  F05F         	movff	kpDebounce@teclaNew,kpDebounce@teclaOld
  8540   006604                     l205:
  8541                           
  8542                           ;keypad.c: 52:     if (tempo == 0) tecla = teclaOld;
  8543   006604  505D               	movf	kpDebounce@tempo^0,w,c
  8544   006606  A4D8               	btfss	status,2,c
  8545   006608  EF08  F033         	goto	u1471
  8546   00660C  EF0A  F033         	goto	u1470
  8547   006610                     u1471:
  8548   006610  EF0C  F033         	goto	l207
  8549   006614                     u1470:
  8550   006614  C05F  F05E         	movff	kpDebounce@teclaOld,_tecla
  8551   006618                     l207:
  8552   006618  0012               	return		;funcret
  8553   00661A                     __end_of_kpDebounce:
  8554                           	callstack 0
  8555                           
  8556 ;; *************** function _eventInit *****************
  8557 ;; Defined at:
  8558 ;;		line 20 in file "event.c"
  8559 ;; Parameters:    Size  Location     Type
  8560 ;;		None
  8561 ;; Auto vars:     Size  Location     Type
  8562 ;;		None
  8563 ;; Return value:  Size  Location     Type
  8564 ;;                  1    wreg      void 
  8565 ;; Registers used:
  8566 ;;		wreg, status,2, status,0, cstack
  8567 ;; Tracked objects:
  8568 ;;		On entry : 0/0
  8569 ;;		On exit  : 0/0
  8570 ;;		Unchanged: 0/0
  8571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8572 ;;      Params:         0       0       0       0       0       0       0       0       0
  8573 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8574 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8575 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8576 ;;Total ram usage:        0 bytes
  8577 ;; Hardware stack levels used: 1
  8578 ;; Hardware stack levels required when called: 1
  8579 ;; This function calls:
  8580 ;;		_kpInit
  8581 ;; This function is called by:
  8582 ;;		_main
  8583 ;; This function uses a non-reentrant model
  8584 ;;
  8585                           
  8586                           	psect	text63
  8587   005C70                     __ptext63:
  8588                           	callstack 0
  8589   005C70                     _eventInit:
  8590                           	callstack 29
  8591   005C70                     
  8592                           ;event.c: 21:     kpInit();
  8593   005C70  EC2E  F02E         	call	_kpInit	;wreg free
  8594   005C74                     
  8595                           ;event.c: 22:     key_ant = 0;
  8596   005C74  0E00               	movlw	0
  8597   005C76  6E4E               	movwf	(_key_ant+1)^0,c
  8598   005C78  0E00               	movlw	0
  8599   005C7A  6E4D               	movwf	_key_ant^0,c
  8600   005C7C  0012               	return		;funcret
  8601   005C7E                     __end_of_eventInit:
  8602                           	callstack 0
  8603                           
  8604 ;; *************** function _kpInit *****************
  8605 ;; Defined at:
  8606 ;;		line 7 in file "keypad.c"
  8607 ;; Parameters:    Size  Location     Type
  8608 ;;		None
  8609 ;; Auto vars:     Size  Location     Type
  8610 ;;		None
  8611 ;; Return value:  Size  Location     Type
  8612 ;;                  1    wreg      void 
  8613 ;; Registers used:
  8614 ;;		wreg, status,2, status,0
  8615 ;; Tracked objects:
  8616 ;;		On entry : 0/0
  8617 ;;		On exit  : 0/0
  8618 ;;		Unchanged: 0/0
  8619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8620 ;;      Params:         0       0       0       0       0       0       0       0       0
  8621 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8622 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8623 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8624 ;;Total ram usage:        0 bytes
  8625 ;; Hardware stack levels used: 1
  8626 ;; This function calls:
  8627 ;;		Nothing
  8628 ;; This function is called by:
  8629 ;;		_main
  8630 ;;		_eventInit
  8631 ;; This function uses a non-reentrant model
  8632 ;;
  8633                           
  8634                           	psect	text64
  8635   005C5C                     __ptext64:
  8636                           	callstack 0
  8637   005C5C                     _kpInit:
  8638                           	callstack 30
  8639   005C5C                     
  8640                           ;keypad.c: 16:     TRISB = 0xff;
  8641   005C5C  6893               	setf	147,c	;volatile
  8642   005C5E                     
  8643                           ;keypad.c: 17:     ADCON1 = 0b00001110;
  8644   005C5E  0E0E               	movlw	14
  8645   005C60  6EC1               	movwf	193,c	;volatile
  8646   005C62                     
  8647                           ;keypad.c: 18:     ((TRISE) |= (1<<(1)));
  8648   005C62  8296               	bsf	150,1,c	;volatile
  8649   005C64  0012               	return		;funcret
  8650   005C66                     __end_of_kpInit:
  8651                           	callstack 0
  8652                           
  8653                           	psect	rparam
  8654   000000                     
  8655                           	psect	config
  8656                           
  8657                           ;Config register CONFIG1L @ 0x300000
  8658                           ;	unspecified, using default values
  8659                           ;	PLL Prescaler Selection bits
  8660                           ;	PLLDIV = 0x0, unprogrammed default
  8661                           ;	System Clock Postscaler Selection bits
  8662                           ;	CPUDIV = 0x0, unprogrammed default
  8663                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  8664                           ;	USBDIV = 0x0, unprogrammed default
  8665   300000                     	org	3145728
  8666   300000  00                 	db	0
  8667                           
  8668                           ;Config register CONFIG1H @ 0x300001
  8669                           ;	Oscillator Selection bits
  8670                           ;	FOSC = HS, HS oscillator (HS)
  8671                           ;	Fail-Safe Clock Monitor Enable bit
  8672                           ;	FCMEN = 0x0, unprogrammed default
  8673                           ;	Internal/External Oscillator Switchover bit
  8674                           ;	IESO = 0x0, unprogrammed default
  8675   300001                     	org	3145729
  8676   300001  0C                 	db	12
  8677                           
  8678                           ;Config register CONFIG2L @ 0x300002
  8679                           ;	unspecified, using default values
  8680                           ;	Power-up Timer Enable bit
  8681                           ;	PWRT = 0x1, unprogrammed default
  8682                           ;	Brown-out Reset Enable bits
  8683                           ;	BOR = 0x3, unprogrammed default
  8684                           ;	Brown-out Reset Voltage bits
  8685                           ;	BORV = 0x3, unprogrammed default
  8686                           ;	USB Voltage Regulator Enable bit
  8687                           ;	VREGEN = 0x0, unprogrammed default
  8688   300002                     	org	3145730
  8689   300002  1F                 	db	31
  8690                           
  8691                           ;Config register CONFIG2H @ 0x300003
  8692                           ;	Watchdog Timer Enable bit
  8693                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8694                           ;	Watchdog Timer Postscale Select bits
  8695                           ;	WDTPS = 0xF, unprogrammed default
  8696   300003                     	org	3145731
  8697   300003  1E                 	db	30
  8698                           
  8699                           ; Padding undefined space
  8700   300004                     	org	3145732
  8701   300004  FF                 	db	255
  8702                           
  8703                           ;Config register CONFIG3H @ 0x300005
  8704                           ;	CCP2 MUX bit
  8705                           ;	CCP2MX = 0x1, unprogrammed default
  8706                           ;	PORTB A/D Enable bit
  8707                           ;	PBADEN = 0x1, unprogrammed default
  8708                           ;	Low-Power Timer 1 Oscillator Enable bit
  8709                           ;	LPT1OSC = 0x0, unprogrammed default
  8710                           ;	MCLR Pin Enable bit
  8711                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  8712   300005                     	org	3145733
  8713   300005  83                 	db	131
  8714                           
  8715                           ;Config register CONFIG4L @ 0x300006
  8716                           ;	Stack Full/Underflow Reset Enable bit
  8717                           ;	STVREN = 0x1, unprogrammed default
  8718                           ;	Single-Supply ICSP Enable bit
  8719                           ;	LVP = OFF, Single-Supply ICSP disabled
  8720                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  8721                           ;	ICPRT = 0x0, unprogrammed default
  8722                           ;	Extended Instruction Set Enable bit
  8723                           ;	XINST = 0x0, unprogrammed default
  8724                           ;	Background Debugger Enable bit
  8725                           ;	DEBUG = 0x1, unprogrammed default
  8726   300006                     	org	3145734
  8727   300006  81                 	db	129
  8728                           
  8729                           ; Padding undefined space
  8730   300007                     	org	3145735
  8731   300007  FF                 	db	255
  8732                           tosu	equ	0xFFF
  8733                           tosh	equ	0xFFE
  8734                           tosl	equ	0xFFD
  8735                           stkptr	equ	0xFFC
  8736                           pclatu	equ	0xFFB
  8737                           pclath	equ	0xFFA
  8738                           pcl	equ	0xFF9
  8739                           tblptru	equ	0xFF8
  8740                           tblptrh	equ	0xFF7
  8741                           tblptrl	equ	0xFF6
  8742                           tablat	equ	0xFF5
  8743                           prodh	equ	0xFF4
  8744                           prodl	equ	0xFF3
  8745                           indf0	equ	0xFEF
  8746                           postinc0	equ	0xFEE
  8747                           postdec0	equ	0xFED
  8748                           preinc0	equ	0xFEC
  8749                           plusw0	equ	0xFEB
  8750                           fsr0h	equ	0xFEA
  8751                           fsr0l	equ	0xFE9
  8752                           wreg	equ	0xFE8
  8753                           indf1	equ	0xFE7
  8754                           postinc1	equ	0xFE6
  8755                           postdec1	equ	0xFE5
  8756                           preinc1	equ	0xFE4
  8757                           plusw1	equ	0xFE3
  8758                           fsr1h	equ	0xFE2
  8759                           fsr1l	equ	0xFE1
  8760                           bsr	equ	0xFE0
  8761                           indf2	equ	0xFDF
  8762                           postinc2	equ	0xFDE
  8763                           postdec2	equ	0xFDD
  8764                           preinc2	equ	0xFDC
  8765                           plusw2	equ	0xFDB
  8766                           fsr2h	equ	0xFDA
  8767                           fsr2l	equ	0xFD9
  8768                           status	equ	0xFD8

Data Sizes:
    Strings     610
    Constant    0
    Data        65
    BSS         45
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     49      95
    BANK0           160      0      64
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    intToStr@buffer	PTR unsigned char  size(1) Largest target is 12
		 -> serialSendInt@buffer(COMRAM[12]), 

    lcdString@msg	PTR unsigned char  size(2) Largest target is 17
		 -> STR_10(CODE[17]), STR_11(CODE[17]), STR_12(CODE[17]), STR_13(CODE[17]), 
		 -> STR_14(CODE[17]), STR_15(CODE[17]), STR_16(CODE[17]), STR_17(CODE[17]), 
		 -> STR_18(CODE[17]), STR_19(CODE[17]), STR_20(CODE[17]), STR_21(CODE[17]), 
		 -> STR_22(CODE[17]), STR_23(CODE[17]), STR_24(CODE[17]), STR_25(CODE[17]), 
		 -> STR_26(CODE[17]), STR_27(CODE[17]), STR_28(CODE[17]), STR_29(CODE[17]), 
		 -> STR_30(CODE[17]), STR_31(CODE[17]), STR_32(CODE[17]), STR_33(CODE[9]), 
		 -> STR_34(CODE[9]), STR_35(CODE[9]), STR_36(CODE[7]), STR_37(CODE[7]), 
		 -> STR_38(CODE[17]), STR_39(CODE[17]), STR_40(CODE[17]), STR_41(CODE[17]), 
		 -> STR_42(CODE[17]), STR_5(CODE[17]), STR_6(CODE[17]), STR_7(CODE[17]), 
		 -> STR_8(CODE[17]), STR_9(CODE[17]), 

    msgs	PTR unsigned char [4][7] size(2) Largest target is 17
		 -> STR_10(CODE[17]), STR_11(CODE[17]), STR_12(CODE[17]), STR_13(CODE[17]), 
		 -> STR_14(CODE[17]), STR_15(CODE[17]), STR_16(CODE[17]), STR_17(CODE[17]), 
		 -> STR_18(CODE[17]), STR_19(CODE[17]), STR_20(CODE[17]), STR_21(CODE[17]), 
		 -> STR_22(CODE[17]), STR_23(CODE[17]), STR_24(CODE[17]), STR_25(CODE[17]), 
		 -> STR_26(CODE[17]), STR_27(CODE[17]), STR_28(CODE[17]), STR_29(CODE[17]), 
		 -> STR_30(CODE[17]), STR_31(CODE[17]), STR_32(CODE[17]), STR_5(CODE[17]), 
		 -> STR_6(CODE[17]), STR_7(CODE[17]), STR_8(CODE[17]), STR_9(CODE[17]), 

    serial_out	PTR unsigned char [4] size(2) Largest target is 14
		 -> STR_1(CODE[13]), STR_2(CODE[14]), STR_3(CODE[10]), STR_4(CODE[12]), 

    serialSendString@str	PTR const unsigned char  size(2) Largest target is 14
		 -> serialSendInt@buffer(COMRAM[12]), STR_1(CODE[13]), STR_2(CODE[14]), STR_3(CODE[10]), 
		 -> STR_4(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_smLoop
    _i2cInit->_pinMode
    _smLoop->_serialSendInt
    _updateLevel->_adcRead
    _serialSendInt->_intToStr
    _intToStr->___awmod
    _outputPrint->_lcdInt
    _lcdString->_lcdData
    _lcdInt->_getAlarmLowerLevel
    _lcdInt->_getAlarmUpperLevel
    _lcdData->_lcdCommand4bits
    ___awmod->___awdiv
    _getSEC->_dsReadData
    _getMIN->_dsReadData
    _getLanguage->_dsReadData
    _getHOUR->_dsReadData
    _getAlarmUpperLevel->_dsReadData
    _getAlarmLowerLevel->_dsReadData
    _dsReadData->_i2cReadByte
    _i2cReadByte->_i2c_read_bit
    _i2cReadByte->_i2c_write_bit
    _eventRead->_setAlarmLowerLevel
    _eventRead->_setAlarmUpperLevel
    _setSEC->_dsWriteData
    _setMIN->_dsWriteData
    _setLanguage->_dsWriteData
    _setHOUR->_dsWriteData
    _setAlarmUpperLevel->_getAlarmUpperLevel
    _setAlarmLowerLevel->_getAlarmLowerLevel
    _dsWriteData->_i2cWriteByte
    _i2cWriteByte->_i2c_read_bit
    _i2cWriteByte->_i2c_write_bit
    _clear_SDA->_digitalWrite
    _clear_SDA->_pinMode
    _read_SDA->_pinMode
    _read_SCL->_pinMode
    _clear_SCL->_digitalWrite
    _clear_SCL->_pinMode
    _pow10->___wmul
    _outputInit->_lcdInit
    _lcdInit->_lcdCommand
    _lcdCommand->_Delay2ms
    _lcdCommand->_lcdCommand4bits

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0 1023156
                          _eventInit
                         _kpDebounce
                             _kpInit
                            _lcdInit
                         _outputInit
                         _serialInit
                             _smLoop
                            _varInit
 ---------------------------------------------------------------------------------
 (1) _varInit                                              0     0      0   76836
                             _dsInit
                        _getLanguage
                        _setLanguage
 ---------------------------------------------------------------------------------
 (2) _dsInit                                               0     0      0    1352
                            _i2cInit
 ---------------------------------------------------------------------------------
 (3) _i2cInit                                              0     0      0    1352
                            _pinMode
 ---------------------------------------------------------------------------------
 (1) _smLoop                                               6     6      0  942720
                                             43 COMRAM     6     6      0
                          _eventRead
                 _getAlarmLowerLevel
                 _getAlarmUpperLevel
                            _getHOUR
                        _getLanguage
                           _getLevel
                             _getMIN
                             _getSEC
                           _getState
                        _outputPrint
                         _serialSend
                      _serialSendInt
                   _serialSendString
                 _setAlarmLowerLevel
                 _setAlarmUpperLevel
                            _setHOUR
                        _setLanguage
                             _setMIN
                             _setSEC
                           _setState
                        _updateLevel
 ---------------------------------------------------------------------------------
 (2) _updateLevel                                          0     0      0      25
                            _adcInit
                            _adcRead
 ---------------------------------------------------------------------------------
 (3) _adcRead                                              4     2      2      25
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _adcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setState                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _serialSendInt                                       14    12      2    8489
                                             29 COMRAM    14    12      2
                            _getHOUR (ARG)
                             _getMIN (ARG)
                             _getSEC (ARG)
                           _intToStr
                   _serialSendString
 ---------------------------------------------------------------------------------
 (2) _serialSendString                                     2     0      2     295
                                             18 COMRAM     2     0      2
                        _getLanguage (ARG)
                         _serialSend
 ---------------------------------------------------------------------------------
 (3) _serialSend                                           1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _intToStr                                            15    12      3    7654
                                             14 COMRAM    15    12      3
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) _outputPrint                                         14    10      4  303342
                                             24 COMRAM    14    10      4
                            ___awdiv
                            ___awmod
                 _getAlarmLowerLevel
                 _getAlarmUpperLevel
                            _getHOUR
                        _getLanguage
                           _getLevel
                             _getMIN
                             _getSEC
                           _getState (ARG)
                         _lcdCommand
                            _lcdData
                             _lcdInt
                          _lcdString
 ---------------------------------------------------------------------------------
 (3) _lcdString                                            6     4      2    2190
                                              3 COMRAM     6     4      2
                            _lcdData
 ---------------------------------------------------------------------------------
 (3) _lcdInt                                               2     0      2    8095
                                             22 COMRAM     2     0      2
                            ___awdiv
                            ___awmod
                 _getAlarmLowerLevel (ARG)
                 _getAlarmUpperLevel (ARG)
                           _getLevel (ARG)
                            _lcdData
 ---------------------------------------------------------------------------------
 (4) _lcdData                                              1     1      0     808
                                              2 COMRAM     1     1      0
                          _Delay40us
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    4096
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2732
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _getSEC                                               0     0      0   47243
                         _dsReadData
 ---------------------------------------------------------------------------------
 (3) _getMIN                                               0     0      0   47243
                         _dsReadData
 ---------------------------------------------------------------------------------
 (3) _getLevel                                             2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _getLanguage                                          0     0      0   47243
                         _dsReadData
 ---------------------------------------------------------------------------------
 (3) _getHOUR                                              0     0      0   47243
                         _dsReadData
 ---------------------------------------------------------------------------------
 (3) _getAlarmUpperLevel                                   4     2      2   47243
                                             18 COMRAM     4     2      2
                         _dsReadData
 ---------------------------------------------------------------------------------
 (3) _getAlarmLowerLevel                                   4     2      2   47243
                                             18 COMRAM     4     2      2
                         _dsReadData
 ---------------------------------------------------------------------------------
 (3) _dsReadData                                           5     3      2   47243
                                             13 COMRAM     5     3      2
                        _i2cReadByte
                       _i2cWriteByte
 ---------------------------------------------------------------------------------
 (4) _i2cReadByte                                          6     5      1   19023
                                              7 COMRAM     6     5      1
                       _i2c_read_bit
                           _i2c_stop
                      _i2c_write_bit
 ---------------------------------------------------------------------------------
 (2) _getState                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _eventRead                                           15    13      2  176585
                                             24 COMRAM    15    13      2
                             ___wmul
                             _kpRead
                              _pow10
                         _serialRead
                 _setAlarmLowerLevel
                 _setAlarmUpperLevel
                            _setHOUR
                        _setLanguage
                             _setMIN
                             _setSEC
 ---------------------------------------------------------------------------------
 (2) _setSEC                                               1     1      0   28265
                                             14 COMRAM     1     1      0
                        _dsWriteData
 ---------------------------------------------------------------------------------
 (2) _setMIN                                               1     1      0   28265
                                             14 COMRAM     1     1      0
                        _dsWriteData
 ---------------------------------------------------------------------------------
 (2) _setLanguage                                          1     1      0   28241
                                             14 COMRAM     1     1      0
                        _dsWriteData
 ---------------------------------------------------------------------------------
 (2) _setHOUR                                              1     1      0   28265
                                             14 COMRAM     1     1      0
                        _dsWriteData
 ---------------------------------------------------------------------------------
 (2) _setAlarmUpperLevel                                   2     0      2   28491
                                             22 COMRAM     2     0      2
                        _dsWriteData
                 _getAlarmUpperLevel (ARG)
 ---------------------------------------------------------------------------------
 (2) _setAlarmLowerLevel                                   2     0      2   28491
                                             22 COMRAM     2     0      2
                        _dsWriteData
                 _getAlarmLowerLevel (ARG)
 ---------------------------------------------------------------------------------
 (3) _dsWriteData                                          3     1      2   28219
                                             11 COMRAM     3     1      2
                       _i2cWriteByte
 ---------------------------------------------------------------------------------
 (4) _i2cWriteByte                                         5     3      2   27491
                                              7 COMRAM     4     2      2
                       _i2c_read_bit
                          _i2c_start
                           _i2c_stop
                      _i2c_write_bit
 ---------------------------------------------------------------------------------
 (5) _i2c_write_bit                                        1     1      0    7692
                                              6 COMRAM     1     1      0
                          _I2C_delay
                          _clear_SCL
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (5) _i2c_stop                                             0     0      0    5548
                          _I2C_delay
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (5) _i2c_start                                            0     0      0    7648
                          _I2C_delay
                          _clear_SCL
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (6) _clear_SDA                                            0     0      0    2100
                       _digitalWrite
                            _pinMode
 ---------------------------------------------------------------------------------
 (5) _i2c_read_bit                                         1     1      0    5571
                                              6 COMRAM     1     1      0
                          _I2C_delay
                          _clear_SCL
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (6) _read_SDA                                             0     0      0    1724
                        _digitalRead
                            _pinMode
 ---------------------------------------------------------------------------------
 (6) _read_SCL                                             0     0      0    1724
                        _digitalRead
                            _pinMode
 ---------------------------------------------------------------------------------
 (7) _digitalRead                                          5     3      2     372
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (6) _clear_SCL                                            0     0      0    2100
                       _digitalWrite
                            _pinMode
 ---------------------------------------------------------------------------------
 (7) _pinMode                                              6     2      4    1352
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) _digitalWrite                                         6     2      4     748
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _I2C_delay                                            4     4      0       0
 ---------------------------------------------------------------------------------
 (3) _serialRead                                           1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _pow10                                                7     5      2    3083
                                              6 COMRAM     7     5      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2915
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _kpRead                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _serialInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _outputInit                                           0     0      0    1800
                            _lcdInit
 ---------------------------------------------------------------------------------
 (2) _lcdInit                                              1     1      0    1800
                                              3 COMRAM     1     1      0
                           _Delay2ms
                         _lcdCommand
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (3) _lcdCommand                                           1     1      0     944
                                              2 COMRAM     1     1      0
                           _Delay2ms
                          _Delay40us
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (5) _lcdCommand4bits                                      2     1      1     718
                                              0 COMRAM     2     1      1
                        _pulseEnable
 ---------------------------------------------------------------------------------
 (6) _pulseEnable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Delay40us                                            1     1      0      46
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Delay2ms                                             2     2      0      92
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _kpDebounce                                           2     2      0       0
 ---------------------------------------------------------------------------------
 (1) _eventInit                                            0     0      0       0
                             _kpInit
 ---------------------------------------------------------------------------------
 (1) _kpInit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _eventInit
     _kpInit
   _kpDebounce
   _kpInit
   _lcdInit
     _Delay2ms
     _lcdCommand
       _Delay2ms
       _Delay40us
       _lcdCommand4bits
         _pulseEnable
     _lcdCommand4bits
   _outputInit
     _lcdInit
   _serialInit
   _smLoop
     _eventRead
       ___wmul
       _kpRead
       _pow10
         ___wmul
       _serialRead
       _setAlarmLowerLevel
         _dsWriteData
           _i2cWriteByte
             _i2c_read_bit
               _I2C_delay
               _clear_SCL
                 _digitalWrite
                 _pinMode
               _read_SCL
                 _digitalRead
                 _pinMode
               _read_SDA
                 _digitalRead
                 _pinMode
             _i2c_start
               _I2C_delay
               _clear_SCL
               _clear_SDA
                 _digitalWrite
                 _pinMode
               _read_SCL
               _read_SDA
             _i2c_stop
               _I2C_delay
               _clear_SDA
               _read_SCL
               _read_SDA
             _i2c_write_bit
               _I2C_delay
               _clear_SCL
               _clear_SDA
               _read_SCL
               _read_SDA
         _getAlarmLowerLevel (ARG)
           _dsReadData
             _i2cReadByte
               _i2c_read_bit
               _i2c_stop
               _i2c_write_bit
             _i2cWriteByte
       _setAlarmUpperLevel
         _dsWriteData
         _getAlarmUpperLevel (ARG)
           _dsReadData
       _setHOUR
         _dsWriteData
       _setLanguage
         _dsWriteData
       _setMIN
         _dsWriteData
       _setSEC
         _dsWriteData
     _getAlarmLowerLevel
     _getAlarmUpperLevel
     _getHOUR
       _dsReadData
     _getLanguage
       _dsReadData
     _getLevel
     _getMIN
       _dsReadData
     _getSEC
       _dsReadData
     _getState
     _outputPrint
       ___awdiv
       ___awmod
         ___awdiv (ARG)
       _getAlarmLowerLevel
       _getAlarmUpperLevel
       _getHOUR
       _getLanguage
       _getLevel
       _getMIN
       _getSEC
       _getState (ARG)
       _lcdCommand (ARG)
       _lcdData (ARG)
         _Delay40us
         _lcdCommand4bits
       _lcdInt (ARG)
         ___awdiv
         ___awmod
         _getAlarmLowerLevel (ARG)
         _getAlarmUpperLevel (ARG)
         _getLevel (ARG)
         _lcdData (ARG)
       _lcdString (ARG)
         _lcdData
     _serialSend
     _serialSendInt
       _getHOUR (ARG)
       _getMIN (ARG)
       _getSEC (ARG)
       _intToStr (ARG)
         ___awdiv
         ___awmod
       _serialSendString (ARG)
         _getLanguage (ARG)
         _serialSend (ARG)
     _serialSendString
     _setAlarmLowerLevel
     _setAlarmUpperLevel
     _setHOUR
     _setLanguage
     _setMIN
     _setSEC
     _setState
     _updateLevel
       _adcInit
       _adcRead
   _varInit
     _dsInit
       _i2cInit
         _pinMode
     _getLanguage
     _setLanguage

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      28        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      40       5       40.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     31      5F       1      100.0%
BITBIGSFRhhhhh      3B      0       0      20        0.0%
BITBIGSFRllll       20      0       0      26        0.0%
BITBIGSFRllh         D      0       0      25        0.0%
BITBIGSFRhll         C      0       0      23        0.0%
BITBIGSFRlh          7      0       0      24        0.0%
BITBIGSFRhhlh        7      0       0      22        0.0%
BITBIGSFRhhhl        7      0       0      21        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      9F      27        0.0%
DATA                 0      0      9F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Mon Jul 01 12:17:09 2024

                   lcdString@msg 0004                               l21 5E8A                               l44 5CF6  
                             l53 6424                               l47 5D08                               l73 5F42  
                             l57 69DC                               l92 5F70                               l76 5D52  
                             l68 5D6E                               l85 5D20                               l95 5C46  
                   ___awdiv@sign 0006              ___wmul@multiplicand 0003                    ??_i2cReadByte 0009  
          i2cWriteByte@send_stop 0008                   i2cReadByte@bit 000B                              l115 6220  
                            l123 6574                              l108 64FC                              l205 6604  
                            l222 6064                              l118 5D8C                              l207 6618  
                            l231 5EEC                              l135 6312                              l216 5F16  
                            l225 609C                              l241 6192                              l322 6B46  
                            l219 5C38                              l323 6B42                              l139 6886  
                            l228 5EC2                              l164 5FCC                              l182 5C64  
                            l318 6D94                              l270 6484                              l158 5C52  
                            l327 6B42                              l263 602C                              l167 61D8  
                            l352 6FE2                              l248 5F9E                              l185 5C3C  
                            l257 636A                              l601 5CBC                              l419 7286  
                            l612 5E70                              l276 62BC                              l604 5CAC  
                            l516 77E4                              l622 5E24                              l383 5C7C  
                            l375 63BE                              l607 5C8C                              l376 63C6  
                            l545 5C4C                              l617 5E4A                              l650 5DD8  
                            l643 60D4                              l636 5DFE                              l629 610C  
                            l653 5C9C                              l398 70EC                              l911 678C  
                            l559 7D9A                              l671 5CCC                              l680 5DB2  
                            l656 5D38                              l592 5CDE                              l674 5FD0  
                            l586 5CF2                              l595 5C40                              l924 66C8  
                            l676 5FDE                              l589 5C6E                              l677 5FFA  
                            l598 5C5A                     ___awmod@sign 000E                              wreg 0FE8  
               i2c_write_bit@bit 0007         __end_of_serialSendString 6426                    ?_i2cWriteByte 0008  
         i2cWriteByte@send_start 000A                  i2cReadByte@nack 000A                  i2cReadByte@byte 000D  
            getAlarmLowerLevel@a 0052              getAlarmLowerLevel@b 0051                             l3001 68E8  
                           l3011 6944                             l3003 6904                             l2301 5C70  
                           l3021 6978                             l3013 6956                             l3005 6912  
                           l2303 5C74                             l2311 658A                             l3103 5E16  
                           l3111 5E3C                             l3031 69B8                             l3023 6988  
                           l3015 6962                             l3007 6916                             l2321 65B0  
                           l2313 658C                             l3201 6514                             l3041 5F2E  
                           l3121 5D24                             l3105 5E28                             l3113 5E4E  
                           l3025 6994                             l3033 69BE                             l3017 6966  
                           l3009 6932                             l2331 65CE                             l2323 65B6  
                           l2315 659A                             l2307 6576                             l3051 61F2  
                           l3203 6524                             l3043 5F3C                             l3035 5F18  
                           l3131 5DF0                             l3123 5D2A                             l3107 5E38  
                           l3115 5E5E                             l3211 6FE4                             l3027 69A8  
                           l3019 6970                             l2341 65FC                             l2333 65DC  
                           l2325 65B8                             l2317 65A0                             l2309 6584  
                           l3053 6204                             l3045 5F40                             l3037 5F1C  
                           l3133 5DB4                             l3125 5DDA                             l3301 7214  
                           l3221 7026                             l3213 6FEC                             l3141 5C66  
                           l3061 62CA                             l3029 69B4                             l3205 5D54  
                           l2343 6600                             l2335 65E2                             l2327 65C6  
                           l2319 65A2                             l3055 6214                             l3039 5F2A  
                           l3135 5DB8                             l3127 5DDE                             l3119 5E62  
                           l3303 7226                             l3231 705A                             l3223 7034  
                           l3215 6FF8                             l3151 60BE                             l3143 60D6  
                           l3071 67A4                             l3063 62E6                             l3207 5D64  
                           l2345 6614                             l2337 65E4                             l2329 65CC  
                           l3057 621C                             l3049 61DC                             l2601 6FC0  
                           l3137 5DBC                             l3129 5DE2                             l3321 727A  
                           l3305 7232                             l3241 7092                             l3233 7060  
                           l3225 703C                             l3217 7010                             l3145 60F6  
                           l3081 686A                             l3073 67AA                             l3065 62EA  
                           l3401 7A82                             l3209 5C4E                             l2339 65F6  
                           l2291 5D4E                             l3091 6380                             l2611 6A22  
                           l2603 69DE                             l3139 5DCA                             l3315 7254  
                           l3307 7244                             l3251 70E0                             l3243 70A4  
                           l3235 7070                             l3323 727E                             l3227 704A  
                           l3219 701E                             l3331 5C3E                             l3155 5C7E  
                           l3163 5CAE                             l3075 67DA                             l3067 678E  
                           l3059 62BE                             l3411 7ABC                             l3403 7A88  
                           l3171 5CBE                             l3083 5EEE                             l2293 5D50  
                           l3085 5C3A                             l3093 639C                             l2621 6A86  
                           l2613 6A3E                             l2605 69FA                             l2701 6166  
                           l3317 7268                             l3309 7250                             l3245 70B0  
                           l3253 70EC                             l3237 7080                             l3229 7052  
                           l3149 609E                             l3077 680A                             l3069 679C  
                           l3421 7B3E                             l3413 7AC2                             l3405 7AAA  
                           l3341 7822                             l3173 5CC0                             l3181 5FE4  
                           l3501 7288                             l3191 650A                             l3095 63A0  
                           l2711 618A                             l2703 617A                             l3319 726A  
                           l3271 7140                             l3263 7116                             l3255 70FE  
                           l3247 70C2                             l3239 708C                             l3167 5C8E  
                           l3159 5C9E                             l3079 683A                             l3423 7B58  
                           l3415 7AF0                             l3407 7AB0                             l3431 7BB2  
                           l3351 7868                             l3343 7828                             l3335 77E6  
                           l3327 5C56                             l3175 5CC4                             l3183 5FEA  
                           l3511 72CA                             l3503 728C                             l2801 64F0  
                           l2289 5D3A                             l3089 636C                             l2641 6B48  
                           l2713 618E                             l2705 617E                             l2721 5F8E  
                           l3097 5E02                             l3281 71AC                             l3273 7146  
                           l3265 7122                             l3257 710E                             l3249 70CE  
                           l3441 7C02                             l3433 7BC4                             l3425 7B5E  
                           l3417 7B0A                             l3409 7AB6                             l3361 78D6  
                           l3353 7882                             l3345 782E                             l3337 77FA  
                           l3177 5CC8                             l3185 5FF2                             l3329 5CCE  
                           l3521 731E                             l3513 72DC                             l3505 7298  
                           l2803 64F6                             l2651 6BD4                             l2643 6B64  
                           l2571 6E06                             l2563 6D96                             l2635 6AFA  
                           l2627 6AB2                             l2619 6A6A                             l2707 6182  
                           l2723 5F92                             l2715 5F72                             l2731 6326  
                           l2811 643C                             l3099 5E12                             l3291 71DC  
                           l3267 7124                             l3451 7C58                             l3443 7C0E  
                           l3435 7BCA                             l3427 7B8C                             l3419 7B10  
                           l3371 7944                             l3363 7904                             l3355 7888  
                           l3347 7834                             l3339 7800                             l3179 5FCE  
                           l3611 759E                             l3603 754C                             l3531 7374  
                           l3523 7332                             l3515 72F0                             l3507 72A4  
                           l2805 64F8                             l3197 650E                             l3189 64FE  
                           l2661 6C66                             l2653 6BEE                             l2645 6B76  
                           l2581 6E9A                             l2573 6E22                             l2565 6DB2  
                           l2637 6B16                             l2629 6ACE                             l2709 6186  
                           l2725 5F96                             l2717 5F76                             l2741 635A  
                           l2733 632E                             l2821 645A                             l3293 71E2  
                           l3285 71B2                             l3277 715A                             l3269 7138  
                           l2901 66E4                             l3461 7C9E                             l3453 7C5E  
                           l3437 7BEC                             l3445 7C1E                             l3429 7BA6  
                           l3381 797E                             l3373 7966                             l3365 791E  
                           l3357 78B6                             l3349 783A                             l3613 75A6  
                           l3605 7550                             l3541 73C2                             l3533 7386  
                           l3525 7344                             l3517 7302                             l3509 72B6  
                           l3621 75F4                             l3199 6512                             l2671 6CFE  
                           l2663 6C86                             l2655 6C0E                             l2647 6B96  
                           l2591 6F24                             l2583 6EAC                             l2575 6E34  
                           l2567 6DC4                             l2751 6000                             l2727 5F9A  
                           l2719 5F7A                             l2743 635E                             l2735 6332  
                           l2823 645C                             l2807 6428                             l3295 71F4  
                           l3287 71C4                             l3279 7180                             l2911 670A  
                           l2903 66E8                             l3471 7CEC                             l3463 7CA4  
                           l3455 7C6E                             l3447 7C30                             l3439 7BF2  
                           l3391 7A14                             l3383 79AC                             l3375 796C  
                           l3359 78D0                             l3367 792A                             l3631 768C  
                           l3615 75B4                             l3607 756A                             l3551 7408  
                           l3543 73CC                             l3535 7392                             l3527 7358  
                           l3519 730C                             l3623 7634                             l2673 6D20  
                           l2665 6CA8                             l2657 6C30                             l2649 6BB8  
                           l2593 6F48                             l2585 6ED0                             l2577 6E58  
                           l2569 6DE4                             l2681 602E                             l2761 602A  
                           l2753 6004                             l2745 6362                             l2737 6336  
                           l2729 6316                             l2825 646C                             l2817 6440  
                           l2809 6438                             l3297 71FA                             l3289 71CA  
                           l2841 6286                             l2833 626C                             l2921 6740  
                           l2913 671C                             l2905 66F6                             l3481 7D40  
                           l3473 7D00                             l3465 7CC6                             l3457 7C7A  
                           l3449 7C36                             l3393 7A1A                             l3385 79C6  
                           l3377 7972                             l3369 793E                             l3641 76CA  
                           l3633 7692                             l3625 7640                             l3617 75E2  
                           l3609 7598                             l3561 7454                             l3553 741A  
                           l3545 73DE                             l3537 73A4                             l3529 736A  
                           l2771 5D0E                             l2675 6D3C                             l2667 6CC4  
                           l2659 6C4C                             l2595 6F6E                             l2587 6EF6  
                           l2579 6E7E                             l2755 6018                             l2691 5EC4  
                           l2747 6366                             l2739 634A                             l2827 6470  
                           l2819 6456                             l3299 720C                             l2851 62BA  
                           l2843 628A                             l2923 6756                             l2915 6724  
                           l2931 676C                             l2907 66FE                             l3491 7D8E  
                           l3475 7D0C                             l3467 7CCC                             l3483 7D4C  
                           l3459 7C8A                             l3395 7A48                             l3387 79CC  
                           l3379 7978                             l3651 7706                             l3643 76DA  
                           l3635 7696                             l3627 7658                             l3619 75E8  
                           l3571 749A                             l3563 7460                             l3555 7424  
                           l3547 73EA                             l3539 73B0                             l1981 5C5E  
                           l2773 5D10                             l2765 5D0A                             l2693 5C42  
                           l2781 64A0                             l2677 6D56                             l2669 6CDE  
                           l2597 6F8A                             l2589 6F12                             l2685 6066  
                           l2757 601E                             l2749 5FFC                             l2829 6480  
                           l2845 62A0                             l2933 677C                             l2925 675E  
                           l2917 672C                             l2909 6702                             l2941 661E  
                           l3485 7D60                             l3477 7D20                             l3469 7CE0  
                           l3397 7A62                             l3389 79FA                             l3661 7754  
                           l3645 76E0                             l3637 769E                             l3629 767A  
                           l3653 7712                             l3581 74E6                             l3573 74AC  
                           l3565 7472                             l3557 7436                             l3549 73FC  
                           l3493 5CE0                             l1983 5C62                             l2871 5F4C  
                           l2791 64CA                             l2783 64AE                             l2775 6488  
                           l2679 6D76                             l2599 6F9C                             l2759 6022  
                           l2695 614E                             l2847 62A6                             l2839 6278  
                           l2935 6784                             l2927 6760                             l2919 673A  
                           l2951 664E                             l2943 662C                             l3487 7D66  
                           l3479 7D2C                             l3399 7A6E                             l2855 5CF6  
                           l3671 779E                             l3663 775C                             l3655 7734  
                           l3647 76F0                             l3639 76B0                             l3583 7500  
                           l3591 7522                             l3575 74B8                             l3567 747C  
                           l3559 7442                             l3495 5CE4                             l2873 5F4E  
                           l2865 5F48                             l2793 64CC                             l2785 64B4  
                           l2777 6498                             l2689 5E9A                             l2697 615E  
                           l2849 62B6                             l2881 6194                             l2929 6766  
                           l2961 6694                             l2953 6660                             l2945 6634  
                           l3489 7D88                             l2857 5D04                             l3681 77D2  
                           l3673 77AE                             l3665 776E                             l3657 7746  
                           l3649 76F6                             l3593 7534                             l3585 7506  
                           l3577 74CA                             l3569 748E                             l3497 5CE8  
                           l1979 5C5C                             l2875 5F5E                             l2859 5F44  
                           l2795 64DA                             l2787 64B6                             l2779 649E  
                           l3499 5C48                             l2891 5DAA                             l2699 6162  
                           l2883 61D0                             l2971 66C0                             l2963 669C  
                           l2955 6668                             l2947 6638                             l2939 661A  
                           l3683 77DC                             l3667 7788                             l3659 774C  
                           l3595 7542                             l3587 750E                             l3579 74D4  
                           l2877 5F60                             l2797 64E0                             l2789 64C4  
                           l2965 66A2                             l2957 6670                             l2949 6646  
                           l2981 63F4                             l3669 7798                             l3589 7516  
                           l3685 5E72                             l2799 64E2                             l2887 5FA2  
                           l2895 66CA                             l2959 667E                             l2967 66A8  
                           l2879 5D72                             l2991 68B8                             l2983 6888  
                           l2975 63C8                             l3679 77B8                             l3687 5E8E  
                           l2889 5D8E                             l2897 66CE                             l2969 66B8  
                           l2985 6898                             l2977 63CC                             l2899 66DC  
                           l2987 68AA                             l2995 68C6                             l2979 63F0  
                           l2997 68D4                             l2989 68B4                             l2999 68DC  
                           STR_1 7FDC                             STR_2 7FCE                             STR_3 7FF5  
                           STR_4 7FE9                             STR_5 7F57                             STR_6 7E69  
                           STR_7 7FBD                             STR_8 7F68                             STR_9 7F35  
                           u2004 6FB2                             u2100 6B16                             u2020 69FA  
                           u2005 6FAE                             u2101 6B12                             u2021 69F6  
                           u2014 6FD6                             u2015 6FD2                             u2200 6C4C  
                           u2120 6B64                             u2040 6A3E                             u3000 70FE  
                           u2201 6C48                             u2121 6B60                             u2041 6A3A  
                           u3001 70FA                             u1410 6584                             u2210 6C66  
                           u2130 6B76                             u2114 6B2C                             u2034 6A0C  
                           u3010 710E                             u1411 6580                             u2211 6C62  
                           u2131 6B72                             u2115 6B28                             u2035 6A08  
                           u3011 710A                             u1420 659A                             u2060 6A86  
                           u3100 727A                             u3020 7134                             u1421 6596  
                           u2061 6A82                             u3101 7276                             u3021 7130  
                           u1430 65B0                             u2054 6A54                             u3030 7156  
                           u3110 77FA                             u1431 65AC                             u2055 6A50  
                           u3031 7152                             u3111 77F6                             u1440 65C6  
                           u2304 6D68                             u2240 6CC4                             u2224 6C78  
                           u2160 6BD4                             u2144 6B88                             u2080 6ACE  
                           u2320 6062                             u2400 634A                             u3040 71C4  
                           u3200 7D40                             u3120 793E                             u1441 65C2  
                           u2305 6D64                             u2241 6CC0                             u2225 6C74  
                           u2161 6BD0                             u2145 6B84                             u2081 6ACA  
                           u2321 605C                             u2401 6346                             u3041 71C0  
                           u3201 7D3C                             u3121 793A                             u1450 65DC  
                           u2314 6D88                             u2250 6CDE                             u2234 6C98  
                           u2170 6BEE                             u2154 6BA8                             u2074 6A9C  
                           u2330 6064                             u2410 635A                             u3050 71DC  
                           u3210 7D60                             u3130 7A82                             u1451 65D8  
                           u2315 6D84                             u2251 6CDA                             u2235 6C94  
                           u2171 6BEA                             u2155 6BA4                             u2075 6A98  
                           u2411 6356                             u3051 71D8                             u3211 7D5C  
                           u3131 7A7E              setAlarmLowerLevel@a 0050                             u1460 65F6  
                           u2340 609A                             u2420 6018                             u2500 6450  
                           u3060 71F4                             u3140 7BC4                             u3300 73C2  
                           u3220 72B6              setAlarmLowerLevel@b 004F                             u1461 65F2  
                           u2341 6094                             u2421 6014                             u2501 644A  
                           u3061 71F0                             u3141 7BC0                             u3301 73BE  
                           u3221 72B2                             u1470 6614                             u2430 5D20  
                           u2094 6AE4                             u2350 609C                             u2510 6452  
                           u3070 720C                             u3150 7C30                             u3310 73DE  
                           u3230 72DC                             u1471 6610                             u2431 5D1C  
                           u2095 6AE0                             u3071 7208                             u3151 7C2C  
                           u3311 73DA                             u3231 72D8                             u2440 6498  
                           u2280 6D3C                             u2264 6CF0                             u2184 6C00  
                           u2360 615E                             u2520 646C                             u3080 7226  
                           u2600 66F6                             u3160 7C9E                             u3400 74E6  
                           u3320 73FC                             u3240 7302                             u2441 6494  
                           u2281 6D38                             u2265 6CEC                             u2185 6BFC  
                           u2361 615A                             u2521 6468                             u3081 7222  
                           u2601 66F2                             u3161 7C9A                             u3401 74E2  
                           u3321 73F8                             u3241 72FE                             u2450 64AE  
                           u2290 6D56                             u2274 6D10                             u2194 6C20  
                           u2370 617A                             u2530 6480                             u3090 7244  
                           u2610 671C                             u3170 7CE0                             u3410 7500  
                           u3330 741A                             u3250 731E                             u2451 64AA  
                           u2291 6D52                             u2275 6D0C                             u2195 6C1C  
                           u2371 6176                             u2531 647C                             u3091 7240  
                           u2611 6718                             u3171 7CDC                             u3411 74FC  
                           u3331 7416                             u3251 731A                             u2460 64C4  
                           u1900 6E9A                             u1820 6DB2                             u2380 5F8E  
                           u2540 62A0                             u2620 673A                             u2700 66B8  
                           u3180 7D00                             u3500 76B0                             u3420 7534  
                           u3340 7436                             u3260 7344                             u2461 64C0  
                           u1901 6E96                             u1821 6DAE                             u2381 5F8A  
                           u2541 629C                             u2621 6736                             u2701 66B4  
                           u3181 7CFC                             u3501 76AC                             u3421 7530  
                           u3341 7432                             u3261 7340                             u2470 64DA  
                           u1910 6EAC                             u1830 6DC4                             u2390 6326  
                           u2550 62B6                             u2630 6756                             u3190 7D20  
                           u2710 63EC                             u3510 7734                             u3430 7542  
                           u3350 7454                             u3270 736A                             u2471 64D6  
                           u1911 6EA8                             u1831 6DC0                             u2391 6322  
                           u2551 62B2                             u2631 6752                             u3191 7D1C  
                           u3511 7730                             u3431 753E                             u3351 7450  
                           u3271 7366                             u2480 64F0                             u2800 5F3C  
                           u2640 677C                             u2560 5D04                             u2720 6414  
                           u3520 7746                             u3440 756A                             u3360 7472  
                           u3280 7386                             u2481 64EC                             u2801 5F38  
                           u2641 6778                             u2561 5D00                             u3521 7742  
                           u3441 7566                             u3361 746E                             u3281 7382  
                           u2570 5F5E                             u2810 6204                             u2490 6438  
                           u2650 662C                             u2730 6424                             u3530 776E  
                           u3450 7598                             u3370 748E                             u3290 73A4  
                           u2571 5F5A                             u2811 6200                             u2491 6434  
                           u2651 6628                             u2731 6420                             u3531 776A  
                           u3451 7594                             u3371 748A                             u3291 73A0  
                           u2580 5F70                             u2820 6214                             u2900 6524  
                           u1940 6F12                             u1924 6EC2                             u1860 6E22  
                           u1844 6DD6                             u2660 6646                             u2740 68AA  
                           u3540 77D2                             u3460 75B4                             u3380 74AC  
                           u2581 5F6C                             u2821 6210                             u2901 6520  
                           u1941 6F0E                             u1925 6EBE                             u1861 6E1E  
                           u1845 6DD2                             u2661 6642                             u2741 68A6  
                           u2717 63E2                             u3541 77CE                             u3461 75B0  
                           u3381 74A8                             u1950 6F24                             u1934 6EE6  
                           u1870 6E34                             u1854 6DF6                             u2910 7010  
                           u2590 66DC                             u2670 6660                             u2830 6312  
                           u2750 68D4                             u3470 75E2                             u3390 74CA  
                           u1951 6F20                             u1935 6EE2                             u1871 6E30  
                           u1855 6DF2                             u2911 700C                             u2591 66D8  
                           u2671 665C                             u2831 630E                             u2751 68D0  
                           u2727 640A                             u3471 75DE                             u3391 74C6  
                           u2920 701E                             u2680 667E                             u2840 679C  
                           u2760 6944                             u3480 767A                             u2921 701A  
                           u2681 667A                             u2841 6798                             u2761 6940  
                           u3481 7676                             u2850 63BE                             u2930 7034  
                           u2690 6694                             u2770 6956                             u3490 768C  
                           u2851 63BA                             u2931 7030                             u2691 6690  
                           u2771 6952                             u3491 7688                             u1980 6F8A  
                           u1964 6F3A                             u1884 6E4A                             u2860 5E12  
                           u2940 704A                             u2780 69DC                             u1981 6F86  
                           u1965 6F36                             u1885 6E46                             u2861 5E0E  
                           u2941 7046                             u2781 69D8                             u2790 5F2A  
                           u1990 6F9C                             u1974 6F5E                             u1894 6E6E  
                           u2870 5E38                             u2950 7070                             u2791 5F26  
                           u1991 6F98                             u1975 6F5A                             u1895 6E6A  
                           u2871 5E34                             u2951 706C                             u2880 5E5E  
                           u2960 7080                             u2881 5E5A                             u2961 707C  
                           u2970 70A4                             u2890 5FDE                             u2971 70A0  
                           u2891 5FDA                             u2980 70C2                             u2981 70BE  
                           u2990 70E0                             u2991 70DC                             _PIR1 0F9E  
                    _outputPrint 77E6                             _flag 004B                             _main 5E72  
                           _send 0047                             _msgs 0060                             _time 0043  
                           fsr0h 0FEA                             fsr1h 0FE2                             indf0 0FEF  
                           fsr2h 0FDA                             fsr0l 0FE9                             indf1 0FE7  
                           indf2 0FDF                             fsr1l 0FE1                             fsr2l 0FD9  
                  ?_i2c_read_bit 0001                             prodh 0FF4                             prodl 0FF3  
                           start 0000                     ___param_bank 0000                  __end_of_i2cInit 5F18  
            serialSendString@str 0013                            ?_main 0001                  __end_of_adcInit 5CCE  
                __end_of_adcRead 5FFC                  __end_of___awdiv 678E                 ?_lcdCommand4bits 0001  
                          STR_10 7E7A                            STR_11 7FAC                            STR_20 7E36  
                          STR_12 7F46                            STR_21 7E25                            STR_13 7EAD  
                          STR_30 7F8A                            STR_22 7DF2                            STR_14 7E58  
                          STR_31 7F02                            STR_23 7F13                            STR_15 7E9C  
                          STR_40 7DD0                            STR_32 7F79                            STR_24 7E14  
                          STR_16 7E8B                            STR_33 7DA5                            STR_41 7DBF  
                          STR_25 7EE0                            STR_17 7E47                            STR_34 7DA5  
                          STR_42 7D9D                            STR_26 7F24                            STR_18 7E03  
                          STR_35 7DA5                            STR_27 7EF1                            STR_19 7EBE  
                          STR_36 7DA7                            STR_28 7ECF                  __end_of___awmod 66CA  
                          STR_37 7DA7                            STR_29 7F9B                            STR_38 7DE1  
                          STR_39 7DAE               outputPrint@min_500 0025                  ___awdiv@divisor 0003  
             outputPrint@min_496 0022               outputPrint@sec_501 0026               outputPrint@sec_497 0023  
                ___awdiv@counter 0005                            _RCREG 0FAE                            _RCSTA 0FAB  
                          _SPBRG 0FAF                            _PORTA 0F80                            _PORTB 0F81  
                          _PORTC 0F82                            _PORTD 0F83                            _PORTE 0F84  
                          _TRISA 0F92                            _TRISB 0F93                            _TRISC 0F94  
                          _TRISD 0F95                            _TRISE 0F96                            _TXREG 0FAD  
                __end_of_getHOUR 5C8E                            _TXSTA 0FAC                  __end_of_lcdData 5D8E  
                __end_of_lcdInit 6576                   ??_i2cWriteByte 000A                 _reading_protocol 005A  
            __end_of_i2cReadByte 62BE               outputPrint@numTela 0019                            _pow10 636C  
                          _level 0049                  __end_of_setHOUR 5E26                            _tecla 005E  
                __end_of_pinMode 6FE4                            _timer 0045                            _state 0058  
                __end_of_varInit 5CF4                            tablat 0FF5                __end_of_I2C_delay 5C3A  
                  _i2c_write_bit 6314                            status 0FD8                   ??_i2c_read_bit 0007  
               __end_of_Delay2ms 5F72             __end_of_digitalWrite 6D96                  __initialization 6222  
                   __end_of_main 5E9A                  i2cWriteByte@bit 000B                 __end_of_i2c_stop 5FA0  
                   ?_setLanguage 0001                           ??_main 0032                    __activetblptr 0002  
                    pow10@result 000C                           _ADCON0 0FC2                           _ADCON1 0FC1  
                         _ADCON2 0FC0                      eventRead@ev 001F                           ?_pow10 0007  
                         _ADRESH 0FC4                           _ADRESL 0FC3                 ___awdiv@dividend 0001  
                 ?_i2c_write_bit 0001                           _SPBRGH 0FB0              outputPrint@hour_495 0021  
            outputPrint@hour_499 0024                        ??_i2cInit 0007               _getAlarmLowerLevel 609E  
             _setAlarmLowerLevel 5DB4                      intToStr@end 001A               dsWriteData@address 000C  
               __end_of_getLevel 5C70                 __end_of_getState 5C42              ?_getAlarmLowerLevel 0013  
                         ___wmul 5D8E              ?_setAlarmLowerLevel 0017                        ??_adcInit 0001  
                      ??_adcRead 0003                        ??___awdiv 0005                        ??___awmod 000D  
                         _getMIN 5C9E                           _getSEC 5CAE                           _dsInit 5C4E  
                         _lcdInt 678E                           _kpInit 5C5C                           _kpRead 5C3A  
               __end_of_read_SDA 609E                 __end_of_read_SCL 6066                 __end_of_intToStr 69DE  
             kpDebounce@teclaOld 005F               kpDebounce@teclaNew 005C                           _setMIN 5E26  
                         _setSEC 5E4C                        ??_getHOUR 0013                           clear_0 625A  
                         _smLoop 7288                 ___awdiv@quotient 0007                  ___awmod@divisor 000B  
                      ??_lcdData 0003                           isa$std 0001                      _i2cReadByte 626A  
                      ??_lcdInit 0004                  ___awmod@counter 000D                           pow10@i 000A  
               __end_of_setState 5C5C                     __pdataCOMRAM 005F                        ??_setHOUR 000F  
                      ??_pinMode 0005                     __mediumconst 7D9C                        ??_varInit 0013  
                         tblptrh 0FF7                           tblptrl 0FF6                           tblptru 0FF8  
           ??_getAlarmLowerLevel 0015             ??_setAlarmLowerLevel 0019                      setMIN@value 000F  
              __end_of_Delay40us 5D22                      setSEC@value 000F                       __accesstop 0060  
        __end_of__initialization 6260            __end_of_serialSendInt 5D70               _getAlarmUpperLevel 60D6  
             _setAlarmUpperLevel 5DDA                    ___rparam_used 0001                     ?_updateLevel 0001  
                   ?_pulseEnable 0001                      pinMode@type 0003             __end_of_i2cWriteByte 6486  
                 __pcstackCOMRAM 0001              ?_getAlarmUpperLevel 0013              ?_setAlarmUpperLevel 0017  
                   __pidataBANK0 610E                    __end_of_pow10 63C8                 i2cWriteByte@byte 0009  
              __end_of_i2c_start 6194             __end_of_i2c_read_bit 602E                        ?_Delay2ms 0001  
           ??_getAlarmUpperLevel 0015             ??_setAlarmUpperLevel 0019                ?_serialSendString 0013  
            getAlarmUpperLevel@a 0056              getAlarmUpperLevel@b 0055                  ??_i2c_write_bit 0007  
                        ??_pow10 0009              setAlarmUpperLevel@a 0054              setAlarmUpperLevel@b 0053  
             ??_serialSendString 0015                     ?_outputPrint 0019                       _alarmLevel 0041  
                      ?_i2c_stop 0001                   outputPrint@min 001F                   outputPrint@sec 0020  
                     _dsReadData 6194                 dsReadData@result 0011                     pow10@expoent 0007  
                     _lcdCommand 61DA                          ?___wmul 0001                          ?_getMIN 0001  
                        ?_getSEC 0001                          ?_dsInit 0001                          ?_lcdInt 0017  
                        ?_kpInit 0001                          ?_kpRead 0001                     eventRead@key 0024  
                   eventRead@msg 0039                          _BAUDCON 0FB8                          ?_setMIN 0001  
                        ?_setSEC 0001                          ?_smLoop 0001                       _kpDebounce 6576  
                     ??_Delay2ms 0001             i2cReadByte@send_stop 0008                     _digitalWrite 6B48  
                      ?_getLevel 0001                        ?_getState 0001                   eventRead@i_344 0022  
                 eventRead@i_347 0023                     intToStr@temp 0017               intToStr@isNegative 0015  
                 eventRead@envio 0032                __end_of_clear_SDA 5EEE                __end_of_clear_SCL 5EC4  
                      ?_read_SDA 0001                        ?_read_SCL 0001                       ??_i2c_stop 0007  
                      ?_intToStr 000F                   eventRead@value 0026                          _i2cInit 5EEE  
                      _I2C_delay 5C38                          __Hparam 0000                        ?_setState 0001  
                        __Lparam 0000                   _eventRead$1244 001D                __end_of_lcdString 6314  
                kpDebounce@tempo 005D                          _adcInit 5CBE                          _adcRead 5FCE  
                        ___awdiv 66CA                          ___awmod 661A                          _getHOUR 5C7E  
                        __pcinit 6222                   serialRead@resp 0001                          _lcdData 5D70  
                        __ramtop 0800                          _lcdInit 64FE                          __ptext0 5E72  
                        __ptext1 5CE0                          __ptext2 5C4E                          __ptext3 5EEE  
                        __ptext4 7288                          __ptext5 5CCE                          __ptext6 5FCE  
                        __ptext7 5CBE                          __ptext8 5C54                          __ptext9 5D54  
              __end_of_eventInit 5C7E                __end_of_eventRead 7288                          _key_ant 004D  
                        _setHOUR 5E00                          _pinMode 6D96                 ___awmod@dividend 0009  
                    serialSend@c 0001                          _varInit 5CE0                       ??_getLevel 0003  
                     ??_getState 0001                        Delay2ms@j 0001                        Delay2ms@k 0002  
                        _started 005B             end_of_initialization 6260                       ??_read_SDA 0007  
                     ??_read_SCL 0007                       ??_intToStr 0012                    __Lmediumconst 7D9C  
                    ?_dsReadData 000E                   digitalRead@pin 0001                       ?_I2C_delay 0001  
                     ??_setState 0001                       _serialInit 5D3A                       _serialRead 5F18  
                     _serialSend 5CF4                       _serial_out 0098                          postdec1 0FE5  
                        postdec2 0FDD                      ?_lcdCommand 0001                     setHOUR@value 000F  
                        postinc0 0FEE                          postinc2 0FDE  setAlarmUpperLevel@newAlarmLevel 0017  
                  ??_digitalRead 0003                    ??_getLanguage 0013                      ?_kpDebounce 0001  
                   ?_i2cReadByte 0008                  i2c_read_bit@bit 0007                       lcdString@i 0008  
                   _i2cWriteByte 6426                    ??_dsWriteData 000E                        _Delay40us 5D0A  
                 _level@var$F528 003F                       _outputInit 5C48                   intToStr@buffer 0011  
                   _i2c_read_bit 5FFC                outputPrint@idioma 001B                   adcRead@ADvalor 0003  
                 __end_of___wmul 5DB4                   __end_of_getMIN 5CAE                   __end_of_getSEC 5CBE  
                 __end_of_dsInit 5C54                    __pidataCOMRAM 5C37                   __end_of_lcdInt 6888  
                 __end_of_kpInit 5C66                   __end_of_kpRead 5C3E                   __end_of_setMIN 5E4C  
                 __end_of_setSEC 5E72                   __end_of_smLoop 77E6              start_initialization 6222  
            __end_of_digitalRead 6B48              __end_of_getLanguage 5C9E                        _i2c_start 614E  
                     eventRead@i 0021                       ?_Delay40us 0001                     smLoop@evento 0031  
              ??_lcdCommand4bits 0002                      ??_I2C_delay 0001              __end_of_dsWriteData 5FCE  
                    ?_serialInit 0001                      ?_serialRead 0001                      ?_serialSend 0001  
                       ??___wmul 0005                         ??_getMIN 0013                         ??_getSEC 0013  
                       ??_dsInit 0007                         ??_lcdInt 0019                         ??_kpInit 0001  
                       ??_kpRead 0001                      __pdataBANK0 0060                         ??_setMIN 000F  
                       ??_setSEC 000F                         ??_smLoop 002C                dsReadData@address 000E  
                    __pbssCOMRAM 0032                       pinMode@pin 0001                       ?_i2c_start 0001  
               setState@newState 0001                  outputPrint@hour 001E            __end_of_i2c_write_bit 636C  
                       ?_i2cInit 0001                      ?_outputInit 0001                        _clear_SDA 5EC4  
                      _clear_SCL 5E9A                    __pmediumconst 7D9C                         ?_adcInit 0001  
                       ?_adcRead 0001                         ?___awdiv 0001                         ?___awmod 0009  
                      _lcdString 62BE                         ?_getHOUR 0001                      _digitalRead 69DE  
                    _getLanguage 5C8E                         ?_lcdData 0001                    ??_setLanguage 000F  
                       ?_lcdInit 0001                    lcdCommand@cmd 0003                    eventRead@data 0059  
                       ?_setHOUR 0001                         ?_pinMode 0001                         ?_varInit 0001  
                      _eventInit 5C70                        _eventRead 6FE4                      _dsWriteData 5FA0  
                    ??_Delay40us 0001                   ___wmul@product 0005                     ??_dsReadData 0010  
                  _serialSendInt 5D54                       ?_clear_SDA 0001                       ?_clear_SCL 0001  
                      lcdInt@val 0017                     ??_lcdCommand 0003                       ?_lcdString 0004  
                   ??_kpDebounce 0001                ___wmul@multiplier 0001                    intToStr@digit 0013  
                       _Delay2ms 5F44               __end_of_dsReadData 61DA                    intToStr@value 000F  
                  intToStr@start 0018                       ?_eventInit 0001                       ?_eventRead 0019  
                    ??_i2c_start 0007              __end_of_setLanguage 5D3A                        copy_data0 6236  
             __end_of_lcdCommand 6222  setAlarmLowerLevel@newAlarmLevel 0017                     lcdData@valor 0003  
                       _i2c_stop 5F72                   ?_serialSendInt 001E               __end_of_kpDebounce 661A  
                  ??_updateLevel 0005                         __Hrparam 0000                        intToStr@i 001C  
                  ??_pulseEnable 0001                 _serialSendString 63C8                         __Lrparam 0000  
               dsWriteData@value 000E                  _lcdCommand4bits 6486                         _getLevel 5C66  
                       __ptext10 63C8                         __ptext11 5CF4                         __ptext20 5C9E  
                       __ptext12 6888                         __ptext21 5C66                         __ptext13 77E6  
                       __ptext30 5E4C                         __ptext22 5C8E                         __ptext14 62BE  
                       __ptext31 5E26                         __ptext23 5C7E                         __ptext15 678E  
                       __ptext40 614E                         __ptext32 5D22                         __ptext24 60D6  
                       __ptext16 5D70                         __ptext41 5EC4                         __ptext33 5E00  
                       __ptext25 609E                         __ptext17 661A                         __ptext50 5F18  
                       __ptext42 5FFC                         __ptext34 5DDA                         __ptext26 6194  
                       __ptext18 66CA                         __ptext51 636C                         __ptext43 6066  
                       __ptext35 5DB4                         __ptext27 626A                         __ptext19 5CAE  
                       __ptext60 5D0A                         __ptext52 5D8E                         __ptext44 602E  
                       __ptext36 5FA0                         __ptext28 5C3E                         __ptext61 5F44  
                       __ptext53 5C3A                         __ptext45 69DE                         __ptext37 6426  
                       __ptext29 6FE4                         __ptext62 6576                         __ptext54 5D3A  
                       __ptext46 5E9A                         __ptext38 6314                         __ptext63 5C70  
                       __ptext55 5C48                         __ptext47 6D96                         __ptext39 5F72  
                       __ptext64 5C5C                         __ptext56 64FE                         __ptext48 6B48  
                       __ptext57 61DA                         __ptext49 5C38                         __ptext58 6486  
                       __ptext59 5C42                         _getState 5C3E                      _smLoop$1245 002F  
                  ??_outputPrint 001D                         _language 0057                         _read_SDA 6066  
                       _read_SCL 602E                         _intToStr 6888                      ??_clear_SDA 0007  
                    ??_clear_SCL 0007                     ??_serialInit 0001                     ??_serialRead 0001  
                   ??_serialSend 0001                         _setState 5C54                       Delay40us@j 0001  
                       lcdInit@i 0004                         isa$xinst 0000                      ??_lcdString 0006  
            __end_of_updateLevel 5CE0              __end_of_pulseEnable 5C48                      _setLanguage 5D22  
         setLanguage@newLanguage 000F       __end_of_getAlarmLowerLevel 60D6       __end_of_setAlarmLowerLevel 5DDA  
                    ??_eventInit 0001                      ??_eventRead 001B                    ?_digitalWrite 0001  
             __end_of_serialInit 5D54               __end_of_serialRead 5F44               __end_of_serialSend 5D0A  
                ??_serialSendInt 0020                digitalWrite@value 0003                     ??_outputInit 0005  
            __end_of_outputPrint 7D9C              serialSendInt@buffer 0020                     ?_digitalRead 0001  
                   ?_getLanguage 0001          __end_of_lcdCommand4bits 64FE       __end_of_getAlarmUpperLevel 610E  
     __end_of_setAlarmUpperLevel 5E00                   ??_digitalWrite 0005               __end_of_outputInit 5C4E  
             serialSendInt@value 001E                  digitalWrite@pin 0001                     ?_dsWriteData 000C  
            lcdCommand4bits@data 0001                      _updateLevel 5CCE               lcdCommand4bits@cmd 0002  
                    _pulseEnable 5C42  
