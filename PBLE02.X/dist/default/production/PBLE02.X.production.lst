

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Wed Jun 05 08:24:47 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	text42,global,reloc=2,class=CODE,delta=1
    54                           	psect	text43,global,reloc=2,class=CODE,delta=1
    55                           	psect	text44,global,reloc=2,class=CODE,delta=1
    56                           	psect	text45,global,reloc=2,class=CODE,delta=1
    57                           	psect	text46,global,reloc=2,class=CODE,delta=1
    58                           	psect	text47,global,reloc=2,class=CODE,delta=1
    59                           	psect	text48,global,reloc=2,class=CODE,delta=1
    60                           	psect	text49,global,reloc=2,class=CODE,delta=1
    61                           	psect	text50,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    63                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    64                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    65   000000                     
    66                           ; Generated 17/10/2023 GMT
    67                           ; 
    68                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    69                           ; All rights reserved.
    70                           ; 
    71                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    72                           ; 
    73                           ; Redistribution and use in source and binary forms, with or without modification, are
    74                           ; permitted provided that the following conditions are met:
    75                           ; 
    76                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    77                           ;        conditions and the following disclaimer.
    78                           ; 
    79                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    80                           ;        of conditions and the following disclaimer in the documentation and/or other
    81                           ;        materials provided with the distribution. Publication is not required when
    82                           ;        this file is used in an embedded application.
    83                           ; 
    84                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    85                           ;        software without specific prior written permission.
    86                           ; 
    87                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    88                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    89                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    90                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    91                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    92                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    93                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    94                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    95                           ; 
    96                           ; 
    97                           ; Code-generator required, PIC18F4550 Definitions
    98                           ; 
    99                           ; SFR Addresses
   100   000000                     
   101                           	psect	idataCOMRAM
   102   001DE4                     __pidataCOMRAM:
   103                           	callstack 0
   104                           
   105                           ;initializer for _msgs
   106   001DE4  63                 	db	low STR_1
   107   001DE5  33                 	db	low STR_2
   108   001DE6  43                 	db	low STR_3
   109   001DE7  23                 	db	low STR_4
   110   001DE8  53                 	db	low STR_5
   111   001DE9  73                 	db	low STR_6
   112                           
   113                           ;initializer for kpDebounce@teclaOld
   114   001DEA  01                 	db	1
   115   000000                     _PORTC	set	3970
   116   000000                     _SPBRG	set	4015
   117   000000                     _SPBRGH	set	4016
   118   000000                     _BAUDCON	set	4024
   119   000000                     _TXSTA	set	4012
   120   000000                     _RCREG	set	4014
   121   000000                     _PORTA	set	3968
   122   000000                     _PORTB	set	3969
   123   000000                     _PORTD	set	3971
   124   000000                     _TRISC	set	3988
   125   000000                     _PIR1	set	3998
   126   000000                     _RCSTA	set	4011
   127   000000                     _TXREG	set	4013
   128   000000                     _ADCON1	set	4033
   129   000000                     _TRISE	set	3990
   130   000000                     _TRISD	set	3989
   131   000000                     _TRISA	set	3986
   132   000000                     _PORTE	set	3972
   133   000000                     _TRISB	set	3987
   134                           
   135                           	psect	smallconst
   136   000800                     __psmallconst:
   137                           	callstack 0
   138   000800  00                 	db	0
   139   000801                     STR_9:
   140   000801  45                 	db	69	;'E'
   141   000802  6E                 	db	110	;'n'
   142   000803  67                 	db	103	;'g'
   143   000804  6C                 	db	108	;'l'
   144   000805  69                 	db	105	;'i'
   145   000806  73                 	db	115	;'s'
   146   000807  68                 	db	104	;'h'
   147   000808  20                 	db	32
   148   000809  20                 	db	32
   149   00080A  20                 	db	32
   150   00080B  20                 	db	32
   151   00080C  20                 	db	32
   152   00080D  20                 	db	32
   153   00080E  20                 	db	32
   154   00080F  20                 	db	32
   155   000810  20                 	db	32
   156   000811  00                 	db	0
   157   000812                     STR_8:
   158   000812  50                 	db	80	;'P'
   159   000813  6F                 	db	111	;'o'
   160   000814  72                 	db	114	;'r'
   161   000815  74                 	db	116	;'t'
   162   000816  75                 	db	117	;'u'
   163   000817  67                 	db	103	;'g'
   164   000818  75                 	db	117	;'u'
   165   000819  65                 	db	101	;'e'
   166   00081A  73                 	db	115	;'s'
   167   00081B  20                 	db	32
   168   00081C  20                 	db	32
   169   00081D  20                 	db	32
   170   00081E  20                 	db	32
   171   00081F  20                 	db	32
   172   000820  20                 	db	32
   173   000821  20                 	db	32
   174   000822  00                 	db	0
   175   000823                     STR_4:
   176   000823  43                 	db	67	;'C'
   177   000824  68                 	db	104	;'h'
   178   000825  61                 	db	97	;'a'
   179   000826  6E                 	db	110	;'n'
   180   000827  67                 	db	103	;'g'
   181   000828  65                 	db	101	;'e'
   182   000829  20                 	db	32
   183   00082A  74                 	db	116	;'t'
   184   00082B  69                 	db	105	;'i'
   185   00082C  6D                 	db	109	;'m'
   186   00082D  65                 	db	101	;'e'
   187   00082E  20                 	db	32
   188   00082F  20                 	db	32
   189   000830  20                 	db	32
   190   000831  20                 	db	32
   191   000832  00                 	db	0
   192   000833                     STR_2:
   193   000833  43                 	db	67	;'C'
   194   000834  68                 	db	104	;'h'
   195   000835  61                 	db	97	;'a'
   196   000836  6E                 	db	110	;'n'
   197   000837  67                 	db	103	;'g'
   198   000838  65                 	db	101	;'e'
   199   000839  20                 	db	32
   200   00083A  61                 	db	97	;'a'
   201   00083B  6C                 	db	108	;'l'
   202   00083C  61                 	db	97	;'a'
   203   00083D  72                 	db	114	;'r'
   204   00083E  6D                 	db	109	;'m'
   205   00083F  20                 	db	32
   206   000840  20                 	db	32
   207   000841  20                 	db	32
   208   000842  00                 	db	0
   209   000843                     STR_3:
   210   000843  41                 	db	65	;'A'
   211   000844  6C                 	db	108	;'l'
   212   000845  74                 	db	116	;'t'
   213   000846  65                 	db	101	;'e'
   214   000847  72                 	db	114	;'r'
   215   000848  61                 	db	97	;'a'
   216   000849  72                 	db	114	;'r'
   217   00084A  20                 	db	32
   218   00084B  74                 	db	116	;'t'
   219   00084C  65                 	db	101	;'e'
   220   00084D  6D                 	db	109	;'m'
   221   00084E  70                 	db	112	;'p'
   222   00084F  6F                 	db	111	;'o'
   223   000850  20                 	db	32
   224   000851  20                 	db	32
   225   000852  00                 	db	0
   226   000853                     STR_5:
   227   000853  41                 	db	65	;'A'
   228   000854  6C                 	db	108	;'l'
   229   000855  74                 	db	116	;'t'
   230   000856  65                 	db	101	;'e'
   231   000857  72                 	db	114	;'r'
   232   000858  61                 	db	97	;'a'
   233   000859  72                 	db	114	;'r'
   234   00085A  20                 	db	32
   235   00085B  69                 	db	105	;'i'
   236   00085C  64                 	db	100	;'d'
   237   00085D  69                 	db	105	;'i'
   238   00085E  6F                 	db	111	;'o'
   239   00085F  6D                 	db	109	;'m'
   240   000860  61                 	db	97	;'a'
   241   000861  20                 	db	32
   242   000862  00                 	db	0
   243   000863                     STR_1:
   244   000863  41                 	db	65	;'A'
   245   000864  6C                 	db	108	;'l'
   246   000865  74                 	db	116	;'t'
   247   000866  65                 	db	101	;'e'
   248   000867  72                 	db	114	;'r'
   249   000868  61                 	db	97	;'a'
   250   000869  72                 	db	114	;'r'
   251   00086A  20                 	db	32
   252   00086B  61                 	db	97	;'a'
   253   00086C  6C                 	db	108	;'l'
   254   00086D  61                 	db	97	;'a'
   255   00086E  72                 	db	114	;'r'
   256   00086F  6D                 	db	109	;'m'
   257   000870  65                 	db	101	;'e'
   258   000871  20                 	db	32
   259   000872  00                 	db	0
   260   000873                     STR_6:
   261   000873  43                 	db	67	;'C'
   262   000874  68                 	db	104	;'h'
   263   000875  61                 	db	97	;'a'
   264   000876  6E                 	db	110	;'n'
   265   000877  67                 	db	103	;'g'
   266   000878  65                 	db	101	;'e'
   267   000879  20                 	db	32
   268   00087A  6C                 	db	108	;'l'
   269   00087B  61                 	db	97	;'a'
   270   00087C  6E                 	db	110	;'n'
   271   00087D  67                 	db	103	;'g'
   272   00087E  75                 	db	117	;'u'
   273   00087F  61                 	db	97	;'a'
   274   000880  67                 	db	103	;'g'
   275   000881  65                 	db	101	;'e'
   276   000882  00                 	db	0
   277   000883                     STR_7:
   278   000883  20                 	db	32
   279   000884  20                 	db	32
   280   000885  20                 	db	32
   281   000886  20                 	db	32
   282   000887  20                 	db	32
   283   000888  20                 	db	32
   284   000889  20                 	db	32
   285   00088A  20                 	db	32
   286   00088B  20                 	db	32
   287   00088C  20                 	db	32
   288   00088D  20                 	db	32
   289   00088E  00                 	db	0
   290   00088F  00                 	db	0	; dummy byte at the end
   291   000000                     
   292                           ; #config settings
   293                           
   294                           	psect	cinit
   295   001B1A                     __pcinit:
   296                           	callstack 0
   297   001B1A                     start_initialization:
   298                           	callstack 0
   299   001B1A                     __initialization:
   300                           	callstack 0
   301                           
   302                           ; Initialize objects allocated to COMRAM (7 bytes)
   303                           ; load TBLPTR registers with __pidataCOMRAM
   304   001B1A  0EE4               	movlw	low __pidataCOMRAM
   305   001B1C  6EF6               	movwf	tblptrl,c
   306   001B1E  0E1D               	movlw	high __pidataCOMRAM
   307   001B20  6EF7               	movwf	tblptrh,c
   308   001B22  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   309   001B24  6EF8               	movwf	tblptru,c
   310   001B26  EE00  F04C         	lfsr	0,__pdataCOMRAM
   311   001B2A  EE10 F007          	lfsr	1,7
   312   001B2E                     copy_data0:
   313   001B2E  0009               	tblrd		*+
   314   001B30  CFF5 FFEE          	movff	tablat,postinc0
   315   001B34  50E5               	movf	postdec1,w,c
   316   001B36  50E1               	movf	fsr1l,w,c
   317   001B38  E1FA               	bnz	copy_data0
   318                           
   319                           ; Clear objects allocated to COMRAM (27 bytes)
   320   001B3A  EE00  F031         	lfsr	0,__pbssCOMRAM
   321   001B3E  0E1B               	movlw	27
   322   001B40                     clear_0:
   323   001B40  6AEE               	clrf	postinc0,c
   324   001B42  06E8               	decf	wreg,f,c
   325   001B44  E1FD               	bnz	clear_0
   326   001B46                     end_of_initialization:
   327                           	callstack 0
   328   001B46                     __end_of__initialization:
   329                           	callstack 0
   330   001B46  0E00               	movlw	low (__Lmediumconst shr (0+16))
   331   001B48  6EF8               	movwf	tblptru,c
   332   001B4A  0100               	movlb	0
   333   001B4C  EF5B  F00E         	goto	_main	;jump to C main() function
   334                           
   335                           	psect	bssCOMRAM
   336   000031                     __pbssCOMRAM:
   337                           	callstack 0
   338   000031                     eventRead@msg:
   339                           	callstack 0
   340   000031                     	ds	5
   341   000036                     	ds	2
   342   000038                     	ds	2
   343   00003A                     _key_ant:
   344                           	callstack 0
   345   00003A                     	ds	2
   346   00003C                     setAlarmLevel@b:
   347                           	callstack 0
   348   00003C                     	ds	1
   349   00003D                     setAlarmLevel@a:
   350                           	callstack 0
   351   00003D                     	ds	1
   352   00003E                     getAlarmLevel@b:
   353                           	callstack 0
   354   00003E                     	ds	1
   355   00003F                     getAlarmLevel@a:
   356                           	callstack 0
   357   00003F                     	ds	1
   358   000040                     setTime@b:
   359                           	callstack 0
   360   000040                     	ds	1
   361   000041                     setTime@a:
   362                           	callstack 0
   363   000041                     	ds	1
   364   000042                     getTime@b:
   365                           	callstack 0
   366   000042                     	ds	1
   367   000043                     getTime@a:
   368                           	callstack 0
   369   000043                     	ds	1
   370   000044                     _language:
   371                           	callstack 0
   372   000044                     	ds	1
   373   000045                     _state:
   374                           	callstack 0
   375   000045                     	ds	1
   376   000046                     eventRead@data:
   377                           	callstack 0
   378   000046                     	ds	1
   379   000047                     _reading_protocol:
   380                           	callstack 0
   381   000047                     	ds	1
   382   000048                     _started:
   383                           	callstack 0
   384   000048                     	ds	1
   385   000049                     kpDebounce@teclaNew:
   386                           	callstack 0
   387   000049                     	ds	1
   388   00004A                     kpDebounce@tempo:
   389                           	callstack 0
   390   00004A                     	ds	1
   391   00004B                     _tecla:
   392                           	callstack 0
   393   00004B                     	ds	1
   394                           
   395                           	psect	dataCOMRAM
   396   00004C                     __pdataCOMRAM:
   397                           	callstack 0
   398   00004C                     _msgs:
   399                           	callstack 0
   400   00004C                     	ds	6
   401   000052                     kpDebounce@teclaOld:
   402                           	callstack 0
   403   000052                     	ds	1
   404                           
   405                           	psect	cstackCOMRAM
   406   000001                     __pcstackCOMRAM:
   407                           	callstack 0
   408   000001                     ?_digitalRead:
   409                           	callstack 0
   410   000001                     ?___wmul:
   411                           	callstack 0
   412   000001                     ?___awdiv:
   413                           	callstack 0
   414   000001                     serialRead@resp:
   415                           	callstack 0
   416   000001                     Delay40us@j:
   417                           	callstack 0
   418   000001                     Delay2ms@j:
   419                           	callstack 0
   420   000001                     lcdCommand4bits@data:
   421                           	callstack 0
   422   000001                     setState@newState:
   423                           	callstack 0
   424   000001                     digitalWrite@pin:
   425                           	callstack 0
   426   000001                     digitalRead@pin:
   427                           	callstack 0
   428   000001                     pinMode@pin:
   429                           	callstack 0
   430   000001                     ___wmul@multiplier:
   431                           	callstack 0
   432   000001                     ___awdiv@dividend:
   433                           	callstack 0
   434                           
   435                           ; 2 bytes @ 0x0
   436   000001                     	ds	1
   437   000002                     Delay2ms@k:
   438                           	callstack 0
   439   000002                     lcdCommand4bits@cmd:
   440                           	callstack 0
   441                           
   442                           ; 1 bytes @ 0x1
   443   000002                     	ds	1
   444   000003                     ??_digitalRead:
   445   000003                     lcdCommand@cmd:
   446                           	callstack 0
   447   000003                     lcdData@valor:
   448                           	callstack 0
   449   000003                     digitalWrite@value:
   450                           	callstack 0
   451   000003                     pinMode@type:
   452                           	callstack 0
   453   000003                     ___wmul@multiplicand:
   454                           	callstack 0
   455   000003                     ___awdiv@divisor:
   456                           	callstack 0
   457                           
   458                           ; 2 bytes @ 0x2
   459   000003                     	ds	1
   460   000004                     lcdInit@i:
   461                           	callstack 0
   462   000004                     lcdString@msg:
   463                           	callstack 0
   464                           
   465                           ; 1 bytes @ 0x3
   466   000004                     	ds	1
   467   000005                     ??_pinMode:
   468   000005                     ??_digitalWrite:
   469   000005                     ??_lcdString:
   470   000005                     ___awdiv@counter:
   471                           	callstack 0
   472   000005                     ___wmul@product:
   473                           	callstack 0
   474                           
   475                           ; 2 bytes @ 0x4
   476   000005                     	ds	1
   477   000006                     ___awdiv@sign:
   478                           	callstack 0
   479   000006                     lcdString@i:
   480                           	callstack 0
   481                           
   482                           ; 2 bytes @ 0x5
   483   000006                     	ds	1
   484   000007                     i2c_write_bit@bit:
   485                           	callstack 0
   486   000007                     i2c_read_bit@bit:
   487                           	callstack 0
   488   000007                     ___awdiv@quotient:
   489                           	callstack 0
   490                           
   491                           ; 2 bytes @ 0x6
   492   000007                     	ds	1
   493   000008                     i2cWriteByte@send_stop:
   494                           	callstack 0
   495   000008                     i2cReadByte@send_stop:
   496                           	callstack 0
   497                           
   498                           ; 1 bytes @ 0x7
   499   000008                     	ds	1
   500   000009                     ??_i2cReadByte:
   501   000009                     ?___awmod:
   502                           	callstack 0
   503   000009                     i2cWriteByte@byte:
   504                           	callstack 0
   505   000009                     ___awmod@dividend:
   506                           	callstack 0
   507                           
   508                           ; 2 bytes @ 0x8
   509   000009                     	ds	1
   510   00000A                     i2cWriteByte@send_start:
   511                           	callstack 0
   512   00000A                     i2cReadByte@nack:
   513                           	callstack 0
   514                           
   515                           ; 1 bytes @ 0x9
   516   00000A                     	ds	1
   517   00000B                     i2cWriteByte@bit:
   518                           	callstack 0
   519   00000B                     i2cReadByte@bit:
   520                           	callstack 0
   521   00000B                     ___awmod@divisor:
   522                           	callstack 0
   523                           
   524                           ; 2 bytes @ 0xA
   525   00000B                     	ds	1
   526   00000C                     dsWriteData@address:
   527                           	callstack 0
   528                           
   529                           ; 2 bytes @ 0xB
   530   00000C                     	ds	1
   531   00000D                     i2cReadByte@byte:
   532                           	callstack 0
   533   00000D                     ___awmod@counter:
   534                           	callstack 0
   535                           
   536                           ; 1 bytes @ 0xC
   537   00000D                     	ds	1
   538   00000E                     ?_dsReadData:
   539                           	callstack 0
   540   00000E                     dsWriteData@value:
   541                           	callstack 0
   542   00000E                     ___awmod@sign:
   543                           	callstack 0
   544   00000E                     dsReadData@address:
   545                           	callstack 0
   546                           
   547                           ; 2 bytes @ 0xD
   548   00000E                     	ds	1
   549   00000F                     ?_dec2bcd:
   550                           	callstack 0
   551   00000F                     setLanguage@newLanguage:
   552                           	callstack 0
   553   00000F                     dec2bcd@value:
   554                           	callstack 0
   555                           
   556                           ; 2 bytes @ 0xE
   557   00000F                     	ds	1
   558   000010                     ??_dsReadData:
   559                           
   560                           ; 1 bytes @ 0xF
   561   000010                     	ds	1
   562   000011                     ??_dec2bcd:
   563   000011                     dsReadData@result:
   564                           	callstack 0
   565                           
   566                           ; 2 bytes @ 0x10
   567   000011                     	ds	2
   568   000013                     ?_getTime:
   569                           	callstack 0
   570                           
   571                           ; 2 bytes @ 0x12
   572   000013                     	ds	2
   573   000015                     ??_getTime:
   574                           
   575                           ; 1 bytes @ 0x14
   576   000015                     	ds	2
   577   000017                     lcdInt@val:
   578                           	callstack 0
   579   000017                     setTime@newTime:
   580                           	callstack 0
   581                           
   582                           ; 2 bytes @ 0x16
   583   000017                     	ds	2
   584   000019                     ?_getAlarmLevel:
   585                           	callstack 0
   586   000019                     outputPrint@numTela:
   587                           	callstack 0
   588                           
   589                           ; 2 bytes @ 0x18
   590   000019                     	ds	2
   591   00001B                     ??_getAlarmLevel:
   592   00001B                     outputPrint@idioma:
   593                           	callstack 0
   594                           
   595                           ; 2 bytes @ 0x1A
   596   00001B                     	ds	2
   597   00001D                     setAlarmLevel@newAlarmLevel:
   598                           	callstack 0
   599                           
   600                           ; 2 bytes @ 0x1C
   601   00001D                     	ds	2
   602   00001F                     ?_eventRead:
   603                           	callstack 0
   604                           
   605                           ; 2 bytes @ 0x1E
   606   00001F                     	ds	2
   607   000021                     ??_eventRead:
   608                           
   609                           ; 1 bytes @ 0x20
   610   000021                     	ds	8
   611   000029                     eventRead@ev:
   612                           	callstack 0
   613                           
   614                           ; 2 bytes @ 0x28
   615   000029                     	ds	2
   616   00002B                     eventRead@key:
   617                           	callstack 0
   618                           
   619                           ; 2 bytes @ 0x2A
   620   00002B                     	ds	2
   621   00002D                     ??_smLoop:
   622                           
   623                           ; 1 bytes @ 0x2C
   624   00002D                     	ds	1
   625   00002E                     _smLoop$1081:
   626                           	callstack 0
   627                           
   628                           ; 2 bytes @ 0x2D
   629   00002E                     	ds	2
   630   000030                     smLoop@evento:
   631                           	callstack 0
   632                           
   633                           ; 1 bytes @ 0x2F
   634   000030                     	ds	1
   635   000031                     
   636                           ; 1 bytes @ 0x30
   637 ;;
   638 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   639 ;;
   640 ;; *************** function _main *****************
   641 ;; Defined at:
   642 ;;		line 11 in file "main.c"
   643 ;; Parameters:    Size  Location     Type
   644 ;;		None
   645 ;; Auto vars:     Size  Location     Type
   646 ;;		None
   647 ;; Return value:  Size  Location     Type
   648 ;;                  1    wreg      void 
   649 ;; Registers used:
   650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   651 ;; Tracked objects:
   652 ;;		On entry : 0/0
   653 ;;		On exit  : 0/0
   654 ;;		Unchanged: 0/0
   655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   656 ;;      Params:         0       0       0       0       0       0       0       0       0
   657 ;;      Locals:         0       0       0       0       0       0       0       0       0
   658 ;;      Temps:          0       0       0       0       0       0       0       0       0
   659 ;;      Totals:         0       0       0       0       0       0       0       0       0
   660 ;;Total ram usage:        0 bytes
   661 ;; Hardware stack levels required when called: 8
   662 ;; This function calls:
   663 ;;		_eventInit
   664 ;;		_kpDebounce
   665 ;;		_kpInit
   666 ;;		_lcdInit
   667 ;;		_outputInit
   668 ;;		_serialInit
   669 ;;		_smLoop
   670 ;;		_varInit
   671 ;; This function is called by:
   672 ;;		Startup code after reset
   673 ;; This function uses a non-reentrant model
   674 ;;
   675                           
   676                           	psect	text0
   677   001CB6                     __ptext0:
   678                           	callstack 0
   679   001CB6                     _main:
   680                           	callstack 23
   681   001CB6                     
   682                           ;main.c: 14:     serialInit();
   683   001CB6  ECB5  F00E         	call	_serialInit	;wreg free
   684                           
   685                           ;main.c: 15:     kpInit();
   686   001CBA  ECE9  F00E         	call	_kpInit	;wreg free
   687                           
   688                           ;main.c: 16:     lcdInit();
   689   001CBE  EC37  F00B         	call	_lcdInit	;wreg free
   690                           
   691                           ;main.c: 17:     varInit();
   692   001CC2  EC95  F00E         	call	_varInit	;wreg free
   693                           
   694                           ;main.c: 18:     eventInit();
   695   001CC6  ECE2  F00E         	call	_eventInit	;wreg free
   696                           
   697                           ;main.c: 19:     outputInit();
   698   001CCA  ECF9  F00E         	call	_outputInit	;wreg free
   699   001CCE                     l21:
   700                           
   701                           ;main.c: 27:         kpDebounce();
   702   001CCE  ECE5  F00A         	call	_kpDebounce	;wreg free
   703   001CD2                     
   704                           ;main.c: 30:         smLoop();
   705   001CD2  ECC4  F007         	call	_smLoop	;wreg free
   706                           
   707                           ;main.c: 31:     }
   708   001CD6  EF67  F00E         	goto	l21
   709   001CDA  EF00  F000         	goto	start
   710   001CDE                     __end_of_main:
   711                           	callstack 0
   712                           
   713 ;; *************** function _varInit *****************
   714 ;; Defined at:
   715 ;;		line 18 in file "var.c"
   716 ;; Parameters:    Size  Location     Type
   717 ;;		None
   718 ;; Auto vars:     Size  Location     Type
   719 ;;		None
   720 ;; Return value:  Size  Location     Type
   721 ;;                  1    wreg      void 
   722 ;; Registers used:
   723 ;;		wreg, status,2, status,0, cstack
   724 ;; Tracked objects:
   725 ;;		On entry : 0/0
   726 ;;		On exit  : 0/0
   727 ;;		Unchanged: 0/0
   728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   729 ;;      Params:         0       0       0       0       0       0       0       0       0
   730 ;;      Locals:         0       0       0       0       0       0       0       0       0
   731 ;;      Temps:          0       0       0       0       0       0       0       0       0
   732 ;;      Totals:         0       0       0       0       0       0       0       0       0
   733 ;;Total ram usage:        0 bytes
   734 ;; Hardware stack levels used: 1
   735 ;; Hardware stack levels required when called: 6
   736 ;; This function calls:
   737 ;;		_dsInit
   738 ;;		_setAlarmLevel
   739 ;;		_setTime
   740 ;; This function is called by:
   741 ;;		_main
   742 ;; This function uses a non-reentrant model
   743 ;;
   744                           
   745                           	psect	text1
   746   001D2A                     __ptext1:
   747                           	callstack 0
   748   001D2A                     _varInit:
   749                           	callstack 24
   750   001D2A                     
   751                           ;var.c: 19:     dsInit();
   752   001D2A  ECF6  F00E         	call	_dsInit	;wreg free
   753   001D2E                     
   754                           ;var.c: 20:     state = 0;
   755   001D2E  0E00               	movlw	0
   756   001D30  6E45               	movwf	_state^0,c
   757   001D32                     
   758                           ;var.c: 21:     setTime(0);
   759   001D32  0E00               	movlw	0
   760   001D34  6E18               	movwf	(setTime@newTime+1)^0,c
   761   001D36  0E00               	movlw	0
   762   001D38  6E17               	movwf	setTime@newTime^0,c
   763   001D3A  ECAB  F00C         	call	_setTime	;wreg free
   764   001D3E                     
   765                           ;var.c: 22:     setAlarmLevel(0);
   766   001D3E  0E00               	movlw	0
   767   001D40  6E1E               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
   768   001D42  0E00               	movlw	0
   769   001D44  6E1D               	movwf	setAlarmLevel@newAlarmLevel^0,c
   770   001D46  EC6F  F00E         	call	_setAlarmLevel	;wreg free
   771   001D4A  0012               	return		;funcret
   772   001D4C                     __end_of_varInit:
   773                           	callstack 0
   774                           
   775 ;; *************** function _dsInit *****************
   776 ;; Defined at:
   777 ;;		line 17 in file "ds1307.c"
   778 ;; Parameters:    Size  Location     Type
   779 ;;		None
   780 ;; Auto vars:     Size  Location     Type
   781 ;;		None
   782 ;; Return value:  Size  Location     Type
   783 ;;                  1    wreg      void 
   784 ;; Registers used:
   785 ;;		wreg, status,2, status,0, cstack
   786 ;; Tracked objects:
   787 ;;		On entry : 0/0
   788 ;;		On exit  : 0/0
   789 ;;		Unchanged: 0/0
   790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   791 ;;      Params:         0       0       0       0       0       0       0       0       0
   792 ;;      Locals:         0       0       0       0       0       0       0       0       0
   793 ;;      Temps:          0       0       0       0       0       0       0       0       0
   794 ;;      Totals:         0       0       0       0       0       0       0       0       0
   795 ;;Total ram usage:        0 bytes
   796 ;; Hardware stack levels used: 1
   797 ;; Hardware stack levels required when called: 2
   798 ;; This function calls:
   799 ;;		_i2cInit
   800 ;; This function is called by:
   801 ;;		_varInit
   802 ;; This function uses a non-reentrant model
   803 ;;
   804                           
   805                           	psect	text2
   806   001DEC                     __ptext2:
   807                           	callstack 0
   808   001DEC                     _dsInit:
   809                           	callstack 27
   810   001DEC                     
   811                           ;ds1307.c: 18:  i2cInit();
   812   001DEC  EC1C  F00E         	call	_i2cInit	;wreg free
   813   001DF0  0012               	return		;funcret
   814   001DF2                     __end_of_dsInit:
   815                           	callstack 0
   816                           
   817 ;; *************** function _i2cInit *****************
   818 ;; Defined at:
   819 ;;		line 14 in file "i2c.c"
   820 ;; Parameters:    Size  Location     Type
   821 ;;		None
   822 ;; Auto vars:     Size  Location     Type
   823 ;;		None
   824 ;; Return value:  Size  Location     Type
   825 ;;                  1    wreg      void 
   826 ;; Registers used:
   827 ;;		wreg, status,2, status,0, cstack
   828 ;; Tracked objects:
   829 ;;		On entry : 0/0
   830 ;;		On exit  : 0/0
   831 ;;		Unchanged: 0/0
   832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   833 ;;      Params:         0       0       0       0       0       0       0       0       0
   834 ;;      Locals:         0       0       0       0       0       0       0       0       0
   835 ;;      Temps:          0       0       0       0       0       0       0       0       0
   836 ;;      Totals:         0       0       0       0       0       0       0       0       0
   837 ;;Total ram usage:        0 bytes
   838 ;; Hardware stack levels used: 1
   839 ;; Hardware stack levels required when called: 1
   840 ;; This function calls:
   841 ;;		_pinMode
   842 ;; This function is called by:
   843 ;;		_dsInit
   844 ;; This function uses a non-reentrant model
   845 ;;
   846                           
   847                           	psect	text3
   848   001C38                     __ptext3:
   849                           	callstack 0
   850   001C38                     _i2cInit:
   851                           	callstack 27
   852   001C38                     
   853                           ;i2c.c: 16:  pinMode(PIN_B0,1);
   854   001C38  0E00               	movlw	0
   855   001C3A  6E02               	movwf	(pinMode@pin+1)^0,c
   856   001C3C  0E08               	movlw	8
   857   001C3E  6E01               	movwf	pinMode@pin^0,c
   858   001C40  0E00               	movlw	0
   859   001C42  6E04               	movwf	(pinMode@type+1)^0,c
   860   001C44  0E01               	movlw	1
   861   001C46  6E03               	movwf	pinMode@type^0,c
   862   001C48  EC76  F005         	call	_pinMode	;wreg free
   863                           
   864                           ;i2c.c: 17:  pinMode(PIN_B1,1);
   865   001C4C  0E00               	movlw	0
   866   001C4E  6E02               	movwf	(pinMode@pin+1)^0,c
   867   001C50  0E09               	movlw	9
   868   001C52  6E01               	movwf	pinMode@pin^0,c
   869   001C54  0E00               	movlw	0
   870   001C56  6E04               	movwf	(pinMode@type+1)^0,c
   871   001C58  0E01               	movlw	1
   872   001C5A  6E03               	movwf	pinMode@type^0,c
   873   001C5C  EC76  F005         	call	_pinMode	;wreg free
   874   001C60  0012               	return		;funcret
   875   001C62                     __end_of_i2cInit:
   876                           	callstack 0
   877                           
   878 ;; *************** function _smLoop *****************
   879 ;; Defined at:
   880 ;;		line 12 in file "stateMachine.c"
   881 ;; Parameters:    Size  Location     Type
   882 ;;		None
   883 ;; Auto vars:     Size  Location     Type
   884 ;;  evento          1   47[COMRAM] unsigned char 
   885 ;; Return value:  Size  Location     Type
   886 ;;                  1    wreg      void 
   887 ;; Registers used:
   888 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   889 ;; Tracked objects:
   890 ;;		On entry : 0/0
   891 ;;		On exit  : 0/0
   892 ;;		Unchanged: 0/0
   893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   894 ;;      Params:         0       0       0       0       0       0       0       0       0
   895 ;;      Locals:         3       0       0       0       0       0       0       0       0
   896 ;;      Temps:          1       0       0       0       0       0       0       0       0
   897 ;;      Totals:         4       0       0       0       0       0       0       0       0
   898 ;;Total ram usage:        4 bytes
   899 ;; Hardware stack levels used: 1
   900 ;; Hardware stack levels required when called: 7
   901 ;; This function calls:
   902 ;;		_eventRead
   903 ;;		_getAlarmLevel
   904 ;;		_getLanguage
   905 ;;		_getState
   906 ;;		_getTime
   907 ;;		_outputPrint
   908 ;;		_setAlarmLevel
   909 ;;		_setLanguage
   910 ;;		_setState
   911 ;;		_setTime
   912 ;; This function is called by:
   913 ;;		_main
   914 ;; This function uses a non-reentrant model
   915 ;;
   916                           
   917                           	psect	text4
   918   000F88                     __ptext4:
   919                           	callstack 0
   920   000F88                     _smLoop:
   921                           	callstack 23
   922   000F88                     
   923                           ;stateMachine.c: 13:     unsigned char evento;;stateMachine.c: 16:     evento = eventRea
      +                          d();
   924   000F88  EC48  F004         	call	_eventRead	;wreg free
   925   000F8C  501F               	movf	?_eventRead^0,w,c
   926   000F8E  6E30               	movwf	smLoop@evento^0,c
   927                           
   928                           ;stateMachine.c: 18:     switch (getState()) {
   929   000F90  EF5E  F008         	goto	l2615
   930   000F94                     l2577:
   931                           
   932                           ;stateMachine.c: 21:             if (evento == EV_RIGHT) {
   933   000F94  0E03               	movlw	3
   934   000F96  1830               	xorwf	smLoop@evento^0,w,c
   935   000F98  A4D8               	btfss	status,2,c
   936   000F9A  EFD1  F007         	goto	u2471
   937   000F9E  EFD3  F007         	goto	u2470
   938   000FA2                     u2471:
   939   000FA2  EFDD  F007         	goto	l2581
   940   000FA6                     u2470:
   941   000FA6                     
   942                           ;stateMachine.c: 22:                 setAlarmLevel(getAlarmLevel() + 1);
   943   000FA6  EC35  F00C         	call	_getAlarmLevel	;wreg free
   944   000FAA  0E01               	movlw	1
   945   000FAC  2419               	addwf	?_getAlarmLevel^0,w,c
   946   000FAE  6E1D               	movwf	setAlarmLevel@newAlarmLevel^0,c
   947   000FB0  0E00               	movlw	0
   948   000FB2  201A               	addwfc	(?_getAlarmLevel+1)^0,w,c
   949   000FB4  6E1E               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
   950   000FB6  EC6F  F00E         	call	_setAlarmLevel	;wreg free
   951   000FBA                     l2581:
   952                           
   953                           ;stateMachine.c: 24:             if (evento == EV_LEFT) {
   954   000FBA  0E02               	movlw	2
   955   000FBC  1830               	xorwf	smLoop@evento^0,w,c
   956   000FBE  A4D8               	btfss	status,2,c
   957   000FC0  EFE4  F007         	goto	u2481
   958   000FC4  EFE6  F007         	goto	u2480
   959   000FC8                     u2481:
   960   000FC8  EFF0  F007         	goto	l2585
   961   000FCC                     u2480:
   962   000FCC                     
   963                           ;stateMachine.c: 25:                 setAlarmLevel(getAlarmLevel() - 1);
   964   000FCC  EC35  F00C         	call	_getAlarmLevel	;wreg free
   965   000FD0  0EFF               	movlw	255
   966   000FD2  2419               	addwf	?_getAlarmLevel^0,w,c
   967   000FD4  6E1D               	movwf	setAlarmLevel@newAlarmLevel^0,c
   968   000FD6  0EFF               	movlw	255
   969   000FD8  201A               	addwfc	(?_getAlarmLevel+1)^0,w,c
   970   000FDA  6E1E               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
   971   000FDC  EC6F  F00E         	call	_setAlarmLevel	;wreg free
   972   000FE0                     l2585:
   973                           
   974                           ;stateMachine.c: 29:             if (evento == EV_ENTER) {
   975   000FE0  0E04               	movlw	4
   976   000FE2  1830               	xorwf	smLoop@evento^0,w,c
   977   000FE4  A4D8               	btfss	status,2,c
   978   000FE6  EFF7  F007         	goto	u2491
   979   000FEA  EFF9  F007         	goto	u2490
   980   000FEE                     u2491:
   981   000FEE  EF6E  F008         	goto	l2617
   982   000FF2                     u2490:
   983   000FF2                     
   984                           ;stateMachine.c: 30:                 setState(STATE_TEMPO);
   985   000FF2  0E01               	movlw	1
   986   000FF4  ECEE  F00E         	call	_setState
   987   000FF8  EF6E  F008         	goto	l2617
   988   000FFC                     l2589:
   989                           
   990                           ;stateMachine.c: 36:             if (evento == EV_RIGHT) {
   991   000FFC  0E03               	movlw	3
   992   000FFE  1830               	xorwf	smLoop@evento^0,w,c
   993   001000  A4D8               	btfss	status,2,c
   994   001002  EF05  F008         	goto	u2501
   995   001006  EF07  F008         	goto	u2500
   996   00100A                     u2501:
   997   00100A  EF11  F008         	goto	l2593
   998   00100E                     u2500:
   999   00100E                     
  1000                           ;stateMachine.c: 37:                 setTime(getTime() + 1);
  1001   00100E  EC39  F00D         	call	_getTime	;wreg free
  1002   001012  0E01               	movlw	1
  1003   001014  2413               	addwf	?_getTime^0,w,c
  1004   001016  6E17               	movwf	setTime@newTime^0,c
  1005   001018  0E00               	movlw	0
  1006   00101A  2014               	addwfc	(?_getTime+1)^0,w,c
  1007   00101C  6E18               	movwf	(setTime@newTime+1)^0,c
  1008   00101E  ECAB  F00C         	call	_setTime	;wreg free
  1009   001022                     l2593:
  1010                           
  1011                           ;stateMachine.c: 39:             if (evento == EV_LEFT) {
  1012   001022  0E02               	movlw	2
  1013   001024  1830               	xorwf	smLoop@evento^0,w,c
  1014   001026  A4D8               	btfss	status,2,c
  1015   001028  EF18  F008         	goto	u2511
  1016   00102C  EF1A  F008         	goto	u2510
  1017   001030                     u2511:
  1018   001030  EF24  F008         	goto	l2597
  1019   001034                     u2510:
  1020   001034                     
  1021                           ;stateMachine.c: 40:                 setTime(getTime() - 1);
  1022   001034  EC39  F00D         	call	_getTime	;wreg free
  1023   001038  0EFF               	movlw	255
  1024   00103A  2413               	addwf	?_getTime^0,w,c
  1025   00103C  6E17               	movwf	setTime@newTime^0,c
  1026   00103E  0EFF               	movlw	255
  1027   001040  2014               	addwfc	(?_getTime+1)^0,w,c
  1028   001042  6E18               	movwf	(setTime@newTime+1)^0,c
  1029   001044  ECAB  F00C         	call	_setTime	;wreg free
  1030   001048                     l2597:
  1031                           
  1032                           ;stateMachine.c: 44:             if (evento == EV_ENTER) {
  1033   001048  0E04               	movlw	4
  1034   00104A  1830               	xorwf	smLoop@evento^0,w,c
  1035   00104C  A4D8               	btfss	status,2,c
  1036   00104E  EF2B  F008         	goto	u2521
  1037   001052  EF2D  F008         	goto	u2520
  1038   001056                     u2521:
  1039   001056  EF6E  F008         	goto	l2617
  1040   00105A                     u2520:
  1041   00105A                     
  1042                           ;stateMachine.c: 45:                 setState(STATE_IDIOMA);
  1043   00105A  0E02               	movlw	2
  1044   00105C  ECEE  F00E         	call	_setState
  1045   001060  EF6E  F008         	goto	l2617
  1046   001064                     l2601:
  1047                           
  1048                           ;stateMachine.c: 52:             if (evento == EV_RIGHT) {
  1049   001064  0E03               	movlw	3
  1050   001066  1830               	xorwf	smLoop@evento^0,w,c
  1051   001068  A4D8               	btfss	status,2,c
  1052   00106A  EF39  F008         	goto	u2531
  1053   00106E  EF3B  F008         	goto	u2530
  1054   001072                     u2531:
  1055   001072  EF41  F008         	goto	l2605
  1056   001076                     u2530:
  1057   001076                     
  1058                           ;stateMachine.c: 53:                 setLanguage(getLanguage() + 1);
  1059   001076  ECDA  F00E         	call	_getLanguage	;wreg free
  1060   00107A  6E2D               	movwf	??_smLoop^0,c
  1061   00107C  282D               	incf	??_smLoop^0,w,c
  1062   00107E  ECC2  F00E         	call	_setLanguage
  1063   001082                     l2605:
  1064                           
  1065                           ;stateMachine.c: 55:             if (evento == EV_LEFT) {
  1066   001082  0E02               	movlw	2
  1067   001084  1830               	xorwf	smLoop@evento^0,w,c
  1068   001086  A4D8               	btfss	status,2,c
  1069   001088  EF48  F008         	goto	u2541
  1070   00108C  EF4A  F008         	goto	u2540
  1071   001090                     u2541:
  1072   001090  EF50  F008         	goto	l2609
  1073   001094                     u2540:
  1074   001094                     
  1075                           ;stateMachine.c: 56:                 setLanguage(getLanguage() - 1);
  1076   001094  ECDA  F00E         	call	_getLanguage	;wreg free
  1077   001098  6E2D               	movwf	??_smLoop^0,c
  1078   00109A  042D               	decf	??_smLoop^0,w,c
  1079   00109C  ECC2  F00E         	call	_setLanguage
  1080   0010A0                     l2609:
  1081                           
  1082                           ;stateMachine.c: 60:             if (evento == EV_ENTER) {
  1083   0010A0  0E04               	movlw	4
  1084   0010A2  1830               	xorwf	smLoop@evento^0,w,c
  1085   0010A4  A4D8               	btfss	status,2,c
  1086   0010A6  EF57  F008         	goto	u2551
  1087   0010AA  EF59  F008         	goto	u2550
  1088   0010AE                     u2551:
  1089   0010AE  EF6E  F008         	goto	l2617
  1090   0010B2                     u2550:
  1091   0010B2                     
  1092                           ;stateMachine.c: 61:                 setState(STATE_ALARME);
  1093   0010B2  0E00               	movlw	0
  1094   0010B4  ECEE  F00E         	call	_setState
  1095   0010B8  EF6E  F008         	goto	l2617
  1096   0010BC                     l2615:
  1097   0010BC  ECFF  F00E         	call	_getState	;wreg free
  1098                           
  1099                           ; Switch size 1, requested type "simple"
  1100                           ; Number of cases is 3, Range of values is 0 to 2
  1101                           ; switch strategies available:
  1102                           ; Name         Instructions Cycles
  1103                           ; simple_byte           10     6 (average)
  1104                           ;	Chosen strategy is simple_byte
  1105   0010C0  0A00               	xorlw	0	; case 0
  1106   0010C2  B4D8               	btfsc	status,2,c
  1107   0010C4  EFCA  F007         	goto	l2577
  1108   0010C8  0A01               	xorlw	1	; case 1
  1109   0010CA  B4D8               	btfsc	status,2,c
  1110   0010CC  EFFE  F007         	goto	l2589
  1111   0010D0  0A03               	xorlw	3	; case 2
  1112   0010D2  B4D8               	btfsc	status,2,c
  1113   0010D4  EF32  F008         	goto	l2601
  1114   0010D8  EF6E  F008         	goto	l2617
  1115   0010DC                     l2617:
  1116                           
  1117                           ;stateMachine.c: 66:     outputPrint(getState(), getLanguage());
  1118   0010DC  ECDA  F00E         	call	_getLanguage	;wreg free
  1119   0010E0  6E2D               	movwf	??_smLoop^0,c
  1120   0010E2  502D               	movf	??_smLoop^0,w,c
  1121   0010E4  6E2E               	movwf	_smLoop$1081^0,c
  1122   0010E6  6A2F               	clrf	(_smLoop$1081+1)^0,c
  1123   0010E8                     
  1124                           ;stateMachine.c: 66:     outputPrint(getState(), getLanguage());
  1125   0010E8  ECFF  F00E         	call	_getState	;wreg free
  1126   0010EC  6E2D               	movwf	??_smLoop^0,c
  1127   0010EE  502D               	movf	??_smLoop^0,w,c
  1128   0010F0  6E19               	movwf	outputPrint@numTela^0,c
  1129   0010F2  6A1A               	clrf	(outputPrint@numTela+1)^0,c
  1130   0010F4  C02E  F01B         	movff	_smLoop$1081,outputPrint@idioma
  1131   0010F8  C02F  F01C         	movff	_smLoop$1081+1,outputPrint@idioma+1
  1132   0010FC  ECB3  F009         	call	_outputPrint	;wreg free
  1133   001100  0012               	return		;funcret
  1134   001102                     __end_of_smLoop:
  1135                           	callstack 0
  1136                           
  1137 ;; *************** function _setState *****************
  1138 ;; Defined at:
  1139 ;;		line 29 in file "var.c"
  1140 ;; Parameters:    Size  Location     Type
  1141 ;;  newState        1    wreg     unsigned char 
  1142 ;; Auto vars:     Size  Location     Type
  1143 ;;  newState        1    0[COMRAM] unsigned char 
  1144 ;; Return value:  Size  Location     Type
  1145 ;;                  1    wreg      void 
  1146 ;; Registers used:
  1147 ;;		wreg
  1148 ;; Tracked objects:
  1149 ;;		On entry : 0/0
  1150 ;;		On exit  : 0/0
  1151 ;;		Unchanged: 0/0
  1152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1153 ;;      Params:         0       0       0       0       0       0       0       0       0
  1154 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1155 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1156 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1157 ;;Total ram usage:        1 bytes
  1158 ;; Hardware stack levels used: 1
  1159 ;; This function calls:
  1160 ;;		Nothing
  1161 ;; This function is called by:
  1162 ;;		_smLoop
  1163 ;;		_smInit
  1164 ;; This function uses a non-reentrant model
  1165 ;;
  1166                           
  1167                           	psect	text5
  1168   001DDC                     __ptext5:
  1169                           	callstack 0
  1170   001DDC                     _setState:
  1171                           	callstack 29
  1172                           
  1173                           ;incstack = 0
  1174                           ;setState@newState stored from wreg
  1175   001DDC  6E01               	movwf	setState@newState^0,c
  1176   001DDE                     
  1177                           ;var.c: 30:     state = newState;
  1178   001DDE  C001  F045         	movff	setState@newState,_state
  1179   001DE2  0012               	return		;funcret
  1180   001DE4                     __end_of_setState:
  1181                           	callstack 0
  1182                           
  1183 ;; *************** function _outputPrint *****************
  1184 ;; Defined at:
  1185 ;;		line 20 in file "output.c"
  1186 ;; Parameters:    Size  Location     Type
  1187 ;;  numTela         2   24[COMRAM] int 
  1188 ;;  idioma          2   26[COMRAM] int 
  1189 ;; Auto vars:     Size  Location     Type
  1190 ;;		None
  1191 ;; Return value:  Size  Location     Type
  1192 ;;                  1    wreg      void 
  1193 ;; Registers used:
  1194 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1195 ;; Tracked objects:
  1196 ;;		On entry : 0/0
  1197 ;;		On exit  : 0/0
  1198 ;;		Unchanged: 0/0
  1199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1200 ;;      Params:         4       0       0       0       0       0       0       0       0
  1201 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1202 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1203 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1204 ;;Total ram usage:        4 bytes
  1205 ;; Hardware stack levels used: 1
  1206 ;; Hardware stack levels required when called: 6
  1207 ;; This function calls:
  1208 ;;		_getLanguage
  1209 ;;		_getTime
  1210 ;;		_lcdCommand
  1211 ;;		_lcdInt
  1212 ;;		_lcdString
  1213 ;; This function is called by:
  1214 ;;		_smLoop
  1215 ;; This function uses a non-reentrant model
  1216 ;;
  1217                           
  1218                           	psect	text6
  1219   001366                     __ptext6:
  1220                           	callstack 0
  1221   001366                     _outputPrint:
  1222                           	callstack 23
  1223   001366                     
  1224                           ;output.c: 22:     if (numTela == STATE_TEMPO) {
  1225   001366  0419               	decf	outputPrint@numTela^0,w,c
  1226   001368  101A               	iorwf	(outputPrint@numTela+1)^0,w,c
  1227   00136A  A4D8               	btfss	status,2,c
  1228   00136C  EFBA  F009         	goto	u2421
  1229   001370  EFBC  F009         	goto	u2420
  1230   001374                     u2421:
  1231   001374  EFD9  F009         	goto	l2541
  1232   001378                     u2420:
  1233   001378                     
  1234                           ;output.c: 23:         lcdCommand(0x80);
  1235   001378  0E80               	movlw	128
  1236   00137A  ECCF  F00C         	call	_lcdCommand
  1237   00137E                     
  1238                           ;output.c: 24:         lcdString(msgs[numTela][idioma]);
  1239   00137E  5019               	movf	outputPrint@numTela^0,w,c
  1240   001380  0D02               	mullw	2
  1241   001382  50F3               	movf	243,w,c
  1242   001384  0F4C               	addlw	low _msgs
  1243   001386  241B               	addwf	outputPrint@idioma^0,w,c
  1244   001388  6ED9               	movwf	fsr2l,c
  1245   00138A  6ADA               	clrf	fsr2h,c
  1246   00138C  50DF               	movf	indf2,w,c
  1247   00138E  6E04               	movwf	lcdString@msg^0,c
  1248   001390  EC86  F00C         	call	_lcdString	;wreg free
  1249   001394                     
  1250                           ;output.c: 25:         lcdCommand(0xC0);
  1251   001394  0EC0               	movlw	192
  1252   001396  ECCF  F00C         	call	_lcdCommand
  1253   00139A                     
  1254                           ;output.c: 26:         lcdInt(getTime());
  1255   00139A  EC39  F00D         	call	_getTime	;wreg free
  1256   00139E  C013  F017         	movff	?_getTime,lcdInt@val
  1257   0013A2  C014  F018         	movff	?_getTime+1,lcdInt@val+1
  1258   0013A6  EC36  F009         	call	_lcdInt	;wreg free
  1259   0013AA                     
  1260                           ;output.c: 27:         lcdString("           ");
  1261   0013AA  0E83               	movlw	low STR_7
  1262   0013AC  6E04               	movwf	lcdString@msg^0,c
  1263   0013AE  EC86  F00C         	call	_lcdString	;wreg free
  1264   0013B2                     l2541:
  1265                           
  1266                           ;output.c: 29:     if (numTela == STATE_ALARME) {
  1267   0013B2  5019               	movf	outputPrint@numTela^0,w,c
  1268   0013B4  101A               	iorwf	(outputPrint@numTela+1)^0,w,c
  1269   0013B6  A4D8               	btfss	status,2,c
  1270   0013B8  EFE0  F009         	goto	u2431
  1271   0013BC  EFE2  F009         	goto	u2430
  1272   0013C0                     u2431:
  1273   0013C0  EFF3  F009         	goto	l2549
  1274   0013C4                     u2430:
  1275   0013C4                     
  1276                           ;output.c: 30:         lcdCommand(0x80);
  1277   0013C4  0E80               	movlw	128
  1278   0013C6  ECCF  F00C         	call	_lcdCommand
  1279   0013CA                     
  1280                           ;output.c: 31:         lcdString(msgs[numTela][idioma]);
  1281   0013CA  5019               	movf	outputPrint@numTela^0,w,c
  1282   0013CC  0D02               	mullw	2
  1283   0013CE  50F3               	movf	243,w,c
  1284   0013D0  0F4C               	addlw	low _msgs
  1285   0013D2  241B               	addwf	outputPrint@idioma^0,w,c
  1286   0013D4  6ED9               	movwf	fsr2l,c
  1287   0013D6  6ADA               	clrf	fsr2h,c
  1288   0013D8  50DF               	movf	indf2,w,c
  1289   0013DA  6E04               	movwf	lcdString@msg^0,c
  1290   0013DC  EC86  F00C         	call	_lcdString	;wreg free
  1291   0013E0                     
  1292                           ;output.c: 32:         lcdCommand(0xC0);
  1293   0013E0  0EC0               	movlw	192
  1294   0013E2  ECCF  F00C         	call	_lcdCommand
  1295   0013E6                     l2549:
  1296                           
  1297                           ;output.c: 36:     if (numTela == STATE_IDIOMA) {
  1298   0013E6  0E02               	movlw	2
  1299   0013E8  1819               	xorwf	outputPrint@numTela^0,w,c
  1300   0013EA  101A               	iorwf	(outputPrint@numTela+1)^0,w,c
  1301   0013EC  A4D8               	btfss	status,2,c
  1302   0013EE  EFFB  F009         	goto	u2441
  1303   0013F2  EFFD  F009         	goto	u2440
  1304   0013F6                     u2441:
  1305   0013F6  EF2A  F00A         	goto	l440
  1306   0013FA                     u2440:
  1307   0013FA                     
  1308                           ;output.c: 37:         lcdCommand(0x80);
  1309   0013FA  0E80               	movlw	128
  1310   0013FC  ECCF  F00C         	call	_lcdCommand
  1311   001400                     
  1312                           ;output.c: 38:         lcdString(msgs[numTela][idioma]);
  1313   001400  5019               	movf	outputPrint@numTela^0,w,c
  1314   001402  0D02               	mullw	2
  1315   001404  50F3               	movf	243,w,c
  1316   001406  0F4C               	addlw	low _msgs
  1317   001408  241B               	addwf	outputPrint@idioma^0,w,c
  1318   00140A  6ED9               	movwf	fsr2l,c
  1319   00140C  6ADA               	clrf	fsr2h,c
  1320   00140E  50DF               	movf	indf2,w,c
  1321   001410  6E04               	movwf	lcdString@msg^0,c
  1322   001412  EC86  F00C         	call	_lcdString	;wreg free
  1323   001416                     
  1324                           ;output.c: 39:         lcdCommand(0xC0);
  1325   001416  0EC0               	movlw	192
  1326   001418  ECCF  F00C         	call	_lcdCommand
  1327   00141C                     
  1328                           ;output.c: 40:         if (getLanguage() == 0) {
  1329   00141C  ECDA  F00E         	call	_getLanguage	;wreg free
  1330   001420  0900               	iorlw	0
  1331   001422  A4D8               	btfss	status,2,c
  1332   001424  EF16  F00A         	goto	u2451
  1333   001428  EF18  F00A         	goto	u2450
  1334   00142C                     u2451:
  1335   00142C  EF1C  F00A         	goto	l2561
  1336   001430                     u2450:
  1337   001430                     
  1338                           ;output.c: 41:             lcdString("Portugues       ");
  1339   001430  0E12               	movlw	low STR_8
  1340   001432  6E04               	movwf	lcdString@msg^0,c
  1341   001434  EC86  F00C         	call	_lcdString	;wreg free
  1342   001438                     l2561:
  1343                           
  1344                           ;output.c: 43:         if (getLanguage() == 1) {
  1345   001438  ECDA  F00E         	call	_getLanguage	;wreg free
  1346   00143C  06E8               	decf	wreg,f,c
  1347   00143E  A4D8               	btfss	status,2,c
  1348   001440  EF24  F00A         	goto	u2461
  1349   001444  EF26  F00A         	goto	u2460
  1350   001448                     u2461:
  1351   001448  EF2A  F00A         	goto	l440
  1352   00144C                     u2460:
  1353   00144C                     
  1354                           ;output.c: 44:             lcdString("English         ");
  1355   00144C  0E01               	movlw	low STR_9
  1356   00144E  6E04               	movwf	lcdString@msg^0,c
  1357   001450  EC86  F00C         	call	_lcdString	;wreg free
  1358   001454                     l440:
  1359   001454  0012               	return		;funcret
  1360   001456                     __end_of_outputPrint:
  1361                           	callstack 0
  1362                           
  1363 ;; *************** function _lcdString *****************
  1364 ;; Defined at:
  1365 ;;		line 151 in file "lcd.c"
  1366 ;; Parameters:    Size  Location     Type
  1367 ;;  msg             1    3[COMRAM] PTR unsigned char 
  1368 ;;		 -> STR_9(17), STR_8(17), STR_7(12), STR_6(16), 
  1369 ;;		 -> STR_5(16), STR_4(16), STR_3(16), STR_2(16), 
  1370 ;;		 -> STR_1(16), 
  1371 ;; Auto vars:     Size  Location     Type
  1372 ;;  i               2    5[COMRAM] int 
  1373 ;; Return value:  Size  Location     Type
  1374 ;;                  1    wreg      void 
  1375 ;; Registers used:
  1376 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1377 ;; Tracked objects:
  1378 ;;		On entry : 0/0
  1379 ;;		On exit  : 0/0
  1380 ;;		Unchanged: 0/0
  1381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1382 ;;      Params:         1       0       0       0       0       0       0       0       0
  1383 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1384 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1385 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1386 ;;Total ram usage:        4 bytes
  1387 ;; Hardware stack levels used: 1
  1388 ;; Hardware stack levels required when called: 3
  1389 ;; This function calls:
  1390 ;;		_lcdData
  1391 ;; This function is called by:
  1392 ;;		_outputPrint
  1393 ;; This function uses a non-reentrant model
  1394 ;;
  1395                           
  1396                           	psect	text7
  1397   00190C                     __ptext7:
  1398                           	callstack 0
  1399   00190C                     _lcdString:
  1400                           	callstack 25
  1401   00190C                     
  1402                           ;lcd.c: 151: void lcdString(char msg[]);lcd.c: 152: {;lcd.c: 153:     int i=0;
  1403   00190C  0E00               	movlw	0
  1404   00190E  6E07               	movwf	(lcdString@i+1)^0,c
  1405   001910  0E00               	movlw	0
  1406   001912  6E06               	movwf	lcdString@i^0,c
  1407                           
  1408                           ;lcd.c: 154:     while(msg[i] != 0)
  1409   001914  EF99  F00C         	goto	l2379
  1410   001918                     l2375:
  1411                           
  1412                           ;lcd.c: 155:     {;lcd.c: 156:         lcdData(msg[i]);
  1413   001918  5004               	movf	lcdString@msg^0,w,c
  1414   00191A  2406               	addwf	lcdString@i^0,w,c
  1415   00191C  6E05               	movwf	??_lcdString^0,c
  1416   00191E  C005  FFF6         	movff	??_lcdString,tblptrl
  1417   001922                     	if	1	;There is more than 1 active tblptr byte
  1418   001922  0E08               	movlw	high __smallconst
  1419   001924  6EF7               	movwf	tblptrh,c
  1420   001926                     	endif
  1421   001926                     	if	0	;tblptru may be non-zero
  1422   001926                     	endif
  1423   001926                     	if	0	;tblptru may be non-zero
  1424   001926                     	endif
  1425   001926  0008               	tblrd		*
  1426   001928  50F5               	movf	tablat,w,c
  1427   00192A  ECA6  F00E         	call	_lcdData
  1428   00192E                     
  1429                           ;lcd.c: 157:         i++;
  1430   00192E  4A06               	infsnz	lcdString@i^0,f,c
  1431   001930  2A07               	incf	(lcdString@i+1)^0,f,c
  1432   001932                     l2379:
  1433                           
  1434                           ;lcd.c: 154:     while(msg[i] != 0)
  1435   001932  5004               	movf	lcdString@msg^0,w,c
  1436   001934  2406               	addwf	lcdString@i^0,w,c
  1437   001936  6E05               	movwf	??_lcdString^0,c
  1438   001938  C005  FFF6         	movff	??_lcdString,tblptrl
  1439   00193C                     	if	1	;There is more than 1 active tblptr byte
  1440   00193C  0E08               	movlw	high __smallconst
  1441   00193E  6EF7               	movwf	tblptrh,c
  1442   001940                     	endif
  1443   001940                     	if	0	;tblptru may be non-zero
  1444   001940                     	endif
  1445   001940                     	if	0	;tblptru may be non-zero
  1446   001940                     	endif
  1447   001940  0008               	tblrd		*
  1448   001942  50F5               	movf	tablat,w,c
  1449   001944  0900               	iorlw	0
  1450   001946  A4D8               	btfss	status,2,c
  1451   001948  EFA8  F00C         	goto	u2251
  1452   00194C  EFAA  F00C         	goto	u2250
  1453   001950                     u2251:
  1454   001950  EF8C  F00C         	goto	l2375
  1455   001954                     u2250:
  1456   001954  0012               	return		;funcret
  1457   001956                     __end_of_lcdString:
  1458                           	callstack 0
  1459                           
  1460 ;; *************** function _getTime *****************
  1461 ;; Defined at:
  1462 ;;		line 33 in file "var.c"
  1463 ;; Parameters:    Size  Location     Type
  1464 ;;		None
  1465 ;; Auto vars:     Size  Location     Type
  1466 ;;		None
  1467 ;; Return value:  Size  Location     Type
  1468 ;;                  2   18[COMRAM] int 
  1469 ;; Registers used:
  1470 ;;		wreg, status,2, status,0, cstack
  1471 ;; Tracked objects:
  1472 ;;		On entry : 0/0
  1473 ;;		On exit  : 0/0
  1474 ;;		Unchanged: 0/0
  1475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1476 ;;      Params:         2       0       0       0       0       0       0       0       0
  1477 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1478 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1479 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1480 ;;Total ram usage:        4 bytes
  1481 ;; Hardware stack levels used: 1
  1482 ;; Hardware stack levels required when called: 5
  1483 ;; This function calls:
  1484 ;;		_dsReadData
  1485 ;; This function is called by:
  1486 ;;		_smLoop
  1487 ;;		_outputPrint
  1488 ;; This function uses a non-reentrant model
  1489 ;;
  1490                           
  1491                           	psect	text8
  1492   001A72                     __ptext8:
  1493                           	callstack 0
  1494   001A72                     _getTime:
  1495                           	callstack 23
  1496   001A72                     
  1497                           ;var.c: 34:     unsigned static char a, b;;var.c: 35:     a = dsReadData(0x00);
  1498   001A72  0E00               	movlw	0
  1499   001A74  6E0F               	movwf	(dsReadData@address+1)^0,c
  1500   001A76  0E00               	movlw	0
  1501   001A78  6E0E               	movwf	dsReadData@address^0,c
  1502   001A7A  ECF3  F00C         	call	_dsReadData	;wreg free
  1503   001A7E  500E               	movf	?_dsReadData^0,w,c
  1504   001A80  6E43               	movwf	getTime@a^0,c
  1505                           
  1506                           ;var.c: 36:     b = dsReadData(0x01);
  1507   001A82  0E00               	movlw	0
  1508   001A84  6E0F               	movwf	(dsReadData@address+1)^0,c
  1509   001A86  0E01               	movlw	1
  1510   001A88  6E0E               	movwf	dsReadData@address^0,c
  1511   001A8A  ECF3  F00C         	call	_dsReadData	;wreg free
  1512   001A8E  500E               	movf	?_dsReadData^0,w,c
  1513   001A90  6E42               	movwf	getTime@b^0,c
  1514   001A92                     
  1515                           ;var.c: 37:     return (a<<8) | b;
  1516   001A92  5042               	movf	getTime@b^0,w,c
  1517   001A94  C043  F015         	movff	getTime@a,??_getTime
  1518   001A98  6A16               	clrf	(??_getTime+1)^0,c
  1519   001A9A  C015  F016         	movff	??_getTime,??_getTime+1
  1520   001A9E  6A15               	clrf	??_getTime^0,c
  1521   001AA0  1015               	iorwf	??_getTime^0,w,c
  1522   001AA2  6E13               	movwf	?_getTime^0,c
  1523   001AA4  5016               	movf	(??_getTime+1)^0,w,c
  1524   001AA6  6E14               	movwf	(?_getTime+1)^0,c
  1525   001AA8  0012               	return		;funcret
  1526   001AAA                     __end_of_getTime:
  1527                           	callstack 0
  1528                           
  1529 ;; *************** function _getLanguage *****************
  1530 ;; Defined at:
  1531 ;;		line 68 in file "var.c"
  1532 ;; Parameters:    Size  Location     Type
  1533 ;;		None
  1534 ;; Auto vars:     Size  Location     Type
  1535 ;;		None
  1536 ;; Return value:  Size  Location     Type
  1537 ;;                  1    wreg      unsigned char 
  1538 ;; Registers used:
  1539 ;;		wreg, status,2, status,0, cstack
  1540 ;; Tracked objects:
  1541 ;;		On entry : 0/0
  1542 ;;		On exit  : 0/0
  1543 ;;		Unchanged: 0/0
  1544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1545 ;;      Params:         0       0       0       0       0       0       0       0       0
  1546 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1547 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1548 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1549 ;;Total ram usage:        0 bytes
  1550 ;; Hardware stack levels used: 1
  1551 ;; Hardware stack levels required when called: 5
  1552 ;; This function calls:
  1553 ;;		_dsReadData
  1554 ;; This function is called by:
  1555 ;;		_smLoop
  1556 ;;		_outputPrint
  1557 ;; This function uses a non-reentrant model
  1558 ;;
  1559                           
  1560                           	psect	text9
  1561   001DB4                     __ptext9:
  1562                           	callstack 0
  1563   001DB4                     _getLanguage:
  1564                           	callstack 23
  1565   001DB4                     
  1566                           ;var.c: 69:     return dsReadData(0x06);
  1567   001DB4  0E00               	movlw	0
  1568   001DB6  6E0F               	movwf	(dsReadData@address+1)^0,c
  1569   001DB8  0E06               	movlw	6
  1570   001DBA  6E0E               	movwf	dsReadData@address^0,c
  1571   001DBC  ECF3  F00C         	call	_dsReadData	;wreg free
  1572   001DC0  500E               	movf	?_dsReadData^0,w,c
  1573   001DC2  0012               	return		;funcret
  1574   001DC4                     __end_of_getLanguage:
  1575                           	callstack 0
  1576                           
  1577 ;; *************** function _getState *****************
  1578 ;; Defined at:
  1579 ;;		line 26 in file "var.c"
  1580 ;; Parameters:    Size  Location     Type
  1581 ;;		None
  1582 ;; Auto vars:     Size  Location     Type
  1583 ;;		None
  1584 ;; Return value:  Size  Location     Type
  1585 ;;                  1    wreg      unsigned char 
  1586 ;; Registers used:
  1587 ;;		wreg, status,2
  1588 ;; Tracked objects:
  1589 ;;		On entry : 0/0
  1590 ;;		On exit  : 0/0
  1591 ;;		Unchanged: 0/0
  1592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1593 ;;      Params:         0       0       0       0       0       0       0       0       0
  1594 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1595 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1596 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1597 ;;Total ram usage:        0 bytes
  1598 ;; Hardware stack levels used: 1
  1599 ;; This function calls:
  1600 ;;		Nothing
  1601 ;; This function is called by:
  1602 ;;		_smLoop
  1603 ;; This function uses a non-reentrant model
  1604 ;;
  1605                           
  1606                           	psect	text10
  1607   001DFE                     __ptext10:
  1608                           	callstack 0
  1609   001DFE                     _getState:
  1610                           	callstack 29
  1611   001DFE                     
  1612                           ;var.c: 27:     return state;
  1613   001DFE  5045               	movf	_state^0,w,c
  1614   001E00  0012               	return		;funcret
  1615   001E02                     __end_of_getState:
  1616                           	callstack 0
  1617                           
  1618 ;; *************** function _getAlarmLevel *****************
  1619 ;; Defined at:
  1620 ;;		line 49 in file "var.c"
  1621 ;; Parameters:    Size  Location     Type
  1622 ;;		None
  1623 ;; Auto vars:     Size  Location     Type
  1624 ;;		None
  1625 ;; Return value:  Size  Location     Type
  1626 ;;                  2   24[COMRAM] int 
  1627 ;; Registers used:
  1628 ;;		wreg, status,2, status,0, cstack
  1629 ;; Tracked objects:
  1630 ;;		On entry : 0/0
  1631 ;;		On exit  : 0/0
  1632 ;;		Unchanged: 0/0
  1633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1634 ;;      Params:         2       0       0       0       0       0       0       0       0
  1635 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1636 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1637 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1638 ;;Total ram usage:        4 bytes
  1639 ;; Hardware stack levels used: 1
  1640 ;; Hardware stack levels required when called: 5
  1641 ;; This function calls:
  1642 ;;		_dsReadData
  1643 ;;		_lcdCommand
  1644 ;;		_lcdInt
  1645 ;; This function is called by:
  1646 ;;		_smLoop
  1647 ;; This function uses a non-reentrant model
  1648 ;;
  1649                           
  1650                           	psect	text11
  1651   00186A                     __ptext11:
  1652                           	callstack 0
  1653   00186A                     _getAlarmLevel:
  1654                           	callstack 24
  1655   00186A                     
  1656                           ;var.c: 50:     unsigned static char a, b;;var.c: 51:     a = dsReadData(0x04);
  1657   00186A  0E00               	movlw	0
  1658   00186C  6E0F               	movwf	(dsReadData@address+1)^0,c
  1659   00186E  0E04               	movlw	4
  1660   001870  6E0E               	movwf	dsReadData@address^0,c
  1661   001872  ECF3  F00C         	call	_dsReadData	;wreg free
  1662   001876  500E               	movf	?_dsReadData^0,w,c
  1663   001878  6E3F               	movwf	getAlarmLevel@a^0,c
  1664                           
  1665                           ;var.c: 52:     b = dsReadData(0x05);
  1666   00187A  0E00               	movlw	0
  1667   00187C  6E0F               	movwf	(dsReadData@address+1)^0,c
  1668   00187E  0E05               	movlw	5
  1669   001880  6E0E               	movwf	dsReadData@address^0,c
  1670   001882  ECF3  F00C         	call	_dsReadData	;wreg free
  1671   001886  500E               	movf	?_dsReadData^0,w,c
  1672   001888  6E3E               	movwf	getAlarmLevel@b^0,c
  1673                           
  1674                           ;var.c: 53:     lcdCommand(0xC0);
  1675   00188A  0EC0               	movlw	192
  1676   00188C  ECCF  F00C         	call	_lcdCommand
  1677                           
  1678                           ;var.c: 54:     lcdInt(a);
  1679   001890  C03F  F017         	movff	getAlarmLevel@a,lcdInt@val
  1680   001894  6A18               	clrf	(lcdInt@val+1)^0,c
  1681   001896  EC36  F009         	call	_lcdInt	;wreg free
  1682                           
  1683                           ;var.c: 55:     lcdInt(b);
  1684   00189A  C03E  F017         	movff	getAlarmLevel@b,lcdInt@val
  1685   00189E  6A18               	clrf	(lcdInt@val+1)^0,c
  1686   0018A0  EC36  F009         	call	_lcdInt	;wreg free
  1687   0018A4                     
  1688                           ;var.c: 56:     return (a<<8) | b;
  1689   0018A4  503E               	movf	getAlarmLevel@b^0,w,c
  1690   0018A6  C03F  F01B         	movff	getAlarmLevel@a,??_getAlarmLevel
  1691   0018AA  6A1C               	clrf	(??_getAlarmLevel+1)^0,c
  1692   0018AC  C01B  F01C         	movff	??_getAlarmLevel,??_getAlarmLevel+1
  1693   0018B0  6A1B               	clrf	??_getAlarmLevel^0,c
  1694   0018B2  101B               	iorwf	??_getAlarmLevel^0,w,c
  1695   0018B4  6E19               	movwf	?_getAlarmLevel^0,c
  1696   0018B6  501C               	movf	(??_getAlarmLevel+1)^0,w,c
  1697   0018B8  6E1A               	movwf	(?_getAlarmLevel+1)^0,c
  1698   0018BA  0012               	return		;funcret
  1699   0018BC                     __end_of_getAlarmLevel:
  1700                           	callstack 0
  1701                           
  1702 ;; *************** function _lcdInt *****************
  1703 ;; Defined at:
  1704 ;;		line 161 in file "lcd.c"
  1705 ;; Parameters:    Size  Location     Type
  1706 ;;  val             2   22[COMRAM] int 
  1707 ;; Auto vars:     Size  Location     Type
  1708 ;;		None
  1709 ;; Return value:  Size  Location     Type
  1710 ;;                  1    wreg      void 
  1711 ;; Registers used:
  1712 ;;		wreg, status,2, status,0, cstack
  1713 ;; Tracked objects:
  1714 ;;		On entry : 0/0
  1715 ;;		On exit  : 0/0
  1716 ;;		Unchanged: 0/0
  1717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1718 ;;      Params:         2       0       0       0       0       0       0       0       0
  1719 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1720 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1721 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1722 ;;Total ram usage:        2 bytes
  1723 ;; Hardware stack levels used: 1
  1724 ;; Hardware stack levels required when called: 3
  1725 ;; This function calls:
  1726 ;;		___awdiv
  1727 ;;		___awmod
  1728 ;;		_lcdData
  1729 ;; This function is called by:
  1730 ;;		_outputPrint
  1731 ;;		_getAlarmLevel
  1732 ;; This function uses a non-reentrant model
  1733 ;;
  1734                           
  1735                           	psect	text12
  1736   00126C                     __ptext12:
  1737                           	callstack 0
  1738   00126C                     _lcdInt:
  1739                           	callstack 25
  1740   00126C                     
  1741                           ;lcd.c: 162:     if (val < 0) {
  1742   00126C  BE18               	btfsc	(lcdInt@val+1)^0,7,c
  1743   00126E  EF3D  F009         	goto	u2260
  1744   001272  EF3B  F009         	goto	u2261
  1745   001276                     u2261:
  1746   001276  EF44  F009         	goto	l2387
  1747   00127A                     u2260:
  1748   00127A                     
  1749                           ;lcd.c: 163:         val = val * (-1);
  1750   00127A  6C17               	negf	lcdInt@val^0,c
  1751   00127C  1E18               	comf	(lcdInt@val+1)^0,f,c
  1752   00127E  B0D8               	btfsc	status,0,c
  1753   001280  2A18               	incf	(lcdInt@val+1)^0,f,c
  1754   001282                     
  1755                           ;lcd.c: 164:         lcdData('-');
  1756   001282  0E2D               	movlw	45
  1757   001284  ECA6  F00E         	call	_lcdData
  1758   001288                     l2387:
  1759                           
  1760                           ;lcd.c: 166:     lcdData((val / 10000) % 10 + 48);
  1761   001288  0E27               	movlw	39
  1762   00128A  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1763   00128C  0E10               	movlw	16
  1764   00128E  6E03               	movwf	___awdiv@divisor^0,c
  1765   001290  C017  F001         	movff	lcdInt@val,___awdiv@dividend
  1766   001294  C018  F002         	movff	lcdInt@val+1,___awdiv@dividend+1
  1767   001298  EC2B  F00A         	call	___awdiv	;wreg free
  1768   00129C  C001  F009         	movff	?___awdiv,___awmod@dividend
  1769   0012A0  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  1770   0012A4  0E00               	movlw	0
  1771   0012A6  6E0C               	movwf	(___awmod@divisor+1)^0,c
  1772   0012A8  0E0A               	movlw	10
  1773   0012AA  6E0B               	movwf	___awmod@divisor^0,c
  1774   0012AC  EC8D  F00A         	call	___awmod	;wreg free
  1775   0012B0  5009               	movf	?___awmod^0,w,c
  1776   0012B2  0F30               	addlw	48
  1777   0012B4  ECA6  F00E         	call	_lcdData
  1778   0012B8                     
  1779                           ;lcd.c: 167:     lcdData((val / 1000) % 10 + 48);
  1780   0012B8  0E03               	movlw	3
  1781   0012BA  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1782   0012BC  0EE8               	movlw	232
  1783   0012BE  6E03               	movwf	___awdiv@divisor^0,c
  1784   0012C0  C017  F001         	movff	lcdInt@val,___awdiv@dividend
  1785   0012C4  C018  F002         	movff	lcdInt@val+1,___awdiv@dividend+1
  1786   0012C8  EC2B  F00A         	call	___awdiv	;wreg free
  1787   0012CC  C001  F009         	movff	?___awdiv,___awmod@dividend
  1788   0012D0  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  1789   0012D4  0E00               	movlw	0
  1790   0012D6  6E0C               	movwf	(___awmod@divisor+1)^0,c
  1791   0012D8  0E0A               	movlw	10
  1792   0012DA  6E0B               	movwf	___awmod@divisor^0,c
  1793   0012DC  EC8D  F00A         	call	___awmod	;wreg free
  1794   0012E0  5009               	movf	?___awmod^0,w,c
  1795   0012E2  0F30               	addlw	48
  1796   0012E4  ECA6  F00E         	call	_lcdData
  1797   0012E8                     
  1798                           ;lcd.c: 168:     lcdData((val / 100) % 10 + 48);
  1799   0012E8  0E00               	movlw	0
  1800   0012EA  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1801   0012EC  0E64               	movlw	100
  1802   0012EE  6E03               	movwf	___awdiv@divisor^0,c
  1803   0012F0  C017  F001         	movff	lcdInt@val,___awdiv@dividend
  1804   0012F4  C018  F002         	movff	lcdInt@val+1,___awdiv@dividend+1
  1805   0012F8  EC2B  F00A         	call	___awdiv	;wreg free
  1806   0012FC  C001  F009         	movff	?___awdiv,___awmod@dividend
  1807   001300  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  1808   001304  0E00               	movlw	0
  1809   001306  6E0C               	movwf	(___awmod@divisor+1)^0,c
  1810   001308  0E0A               	movlw	10
  1811   00130A  6E0B               	movwf	___awmod@divisor^0,c
  1812   00130C  EC8D  F00A         	call	___awmod	;wreg free
  1813   001310  5009               	movf	?___awmod^0,w,c
  1814   001312  0F30               	addlw	48
  1815   001314  ECA6  F00E         	call	_lcdData
  1816   001318                     
  1817                           ;lcd.c: 169:     lcdData((val / 10) % 10 + 48);
  1818   001318  0E00               	movlw	0
  1819   00131A  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1820   00131C  0E0A               	movlw	10
  1821   00131E  6E03               	movwf	___awdiv@divisor^0,c
  1822   001320  C017  F001         	movff	lcdInt@val,___awdiv@dividend
  1823   001324  C018  F002         	movff	lcdInt@val+1,___awdiv@dividend+1
  1824   001328  EC2B  F00A         	call	___awdiv	;wreg free
  1825   00132C  C001  F009         	movff	?___awdiv,___awmod@dividend
  1826   001330  C002  F00A         	movff	?___awdiv+1,___awmod@dividend+1
  1827   001334  0E00               	movlw	0
  1828   001336  6E0C               	movwf	(___awmod@divisor+1)^0,c
  1829   001338  0E0A               	movlw	10
  1830   00133A  6E0B               	movwf	___awmod@divisor^0,c
  1831   00133C  EC8D  F00A         	call	___awmod	;wreg free
  1832   001340  5009               	movf	?___awmod^0,w,c
  1833   001342  0F30               	addlw	48
  1834   001344  ECA6  F00E         	call	_lcdData
  1835   001348                     
  1836                           ;lcd.c: 170:     lcdData((val / 1) % 10 + 48);
  1837   001348  C017  F009         	movff	lcdInt@val,___awmod@dividend
  1838   00134C  C018  F00A         	movff	lcdInt@val+1,___awmod@dividend+1
  1839   001350  0E00               	movlw	0
  1840   001352  6E0C               	movwf	(___awmod@divisor+1)^0,c
  1841   001354  0E0A               	movlw	10
  1842   001356  6E0B               	movwf	___awmod@divisor^0,c
  1843   001358  EC8D  F00A         	call	___awmod	;wreg free
  1844   00135C  5009               	movf	?___awmod^0,w,c
  1845   00135E  0F30               	addlw	48
  1846   001360  ECA6  F00E         	call	_lcdData
  1847   001364  0012               	return		;funcret
  1848   001366                     __end_of_lcdInt:
  1849                           	callstack 0
  1850                           
  1851 ;; *************** function _lcdData *****************
  1852 ;; Defined at:
  1853 ;;		line 102 in file "lcd.c"
  1854 ;; Parameters:    Size  Location     Type
  1855 ;;  valor           1    wreg     unsigned char 
  1856 ;; Auto vars:     Size  Location     Type
  1857 ;;  valor           1    2[COMRAM] unsigned char 
  1858 ;; Return value:  Size  Location     Type
  1859 ;;                  1    wreg      void 
  1860 ;; Registers used:
  1861 ;;		wreg, status,2, status,0, cstack
  1862 ;; Tracked objects:
  1863 ;;		On entry : 0/0
  1864 ;;		On exit  : 0/0
  1865 ;;		Unchanged: 0/0
  1866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1867 ;;      Params:         0       0       0       0       0       0       0       0       0
  1868 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1869 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1870 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1871 ;;Total ram usage:        1 bytes
  1872 ;; Hardware stack levels used: 1
  1873 ;; Hardware stack levels required when called: 2
  1874 ;; This function calls:
  1875 ;;		_Delay40us
  1876 ;;		_lcdCommand4bits
  1877 ;; This function is called by:
  1878 ;;		_lcdString
  1879 ;;		_lcdInt
  1880 ;;		_lcd_write_string
  1881 ;; This function uses a non-reentrant model
  1882 ;;
  1883                           
  1884                           	psect	text13
  1885   001D4C                     __ptext13:
  1886                           	callstack 0
  1887   001D4C                     _lcdData:
  1888                           	callstack 25
  1889                           
  1890                           ;incstack = 0
  1891                           ;lcdData@valor stored from wreg
  1892   001D4C  6E03               	movwf	lcdData@valor^0,c
  1893   001D4E                     
  1894                           ;lcd.c: 103:     lcdCommand4bits(valor, 1);
  1895   001D4E  0E01               	movlw	1
  1896   001D50  6E01               	movwf	lcdCommand4bits@data^0,c
  1897   001D52  5003               	movf	lcdData@valor^0,w,c
  1898   001D54  EC73  F00B         	call	_lcdCommand4bits
  1899                           
  1900                           ;lcd.c: 104:     lcdCommand4bits(valor << 4, 1);
  1901   001D58  0E01               	movlw	1
  1902   001D5A  6E01               	movwf	lcdCommand4bits@data^0,c
  1903   001D5C  3803               	swapf	lcdData@valor^0,w,c
  1904   001D5E  0BF0               	andlw	240
  1905   001D60  EC73  F00B         	call	_lcdCommand4bits
  1906                           
  1907                           ;lcd.c: 107:     Delay40us();
  1908   001D64  ECCE  F00E         	call	_Delay40us	;wreg free
  1909   001D68  0012               	return		;funcret
  1910   001D6A                     __end_of_lcdData:
  1911                           	callstack 0
  1912                           
  1913 ;; *************** function _dsReadData *****************
  1914 ;; Defined at:
  1915 ;;		line 31 in file "ds1307.c"
  1916 ;; Parameters:    Size  Location     Type
  1917 ;;  address         2   13[COMRAM] int 
  1918 ;; Auto vars:     Size  Location     Type
  1919 ;;  result          2   16[COMRAM] int 
  1920 ;; Return value:  Size  Location     Type
  1921 ;;                  2   13[COMRAM] int 
  1922 ;; Registers used:
  1923 ;;		wreg, status,2, status,0, cstack
  1924 ;; Tracked objects:
  1925 ;;		On entry : 0/0
  1926 ;;		On exit  : 0/0
  1927 ;;		Unchanged: 0/0
  1928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1929 ;;      Params:         2       0       0       0       0       0       0       0       0
  1930 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1931 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1932 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1933 ;;Total ram usage:        5 bytes
  1934 ;; Hardware stack levels used: 1
  1935 ;; Hardware stack levels required when called: 4
  1936 ;; This function calls:
  1937 ;;		_i2cReadByte
  1938 ;;		_i2cWriteByte
  1939 ;; This function is called by:
  1940 ;;		_getTime
  1941 ;;		_getAlarmLevel
  1942 ;;		_getLanguage
  1943 ;;		_dsStartClock
  1944 ;; This function uses a non-reentrant model
  1945 ;;
  1946                           
  1947                           	psect	text14
  1948   0019E6                     __ptext14:
  1949                           	callstack 0
  1950   0019E6                     _dsReadData:
  1951                           	callstack 23
  1952   0019E6                     
  1953                           ;ds1307.c: 32:  int result;;ds1307.c: 33:  i2cWriteByte(1,0,(0x6f<<1) | 0);
  1954   0019E6  0E00               	movlw	0
  1955   0019E8  6E08               	movwf	i2cWriteByte@send_stop^0,c
  1956   0019EA  0EDE               	movlw	222
  1957   0019EC  6E09               	movwf	i2cWriteByte@byte^0,c
  1958   0019EE  0E01               	movlw	1
  1959   0019F0  ECAF  F00B         	call	_i2cWriteByte
  1960                           
  1961                           ;ds1307.c: 34:  i2cWriteByte(0,0,address);
  1962   0019F4  0E00               	movlw	0
  1963   0019F6  6E08               	movwf	i2cWriteByte@send_stop^0,c
  1964   0019F8  C00E  F009         	movff	dsReadData@address,i2cWriteByte@byte
  1965   0019FC  0E00               	movlw	0
  1966   0019FE  ECAF  F00B         	call	_i2cWriteByte
  1967                           
  1968                           ;ds1307.c: 35:  i2cWriteByte(1,0, (0x6f<<1) | 1);
  1969   001A02  0E00               	movlw	0
  1970   001A04  6E08               	movwf	i2cWriteByte@send_stop^0,c
  1971   001A06  0EDF               	movlw	223
  1972   001A08  6E09               	movwf	i2cWriteByte@byte^0,c
  1973   001A0A  0E01               	movlw	1
  1974   001A0C  ECAF  F00B         	call	_i2cWriteByte
  1975                           
  1976                           ;ds1307.c: 36:  result = i2cReadByte(1,1 );
  1977   001A10  0E01               	movlw	1
  1978   001A12  6E08               	movwf	i2cReadByte@send_stop^0,c
  1979   001A14  0E01               	movlw	1
  1980   001A16  EC0B  F00C         	call	_i2cReadByte
  1981   001A1A  6E10               	movwf	??_dsReadData^0,c
  1982   001A1C  5010               	movf	??_dsReadData^0,w,c
  1983   001A1E  6E11               	movwf	dsReadData@result^0,c
  1984   001A20  6A12               	clrf	(dsReadData@result+1)^0,c
  1985   001A22                     
  1986                           ;ds1307.c: 37:  return result;
  1987   001A22  C011  F00E         	movff	dsReadData@result,?_dsReadData
  1988   001A26  C012  F00F         	movff	dsReadData@result+1,?_dsReadData+1
  1989   001A2A  0012               	return		;funcret
  1990   001A2C                     __end_of_dsReadData:
  1991                           	callstack 0
  1992                           
  1993 ;; *************** function _i2cReadByte *****************
  1994 ;; Defined at:
  1995 ;;		line 131 in file "i2c.c"
  1996 ;; Parameters:    Size  Location     Type
  1997 ;;  nack            1    wreg     unsigned char 
  1998 ;;  send_stop       1    7[COMRAM] unsigned char 
  1999 ;; Auto vars:     Size  Location     Type
  2000 ;;  nack            1    9[COMRAM] unsigned char 
  2001 ;;  bit             2   10[COMRAM] unsigned int 
  2002 ;;  byte            1   12[COMRAM] unsigned char 
  2003 ;; Return value:  Size  Location     Type
  2004 ;;                  1    wreg      unsigned char 
  2005 ;; Registers used:
  2006 ;;		wreg, status,2, status,0, cstack
  2007 ;; Tracked objects:
  2008 ;;		On entry : 0/0
  2009 ;;		On exit  : 0/0
  2010 ;;		Unchanged: 0/0
  2011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2012 ;;      Params:         1       0       0       0       0       0       0       0       0
  2013 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2014 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2015 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2016 ;;Total ram usage:        6 bytes
  2017 ;; Hardware stack levels used: 1
  2018 ;; Hardware stack levels required when called: 3
  2019 ;; This function calls:
  2020 ;;		_i2c_read_bit
  2021 ;;		_i2c_stop
  2022 ;;		_i2c_write_bit
  2023 ;; This function is called by:
  2024 ;;		_dsReadData
  2025 ;; This function uses a non-reentrant model
  2026 ;;
  2027                           
  2028                           	psect	text15
  2029   001816                     __ptext15:
  2030                           	callstack 0
  2031   001816                     _i2cReadByte:
  2032                           	callstack 23
  2033                           
  2034                           ;incstack = 0
  2035                           ;i2cReadByte@nack stored from wreg
  2036   001816  6E0A               	movwf	i2cReadByte@nack^0,c
  2037   001818                     
  2038                           ;i2c.c: 132:  unsigned char byte = 0;
  2039   001818  0E00               	movlw	0
  2040   00181A  6E0D               	movwf	i2cReadByte@byte^0,c
  2041                           
  2042                           ;i2c.c: 133:  unsigned bit;;i2c.c: 134:  for (bit = 0; bit < 8; bit++) {
  2043   00181C  0E00               	movlw	0
  2044   00181E  6E0C               	movwf	(i2cReadByte@bit+1)^0,c
  2045   001820  0E00               	movlw	0
  2046   001822  6E0B               	movwf	i2cReadByte@bit^0,c
  2047   001824                     l2219:
  2048                           
  2049                           ;i2c.c: 135:   byte = (byte << 1) | i2c_read_bit();
  2050   001824  ECA8  F00D         	call	_i2c_read_bit	;wreg free
  2051   001828  6E09               	movwf	??_i2cReadByte^0,c
  2052   00182A  500D               	movf	i2cReadByte@byte^0,w,c
  2053   00182C  240D               	addwf	i2cReadByte@byte^0,w,c
  2054   00182E  1009               	iorwf	??_i2cReadByte^0,w,c
  2055   001830  6E0D               	movwf	i2cReadByte@byte^0,c
  2056   001832                     
  2057                           ;i2c.c: 136:  }
  2058   001832  4A0B               	infsnz	i2cReadByte@bit^0,f,c
  2059   001834  2A0C               	incf	(i2cReadByte@bit+1)^0,f,c
  2060   001836  500C               	movf	(i2cReadByte@bit+1)^0,w,c
  2061   001838  E109               	bnz	u2050
  2062   00183A  0E08               	movlw	8
  2063   00183C  5C0B               	subwf	i2cReadByte@bit^0,w,c
  2064   00183E  A0D8               	btfss	status,0,c
  2065   001840  EF24  F00C         	goto	u2051
  2066   001844  EF26  F00C         	goto	u2050
  2067   001848                     u2051:
  2068   001848  EF12  F00C         	goto	l2219
  2069   00184C                     u2050:
  2070   00184C                     
  2071                           ;i2c.c: 137:  i2c_write_bit(nack);
  2072   00184C  500A               	movf	i2cReadByte@nack^0,w,c
  2073   00184E  ECDF  F00B         	call	_i2c_write_bit
  2074   001852                     
  2075                           ;i2c.c: 138:  if (send_stop) {
  2076   001852  5008               	movf	i2cReadByte@send_stop^0,w,c
  2077   001854  B4D8               	btfsc	status,2,c
  2078   001856  EF2F  F00C         	goto	u2061
  2079   00185A  EF31  F00C         	goto	u2060
  2080   00185E                     u2061:
  2081   00185E  EF33  F00C         	goto	l2231
  2082   001862                     u2060:
  2083   001862                     
  2084                           ;i2c.c: 139:   i2c_stop();
  2085   001862  ECD8  F00D         	call	_i2c_stop	;wreg free
  2086   001866                     l2231:
  2087                           
  2088                           ;i2c.c: 141:  return byte;
  2089   001866  500D               	movf	i2cReadByte@byte^0,w,c
  2090   001868  0012               	return		;funcret
  2091   00186A                     __end_of_i2cReadByte:
  2092                           	callstack 0
  2093                           
  2094 ;; *************** function _eventRead *****************
  2095 ;; Defined at:
  2096 ;;		line 17 in file "event.c"
  2097 ;; Parameters:    Size  Location     Type
  2098 ;;		None
  2099 ;; Auto vars:     Size  Location     Type
  2100 ;;  key             2   42[COMRAM] int 
  2101 ;;  ev              2   40[COMRAM] int 
  2102 ;; Return value:  Size  Location     Type
  2103 ;;                  2   30[COMRAM] unsigned int 
  2104 ;; Registers used:
  2105 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2106 ;; Tracked objects:
  2107 ;;		On entry : 0/0
  2108 ;;		On exit  : 0/0
  2109 ;;		Unchanged: 0/0
  2110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2111 ;;      Params:         2       0       0       0       0       0       0       0       0
  2112 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2113 ;;      Temps:          8       0       0       0       0       0       0       0       0
  2114 ;;      Totals:        14       0       0       0       0       0       0       0       0
  2115 ;;Total ram usage:       14 bytes
  2116 ;; Hardware stack levels used: 1
  2117 ;; Hardware stack levels required when called: 6
  2118 ;; This function calls:
  2119 ;;		___wmul
  2120 ;;		_kpRead
  2121 ;;		_serialRead
  2122 ;;		_setAlarmLevel
  2123 ;;		_setLanguage
  2124 ;;		_setTime
  2125 ;; This function is called by:
  2126 ;;		_smLoop
  2127 ;; This function uses a non-reentrant model
  2128 ;;
  2129                           
  2130                           	psect	text16
  2131   000890                     __ptext16:
  2132                           	callstack 0
  2133   000890                     _eventRead:
  2134                           	callstack 23
  2135   000890                     
  2136                           ;event.c: 18:     int key;;event.c: 19:     int ev = EV_NOEVENT;
  2137   000890  0E00               	movlw	0
  2138   000892  6E2A               	movwf	(eventRead@ev+1)^0,c
  2139   000894  0E05               	movlw	5
  2140   000896  6E29               	movwf	eventRead@ev^0,c
  2141   000898                     
  2142                           ;event.c: 20:     key = kpRead();
  2143   000898  EC01  F00F         	call	_kpRead	;wreg free
  2144   00089C  6E21               	movwf	??_eventRead^0,c
  2145   00089E  5021               	movf	??_eventRead^0,w,c
  2146   0008A0  6E2B               	movwf	eventRead@key^0,c
  2147   0008A2  6A2C               	clrf	(eventRead@key+1)^0,c
  2148   0008A4                     
  2149                           ;event.c: 21:     if (key != key_ant) {
  2150   0008A4  503A               	movf	_key_ant^0,w,c
  2151   0008A6  182B               	xorwf	eventRead@key^0,w,c
  2152   0008A8  E109               	bnz	u2280
  2153   0008AA  503B               	movf	(_key_ant+1)^0,w,c
  2154   0008AC  182C               	xorwf	(eventRead@key+1)^0,w,c
  2155   0008AE  B4D8               	btfsc	status,2,c
  2156   0008B0  EF5C  F004         	goto	u2281
  2157   0008B4  EF5E  F004         	goto	u2280
  2158   0008B8                     u2281:
  2159   0008B8  EF7F  F004         	goto	l2469
  2160   0008BC                     u2280:
  2161   0008BC                     
  2162                           ;event.c: 22:         if (((key) & (1<<(0)))) {
  2163   0008BC  A02B               	btfss	eventRead@key^0,0,c
  2164   0008BE  EF63  F004         	goto	u2291
  2165   0008C2  EF65  F004         	goto	u2290
  2166   0008C6                     u2291:
  2167   0008C6  EF69  F004         	goto	l2461
  2168   0008CA                     u2290:
  2169   0008CA                     
  2170                           ;event.c: 23:             ev = EV_RIGHT;
  2171   0008CA  0E00               	movlw	0
  2172   0008CC  6E2A               	movwf	(eventRead@ev+1)^0,c
  2173   0008CE  0E03               	movlw	3
  2174   0008D0  6E29               	movwf	eventRead@ev^0,c
  2175   0008D2                     l2461:
  2176                           
  2177                           ;event.c: 26:         if (((key) & (1<<(1)))) {
  2178   0008D2  A22B               	btfss	eventRead@key^0,1,c
  2179   0008D4  EF6E  F004         	goto	u2301
  2180   0008D8  EF70  F004         	goto	u2300
  2181   0008DC                     u2301:
  2182   0008DC  EF74  F004         	goto	l2465
  2183   0008E0                     u2300:
  2184   0008E0                     
  2185                           ;event.c: 27:             ev = EV_LEFT;
  2186   0008E0  0E00               	movlw	0
  2187   0008E2  6E2A               	movwf	(eventRead@ev+1)^0,c
  2188   0008E4  0E02               	movlw	2
  2189   0008E6  6E29               	movwf	eventRead@ev^0,c
  2190   0008E8                     l2465:
  2191                           
  2192                           ;event.c: 30:         if (((key) & (1<<(2)))) {
  2193   0008E8  A42B               	btfss	eventRead@key^0,2,c
  2194   0008EA  EF79  F004         	goto	u2311
  2195   0008EE  EF7B  F004         	goto	u2310
  2196   0008F2                     u2311:
  2197   0008F2  EF7F  F004         	goto	l2469
  2198   0008F6                     u2310:
  2199   0008F6                     
  2200                           ;event.c: 31:             ev = EV_ENTER;
  2201   0008F6  0E00               	movlw	0
  2202   0008F8  6E2A               	movwf	(eventRead@ev+1)^0,c
  2203   0008FA  0E04               	movlw	4
  2204   0008FC  6E29               	movwf	eventRead@ev^0,c
  2205   0008FE                     l2469:
  2206                           
  2207                           ;event.c: 34:     key_ant = key;
  2208   0008FE  C02B  F03A         	movff	eventRead@key,_key_ant
  2209   000902  C02C  F03B         	movff	eventRead@key+1,_key_ant+1
  2210   000906                     
  2211                           ;event.c: 37:     static unsigned char msg[5];;event.c: 38:     unsigned char static dat
      +                          a;;event.c: 39:     data = serialRead();
  2212   000906  EC06  F00E         	call	_serialRead	;wreg free
  2213   00090A  6E46               	movwf	eventRead@data^0,c
  2214   00090C                     
  2215                           ;event.c: 40:     if (data != 0) {
  2216   00090C  5046               	movf	eventRead@data^0,w,c
  2217   00090E  B4D8               	btfsc	status,2,c
  2218   000910  EF8C  F004         	goto	u2321
  2219   000914  EF8E  F004         	goto	u2320
  2220   000918                     u2321:
  2221   000918  EF71  F005         	goto	l2513
  2222   00091C                     u2320:
  2223   00091C                     
  2224                           ;event.c: 41:         if (reading_protocol) {
  2225   00091C  5047               	movf	_reading_protocol^0,w,c
  2226   00091E  B4D8               	btfsc	status,2,c
  2227   000920  EF94  F004         	goto	u2331
  2228   000924  EF96  F004         	goto	u2330
  2229   000928                     u2331:
  2230   000928  EF9F  F004         	goto	l2481
  2231   00092C                     u2330:
  2232   00092C                     
  2233                           ;event.c: 42:             msg[reading_protocol - 1] = data;
  2234   00092C  5047               	movf	_reading_protocol^0,w,c
  2235   00092E  0F30               	addlw	low (eventRead@msg+255)
  2236   000930  6ED9               	movwf	fsr2l,c
  2237   000932  6ADA               	clrf	fsr2h,c
  2238   000934  C046  FFDF         	movff	eventRead@data,indf2
  2239   000938                     
  2240                           ;event.c: 43:             reading_protocol++;
  2241   000938  2A47               	incf	_reading_protocol^0,f,c
  2242                           
  2243                           ;event.c: 44:         } else if (data == 'w') ev = EV_ENTER;
  2244   00093A  EFCC  F004         	goto	l2493
  2245   00093E                     l2481:
  2246   00093E  0E77               	movlw	119
  2247   000940  1846               	xorwf	eventRead@data^0,w,c
  2248   000942  A4D8               	btfss	status,2,c
  2249   000944  EFA6  F004         	goto	u2341
  2250   000948  EFA8  F004         	goto	u2340
  2251   00094C                     u2341:
  2252   00094C  EFAE  F004         	goto	l2485
  2253   000950                     u2340:
  2254   000950  0E00               	movlw	0
  2255   000952  6E2A               	movwf	(eventRead@ev+1)^0,c
  2256   000954  0E04               	movlw	4
  2257   000956  6E29               	movwf	eventRead@ev^0,c
  2258   000958  EFCC  F004         	goto	l2493
  2259   00095C                     l2485:
  2260   00095C  0E61               	movlw	97
  2261   00095E  1846               	xorwf	eventRead@data^0,w,c
  2262   000960  A4D8               	btfss	status,2,c
  2263   000962  EFB5  F004         	goto	u2351
  2264   000966  EFB7  F004         	goto	u2350
  2265   00096A                     u2351:
  2266   00096A  EFBD  F004         	goto	l2489
  2267   00096E                     u2350:
  2268   00096E  0E00               	movlw	0
  2269   000970  6E2A               	movwf	(eventRead@ev+1)^0,c
  2270   000972  0E02               	movlw	2
  2271   000974  6E29               	movwf	eventRead@ev^0,c
  2272   000976  EFCC  F004         	goto	l2493
  2273   00097A                     l2489:
  2274   00097A  0E64               	movlw	100
  2275   00097C  1846               	xorwf	eventRead@data^0,w,c
  2276   00097E  A4D8               	btfss	status,2,c
  2277   000980  EFC4  F004         	goto	u2361
  2278   000984  EFC6  F004         	goto	u2360
  2279   000988                     u2361:
  2280   000988  EFCC  F004         	goto	l365
  2281   00098C                     u2360:
  2282   00098C  0E00               	movlw	0
  2283   00098E  6E2A               	movwf	(eventRead@ev+1)^0,c
  2284   000990  0E03               	movlw	3
  2285   000992  6E29               	movwf	eventRead@ev^0,c
  2286   000994  EFCC  F004         	goto	l2493
  2287   000998                     l365:
  2288   000998                     l2493:
  2289                           
  2290                           ;event.c: 48:         if (data == 'p') {
  2291   000998  0E70               	movlw	112
  2292   00099A  1846               	xorwf	eventRead@data^0,w,c
  2293   00099C  A4D8               	btfss	status,2,c
  2294   00099E  EFD3  F004         	goto	u2371
  2295   0009A2  EFD5  F004         	goto	u2370
  2296   0009A6                     u2371:
  2297   0009A6  EF71  F005         	goto	l2513
  2298   0009AA                     u2370:
  2299   0009AA                     
  2300                           ;event.c: 49:             if (reading_protocol == 0) {
  2301   0009AA  5047               	movf	_reading_protocol^0,w,c
  2302   0009AC  A4D8               	btfss	status,2,c
  2303   0009AE  EFDB  F004         	goto	u2381
  2304   0009B2  EFDD  F004         	goto	u2380
  2305   0009B6                     u2381:
  2306   0009B6  EFE1  F004         	goto	l2499
  2307   0009BA                     u2380:
  2308   0009BA                     
  2309                           ;event.c: 50:                 reading_protocol = 1;
  2310   0009BA  0E01               	movlw	1
  2311   0009BC  6E47               	movwf	_reading_protocol^0,c
  2312                           
  2313                           ;event.c: 51:             } else {
  2314   0009BE  EF71  F005         	goto	l2513
  2315   0009C2                     l2499:
  2316                           
  2317                           ;event.c: 52:                 reading_protocol = 0;
  2318   0009C2  0E00               	movlw	0
  2319   0009C4  6E47               	movwf	_reading_protocol^0,c
  2320   0009C6                     
  2321                           ;event.c: 53:                 if (msg[0] == 'T') {
  2322   0009C6  0E54               	movlw	84
  2323   0009C8  1831               	xorwf	eventRead@msg^0,w,c
  2324   0009CA  A4D8               	btfss	status,2,c
  2325   0009CC  EFEA  F004         	goto	u2391
  2326   0009D0  EFEC  F004         	goto	u2390
  2327   0009D4                     u2391:
  2328   0009D4  EF19  F005         	goto	l2505
  2329   0009D8                     u2390:
  2330   0009D8                     
  2331                           ;event.c: 54:                     setTime((msg[1] - 48)*10 * 10 * 10 + (msg[2] - 48)*10 
      +                          * 10 + (msg[3] - 48)*10 + (msg[4] - 48));
  2332   0009D8  C032  F001         	movff	eventRead@msg+1,___wmul@multiplier
  2333   0009DC  6A02               	clrf	(___wmul@multiplier+1)^0,c
  2334   0009DE  0E03               	movlw	3
  2335   0009E0  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2336   0009E2  0EE8               	movlw	232
  2337   0009E4  6E03               	movwf	___wmul@multiplicand^0,c
  2338   0009E6  EC82  F00E         	call	___wmul	;wreg free
  2339   0009EA  5034               	movf	(eventRead@msg+3)^0,w,c
  2340   0009EC  0D0A               	mullw	10
  2341   0009EE  CFF3 F021          	movff	prodl,??_eventRead
  2342   0009F2  CFF4 F022          	movff	prodh,??_eventRead+1
  2343   0009F6  5033               	movf	(eventRead@msg+2)^0,w,c
  2344   0009F8  0D64               	mullw	100
  2345   0009FA  CFF3 F023          	movff	prodl,??_eventRead+2
  2346   0009FE  CFF4 F024          	movff	prodh,??_eventRead+3
  2347   000A02  5021               	movf	??_eventRead^0,w,c
  2348   000A04  2423               	addwf	(??_eventRead+2)^0,w,c
  2349   000A06  6E25               	movwf	(??_eventRead+4)^0,c
  2350   000A08  5022               	movf	(??_eventRead+1)^0,w,c
  2351   000A0A  2024               	addwfc	(??_eventRead+3)^0,w,c
  2352   000A0C  6E26               	movwf	(??_eventRead+5)^0,c
  2353   000A0E  5001               	movf	?___wmul^0,w,c
  2354   000A10  2425               	addwf	(??_eventRead+4)^0,w,c
  2355   000A12  6E27               	movwf	(??_eventRead+6)^0,c
  2356   000A14  5002               	movf	(?___wmul+1)^0,w,c
  2357   000A16  2026               	addwfc	(??_eventRead+5)^0,w,c
  2358   000A18  6E28               	movwf	(??_eventRead+7)^0,c
  2359   000A1A  5035               	movf	(eventRead@msg+4)^0,w,c
  2360   000A1C  2627               	addwf	(??_eventRead+6)^0,f,c
  2361   000A1E  0E00               	movlw	0
  2362   000A20  2228               	addwfc	(??_eventRead+7)^0,f,c
  2363   000A22  0EB0               	movlw	176
  2364   000A24  2427               	addwf	(??_eventRead+6)^0,w,c
  2365   000A26  6E17               	movwf	setTime@newTime^0,c
  2366   000A28  0E2F               	movlw	47
  2367   000A2A  2028               	addwfc	(??_eventRead+7)^0,w,c
  2368   000A2C  6E18               	movwf	(setTime@newTime+1)^0,c
  2369   000A2E  ECAB  F00C         	call	_setTime	;wreg free
  2370   000A32                     l2505:
  2371                           
  2372                           ;event.c: 57:                 if (msg[0] == 'L') {
  2373   000A32  0E4C               	movlw	76
  2374   000A34  1831               	xorwf	eventRead@msg^0,w,c
  2375   000A36  A4D8               	btfss	status,2,c
  2376   000A38  EF20  F005         	goto	u2401
  2377   000A3C  EF22  F005         	goto	u2400
  2378   000A40                     u2401:
  2379   000A40  EF39  F005         	goto	l2509
  2380   000A44                     u2400:
  2381   000A44                     
  2382                           ;event.c: 58:                     setLanguage((msg[1] - 48)*10 * 10 * 10 + (msg[2] - 48)
      +                          *10 * 10 + (msg[3] - 48)*10 + (msg[4] - 48) % 2);
  2383   000A44  C035  F021         	movff	eventRead@msg+4,??_eventRead
  2384   000A48  0ED0               	movlw	208
  2385   000A4A  2621               	addwf	??_eventRead^0,f,c
  2386   000A4C  0E01               	movlw	1
  2387   000A4E  1621               	andwf	??_eventRead^0,f,c
  2388   000A50  5034               	movf	(eventRead@msg+3)^0,w,c
  2389   000A52  0D0A               	mullw	10
  2390   000A54  CFF3 F022          	movff	prodl,??_eventRead+1
  2391   000A58  5033               	movf	(eventRead@msg+2)^0,w,c
  2392   000A5A  0D64               	mullw	100
  2393   000A5C  CFF3 F023          	movff	prodl,??_eventRead+2
  2394   000A60  5032               	movf	(eventRead@msg+1)^0,w,c
  2395   000A62  0DE8               	mullw	232
  2396   000A64  50F3               	movf	243,w,c
  2397   000A66  2423               	addwf	(??_eventRead+2)^0,w,c
  2398   000A68  2422               	addwf	(??_eventRead+1)^0,w,c
  2399   000A6A  2421               	addwf	??_eventRead^0,w,c
  2400   000A6C  0FE0               	addlw	224
  2401   000A6E  ECC2  F00E         	call	_setLanguage
  2402   000A72                     l2509:
  2403                           
  2404                           ;event.c: 61:                 if (msg[0] == 'A') {
  2405   000A72  0E41               	movlw	65
  2406   000A74  1831               	xorwf	eventRead@msg^0,w,c
  2407   000A76  A4D8               	btfss	status,2,c
  2408   000A78  EF40  F005         	goto	u2411
  2409   000A7C  EF42  F005         	goto	u2410
  2410   000A80                     u2411:
  2411   000A80  EF71  F005         	goto	l369
  2412   000A84                     u2410:
  2413   000A84                     
  2414                           ;event.c: 62:                     setAlarmLevel((msg[1] - 48)*10 * 10 * 10 + (msg[2] - 4
      +                          8)*10 * 10 + (msg[3] - 48)*10 + (msg[4] - 48));
  2415   000A84  C032  F001         	movff	eventRead@msg+1,___wmul@multiplier
  2416   000A88  6A02               	clrf	(___wmul@multiplier+1)^0,c
  2417   000A8A  0E03               	movlw	3
  2418   000A8C  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  2419   000A8E  0EE8               	movlw	232
  2420   000A90  6E03               	movwf	___wmul@multiplicand^0,c
  2421   000A92  EC82  F00E         	call	___wmul	;wreg free
  2422   000A96  5034               	movf	(eventRead@msg+3)^0,w,c
  2423   000A98  0D0A               	mullw	10
  2424   000A9A  CFF3 F021          	movff	prodl,??_eventRead
  2425   000A9E  CFF4 F022          	movff	prodh,??_eventRead+1
  2426   000AA2  5033               	movf	(eventRead@msg+2)^0,w,c
  2427   000AA4  0D64               	mullw	100
  2428   000AA6  CFF3 F023          	movff	prodl,??_eventRead+2
  2429   000AAA  CFF4 F024          	movff	prodh,??_eventRead+3
  2430   000AAE  5021               	movf	??_eventRead^0,w,c
  2431   000AB0  2423               	addwf	(??_eventRead+2)^0,w,c
  2432   000AB2  6E25               	movwf	(??_eventRead+4)^0,c
  2433   000AB4  5022               	movf	(??_eventRead+1)^0,w,c
  2434   000AB6  2024               	addwfc	(??_eventRead+3)^0,w,c
  2435   000AB8  6E26               	movwf	(??_eventRead+5)^0,c
  2436   000ABA  5001               	movf	?___wmul^0,w,c
  2437   000ABC  2425               	addwf	(??_eventRead+4)^0,w,c
  2438   000ABE  6E27               	movwf	(??_eventRead+6)^0,c
  2439   000AC0  5002               	movf	(?___wmul+1)^0,w,c
  2440   000AC2  2026               	addwfc	(??_eventRead+5)^0,w,c
  2441   000AC4  6E28               	movwf	(??_eventRead+7)^0,c
  2442   000AC6  5035               	movf	(eventRead@msg+4)^0,w,c
  2443   000AC8  2627               	addwf	(??_eventRead+6)^0,f,c
  2444   000ACA  0E00               	movlw	0
  2445   000ACC  2228               	addwfc	(??_eventRead+7)^0,f,c
  2446   000ACE  0EB0               	movlw	176
  2447   000AD0  2427               	addwf	(??_eventRead+6)^0,w,c
  2448   000AD2  6E1D               	movwf	setAlarmLevel@newAlarmLevel^0,c
  2449   000AD4  0E2F               	movlw	47
  2450   000AD6  2028               	addwfc	(??_eventRead+7)^0,w,c
  2451   000AD8  6E1E               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  2452   000ADA  EC6F  F00E         	call	_setAlarmLevel	;wreg free
  2453   000ADE  EF71  F005         	goto	l2513
  2454   000AE2                     l369:
  2455   000AE2                     l2513:
  2456                           
  2457                           ;event.c: 67:     return ev;
  2458   000AE2  C029  F01F         	movff	eventRead@ev,?_eventRead
  2459   000AE6  C02A  F020         	movff	eventRead@ev+1,?_eventRead+1
  2460   000AEA  0012               	return		;funcret
  2461   000AEC                     __end_of_eventRead:
  2462                           	callstack 0
  2463                           
  2464 ;; *************** function _setTime *****************
  2465 ;; Defined at:
  2466 ;;		line 40 in file "var.c"
  2467 ;; Parameters:    Size  Location     Type
  2468 ;;  newTime         2   22[COMRAM] int 
  2469 ;; Auto vars:     Size  Location     Type
  2470 ;;		None
  2471 ;; Return value:  Size  Location     Type
  2472 ;;                  1    wreg      void 
  2473 ;; Registers used:
  2474 ;;		wreg, status,2, status,0, cstack
  2475 ;; Tracked objects:
  2476 ;;		On entry : 0/0
  2477 ;;		On exit  : 0/0
  2478 ;;		Unchanged: 0/0
  2479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2480 ;;      Params:         2       0       0       0       0       0       0       0       0
  2481 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2482 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2483 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2484 ;;Total ram usage:        2 bytes
  2485 ;; Hardware stack levels used: 1
  2486 ;; Hardware stack levels required when called: 5
  2487 ;; This function calls:
  2488 ;;		_dec2bcd
  2489 ;;		_dsWriteData
  2490 ;; This function is called by:
  2491 ;;		_eventRead
  2492 ;;		_smLoop
  2493 ;;		_varInit
  2494 ;; This function uses a non-reentrant model
  2495 ;;
  2496                           
  2497                           	psect	text17
  2498   001956                     __ptext17:
  2499                           	callstack 0
  2500   001956                     _setTime:
  2501                           	callstack 24
  2502   001956                     
  2503                           ;var.c: 41:     static unsigned char a, b;;var.c: 42:     a = (dec2bcd(newTime)>>8) & 0x
      +                          FF;
  2504   001956  C017  F00F         	movff	setTime@newTime,dec2bcd@value
  2505   00195A  C018  F010         	movff	setTime@newTime+1,dec2bcd@value+1
  2506   00195E  EC5E  F00C         	call	_dec2bcd	;wreg free
  2507   001962  C010  F00F         	movff	?_dec2bcd+1,?_dec2bcd
  2508   001966  6A10               	clrf	(?_dec2bcd+1)^0,c
  2509   001968  BE0F               	btfsc	?_dec2bcd^0,7,c
  2510   00196A  6810               	setf	(?_dec2bcd+1)^0,c
  2511   00196C  500F               	movf	?_dec2bcd^0,w,c
  2512   00196E  6E41               	movwf	setTime@a^0,c
  2513                           
  2514                           ;var.c: 43:     b = dec2bcd(newTime) & 0xFF;
  2515   001970  C017  F00F         	movff	setTime@newTime,dec2bcd@value
  2516   001974  C018  F010         	movff	setTime@newTime+1,dec2bcd@value+1
  2517   001978  EC5E  F00C         	call	_dec2bcd	;wreg free
  2518   00197C  500F               	movf	?_dec2bcd^0,w,c
  2519   00197E  6E40               	movwf	setTime@b^0,c
  2520                           
  2521                           ;var.c: 44:     dsWriteData(a, 0x00);
  2522   001980  0E00               	movlw	0
  2523   001982  6E0D               	movwf	(dsWriteData@address+1)^0,c
  2524   001984  0E00               	movlw	0
  2525   001986  6E0C               	movwf	dsWriteData@address^0,c
  2526   001988  5041               	movf	setTime@a^0,w,c
  2527   00198A  ECC1  F00D         	call	_dsWriteData
  2528                           
  2529                           ;var.c: 45:     dsWriteData(b, 0x01);
  2530   00198E  0E00               	movlw	0
  2531   001990  6E0D               	movwf	(dsWriteData@address+1)^0,c
  2532   001992  0E01               	movlw	1
  2533   001994  6E0C               	movwf	dsWriteData@address^0,c
  2534   001996  5040               	movf	setTime@b^0,w,c
  2535   001998  ECC1  F00D         	call	_dsWriteData
  2536   00199C  0012               	return		;funcret
  2537   00199E                     __end_of_setTime:
  2538                           	callstack 0
  2539                           
  2540 ;; *************** function _dec2bcd *****************
  2541 ;; Defined at:
  2542 ;;		line 9 in file "ds1307.c"
  2543 ;; Parameters:    Size  Location     Type
  2544 ;;  value           2   14[COMRAM] int 
  2545 ;; Auto vars:     Size  Location     Type
  2546 ;;		None
  2547 ;; Return value:  Size  Location     Type
  2548 ;;                  2   14[COMRAM] int 
  2549 ;; Registers used:
  2550 ;;		wreg, status,2, status,0, cstack
  2551 ;; Tracked objects:
  2552 ;;		On entry : 0/0
  2553 ;;		On exit  : 0/0
  2554 ;;		Unchanged: 0/0
  2555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2556 ;;      Params:         2       0       0       0       0       0       0       0       0
  2557 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2558 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2559 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2560 ;;Total ram usage:        4 bytes
  2561 ;; Hardware stack levels used: 1
  2562 ;; Hardware stack levels required when called: 1
  2563 ;; This function calls:
  2564 ;;		___awdiv
  2565 ;;		___awmod
  2566 ;; This function is called by:
  2567 ;;		_setTime
  2568 ;; This function uses a non-reentrant model
  2569 ;;
  2570                           
  2571                           	psect	text18
  2572   0018BC                     __ptext18:
  2573                           	callstack 0
  2574   0018BC                     _dec2bcd:
  2575                           	callstack 27
  2576   0018BC                     
  2577                           ;ds1307.c: 12:  return ((value / 10 * 16) + (value % 10));
  2578   0018BC  C00F  F001         	movff	dec2bcd@value,___awdiv@dividend
  2579   0018C0  C010  F002         	movff	dec2bcd@value+1,___awdiv@dividend+1
  2580   0018C4  0E00               	movlw	0
  2581   0018C6  6E04               	movwf	(___awdiv@divisor+1)^0,c
  2582   0018C8  0E0A               	movlw	10
  2583   0018CA  6E03               	movwf	___awdiv@divisor^0,c
  2584   0018CC  EC2B  F00A         	call	___awdiv	;wreg free
  2585   0018D0  C001  F011         	movff	?___awdiv,??_dec2bcd
  2586   0018D4  C002  F012         	movff	?___awdiv+1,??_dec2bcd+1
  2587   0018D8  3A11               	swapf	??_dec2bcd^0,f,c
  2588   0018DA  3A12               	swapf	(??_dec2bcd+1)^0,f,c
  2589   0018DC  0EF0               	movlw	240
  2590   0018DE  1612               	andwf	(??_dec2bcd+1)^0,f,c
  2591   0018E0  5011               	movf	??_dec2bcd^0,w,c
  2592   0018E2  0B0F               	andlw	15
  2593   0018E4  1212               	iorwf	(??_dec2bcd+1)^0,f,c
  2594   0018E6  0EF0               	movlw	240
  2595   0018E8  1611               	andwf	??_dec2bcd^0,f,c
  2596   0018EA  C00F  F009         	movff	dec2bcd@value,___awmod@dividend
  2597   0018EE  C010  F00A         	movff	dec2bcd@value+1,___awmod@dividend+1
  2598   0018F2  0E00               	movlw	0
  2599   0018F4  6E0C               	movwf	(___awmod@divisor+1)^0,c
  2600   0018F6  0E0A               	movlw	10
  2601   0018F8  6E0B               	movwf	___awmod@divisor^0,c
  2602   0018FA  EC8D  F00A         	call	___awmod	;wreg free
  2603   0018FE  5009               	movf	?___awmod^0,w,c
  2604   001900  2411               	addwf	??_dec2bcd^0,w,c
  2605   001902  6E0F               	movwf	?_dec2bcd^0,c
  2606   001904  500A               	movf	(?___awmod+1)^0,w,c
  2607   001906  2012               	addwfc	(??_dec2bcd+1)^0,w,c
  2608   001908  6E10               	movwf	(?_dec2bcd+1)^0,c
  2609   00190A  0012               	return		;funcret
  2610   00190C                     __end_of_dec2bcd:
  2611                           	callstack 0
  2612                           
  2613 ;; *************** function ___awmod *****************
  2614 ;; Defined at:
  2615 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awmod.c"
  2616 ;; Parameters:    Size  Location     Type
  2617 ;;  dividend        2    8[COMRAM] int 
  2618 ;;  divisor         2   10[COMRAM] int 
  2619 ;; Auto vars:     Size  Location     Type
  2620 ;;  sign            1   13[COMRAM] unsigned char 
  2621 ;;  counter         1   12[COMRAM] unsigned char 
  2622 ;; Return value:  Size  Location     Type
  2623 ;;                  2    8[COMRAM] int 
  2624 ;; Registers used:
  2625 ;;		wreg, status,2, status,0
  2626 ;; Tracked objects:
  2627 ;;		On entry : 0/0
  2628 ;;		On exit  : 0/0
  2629 ;;		Unchanged: 0/0
  2630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2631 ;;      Params:         4       0       0       0       0       0       0       0       0
  2632 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2633 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2634 ;;      Totals:         6       0       0       0       0       0       0       0       0
  2635 ;;Total ram usage:        6 bytes
  2636 ;; Hardware stack levels used: 1
  2637 ;; This function calls:
  2638 ;;		Nothing
  2639 ;; This function is called by:
  2640 ;;		_lcdInt
  2641 ;;		_dec2bcd
  2642 ;; This function uses a non-reentrant model
  2643 ;;
  2644                           
  2645                           	psect	text19
  2646   00151A                     __ptext19:
  2647                           	callstack 0
  2648   00151A                     ___awmod:
  2649                           	callstack 27
  2650   00151A  0E00               	movlw	0
  2651   00151C  6E0E               	movwf	___awmod@sign^0,c
  2652   00151E  BE0A               	btfsc	(___awmod@dividend+1)^0,7,c
  2653   001520  EF96  F00A         	goto	u2130
  2654   001524  EF94  F00A         	goto	u2131
  2655   001528                     u2131:
  2656   001528  EF9C  F00A         	goto	l2287
  2657   00152C                     u2130:
  2658   00152C  6C09               	negf	___awmod@dividend^0,c
  2659   00152E  1E0A               	comf	(___awmod@dividend+1)^0,f,c
  2660   001530  B0D8               	btfsc	status,0,c
  2661   001532  2A0A               	incf	(___awmod@dividend+1)^0,f,c
  2662   001534  0E01               	movlw	1
  2663   001536  6E0E               	movwf	___awmod@sign^0,c
  2664   001538                     l2287:
  2665   001538  BE0C               	btfsc	(___awmod@divisor+1)^0,7,c
  2666   00153A  EFA3  F00A         	goto	u2140
  2667   00153E  EFA1  F00A         	goto	u2141
  2668   001542                     u2141:
  2669   001542  EFA7  F00A         	goto	l2291
  2670   001546                     u2140:
  2671   001546  6C0B               	negf	___awmod@divisor^0,c
  2672   001548  1E0C               	comf	(___awmod@divisor+1)^0,f,c
  2673   00154A  B0D8               	btfsc	status,0,c
  2674   00154C  2A0C               	incf	(___awmod@divisor+1)^0,f,c
  2675   00154E                     l2291:
  2676   00154E  500B               	movf	___awmod@divisor^0,w,c
  2677   001550  100C               	iorwf	(___awmod@divisor+1)^0,w,c
  2678   001552  B4D8               	btfsc	status,2,c
  2679   001554  EFAE  F00A         	goto	u2151
  2680   001558  EFB0  F00A         	goto	u2150
  2681   00155C                     u2151:
  2682   00155C  EFD4  F00A         	goto	l2307
  2683   001560                     u2150:
  2684   001560  0E01               	movlw	1
  2685   001562  6E0D               	movwf	___awmod@counter^0,c
  2686   001564  EFB8  F00A         	goto	l2297
  2687   001568                     l2295:
  2688   001568  90D8               	bcf	status,0,c
  2689   00156A  360B               	rlcf	___awmod@divisor^0,f,c
  2690   00156C  360C               	rlcf	(___awmod@divisor+1)^0,f,c
  2691   00156E  2A0D               	incf	___awmod@counter^0,f,c
  2692   001570                     l2297:
  2693   001570  AE0C               	btfss	(___awmod@divisor+1)^0,7,c
  2694   001572  EFBD  F00A         	goto	u2161
  2695   001576  EFBF  F00A         	goto	u2160
  2696   00157A                     u2161:
  2697   00157A  EFB4  F00A         	goto	l2295
  2698   00157E                     u2160:
  2699   00157E                     l2299:
  2700   00157E  500B               	movf	___awmod@divisor^0,w,c
  2701   001580  5C09               	subwf	___awmod@dividend^0,w,c
  2702   001582  500C               	movf	(___awmod@divisor+1)^0,w,c
  2703   001584  580A               	subwfb	(___awmod@dividend+1)^0,w,c
  2704   001586  A0D8               	btfss	status,0,c
  2705   001588  EFC8  F00A         	goto	u2171
  2706   00158C  EFCA  F00A         	goto	u2170
  2707   001590                     u2171:
  2708   001590  EFCE  F00A         	goto	l2303
  2709   001594                     u2170:
  2710   001594  500B               	movf	___awmod@divisor^0,w,c
  2711   001596  5E09               	subwf	___awmod@dividend^0,f,c
  2712   001598  500C               	movf	(___awmod@divisor+1)^0,w,c
  2713   00159A  5A0A               	subwfb	(___awmod@dividend+1)^0,f,c
  2714   00159C                     l2303:
  2715   00159C  90D8               	bcf	status,0,c
  2716   00159E  320C               	rrcf	(___awmod@divisor+1)^0,f,c
  2717   0015A0  320B               	rrcf	___awmod@divisor^0,f,c
  2718   0015A2  2E0D               	decfsz	___awmod@counter^0,f,c
  2719   0015A4  EFBF  F00A         	goto	l2299
  2720   0015A8                     l2307:
  2721   0015A8  500E               	movf	___awmod@sign^0,w,c
  2722   0015AA  B4D8               	btfsc	status,2,c
  2723   0015AC  EFDA  F00A         	goto	u2181
  2724   0015B0  EFDC  F00A         	goto	u2180
  2725   0015B4                     u2181:
  2726   0015B4  EFE0  F00A         	goto	l2311
  2727   0015B8                     u2180:
  2728   0015B8  6C09               	negf	___awmod@dividend^0,c
  2729   0015BA  1E0A               	comf	(___awmod@dividend+1)^0,f,c
  2730   0015BC  B0D8               	btfsc	status,0,c
  2731   0015BE  2A0A               	incf	(___awmod@dividend+1)^0,f,c
  2732   0015C0                     l2311:
  2733   0015C0  C009  F009         	movff	___awmod@dividend,?___awmod
  2734   0015C4  C00A  F00A         	movff	___awmod@dividend+1,?___awmod+1
  2735   0015C8  0012               	return		;funcret
  2736   0015CA                     __end_of___awmod:
  2737                           	callstack 0
  2738                           
  2739 ;; *************** function ___awdiv *****************
  2740 ;; Defined at:
  2741 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awdiv.c"
  2742 ;; Parameters:    Size  Location     Type
  2743 ;;  dividend        2    0[COMRAM] int 
  2744 ;;  divisor         2    2[COMRAM] int 
  2745 ;; Auto vars:     Size  Location     Type
  2746 ;;  quotient        2    6[COMRAM] int 
  2747 ;;  sign            1    5[COMRAM] unsigned char 
  2748 ;;  counter         1    4[COMRAM] unsigned char 
  2749 ;; Return value:  Size  Location     Type
  2750 ;;                  2    0[COMRAM] int 
  2751 ;; Registers used:
  2752 ;;		wreg, status,2, status,0
  2753 ;; Tracked objects:
  2754 ;;		On entry : 0/0
  2755 ;;		On exit  : 0/0
  2756 ;;		Unchanged: 0/0
  2757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2758 ;;      Params:         4       0       0       0       0       0       0       0       0
  2759 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2760 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2761 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2762 ;;Total ram usage:        8 bytes
  2763 ;; Hardware stack levels used: 1
  2764 ;; This function calls:
  2765 ;;		Nothing
  2766 ;; This function is called by:
  2767 ;;		_lcdInt
  2768 ;;		_dec2bcd
  2769 ;;		_bcd2dec
  2770 ;; This function uses a non-reentrant model
  2771 ;;
  2772                           
  2773                           	psect	text20
  2774   001456                     __ptext20:
  2775                           	callstack 0
  2776   001456                     ___awdiv:
  2777                           	callstack 27
  2778   001456  0E00               	movlw	0
  2779   001458  6E06               	movwf	___awdiv@sign^0,c
  2780   00145A  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  2781   00145C  EF34  F00A         	goto	u2070
  2782   001460  EF32  F00A         	goto	u2071
  2783   001464                     u2071:
  2784   001464  EF3A  F00A         	goto	l2243
  2785   001468                     u2070:
  2786   001468  6C03               	negf	___awdiv@divisor^0,c
  2787   00146A  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  2788   00146C  B0D8               	btfsc	status,0,c
  2789   00146E  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  2790   001470  0E01               	movlw	1
  2791   001472  6E06               	movwf	___awdiv@sign^0,c
  2792   001474                     l2243:
  2793   001474  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  2794   001476  EF41  F00A         	goto	u2080
  2795   00147A  EF3F  F00A         	goto	u2081
  2796   00147E                     u2081:
  2797   00147E  EF47  F00A         	goto	l2249
  2798   001482                     u2080:
  2799   001482  6C01               	negf	___awdiv@dividend^0,c
  2800   001484  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  2801   001486  B0D8               	btfsc	status,0,c
  2802   001488  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  2803   00148A  0E01               	movlw	1
  2804   00148C  1A06               	xorwf	___awdiv@sign^0,f,c
  2805   00148E                     l2249:
  2806   00148E  0E00               	movlw	0
  2807   001490  6E08               	movwf	(___awdiv@quotient+1)^0,c
  2808   001492  0E00               	movlw	0
  2809   001494  6E07               	movwf	___awdiv@quotient^0,c
  2810   001496  5003               	movf	___awdiv@divisor^0,w,c
  2811   001498  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  2812   00149A  B4D8               	btfsc	status,2,c
  2813   00149C  EF52  F00A         	goto	u2091
  2814   0014A0  EF54  F00A         	goto	u2090
  2815   0014A4                     u2091:
  2816   0014A4  EF7C  F00A         	goto	l2271
  2817   0014A8                     u2090:
  2818   0014A8  0E01               	movlw	1
  2819   0014AA  6E05               	movwf	___awdiv@counter^0,c
  2820   0014AC  EF5C  F00A         	goto	l2257
  2821   0014B0                     l2255:
  2822   0014B0  90D8               	bcf	status,0,c
  2823   0014B2  3603               	rlcf	___awdiv@divisor^0,f,c
  2824   0014B4  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  2825   0014B6  2A05               	incf	___awdiv@counter^0,f,c
  2826   0014B8                     l2257:
  2827   0014B8  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  2828   0014BA  EF61  F00A         	goto	u2101
  2829   0014BE  EF63  F00A         	goto	u2100
  2830   0014C2                     u2101:
  2831   0014C2  EF58  F00A         	goto	l2255
  2832   0014C6                     u2100:
  2833   0014C6                     l2259:
  2834   0014C6  90D8               	bcf	status,0,c
  2835   0014C8  3607               	rlcf	___awdiv@quotient^0,f,c
  2836   0014CA  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  2837   0014CC  5003               	movf	___awdiv@divisor^0,w,c
  2838   0014CE  5C01               	subwf	___awdiv@dividend^0,w,c
  2839   0014D0  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2840   0014D2  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  2841   0014D4  A0D8               	btfss	status,0,c
  2842   0014D6  EF6F  F00A         	goto	u2111
  2843   0014DA  EF71  F00A         	goto	u2110
  2844   0014DE                     u2111:
  2845   0014DE  EF76  F00A         	goto	l2267
  2846   0014E2                     u2110:
  2847   0014E2  5003               	movf	___awdiv@divisor^0,w,c
  2848   0014E4  5E01               	subwf	___awdiv@dividend^0,f,c
  2849   0014E6  5004               	movf	(___awdiv@divisor+1)^0,w,c
  2850   0014E8  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  2851   0014EA  8007               	bsf	___awdiv@quotient^0,0,c
  2852   0014EC                     l2267:
  2853   0014EC  90D8               	bcf	status,0,c
  2854   0014EE  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  2855   0014F0  3203               	rrcf	___awdiv@divisor^0,f,c
  2856   0014F2  2E05               	decfsz	___awdiv@counter^0,f,c
  2857   0014F4  EF63  F00A         	goto	l2259
  2858   0014F8                     l2271:
  2859   0014F8  5006               	movf	___awdiv@sign^0,w,c
  2860   0014FA  B4D8               	btfsc	status,2,c
  2861   0014FC  EF82  F00A         	goto	u2121
  2862   001500  EF84  F00A         	goto	u2120
  2863   001504                     u2121:
  2864   001504  EF88  F00A         	goto	l2275
  2865   001508                     u2120:
  2866   001508  6C07               	negf	___awdiv@quotient^0,c
  2867   00150A  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  2868   00150C  B0D8               	btfsc	status,0,c
  2869   00150E  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  2870   001510                     l2275:
  2871   001510  C007  F001         	movff	___awdiv@quotient,?___awdiv
  2872   001514  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  2873   001518  0012               	return		;funcret
  2874   00151A                     __end_of___awdiv:
  2875                           	callstack 0
  2876                           
  2877 ;; *************** function _setLanguage *****************
  2878 ;; Defined at:
  2879 ;;		line 71 in file "var.c"
  2880 ;; Parameters:    Size  Location     Type
  2881 ;;  newLanguage     1    wreg     unsigned char 
  2882 ;; Auto vars:     Size  Location     Type
  2883 ;;  newLanguage     1   14[COMRAM] unsigned char 
  2884 ;; Return value:  Size  Location     Type
  2885 ;;                  1    wreg      void 
  2886 ;; Registers used:
  2887 ;;		wreg, status,2, status,0, cstack
  2888 ;; Tracked objects:
  2889 ;;		On entry : 0/0
  2890 ;;		On exit  : 0/0
  2891 ;;		Unchanged: 0/0
  2892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2893 ;;      Params:         0       0       0       0       0       0       0       0       0
  2894 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2895 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2896 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2897 ;;Total ram usage:        1 bytes
  2898 ;; Hardware stack levels used: 1
  2899 ;; Hardware stack levels required when called: 5
  2900 ;; This function calls:
  2901 ;;		_dsWriteData
  2902 ;; This function is called by:
  2903 ;;		_eventRead
  2904 ;;		_smLoop
  2905 ;; This function uses a non-reentrant model
  2906 ;;
  2907                           
  2908                           	psect	text21
  2909   001D84                     __ptext21:
  2910                           	callstack 0
  2911   001D84                     _setLanguage:
  2912                           	callstack 24
  2913                           
  2914                           ;incstack = 0
  2915                           ;setLanguage@newLanguage stored from wreg
  2916   001D84  6E0F               	movwf	setLanguage@newLanguage^0,c
  2917   001D86                     
  2918                           ;var.c: 74:     language = newLanguage%2;
  2919   001D86  500F               	movf	setLanguage@newLanguage^0,w,c
  2920   001D88  0B01               	andlw	1
  2921   001D8A  6E44               	movwf	_language^0,c
  2922   001D8C                     
  2923                           ;var.c: 75:     dsWriteData(language, 0x06);
  2924   001D8C  0E00               	movlw	0
  2925   001D8E  6E0D               	movwf	(dsWriteData@address+1)^0,c
  2926   001D90  0E06               	movlw	6
  2927   001D92  6E0C               	movwf	dsWriteData@address^0,c
  2928   001D94  5044               	movf	_language^0,w,c
  2929   001D96  ECC1  F00D         	call	_dsWriteData
  2930   001D9A  0012               	return		;funcret
  2931   001D9C                     __end_of_setLanguage:
  2932                           	callstack 0
  2933                           
  2934 ;; *************** function _setAlarmLevel *****************
  2935 ;; Defined at:
  2936 ;;		line 58 in file "var.c"
  2937 ;; Parameters:    Size  Location     Type
  2938 ;;  newAlarmLeve    2   28[COMRAM] int 
  2939 ;; Auto vars:     Size  Location     Type
  2940 ;;		None
  2941 ;; Return value:  Size  Location     Type
  2942 ;;                  1    wreg      void 
  2943 ;; Registers used:
  2944 ;;		wreg, status,2, status,0, cstack
  2945 ;; Tracked objects:
  2946 ;;		On entry : 0/0
  2947 ;;		On exit  : 0/0
  2948 ;;		Unchanged: 0/0
  2949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2950 ;;      Params:         2       0       0       0       0       0       0       0       0
  2951 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2952 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2953 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2954 ;;Total ram usage:        2 bytes
  2955 ;; Hardware stack levels used: 1
  2956 ;; Hardware stack levels required when called: 5
  2957 ;; This function calls:
  2958 ;;		_dsWriteData
  2959 ;; This function is called by:
  2960 ;;		_eventRead
  2961 ;;		_smLoop
  2962 ;;		_varInit
  2963 ;; This function uses a non-reentrant model
  2964 ;;
  2965                           
  2966                           	psect	text22
  2967   001CDE                     __ptext22:
  2968                           	callstack 0
  2969   001CDE                     _setAlarmLevel:
  2970                           	callstack 24
  2971   001CDE                     
  2972                           ;var.c: 59:     static unsigned char a, b;;var.c: 60:     a = (newAlarmLevel>>8);
  2973   001CDE  501E               	movf	(setAlarmLevel@newAlarmLevel+1)^0,w,c
  2974   001CE0  6E3D               	movwf	setAlarmLevel@a^0,c
  2975   001CE2                     
  2976                           ;var.c: 61:     b = newAlarmLevel;
  2977   001CE2  C01D  F03C         	movff	setAlarmLevel@newAlarmLevel,setAlarmLevel@b
  2978   001CE6                     
  2979                           ;var.c: 62:     dsWriteData(a, 0x04);
  2980   001CE6  0E00               	movlw	0
  2981   001CE8  6E0D               	movwf	(dsWriteData@address+1)^0,c
  2982   001CEA  0E04               	movlw	4
  2983   001CEC  6E0C               	movwf	dsWriteData@address^0,c
  2984   001CEE  503D               	movf	setAlarmLevel@a^0,w,c
  2985   001CF0  ECC1  F00D         	call	_dsWriteData
  2986   001CF4                     
  2987                           ;var.c: 63:     dsWriteData(b, 0x05);
  2988   001CF4  0E00               	movlw	0
  2989   001CF6  6E0D               	movwf	(dsWriteData@address+1)^0,c
  2990   001CF8  0E05               	movlw	5
  2991   001CFA  6E0C               	movwf	dsWriteData@address^0,c
  2992   001CFC  503C               	movf	setAlarmLevel@b^0,w,c
  2993   001CFE  ECC1  F00D         	call	_dsWriteData
  2994   001D02  0012               	return		;funcret
  2995   001D04                     __end_of_setAlarmLevel:
  2996                           	callstack 0
  2997                           
  2998 ;; *************** function _dsWriteData *****************
  2999 ;; Defined at:
  3000 ;;		line 26 in file "ds1307.c"
  3001 ;; Parameters:    Size  Location     Type
  3002 ;;  value           1    wreg     unsigned char 
  3003 ;;  address         2   11[COMRAM] int 
  3004 ;; Auto vars:     Size  Location     Type
  3005 ;;  value           1   13[COMRAM] unsigned char 
  3006 ;; Return value:  Size  Location     Type
  3007 ;;                  1    wreg      void 
  3008 ;; Registers used:
  3009 ;;		wreg, status,2, status,0, cstack
  3010 ;; Tracked objects:
  3011 ;;		On entry : 0/0
  3012 ;;		On exit  : 0/0
  3013 ;;		Unchanged: 0/0
  3014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3015 ;;      Params:         2       0       0       0       0       0       0       0       0
  3016 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3017 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3018 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3019 ;;Total ram usage:        3 bytes
  3020 ;; Hardware stack levels used: 1
  3021 ;; Hardware stack levels required when called: 4
  3022 ;; This function calls:
  3023 ;;		_i2cWriteByte
  3024 ;; This function is called by:
  3025 ;;		_setTime
  3026 ;;		_setAlarmLevel
  3027 ;;		_setLanguage
  3028 ;;		_dsStartClock
  3029 ;; This function uses a non-reentrant model
  3030 ;;
  3031                           
  3032                           	psect	text23
  3033   001B82                     __ptext23:
  3034                           	callstack 0
  3035   001B82                     _dsWriteData:
  3036                           	callstack 24
  3037                           
  3038                           ;incstack = 0
  3039                           ;dsWriteData@value stored from wreg
  3040   001B82  6E0E               	movwf	dsWriteData@value^0,c
  3041   001B84                     
  3042                           ;ds1307.c: 27:  i2cWriteByte(1,0, (0x6f<<1)|0);
  3043   001B84  0E00               	movlw	0
  3044   001B86  6E08               	movwf	i2cWriteByte@send_stop^0,c
  3045   001B88  0EDE               	movlw	222
  3046   001B8A  6E09               	movwf	i2cWriteByte@byte^0,c
  3047   001B8C  0E01               	movlw	1
  3048   001B8E  ECAF  F00B         	call	_i2cWriteByte
  3049                           
  3050                           ;ds1307.c: 28:  i2cWriteByte(0,0,address);
  3051   001B92  0E00               	movlw	0
  3052   001B94  6E08               	movwf	i2cWriteByte@send_stop^0,c
  3053   001B96  C00C  F009         	movff	dsWriteData@address,i2cWriteByte@byte
  3054   001B9A  0E00               	movlw	0
  3055   001B9C  ECAF  F00B         	call	_i2cWriteByte
  3056                           
  3057                           ;ds1307.c: 29:  i2cWriteByte(0,1,value);
  3058   001BA0  0E01               	movlw	1
  3059   001BA2  6E08               	movwf	i2cWriteByte@send_stop^0,c
  3060   001BA4  C00E  F009         	movff	dsWriteData@value,i2cWriteByte@byte
  3061   001BA8  0E00               	movlw	0
  3062   001BAA  ECAF  F00B         	call	_i2cWriteByte
  3063   001BAE  0012               	return		;funcret
  3064   001BB0                     __end_of_dsWriteData:
  3065                           	callstack 0
  3066                           
  3067 ;; *************** function _i2cWriteByte *****************
  3068 ;; Defined at:
  3069 ;;		line 113 in file "i2c.c"
  3070 ;; Parameters:    Size  Location     Type
  3071 ;;  send_start      1    wreg     unsigned char 
  3072 ;;  send_stop       1    7[COMRAM] unsigned char 
  3073 ;;  byte            1    8[COMRAM] unsigned char 
  3074 ;; Auto vars:     Size  Location     Type
  3075 ;;  send_start      1    9[COMRAM] unsigned char 
  3076 ;;  bit             1   10[COMRAM] unsigned char 
  3077 ;;  nack            1    0        unsigned char 
  3078 ;; Return value:  Size  Location     Type
  3079 ;;                  1    wreg      unsigned char 
  3080 ;; Registers used:
  3081 ;;		wreg, status,2, status,0, cstack
  3082 ;; Tracked objects:
  3083 ;;		On entry : 0/0
  3084 ;;		On exit  : 0/0
  3085 ;;		Unchanged: 0/0
  3086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3087 ;;      Params:         2       0       0       0       0       0       0       0       0
  3088 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3089 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3090 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3091 ;;Total ram usage:        4 bytes
  3092 ;; Hardware stack levels used: 1
  3093 ;; Hardware stack levels required when called: 3
  3094 ;; This function calls:
  3095 ;;		_i2c_read_bit
  3096 ;;		_i2c_start
  3097 ;;		_i2c_stop
  3098 ;;		_i2c_write_bit
  3099 ;; This function is called by:
  3100 ;;		_dsWriteData
  3101 ;;		_dsReadData
  3102 ;; This function uses a non-reentrant model
  3103 ;;
  3104                           
  3105                           	psect	text24
  3106   00175E                     __ptext24:
  3107                           	callstack 0
  3108   00175E                     _i2cWriteByte:
  3109                           	callstack 24
  3110                           
  3111                           ;incstack = 0
  3112                           ;i2cWriteByte@send_start stored from wreg
  3113   00175E  6E0A               	movwf	i2cWriteByte@send_start^0,c
  3114   001760                     
  3115                           ;i2c.c: 114:  unsigned char bit;;i2c.c: 115:  unsigned char nack;;i2c.c: 116:  if (send_
      +                          start) {
  3116   001760  500A               	movf	i2cWriteByte@send_start^0,w,c
  3117   001762  B4D8               	btfsc	status,2,c
  3118   001764  EFB6  F00B         	goto	u2001
  3119   001768  EFB8  F00B         	goto	u2000
  3120   00176C                     u2001:
  3121   00176C  EFBA  F00B         	goto	l2191
  3122   001770                     u2000:
  3123   001770                     
  3124                           ;i2c.c: 117:   i2c_start();
  3125   001770  EC16  F00D         	call	_i2c_start	;wreg free
  3126   001774                     l2191:
  3127                           
  3128                           ;i2c.c: 119:  for (bit = 0; bit < 8; bit++) {
  3129   001774  0E00               	movlw	0
  3130   001776  6E0B               	movwf	i2cWriteByte@bit^0,c
  3131   001778                     l2197:
  3132                           
  3133                           ;i2c.c: 120:   i2c_write_bit((byte & 0x80) != 0);
  3134   001778  BE09               	btfsc	i2cWriteByte@byte^0,7,c
  3135   00177A  EFC1  F00B         	goto	u2011
  3136   00177E  EFC4  F00B         	goto	u2010
  3137   001782                     u2011:
  3138   001782  0E01               	movlw	1
  3139   001784  EFC5  F00B         	goto	u2020
  3140   001788                     u2010:
  3141   001788  0E00               	movlw	0
  3142   00178A                     u2020:
  3143   00178A  ECDF  F00B         	call	_i2c_write_bit
  3144   00178E                     
  3145                           ;i2c.c: 121:   byte <<= 1;
  3146   00178E  90D8               	bcf	status,0,c
  3147   001790  3609               	rlcf	i2cWriteByte@byte^0,f,c
  3148   001792                     
  3149                           ;i2c.c: 122:  }
  3150   001792  2A0B               	incf	i2cWriteByte@bit^0,f,c
  3151   001794  0E07               	movlw	7
  3152   001796  640B               	cpfsgt	i2cWriteByte@bit^0,c
  3153   001798  EFD0  F00B         	goto	u2031
  3154   00179C  EFD2  F00B         	goto	u2030
  3155   0017A0                     u2031:
  3156   0017A0  EFBC  F00B         	goto	l2197
  3157   0017A4                     u2030:
  3158   0017A4  ECA8  F00D         	call	_i2c_read_bit	;wreg free
  3159   0017A8                     
  3160                           ;i2c.c: 124:  if (send_stop) {
  3161   0017A8  5008               	movf	i2cWriteByte@send_stop^0,w,c
  3162   0017AA  B4D8               	btfsc	status,2,c
  3163   0017AC  EFDA  F00B         	goto	u2041
  3164   0017B0  EFDC  F00B         	goto	u2040
  3165   0017B4                     u2041:
  3166   0017B4  EFDE  F00B         	goto	l249
  3167   0017B8                     u2040:
  3168   0017B8                     
  3169                           ;i2c.c: 125:   i2c_stop();
  3170   0017B8  ECD8  F00D         	call	_i2c_stop	;wreg free
  3171   0017BC                     l249:
  3172   0017BC  0012               	return		;funcret
  3173   0017BE                     __end_of_i2cWriteByte:
  3174                           	callstack 0
  3175                           
  3176 ;; *************** function _i2c_write_bit *****************
  3177 ;; Defined at:
  3178 ;;		line 84 in file "i2c.c"
  3179 ;; Parameters:    Size  Location     Type
  3180 ;;  bit             1    wreg     unsigned char 
  3181 ;; Auto vars:     Size  Location     Type
  3182 ;;  bit             1    6[COMRAM] unsigned char 
  3183 ;; Return value:  Size  Location     Type
  3184 ;;                  1    wreg      void 
  3185 ;; Registers used:
  3186 ;;		wreg, status,2, status,0, cstack
  3187 ;; Tracked objects:
  3188 ;;		On entry : 0/0
  3189 ;;		On exit  : 0/0
  3190 ;;		Unchanged: 0/0
  3191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3192 ;;      Params:         0       0       0       0       0       0       0       0       0
  3193 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3194 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3195 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3196 ;;Total ram usage:        1 bytes
  3197 ;; Hardware stack levels used: 1
  3198 ;; Hardware stack levels required when called: 2
  3199 ;; This function calls:
  3200 ;;		_I2C_delay
  3201 ;;		_clear_SCL
  3202 ;;		_clear_SDA
  3203 ;;		_read_SCL
  3204 ;;		_read_SDA
  3205 ;; This function is called by:
  3206 ;;		_i2cWriteByte
  3207 ;;		_i2cReadByte
  3208 ;; This function uses a non-reentrant model
  3209 ;;
  3210                           
  3211                           	psect	text25
  3212   0017BE                     __ptext25:
  3213                           	callstack 0
  3214   0017BE                     _i2c_write_bit:
  3215                           	callstack 24
  3216                           
  3217                           ;incstack = 0
  3218                           ;i2c_write_bit@bit stored from wreg
  3219   0017BE  6E07               	movwf	i2c_write_bit@bit^0,c
  3220   0017C0                     
  3221                           ;i2c.c: 85:  if (bit) {
  3222   0017C0  5007               	movf	i2c_write_bit@bit^0,w,c
  3223   0017C2  B4D8               	btfsc	status,2,c
  3224   0017C4  EFE6  F00B         	goto	u1901
  3225   0017C8  EFE8  F00B         	goto	u1900
  3226   0017CC                     u1901:
  3227   0017CC  EFEC  F00B         	goto	l2113
  3228   0017D0                     u1900:
  3229   0017D0                     
  3230                           ;i2c.c: 86:   read_SDA();
  3231   0017D0  EC55  F00D         	call	_read_SDA	;wreg free
  3232                           
  3233                           ;i2c.c: 87:  } else {
  3234   0017D4  EFEE  F00B         	goto	l2115
  3235   0017D8                     l2113:
  3236                           
  3237                           ;i2c.c: 88:   clear_SDA();
  3238   0017D8  EC31  F00E         	call	_clear_SDA	;wreg free
  3239   0017DC                     l2115:
  3240                           
  3241                           ;i2c.c: 90:  I2C_delay();
  3242   0017DC  EC03  F00F         	call	_I2C_delay	;wreg free
  3243   0017E0                     l2117:
  3244   0017E0  EC71  F00D         	call	_read_SCL	;wreg free
  3245   0017E4  0900               	iorlw	0
  3246   0017E6  B4D8               	btfsc	status,2,c
  3247   0017E8  EFF8  F00B         	goto	u1911
  3248   0017EC  EFFA  F00B         	goto	u1910
  3249   0017F0                     u1911:
  3250   0017F0  EFF0  F00B         	goto	l2117
  3251   0017F4                     u1910:
  3252   0017F4                     
  3253                           ;i2c.c: 92:  if (bit && read_SDA() == 0) {
  3254   0017F4  5007               	movf	i2c_write_bit@bit^0,w,c
  3255   0017F6  B4D8               	btfsc	status,2,c
  3256   0017F8  EF00  F00C         	goto	u1921
  3257   0017FC  EF02  F00C         	goto	u1920
  3258   001800                     u1921:
  3259   001800  EF04  F00C         	goto	l2123
  3260   001804                     u1920:
  3261   001804  EC55  F00D         	call	_read_SDA	;wreg free
  3262   001808                     l2123:
  3263                           
  3264                           ;i2c.c: 95:  I2C_delay();
  3265   001808  EC03  F00F         	call	_I2C_delay	;wreg free
  3266   00180C                     
  3267                           ;i2c.c: 96:  clear_SCL();
  3268   00180C  EC46  F00E         	call	_clear_SCL	;wreg free
  3269   001810                     
  3270                           ;i2c.c: 97:  I2C_delay();
  3271   001810  EC03  F00F         	call	_I2C_delay	;wreg free
  3272   001814  0012               	return		;funcret
  3273   001816                     __end_of_i2c_write_bit:
  3274                           	callstack 0
  3275                           
  3276 ;; *************** function _i2c_stop *****************
  3277 ;; Defined at:
  3278 ;;		line 71 in file "i2c.c"
  3279 ;; Parameters:    Size  Location     Type
  3280 ;;		None
  3281 ;; Auto vars:     Size  Location     Type
  3282 ;;		None
  3283 ;; Return value:  Size  Location     Type
  3284 ;;                  1    wreg      void 
  3285 ;; Registers used:
  3286 ;;		wreg, status,2, status,0, cstack
  3287 ;; Tracked objects:
  3288 ;;		On entry : 0/0
  3289 ;;		On exit  : 0/0
  3290 ;;		Unchanged: 0/0
  3291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3292 ;;      Params:         0       0       0       0       0       0       0       0       0
  3293 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3294 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3295 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3296 ;;Total ram usage:        0 bytes
  3297 ;; Hardware stack levels used: 1
  3298 ;; Hardware stack levels required when called: 2
  3299 ;; This function calls:
  3300 ;;		_I2C_delay
  3301 ;;		_clear_SDA
  3302 ;;		_read_SCL
  3303 ;;		_read_SDA
  3304 ;; This function is called by:
  3305 ;;		_i2cWriteByte
  3306 ;;		_i2cReadByte
  3307 ;; This function uses a non-reentrant model
  3308 ;;
  3309                           
  3310                           	psect	text26
  3311   001BB0                     __ptext26:
  3312                           	callstack 0
  3313   001BB0                     _i2c_stop:
  3314                           	callstack 24
  3315   001BB0                     
  3316                           ;i2c.c: 73:  clear_SDA();
  3317   001BB0  EC31  F00E         	call	_clear_SDA	;wreg free
  3318   001BB4                     
  3319                           ;i2c.c: 74:  I2C_delay();
  3320   001BB4  EC03  F00F         	call	_I2C_delay	;wreg free
  3321   001BB8                     l2099:
  3322   001BB8  EC71  F00D         	call	_read_SCL	;wreg free
  3323   001BBC  0900               	iorlw	0
  3324   001BBE  B4D8               	btfsc	status,2,c
  3325   001BC0  EFE4  F00D         	goto	u1891
  3326   001BC4  EFE6  F00D         	goto	u1890
  3327   001BC8                     u1891:
  3328   001BC8  EFDC  F00D         	goto	l2099
  3329   001BCC                     u1890:
  3330   001BCC                     
  3331                           ;i2c.c: 76:  I2C_delay();
  3332   001BCC  EC03  F00F         	call	_I2C_delay	;wreg free
  3333   001BD0                     
  3334                           ;i2c.c: 77:  if (read_SDA() == 0) {
  3335   001BD0  EC55  F00D         	call	_read_SDA	;wreg free
  3336   001BD4                     
  3337                           ;i2c.c: 80:  I2C_delay();
  3338   001BD4  EC03  F00F         	call	_I2C_delay	;wreg free
  3339   001BD8                     
  3340                           ;i2c.c: 81:  started = 0;
  3341   001BD8  0E00               	movlw	0
  3342   001BDA  6E48               	movwf	_started^0,c
  3343   001BDC  0012               	return		;funcret
  3344   001BDE                     __end_of_i2c_stop:
  3345                           	callstack 0
  3346                           
  3347 ;; *************** function _i2c_start *****************
  3348 ;; Defined at:
  3349 ;;		line 52 in file "i2c.c"
  3350 ;; Parameters:    Size  Location     Type
  3351 ;;		None
  3352 ;; Auto vars:     Size  Location     Type
  3353 ;;		None
  3354 ;; Return value:  Size  Location     Type
  3355 ;;                  1    wreg      void 
  3356 ;; Registers used:
  3357 ;;		wreg, status,2, status,0, cstack
  3358 ;; Tracked objects:
  3359 ;;		On entry : 0/0
  3360 ;;		On exit  : 0/0
  3361 ;;		Unchanged: 0/0
  3362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3363 ;;      Params:         0       0       0       0       0       0       0       0       0
  3364 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3365 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3366 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3367 ;;Total ram usage:        0 bytes
  3368 ;; Hardware stack levels used: 1
  3369 ;; Hardware stack levels required when called: 2
  3370 ;; This function calls:
  3371 ;;		_I2C_delay
  3372 ;;		_clear_SCL
  3373 ;;		_clear_SDA
  3374 ;;		_read_SCL
  3375 ;;		_read_SDA
  3376 ;; This function is called by:
  3377 ;;		_i2cWriteByte
  3378 ;; This function uses a non-reentrant model
  3379 ;;
  3380                           
  3381                           	psect	text27
  3382   001A2C                     __ptext27:
  3383                           	callstack 0
  3384   001A2C                     _i2c_start:
  3385                           	callstack 24
  3386   001A2C                     
  3387                           ;i2c.c: 54:  if (started) {
  3388   001A2C  5048               	movf	_started^0,w,c
  3389   001A2E  B4D8               	btfsc	status,2,c
  3390   001A30  EF1C  F00D         	goto	u1871
  3391   001A34  EF1E  F00D         	goto	u1870
  3392   001A38                     u1871:
  3393   001A38  EF2E  F00D         	goto	l2085
  3394   001A3C                     u1870:
  3395   001A3C                     
  3396                           ;i2c.c: 55:   read_SDA();
  3397   001A3C  EC55  F00D         	call	_read_SDA	;wreg free
  3398   001A40                     
  3399                           ;i2c.c: 56:   I2C_delay();
  3400   001A40  EC03  F00F         	call	_I2C_delay	;wreg free
  3401   001A44                     l2081:
  3402   001A44  EC71  F00D         	call	_read_SCL	;wreg free
  3403   001A48  0900               	iorlw	0
  3404   001A4A  B4D8               	btfsc	status,2,c
  3405   001A4C  EF2A  F00D         	goto	u1881
  3406   001A50  EF2C  F00D         	goto	u1880
  3407   001A54                     u1881:
  3408   001A54  EF22  F00D         	goto	l2081
  3409   001A58                     u1880:
  3410   001A58                     
  3411                           ;i2c.c: 59:   I2C_delay();
  3412   001A58  EC03  F00F         	call	_I2C_delay	;wreg free
  3413   001A5C                     l2085:
  3414                           
  3415                           ;i2c.c: 61:  if (read_SDA() == 0) {
  3416   001A5C  EC55  F00D         	call	_read_SDA	;wreg free
  3417   001A60                     
  3418                           ;i2c.c: 65:  clear_SDA();
  3419   001A60  EC31  F00E         	call	_clear_SDA	;wreg free
  3420   001A64                     
  3421                           ;i2c.c: 66:  I2C_delay();
  3422   001A64  EC03  F00F         	call	_I2C_delay	;wreg free
  3423   001A68                     
  3424                           ;i2c.c: 67:  clear_SCL();
  3425   001A68  EC46  F00E         	call	_clear_SCL	;wreg free
  3426   001A6C                     
  3427                           ;i2c.c: 68:  started = 1;
  3428   001A6C  0E01               	movlw	1
  3429   001A6E  6E48               	movwf	_started^0,c
  3430   001A70  0012               	return		;funcret
  3431   001A72                     __end_of_i2c_start:
  3432                           	callstack 0
  3433                           
  3434 ;; *************** function _clear_SDA *****************
  3435 ;; Defined at:
  3436 ;;		line 45 in file "i2c.c"
  3437 ;; Parameters:    Size  Location     Type
  3438 ;;		None
  3439 ;; Auto vars:     Size  Location     Type
  3440 ;;		None
  3441 ;; Return value:  Size  Location     Type
  3442 ;;                  1    wreg      void 
  3443 ;; Registers used:
  3444 ;;		wreg, status,2, status,0, cstack
  3445 ;; Tracked objects:
  3446 ;;		On entry : 0/0
  3447 ;;		On exit  : 0/0
  3448 ;;		Unchanged: 0/0
  3449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3450 ;;      Params:         0       0       0       0       0       0       0       0       0
  3451 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3452 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3453 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3454 ;;Total ram usage:        0 bytes
  3455 ;; Hardware stack levels used: 1
  3456 ;; Hardware stack levels required when called: 1
  3457 ;; This function calls:
  3458 ;;		_digitalWrite
  3459 ;;		_pinMode
  3460 ;; This function is called by:
  3461 ;;		_i2c_start
  3462 ;;		_i2c_stop
  3463 ;;		_i2c_write_bit
  3464 ;; This function uses a non-reentrant model
  3465 ;;
  3466                           
  3467                           	psect	text28
  3468   001C62                     __ptext28:
  3469                           	callstack 0
  3470   001C62                     _clear_SDA:
  3471                           	callstack 24
  3472   001C62                     
  3473                           ;i2c.c: 47:  pinMode(PIN_B0,0);
  3474   001C62  0E00               	movlw	0
  3475   001C64  6E02               	movwf	(pinMode@pin+1)^0,c
  3476   001C66  0E08               	movlw	8
  3477   001C68  6E01               	movwf	pinMode@pin^0,c
  3478   001C6A  0E00               	movlw	0
  3479   001C6C  6E04               	movwf	(pinMode@type+1)^0,c
  3480   001C6E  0E00               	movlw	0
  3481   001C70  6E03               	movwf	pinMode@type^0,c
  3482   001C72  EC76  F005         	call	_pinMode	;wreg free
  3483                           
  3484                           ;i2c.c: 48:  digitalWrite(PIN_B0,0);
  3485   001C76  0E00               	movlw	0
  3486   001C78  6E02               	movwf	(digitalWrite@pin+1)^0,c
  3487   001C7A  0E08               	movlw	8
  3488   001C7C  6E01               	movwf	digitalWrite@pin^0,c
  3489   001C7E  0E00               	movlw	0
  3490   001C80  6E04               	movwf	(digitalWrite@value+1)^0,c
  3491   001C82  0E00               	movlw	0
  3492   001C84  6E03               	movwf	digitalWrite@value^0,c
  3493   001C86  EC9D  F006         	call	_digitalWrite	;wreg free
  3494   001C8A  0012               	return		;funcret
  3495   001C8C                     __end_of_clear_SDA:
  3496                           	callstack 0
  3497                           
  3498 ;; *************** function _i2c_read_bit *****************
  3499 ;; Defined at:
  3500 ;;		line 100 in file "i2c.c"
  3501 ;; Parameters:    Size  Location     Type
  3502 ;;		None
  3503 ;; Auto vars:     Size  Location     Type
  3504 ;;  bit             1    6[COMRAM] unsigned char 
  3505 ;; Return value:  Size  Location     Type
  3506 ;;                  1    wreg      unsigned char 
  3507 ;; Registers used:
  3508 ;;		wreg, status,2, status,0, cstack
  3509 ;; Tracked objects:
  3510 ;;		On entry : 0/0
  3511 ;;		On exit  : 0/0
  3512 ;;		Unchanged: 0/0
  3513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3514 ;;      Params:         0       0       0       0       0       0       0       0       0
  3515 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3516 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3517 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3518 ;;Total ram usage:        1 bytes
  3519 ;; Hardware stack levels used: 1
  3520 ;; Hardware stack levels required when called: 2
  3521 ;; This function calls:
  3522 ;;		_I2C_delay
  3523 ;;		_clear_SCL
  3524 ;;		_read_SCL
  3525 ;;		_read_SDA
  3526 ;; This function is called by:
  3527 ;;		_i2cWriteByte
  3528 ;;		_i2cReadByte
  3529 ;; This function uses a non-reentrant model
  3530 ;;
  3531                           
  3532                           	psect	text29
  3533   001B50                     __ptext29:
  3534                           	callstack 0
  3535   001B50                     _i2c_read_bit:
  3536                           	callstack 24
  3537   001B50                     
  3538                           ;i2c.c: 101:  unsigned char bit;;i2c.c: 102:  read_SDA();
  3539   001B50  EC55  F00D         	call	_read_SDA	;wreg free
  3540   001B54                     
  3541                           ;i2c.c: 103:  I2C_delay();
  3542   001B54  EC03  F00F         	call	_I2C_delay	;wreg free
  3543   001B58                     l2133:
  3544   001B58  EC71  F00D         	call	_read_SCL	;wreg free
  3545   001B5C  0900               	iorlw	0
  3546   001B5E  B4D8               	btfsc	status,2,c
  3547   001B60  EFB4  F00D         	goto	u1931
  3548   001B64  EFB6  F00D         	goto	u1930
  3549   001B68                     u1931:
  3550   001B68  EFAC  F00D         	goto	l2133
  3551   001B6C                     u1930:
  3552   001B6C                     
  3553                           ;i2c.c: 105:  bit = read_SDA();
  3554   001B6C  EC55  F00D         	call	_read_SDA	;wreg free
  3555   001B70  6E07               	movwf	i2c_read_bit@bit^0,c
  3556   001B72                     
  3557                           ;i2c.c: 106:  I2C_delay();
  3558   001B72  EC03  F00F         	call	_I2C_delay	;wreg free
  3559   001B76                     
  3560                           ;i2c.c: 107:  clear_SCL();
  3561   001B76  EC46  F00E         	call	_clear_SCL	;wreg free
  3562                           
  3563                           ;i2c.c: 108:  I2C_delay();
  3564   001B7A  EC03  F00F         	call	_I2C_delay	;wreg free
  3565   001B7E                     
  3566                           ;i2c.c: 109:  return bit;
  3567   001B7E  5007               	movf	i2c_read_bit@bit^0,w,c
  3568   001B80  0012               	return		;funcret
  3569   001B82                     __end_of_i2c_read_bit:
  3570                           	callstack 0
  3571                           
  3572 ;; *************** function _read_SDA *****************
  3573 ;; Defined at:
  3574 ;;		line 34 in file "i2c.c"
  3575 ;; Parameters:    Size  Location     Type
  3576 ;;		None
  3577 ;; Auto vars:     Size  Location     Type
  3578 ;;		None
  3579 ;; Return value:  Size  Location     Type
  3580 ;;                  1    wreg      unsigned char 
  3581 ;; Registers used:
  3582 ;;		wreg, status,2, status,0, cstack
  3583 ;; Tracked objects:
  3584 ;;		On entry : 0/0
  3585 ;;		On exit  : 0/0
  3586 ;;		Unchanged: 0/0
  3587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3588 ;;      Params:         0       0       0       0       0       0       0       0       0
  3589 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3590 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3591 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3592 ;;Total ram usage:        0 bytes
  3593 ;; Hardware stack levels used: 1
  3594 ;; Hardware stack levels required when called: 1
  3595 ;; This function calls:
  3596 ;;		_digitalRead
  3597 ;;		_pinMode
  3598 ;; This function is called by:
  3599 ;;		_i2c_start
  3600 ;;		_i2c_stop
  3601 ;;		_i2c_write_bit
  3602 ;;		_i2c_read_bit
  3603 ;; This function uses a non-reentrant model
  3604 ;;
  3605                           
  3606                           	psect	text30
  3607   001AAA                     __ptext30:
  3608                           	callstack 0
  3609   001AAA                     _read_SDA:
  3610                           	callstack 24
  3611   001AAA                     
  3612                           ;i2c.c: 36:  pinMode(PIN_B0,1);
  3613   001AAA  0E00               	movlw	0
  3614   001AAC  6E02               	movwf	(pinMode@pin+1)^0,c
  3615   001AAE  0E08               	movlw	8
  3616   001AB0  6E01               	movwf	pinMode@pin^0,c
  3617   001AB2  0E00               	movlw	0
  3618   001AB4  6E04               	movwf	(pinMode@type+1)^0,c
  3619   001AB6  0E01               	movlw	1
  3620   001AB8  6E03               	movwf	pinMode@type^0,c
  3621   001ABA  EC76  F005         	call	_pinMode	;wreg free
  3622                           
  3623                           ;i2c.c: 37:  return !!digitalRead(PIN_B0);
  3624   001ABE  0E00               	movlw	0
  3625   001AC0  6E02               	movwf	(digitalRead@pin+1)^0,c
  3626   001AC2  0E08               	movlw	8
  3627   001AC4  6E01               	movwf	digitalRead@pin^0,c
  3628   001AC6  EC81  F008         	call	_digitalRead	;wreg free
  3629   001ACA  5001               	movf	?_digitalRead^0,w,c
  3630   001ACC  1002               	iorwf	(?_digitalRead+1)^0,w,c
  3631   001ACE  A4D8               	btfss	status,2,c
  3632   001AD0  EF6C  F00D         	goto	u1851
  3633   001AD4  EF6F  F00D         	goto	u1850
  3634   001AD8                     u1851:
  3635   001AD8  0E01               	movlw	1
  3636   001ADA  EF70  F00D         	goto	u1860
  3637   001ADE                     u1850:
  3638   001ADE  0E00               	movlw	0
  3639   001AE0                     u1860:
  3640   001AE0  0012               	return		;funcret
  3641   001AE2                     __end_of_read_SDA:
  3642                           	callstack 0
  3643                           
  3644 ;; *************** function _read_SCL *****************
  3645 ;; Defined at:
  3646 ;;		line 29 in file "i2c.c"
  3647 ;; Parameters:    Size  Location     Type
  3648 ;;		None
  3649 ;; Auto vars:     Size  Location     Type
  3650 ;;		None
  3651 ;; Return value:  Size  Location     Type
  3652 ;;                  1    wreg      unsigned char 
  3653 ;; Registers used:
  3654 ;;		wreg, status,2, status,0, cstack
  3655 ;; Tracked objects:
  3656 ;;		On entry : 0/0
  3657 ;;		On exit  : 0/0
  3658 ;;		Unchanged: 0/0
  3659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3660 ;;      Params:         0       0       0       0       0       0       0       0       0
  3661 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3662 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3663 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3664 ;;Total ram usage:        0 bytes
  3665 ;; Hardware stack levels used: 1
  3666 ;; Hardware stack levels required when called: 1
  3667 ;; This function calls:
  3668 ;;		_digitalRead
  3669 ;;		_pinMode
  3670 ;; This function is called by:
  3671 ;;		_i2c_start
  3672 ;;		_i2c_stop
  3673 ;;		_i2c_write_bit
  3674 ;;		_i2c_read_bit
  3675 ;; This function uses a non-reentrant model
  3676 ;;
  3677                           
  3678                           	psect	text31
  3679   001AE2                     __ptext31:
  3680                           	callstack 0
  3681   001AE2                     _read_SCL:
  3682                           	callstack 24
  3683   001AE2                     
  3684                           ;i2c.c: 31:  pinMode(PIN_B1,1);
  3685   001AE2  0E00               	movlw	0
  3686   001AE4  6E02               	movwf	(pinMode@pin+1)^0,c
  3687   001AE6  0E09               	movlw	9
  3688   001AE8  6E01               	movwf	pinMode@pin^0,c
  3689   001AEA  0E00               	movlw	0
  3690   001AEC  6E04               	movwf	(pinMode@type+1)^0,c
  3691   001AEE  0E01               	movlw	1
  3692   001AF0  6E03               	movwf	pinMode@type^0,c
  3693   001AF2  EC76  F005         	call	_pinMode	;wreg free
  3694                           
  3695                           ;i2c.c: 32:  return !!digitalRead(PIN_B1);
  3696   001AF6  0E00               	movlw	0
  3697   001AF8  6E02               	movwf	(digitalRead@pin+1)^0,c
  3698   001AFA  0E09               	movlw	9
  3699   001AFC  6E01               	movwf	digitalRead@pin^0,c
  3700   001AFE  EC81  F008         	call	_digitalRead	;wreg free
  3701   001B02  5001               	movf	?_digitalRead^0,w,c
  3702   001B04  1002               	iorwf	(?_digitalRead+1)^0,w,c
  3703   001B06  A4D8               	btfss	status,2,c
  3704   001B08  EF88  F00D         	goto	u1831
  3705   001B0C  EF8B  F00D         	goto	u1830
  3706   001B10                     u1831:
  3707   001B10  0E01               	movlw	1
  3708   001B12  EF8C  F00D         	goto	u1840
  3709   001B16                     u1830:
  3710   001B16  0E00               	movlw	0
  3711   001B18                     u1840:
  3712   001B18  0012               	return		;funcret
  3713   001B1A                     __end_of_read_SCL:
  3714                           	callstack 0
  3715                           
  3716 ;; *************** function _digitalRead *****************
  3717 ;; Defined at:
  3718 ;;		line 39 in file "io.c"
  3719 ;; Parameters:    Size  Location     Type
  3720 ;;  pin             2    0[COMRAM] int 
  3721 ;; Auto vars:     Size  Location     Type
  3722 ;;		None
  3723 ;; Return value:  Size  Location     Type
  3724 ;;                  2    0[COMRAM] int 
  3725 ;; Registers used:
  3726 ;;		wreg, status,2, status,0
  3727 ;; Tracked objects:
  3728 ;;		On entry : 0/0
  3729 ;;		On exit  : 0/0
  3730 ;;		Unchanged: 0/0
  3731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3732 ;;      Params:         2       0       0       0       0       0       0       0       0
  3733 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3734 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3735 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3736 ;;Total ram usage:        5 bytes
  3737 ;; Hardware stack levels used: 1
  3738 ;; This function calls:
  3739 ;;		Nothing
  3740 ;; This function is called by:
  3741 ;;		_read_SCL
  3742 ;;		_read_SDA
  3743 ;; This function uses a non-reentrant model
  3744 ;;
  3745                           
  3746                           	psect	text32
  3747   001102                     __ptext32:
  3748                           	callstack 0
  3749   001102                     _digitalRead:
  3750                           	callstack 24
  3751   001102                     
  3752                           ;io.c: 40:     if(pin <8){
  3753   001102  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  3754   001104  EF8F  F008         	goto	u1530
  3755   001108  5002               	movf	(digitalRead@pin+1)^0,w,c
  3756   00110A  E107               	bnz	u1531
  3757   00110C  0E08               	movlw	8
  3758   00110E  5C01               	subwf	digitalRead@pin^0,w,c
  3759   001110  B0D8               	btfsc	status,0,c
  3760   001112  EF8D  F008         	goto	u1531
  3761   001116  EF8F  F008         	goto	u1530
  3762   00111A                     u1531:
  3763   00111A  EFA3  F008         	goto	l1991
  3764   00111E                     u1530:
  3765   00111E                     
  3766                           ;io.c: 41:         return ((PORTA) & (1<<(pin)));
  3767   00111E  C001  F003         	movff	digitalRead@pin,??_digitalRead
  3768   001122  0E01               	movlw	1
  3769   001124  6E04               	movwf	(??_digitalRead+1)^0,c
  3770   001126  2A03               	incf	??_digitalRead^0,f,c
  3771   001128  EF98  F008         	goto	u1544
  3772   00112C                     u1545:
  3773   00112C  90D8               	bcf	status,0,c
  3774   00112E  3604               	rlcf	(??_digitalRead+1)^0,f,c
  3775   001130                     u1544:
  3776   001130  2E03               	decfsz	??_digitalRead^0,f,c
  3777   001132  EF96  F008         	goto	u1545
  3778   001136  5004               	movf	(??_digitalRead+1)^0,w,c
  3779   001138  1480               	andwf	128,w,c	;volatile
  3780   00113A  6E05               	movwf	(??_digitalRead+2)^0,c
  3781   00113C  5005               	movf	(??_digitalRead+2)^0,w,c
  3782   00113E  6E01               	movwf	?_digitalRead^0,c
  3783   001140  6A02               	clrf	(?_digitalRead+1)^0,c
  3784   001142  EF35  F009         	goto	l301
  3785   001146                     l1991:
  3786   001146  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  3787   001148  EFB1  F008         	goto	u1550
  3788   00114C  5002               	movf	(digitalRead@pin+1)^0,w,c
  3789   00114E  E107               	bnz	u1551
  3790   001150  0E10               	movlw	16
  3791   001152  5C01               	subwf	digitalRead@pin^0,w,c
  3792   001154  B0D8               	btfsc	status,0,c
  3793   001156  EFAF  F008         	goto	u1551
  3794   00115A  EFB1  F008         	goto	u1550
  3795   00115E                     u1551:
  3796   00115E  EFC7  F008         	goto	l1999
  3797   001162                     u1550:
  3798   001162                     
  3799                           ;io.c: 43:         return ((PORTB) & (1<<(pin-8)));
  3800   001162  C001  F003         	movff	digitalRead@pin,??_digitalRead
  3801   001166  0EF8               	movlw	-8
  3802   001168  2603               	addwf	??_digitalRead^0,f,c
  3803   00116A  0E01               	movlw	1
  3804   00116C  6E04               	movwf	(??_digitalRead+1)^0,c
  3805   00116E  2A03               	incf	??_digitalRead^0,f,c
  3806   001170  EFBC  F008         	goto	u1564
  3807   001174                     u1565:
  3808   001174  90D8               	bcf	status,0,c
  3809   001176  3604               	rlcf	(??_digitalRead+1)^0,f,c
  3810   001178                     u1564:
  3811   001178  2E03               	decfsz	??_digitalRead^0,f,c
  3812   00117A  EFBA  F008         	goto	u1565
  3813   00117E  5004               	movf	(??_digitalRead+1)^0,w,c
  3814   001180  1481               	andwf	129,w,c	;volatile
  3815   001182  6E05               	movwf	(??_digitalRead+2)^0,c
  3816   001184  5005               	movf	(??_digitalRead+2)^0,w,c
  3817   001186  6E01               	movwf	?_digitalRead^0,c
  3818   001188  6A02               	clrf	(?_digitalRead+1)^0,c
  3819   00118A  EF35  F009         	goto	l301
  3820   00118E                     l1999:
  3821   00118E  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  3822   001190  EFD5  F008         	goto	u1570
  3823   001194  5002               	movf	(digitalRead@pin+1)^0,w,c
  3824   001196  E107               	bnz	u1571
  3825   001198  0E18               	movlw	24
  3826   00119A  5C01               	subwf	digitalRead@pin^0,w,c
  3827   00119C  B0D8               	btfsc	status,0,c
  3828   00119E  EFD3  F008         	goto	u1571
  3829   0011A2  EFD5  F008         	goto	u1570
  3830   0011A6                     u1571:
  3831   0011A6  EFEB  F008         	goto	l2007
  3832   0011AA                     u1570:
  3833   0011AA                     
  3834                           ;io.c: 45:         return ((PORTC) & (1<<(pin-16)));
  3835   0011AA  C001  F003         	movff	digitalRead@pin,??_digitalRead
  3836   0011AE  0EF0               	movlw	-16
  3837   0011B0  2603               	addwf	??_digitalRead^0,f,c
  3838   0011B2  0E01               	movlw	1
  3839   0011B4  6E04               	movwf	(??_digitalRead+1)^0,c
  3840   0011B6  2A03               	incf	??_digitalRead^0,f,c
  3841   0011B8  EFE0  F008         	goto	u1584
  3842   0011BC                     u1585:
  3843   0011BC  90D8               	bcf	status,0,c
  3844   0011BE  3604               	rlcf	(??_digitalRead+1)^0,f,c
  3845   0011C0                     u1584:
  3846   0011C0  2E03               	decfsz	??_digitalRead^0,f,c
  3847   0011C2  EFDE  F008         	goto	u1585
  3848   0011C6  5004               	movf	(??_digitalRead+1)^0,w,c
  3849   0011C8  1482               	andwf	130,w,c	;volatile
  3850   0011CA  6E05               	movwf	(??_digitalRead+2)^0,c
  3851   0011CC  5005               	movf	(??_digitalRead+2)^0,w,c
  3852   0011CE  6E01               	movwf	?_digitalRead^0,c
  3853   0011D0  6A02               	clrf	(?_digitalRead+1)^0,c
  3854   0011D2  EF35  F009         	goto	l301
  3855   0011D6                     l2007:
  3856   0011D6  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  3857   0011D8  EFF9  F008         	goto	u1590
  3858   0011DC  5002               	movf	(digitalRead@pin+1)^0,w,c
  3859   0011DE  E107               	bnz	u1591
  3860   0011E0  0E20               	movlw	32
  3861   0011E2  5C01               	subwf	digitalRead@pin^0,w,c
  3862   0011E4  B0D8               	btfsc	status,0,c
  3863   0011E6  EFF7  F008         	goto	u1591
  3864   0011EA  EFF9  F008         	goto	u1590
  3865   0011EE                     u1591:
  3866   0011EE  EF0F  F009         	goto	l2015
  3867   0011F2                     u1590:
  3868   0011F2                     
  3869                           ;io.c: 47:         return ((PORTD) & (1<<(pin-24)));
  3870   0011F2  C001  F003         	movff	digitalRead@pin,??_digitalRead
  3871   0011F6  0EE8               	movlw	-24
  3872   0011F8  2603               	addwf	??_digitalRead^0,f,c
  3873   0011FA  0E01               	movlw	1
  3874   0011FC  6E04               	movwf	(??_digitalRead+1)^0,c
  3875   0011FE  2A03               	incf	??_digitalRead^0,f,c
  3876   001200  EF04  F009         	goto	u1604
  3877   001204                     u1605:
  3878   001204  90D8               	bcf	status,0,c
  3879   001206  3604               	rlcf	(??_digitalRead+1)^0,f,c
  3880   001208                     u1604:
  3881   001208  2E03               	decfsz	??_digitalRead^0,f,c
  3882   00120A  EF02  F009         	goto	u1605
  3883   00120E  5004               	movf	(??_digitalRead+1)^0,w,c
  3884   001210  1483               	andwf	131,w,c	;volatile
  3885   001212  6E05               	movwf	(??_digitalRead+2)^0,c
  3886   001214  5005               	movf	(??_digitalRead+2)^0,w,c
  3887   001216  6E01               	movwf	?_digitalRead^0,c
  3888   001218  6A02               	clrf	(?_digitalRead+1)^0,c
  3889   00121A  EF35  F009         	goto	l301
  3890   00121E                     l2015:
  3891   00121E  BE02               	btfsc	(digitalRead@pin+1)^0,7,c
  3892   001220  EF1D  F009         	goto	u1610
  3893   001224  5002               	movf	(digitalRead@pin+1)^0,w,c
  3894   001226  E107               	bnz	u1611
  3895   001228  0E28               	movlw	40
  3896   00122A  5C01               	subwf	digitalRead@pin^0,w,c
  3897   00122C  B0D8               	btfsc	status,0,c
  3898   00122E  EF1B  F009         	goto	u1611
  3899   001232  EF1D  F009         	goto	u1610
  3900   001236                     u1611:
  3901   001236  EF33  F009         	goto	l306
  3902   00123A                     u1610:
  3903   00123A                     
  3904                           ;io.c: 49:         return ((PORTE) & (1<<(pin-32)));
  3905   00123A  C001  F003         	movff	digitalRead@pin,??_digitalRead
  3906   00123E  0EE0               	movlw	-32
  3907   001240  2603               	addwf	??_digitalRead^0,f,c
  3908   001242  0E01               	movlw	1
  3909   001244  6E04               	movwf	(??_digitalRead+1)^0,c
  3910   001246  2A03               	incf	??_digitalRead^0,f,c
  3911   001248  EF28  F009         	goto	u1624
  3912   00124C                     u1625:
  3913   00124C  90D8               	bcf	status,0,c
  3914   00124E  3604               	rlcf	(??_digitalRead+1)^0,f,c
  3915   001250                     u1624:
  3916   001250  2E03               	decfsz	??_digitalRead^0,f,c
  3917   001252  EF26  F009         	goto	u1625
  3918   001256  5004               	movf	(??_digitalRead+1)^0,w,c
  3919   001258  1484               	andwf	132,w,c	;volatile
  3920   00125A  6E05               	movwf	(??_digitalRead+2)^0,c
  3921   00125C  5005               	movf	(??_digitalRead+2)^0,w,c
  3922   00125E  6E01               	movwf	?_digitalRead^0,c
  3923   001260  6A02               	clrf	(?_digitalRead+1)^0,c
  3924   001262  EF35  F009         	goto	l301
  3925   001266                     l306:
  3926   001266                     
  3927                           ;io.c: 51:     return -1;
  3928   001266  6801               	setf	?_digitalRead^0,c
  3929   001268  6802               	setf	(?_digitalRead+1)^0,c
  3930   00126A                     l301:
  3931   00126A  0012               	return		;funcret
  3932   00126C                     __end_of_digitalRead:
  3933                           	callstack 0
  3934                           
  3935 ;; *************** function _clear_SCL *****************
  3936 ;; Defined at:
  3937 ;;		line 39 in file "i2c.c"
  3938 ;; Parameters:    Size  Location     Type
  3939 ;;		None
  3940 ;; Auto vars:     Size  Location     Type
  3941 ;;		None
  3942 ;; Return value:  Size  Location     Type
  3943 ;;                  1    wreg      void 
  3944 ;; Registers used:
  3945 ;;		wreg, status,2, status,0, cstack
  3946 ;; Tracked objects:
  3947 ;;		On entry : 0/0
  3948 ;;		On exit  : 0/0
  3949 ;;		Unchanged: 0/0
  3950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3951 ;;      Params:         0       0       0       0       0       0       0       0       0
  3952 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3953 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3954 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3955 ;;Total ram usage:        0 bytes
  3956 ;; Hardware stack levels used: 1
  3957 ;; Hardware stack levels required when called: 1
  3958 ;; This function calls:
  3959 ;;		_digitalWrite
  3960 ;;		_pinMode
  3961 ;; This function is called by:
  3962 ;;		_i2c_start
  3963 ;;		_i2c_write_bit
  3964 ;;		_i2c_read_bit
  3965 ;; This function uses a non-reentrant model
  3966 ;;
  3967                           
  3968                           	psect	text33
  3969   001C8C                     __ptext33:
  3970                           	callstack 0
  3971   001C8C                     _clear_SCL:
  3972                           	callstack 24
  3973   001C8C                     
  3974                           ;i2c.c: 41:  pinMode(PIN_B1,0);
  3975   001C8C  0E00               	movlw	0
  3976   001C8E  6E02               	movwf	(pinMode@pin+1)^0,c
  3977   001C90  0E09               	movlw	9
  3978   001C92  6E01               	movwf	pinMode@pin^0,c
  3979   001C94  0E00               	movlw	0
  3980   001C96  6E04               	movwf	(pinMode@type+1)^0,c
  3981   001C98  0E00               	movlw	0
  3982   001C9A  6E03               	movwf	pinMode@type^0,c
  3983   001C9C  EC76  F005         	call	_pinMode	;wreg free
  3984                           
  3985                           ;i2c.c: 42:  digitalWrite(PIN_B1,0);
  3986   001CA0  0E00               	movlw	0
  3987   001CA2  6E02               	movwf	(digitalWrite@pin+1)^0,c
  3988   001CA4  0E09               	movlw	9
  3989   001CA6  6E01               	movwf	digitalWrite@pin^0,c
  3990   001CA8  0E00               	movlw	0
  3991   001CAA  6E04               	movwf	(digitalWrite@value+1)^0,c
  3992   001CAC  0E00               	movlw	0
  3993   001CAE  6E03               	movwf	digitalWrite@value^0,c
  3994   001CB0  EC9D  F006         	call	_digitalWrite	;wreg free
  3995   001CB4  0012               	return		;funcret
  3996   001CB6                     __end_of_clear_SCL:
  3997                           	callstack 0
  3998                           
  3999 ;; *************** function _pinMode *****************
  4000 ;; Defined at:
  4001 ;;		line 54 in file "io.c"
  4002 ;; Parameters:    Size  Location     Type
  4003 ;;  pin             2    0[COMRAM] int 
  4004 ;;  type            2    2[COMRAM] int 
  4005 ;; Auto vars:     Size  Location     Type
  4006 ;;		None
  4007 ;; Return value:  Size  Location     Type
  4008 ;;                  1    wreg      void 
  4009 ;; Registers used:
  4010 ;;		wreg, status,2, status,0
  4011 ;; Tracked objects:
  4012 ;;		On entry : 0/0
  4013 ;;		On exit  : 0/0
  4014 ;;		Unchanged: 0/0
  4015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4016 ;;      Params:         4       0       0       0       0       0       0       0       0
  4017 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4018 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4019 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4020 ;;Total ram usage:        6 bytes
  4021 ;; Hardware stack levels used: 1
  4022 ;; This function calls:
  4023 ;;		Nothing
  4024 ;; This function is called by:
  4025 ;;		_i2cInit
  4026 ;;		_read_SCL
  4027 ;;		_read_SDA
  4028 ;;		_clear_SCL
  4029 ;;		_clear_SDA
  4030 ;; This function uses a non-reentrant model
  4031 ;;
  4032                           
  4033                           	psect	text34
  4034   000AEC                     __ptext34:
  4035                           	callstack 0
  4036   000AEC                     _pinMode:
  4037                           	callstack 24
  4038   000AEC                     
  4039                           ;io.c: 56:     if(pin <8){
  4040   000AEC  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  4041   000AEE  EF84  F005         	goto	u1330
  4042   000AF2  5002               	movf	(pinMode@pin+1)^0,w,c
  4043   000AF4  E107               	bnz	u1331
  4044   000AF6  0E08               	movlw	8
  4045   000AF8  5C01               	subwf	pinMode@pin^0,w,c
  4046   000AFA  B0D8               	btfsc	status,0,c
  4047   000AFC  EF82  F005         	goto	u1331
  4048   000B00  EF84  F005         	goto	u1330
  4049   000B04                     u1331:
  4050   000B04  EFAE  F005         	goto	l1951
  4051   000B08                     u1330:
  4052   000B08                     
  4053                           ;io.c: 57:         if (type){ ((TRISA) |= (1<<(pin)));}
  4054   000B08  5003               	movf	pinMode@type^0,w,c
  4055   000B0A  1004               	iorwf	(pinMode@type+1)^0,w,c
  4056   000B0C  B4D8               	btfsc	status,2,c
  4057   000B0E  EF8B  F005         	goto	u1341
  4058   000B12  EF8D  F005         	goto	u1340
  4059   000B16                     u1341:
  4060   000B16  EF9D  F005         	goto	l1949
  4061   000B1A                     u1340:
  4062   000B1A  C001  F005         	movff	pinMode@pin,??_pinMode
  4063   000B1E  0E01               	movlw	1
  4064   000B20  6E06               	movwf	(??_pinMode+1)^0,c
  4065   000B22  2A05               	incf	??_pinMode^0,f,c
  4066   000B24  EF96  F005         	goto	u1354
  4067   000B28                     u1355:
  4068   000B28  90D8               	bcf	status,0,c
  4069   000B2A  3606               	rlcf	(??_pinMode+1)^0,f,c
  4070   000B2C                     u1354:
  4071   000B2C  2E05               	decfsz	??_pinMode^0,f,c
  4072   000B2E  EF94  F005         	goto	u1355
  4073   000B32  5006               	movf	(??_pinMode+1)^0,w,c
  4074   000B34  1292               	iorwf	146,f,c	;volatile
  4075   000B36  EF9C  F006         	goto	l331
  4076   000B3A                     l1949:
  4077   000B3A  C001  F005         	movff	pinMode@pin,??_pinMode
  4078   000B3E  0E01               	movlw	1
  4079   000B40  6E06               	movwf	(??_pinMode+1)^0,c
  4080   000B42  2A05               	incf	??_pinMode^0,f,c
  4081   000B44  EFA6  F005         	goto	u1364
  4082   000B48                     u1365:
  4083   000B48  90D8               	bcf	status,0,c
  4084   000B4A  3606               	rlcf	(??_pinMode+1)^0,f,c
  4085   000B4C                     u1364:
  4086   000B4C  2E05               	decfsz	??_pinMode^0,f,c
  4087   000B4E  EFA4  F005         	goto	u1365
  4088   000B52  5006               	movf	(??_pinMode+1)^0,w,c
  4089   000B54  0AFF               	xorlw	255
  4090   000B56  1692               	andwf	146,f,c	;volatile
  4091   000B58  EF9C  F006         	goto	l331
  4092   000B5C                     l1951:
  4093   000B5C  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  4094   000B5E  EFBC  F005         	goto	u1370
  4095   000B62  5002               	movf	(pinMode@pin+1)^0,w,c
  4096   000B64  E107               	bnz	u1371
  4097   000B66  0E10               	movlw	16
  4098   000B68  5C01               	subwf	pinMode@pin^0,w,c
  4099   000B6A  B0D8               	btfsc	status,0,c
  4100   000B6C  EFBA  F005         	goto	u1371
  4101   000B70  EFBC  F005         	goto	u1370
  4102   000B74                     u1371:
  4103   000B74  EFEA  F005         	goto	l1959
  4104   000B78                     u1370:
  4105   000B78                     
  4106                           ;io.c: 60:         if (type){ ((TRISB) |= (1<<(pin-8)));}
  4107   000B78  5003               	movf	pinMode@type^0,w,c
  4108   000B7A  1004               	iorwf	(pinMode@type+1)^0,w,c
  4109   000B7C  B4D8               	btfsc	status,2,c
  4110   000B7E  EFC3  F005         	goto	u1381
  4111   000B82  EFC5  F005         	goto	u1380
  4112   000B86                     u1381:
  4113   000B86  EFD7  F005         	goto	l1957
  4114   000B8A                     u1380:
  4115   000B8A  C001  F005         	movff	pinMode@pin,??_pinMode
  4116   000B8E  0EF8               	movlw	-8
  4117   000B90  2605               	addwf	??_pinMode^0,f,c
  4118   000B92  0E01               	movlw	1
  4119   000B94  6E06               	movwf	(??_pinMode+1)^0,c
  4120   000B96  2A05               	incf	??_pinMode^0,f,c
  4121   000B98  EFD0  F005         	goto	u1394
  4122   000B9C                     u1395:
  4123   000B9C  90D8               	bcf	status,0,c
  4124   000B9E  3606               	rlcf	(??_pinMode+1)^0,f,c
  4125   000BA0                     u1394:
  4126   000BA0  2E05               	decfsz	??_pinMode^0,f,c
  4127   000BA2  EFCE  F005         	goto	u1395
  4128   000BA6  5006               	movf	(??_pinMode+1)^0,w,c
  4129   000BA8  1293               	iorwf	147,f,c	;volatile
  4130   000BAA  EF9C  F006         	goto	l331
  4131   000BAE                     l1957:
  4132   000BAE  C001  F005         	movff	pinMode@pin,??_pinMode
  4133   000BB2  0EF8               	movlw	-8
  4134   000BB4  2605               	addwf	??_pinMode^0,f,c
  4135   000BB6  0E01               	movlw	1
  4136   000BB8  6E06               	movwf	(??_pinMode+1)^0,c
  4137   000BBA  2A05               	incf	??_pinMode^0,f,c
  4138   000BBC  EFE2  F005         	goto	u1404
  4139   000BC0                     u1405:
  4140   000BC0  90D8               	bcf	status,0,c
  4141   000BC2  3606               	rlcf	(??_pinMode+1)^0,f,c
  4142   000BC4                     u1404:
  4143   000BC4  2E05               	decfsz	??_pinMode^0,f,c
  4144   000BC6  EFE0  F005         	goto	u1405
  4145   000BCA  5006               	movf	(??_pinMode+1)^0,w,c
  4146   000BCC  0AFF               	xorlw	255
  4147   000BCE  1693               	andwf	147,f,c	;volatile
  4148   000BD0  EF9C  F006         	goto	l331
  4149   000BD4                     l1959:
  4150   000BD4  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  4151   000BD6  EFF8  F005         	goto	u1410
  4152   000BDA  5002               	movf	(pinMode@pin+1)^0,w,c
  4153   000BDC  E107               	bnz	u1411
  4154   000BDE  0E18               	movlw	24
  4155   000BE0  5C01               	subwf	pinMode@pin^0,w,c
  4156   000BE2  B0D8               	btfsc	status,0,c
  4157   000BE4  EFF6  F005         	goto	u1411
  4158   000BE8  EFF8  F005         	goto	u1410
  4159   000BEC                     u1411:
  4160   000BEC  EF26  F006         	goto	l1967
  4161   000BF0                     u1410:
  4162   000BF0                     
  4163                           ;io.c: 63:         if (type){ ((TRISC) |= (1<<(pin-16)));}
  4164   000BF0  5003               	movf	pinMode@type^0,w,c
  4165   000BF2  1004               	iorwf	(pinMode@type+1)^0,w,c
  4166   000BF4  B4D8               	btfsc	status,2,c
  4167   000BF6  EFFF  F005         	goto	u1421
  4168   000BFA  EF01  F006         	goto	u1420
  4169   000BFE                     u1421:
  4170   000BFE  EF13  F006         	goto	l1965
  4171   000C02                     u1420:
  4172   000C02  C001  F005         	movff	pinMode@pin,??_pinMode
  4173   000C06  0EF0               	movlw	-16
  4174   000C08  2605               	addwf	??_pinMode^0,f,c
  4175   000C0A  0E01               	movlw	1
  4176   000C0C  6E06               	movwf	(??_pinMode+1)^0,c
  4177   000C0E  2A05               	incf	??_pinMode^0,f,c
  4178   000C10  EF0C  F006         	goto	u1434
  4179   000C14                     u1435:
  4180   000C14  90D8               	bcf	status,0,c
  4181   000C16  3606               	rlcf	(??_pinMode+1)^0,f,c
  4182   000C18                     u1434:
  4183   000C18  2E05               	decfsz	??_pinMode^0,f,c
  4184   000C1A  EF0A  F006         	goto	u1435
  4185   000C1E  5006               	movf	(??_pinMode+1)^0,w,c
  4186   000C20  1294               	iorwf	148,f,c	;volatile
  4187   000C22  EF9C  F006         	goto	l331
  4188   000C26                     l1965:
  4189   000C26  C001  F005         	movff	pinMode@pin,??_pinMode
  4190   000C2A  0EF0               	movlw	-16
  4191   000C2C  2605               	addwf	??_pinMode^0,f,c
  4192   000C2E  0E01               	movlw	1
  4193   000C30  6E06               	movwf	(??_pinMode+1)^0,c
  4194   000C32  2A05               	incf	??_pinMode^0,f,c
  4195   000C34  EF1E  F006         	goto	u1444
  4196   000C38                     u1445:
  4197   000C38  90D8               	bcf	status,0,c
  4198   000C3A  3606               	rlcf	(??_pinMode+1)^0,f,c
  4199   000C3C                     u1444:
  4200   000C3C  2E05               	decfsz	??_pinMode^0,f,c
  4201   000C3E  EF1C  F006         	goto	u1445
  4202   000C42  5006               	movf	(??_pinMode+1)^0,w,c
  4203   000C44  0AFF               	xorlw	255
  4204   000C46  1694               	andwf	148,f,c	;volatile
  4205   000C48  EF9C  F006         	goto	l331
  4206   000C4C                     l1967:
  4207   000C4C  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  4208   000C4E  EF34  F006         	goto	u1450
  4209   000C52  5002               	movf	(pinMode@pin+1)^0,w,c
  4210   000C54  E107               	bnz	u1451
  4211   000C56  0E20               	movlw	32
  4212   000C58  5C01               	subwf	pinMode@pin^0,w,c
  4213   000C5A  B0D8               	btfsc	status,0,c
  4214   000C5C  EF32  F006         	goto	u1451
  4215   000C60  EF34  F006         	goto	u1450
  4216   000C64                     u1451:
  4217   000C64  EF62  F006         	goto	l1975
  4218   000C68                     u1450:
  4219   000C68                     
  4220                           ;io.c: 66:         if (type){ ((TRISD) |= (1<<(pin-24)));}
  4221   000C68  5003               	movf	pinMode@type^0,w,c
  4222   000C6A  1004               	iorwf	(pinMode@type+1)^0,w,c
  4223   000C6C  B4D8               	btfsc	status,2,c
  4224   000C6E  EF3B  F006         	goto	u1461
  4225   000C72  EF3D  F006         	goto	u1460
  4226   000C76                     u1461:
  4227   000C76  EF4F  F006         	goto	l1973
  4228   000C7A                     u1460:
  4229   000C7A  C001  F005         	movff	pinMode@pin,??_pinMode
  4230   000C7E  0EE8               	movlw	-24
  4231   000C80  2605               	addwf	??_pinMode^0,f,c
  4232   000C82  0E01               	movlw	1
  4233   000C84  6E06               	movwf	(??_pinMode+1)^0,c
  4234   000C86  2A05               	incf	??_pinMode^0,f,c
  4235   000C88  EF48  F006         	goto	u1474
  4236   000C8C                     u1475:
  4237   000C8C  90D8               	bcf	status,0,c
  4238   000C8E  3606               	rlcf	(??_pinMode+1)^0,f,c
  4239   000C90                     u1474:
  4240   000C90  2E05               	decfsz	??_pinMode^0,f,c
  4241   000C92  EF46  F006         	goto	u1475
  4242   000C96  5006               	movf	(??_pinMode+1)^0,w,c
  4243   000C98  1295               	iorwf	149,f,c	;volatile
  4244   000C9A  EF9C  F006         	goto	l331
  4245   000C9E                     l1973:
  4246   000C9E  C001  F005         	movff	pinMode@pin,??_pinMode
  4247   000CA2  0EE8               	movlw	-24
  4248   000CA4  2605               	addwf	??_pinMode^0,f,c
  4249   000CA6  0E01               	movlw	1
  4250   000CA8  6E06               	movwf	(??_pinMode+1)^0,c
  4251   000CAA  2A05               	incf	??_pinMode^0,f,c
  4252   000CAC  EF5A  F006         	goto	u1484
  4253   000CB0                     u1485:
  4254   000CB0  90D8               	bcf	status,0,c
  4255   000CB2  3606               	rlcf	(??_pinMode+1)^0,f,c
  4256   000CB4                     u1484:
  4257   000CB4  2E05               	decfsz	??_pinMode^0,f,c
  4258   000CB6  EF58  F006         	goto	u1485
  4259   000CBA  5006               	movf	(??_pinMode+1)^0,w,c
  4260   000CBC  0AFF               	xorlw	255
  4261   000CBE  1695               	andwf	149,f,c	;volatile
  4262   000CC0  EF9C  F006         	goto	l331
  4263   000CC4                     l1975:
  4264   000CC4  BE02               	btfsc	(pinMode@pin+1)^0,7,c
  4265   000CC6  EF70  F006         	goto	u1490
  4266   000CCA  5002               	movf	(pinMode@pin+1)^0,w,c
  4267   000CCC  E107               	bnz	u1491
  4268   000CCE  0E28               	movlw	40
  4269   000CD0  5C01               	subwf	pinMode@pin^0,w,c
  4270   000CD2  B0D8               	btfsc	status,0,c
  4271   000CD4  EF6E  F006         	goto	u1491
  4272   000CD8  EF70  F006         	goto	u1490
  4273   000CDC                     u1491:
  4274   000CDC  EF9C  F006         	goto	l331
  4275   000CE0                     u1490:
  4276   000CE0                     
  4277                           ;io.c: 69:         if (type){ ((TRISE) |= (1<<(pin-32)));}
  4278   000CE0  5003               	movf	pinMode@type^0,w,c
  4279   000CE2  1004               	iorwf	(pinMode@type+1)^0,w,c
  4280   000CE4  B4D8               	btfsc	status,2,c
  4281   000CE6  EF77  F006         	goto	u1501
  4282   000CEA  EF79  F006         	goto	u1500
  4283   000CEE                     u1501:
  4284   000CEE  EF8B  F006         	goto	l1981
  4285   000CF2                     u1500:
  4286   000CF2  C001  F005         	movff	pinMode@pin,??_pinMode
  4287   000CF6  0EE0               	movlw	-32
  4288   000CF8  2605               	addwf	??_pinMode^0,f,c
  4289   000CFA  0E01               	movlw	1
  4290   000CFC  6E06               	movwf	(??_pinMode+1)^0,c
  4291   000CFE  2A05               	incf	??_pinMode^0,f,c
  4292   000D00  EF84  F006         	goto	u1514
  4293   000D04                     u1515:
  4294   000D04  90D8               	bcf	status,0,c
  4295   000D06  3606               	rlcf	(??_pinMode+1)^0,f,c
  4296   000D08                     u1514:
  4297   000D08  2E05               	decfsz	??_pinMode^0,f,c
  4298   000D0A  EF82  F006         	goto	u1515
  4299   000D0E  5006               	movf	(??_pinMode+1)^0,w,c
  4300   000D10  1296               	iorwf	150,f,c	;volatile
  4301   000D12  EF9C  F006         	goto	l331
  4302   000D16                     l1981:
  4303   000D16  C001  F005         	movff	pinMode@pin,??_pinMode
  4304   000D1A  0EE0               	movlw	-32
  4305   000D1C  2605               	addwf	??_pinMode^0,f,c
  4306   000D1E  0E01               	movlw	1
  4307   000D20  6E06               	movwf	(??_pinMode+1)^0,c
  4308   000D22  2A05               	incf	??_pinMode^0,f,c
  4309   000D24  EF96  F006         	goto	u1524
  4310   000D28                     u1525:
  4311   000D28  90D8               	bcf	status,0,c
  4312   000D2A  3606               	rlcf	(??_pinMode+1)^0,f,c
  4313   000D2C                     u1524:
  4314   000D2C  2E05               	decfsz	??_pinMode^0,f,c
  4315   000D2E  EF94  F006         	goto	u1525
  4316   000D32  5006               	movf	(??_pinMode+1)^0,w,c
  4317   000D34  0AFF               	xorlw	255
  4318   000D36  1696               	andwf	150,f,c	;volatile
  4319   000D38                     l331:
  4320   000D38  0012               	return		;funcret
  4321   000D3A                     __end_of_pinMode:
  4322                           	callstack 0
  4323                           
  4324 ;; *************** function _digitalWrite *****************
  4325 ;; Defined at:
  4326 ;;		line 14 in file "io.c"
  4327 ;; Parameters:    Size  Location     Type
  4328 ;;  pin             2    0[COMRAM] int 
  4329 ;;  value           2    2[COMRAM] int 
  4330 ;; Auto vars:     Size  Location     Type
  4331 ;;		None
  4332 ;; Return value:  Size  Location     Type
  4333 ;;                  1    wreg      void 
  4334 ;; Registers used:
  4335 ;;		wreg, status,2, status,0
  4336 ;; Tracked objects:
  4337 ;;		On entry : 0/0
  4338 ;;		On exit  : 0/0
  4339 ;;		Unchanged: 0/0
  4340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4341 ;;      Params:         4       0       0       0       0       0       0       0       0
  4342 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4343 ;;      Temps:          2       0       0       0       0       0       0       0       0
  4344 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4345 ;;Total ram usage:        6 bytes
  4346 ;; Hardware stack levels used: 1
  4347 ;; This function calls:
  4348 ;;		Nothing
  4349 ;; This function is called by:
  4350 ;;		_clear_SCL
  4351 ;;		_clear_SDA
  4352 ;; This function uses a non-reentrant model
  4353 ;;
  4354                           
  4355                           	psect	text35
  4356   000D3A                     __ptext35:
  4357                           	callstack 0
  4358   000D3A                     _digitalWrite:
  4359                           	callstack 24
  4360   000D3A                     
  4361                           ;io.c: 16:     if(pin <8){
  4362   000D3A  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  4363   000D3C  EFAB  F006         	goto	u1630
  4364   000D40  5002               	movf	(digitalWrite@pin+1)^0,w,c
  4365   000D42  E107               	bnz	u1631
  4366   000D44  0E08               	movlw	8
  4367   000D46  5C01               	subwf	digitalWrite@pin^0,w,c
  4368   000D48  B0D8               	btfsc	status,0,c
  4369   000D4A  EFA9  F006         	goto	u1631
  4370   000D4E  EFAB  F006         	goto	u1630
  4371   000D52                     u1631:
  4372   000D52  EFD5  F006         	goto	l2029
  4373   000D56                     u1630:
  4374   000D56                     
  4375                           ;io.c: 17:         if (value){ ((PORTA) |= (1<<(pin)));}
  4376   000D56  5003               	movf	digitalWrite@value^0,w,c
  4377   000D58  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  4378   000D5A  B4D8               	btfsc	status,2,c
  4379   000D5C  EFB2  F006         	goto	u1641
  4380   000D60  EFB4  F006         	goto	u1640
  4381   000D64                     u1641:
  4382   000D64  EFC4  F006         	goto	l2027
  4383   000D68                     u1640:
  4384   000D68  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4385   000D6C  0E01               	movlw	1
  4386   000D6E  6E06               	movwf	(??_digitalWrite+1)^0,c
  4387   000D70  2A05               	incf	??_digitalWrite^0,f,c
  4388   000D72  EFBD  F006         	goto	u1654
  4389   000D76                     u1655:
  4390   000D76  90D8               	bcf	status,0,c
  4391   000D78  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4392   000D7A                     u1654:
  4393   000D7A  2E05               	decfsz	??_digitalWrite^0,f,c
  4394   000D7C  EFBB  F006         	goto	u1655
  4395   000D80  5006               	movf	(??_digitalWrite+1)^0,w,c
  4396   000D82  1280               	iorwf	128,f,c	;volatile
  4397   000D84  EFC3  F007         	goto	l297
  4398   000D88                     l2027:
  4399   000D88  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4400   000D8C  0E01               	movlw	1
  4401   000D8E  6E06               	movwf	(??_digitalWrite+1)^0,c
  4402   000D90  2A05               	incf	??_digitalWrite^0,f,c
  4403   000D92  EFCD  F006         	goto	u1664
  4404   000D96                     u1665:
  4405   000D96  90D8               	bcf	status,0,c
  4406   000D98  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4407   000D9A                     u1664:
  4408   000D9A  2E05               	decfsz	??_digitalWrite^0,f,c
  4409   000D9C  EFCB  F006         	goto	u1665
  4410   000DA0  5006               	movf	(??_digitalWrite+1)^0,w,c
  4411   000DA2  0AFF               	xorlw	255
  4412   000DA4  1680               	andwf	128,f,c	;volatile
  4413   000DA6  EFC3  F007         	goto	l297
  4414   000DAA                     l2029:
  4415   000DAA  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  4416   000DAC  EFE3  F006         	goto	u1670
  4417   000DB0  5002               	movf	(digitalWrite@pin+1)^0,w,c
  4418   000DB2  E107               	bnz	u1671
  4419   000DB4  0E10               	movlw	16
  4420   000DB6  5C01               	subwf	digitalWrite@pin^0,w,c
  4421   000DB8  B0D8               	btfsc	status,0,c
  4422   000DBA  EFE1  F006         	goto	u1671
  4423   000DBE  EFE3  F006         	goto	u1670
  4424   000DC2                     u1671:
  4425   000DC2  EF11  F007         	goto	l2037
  4426   000DC6                     u1670:
  4427   000DC6                     
  4428                           ;io.c: 20:         pin -=8;
  4429   000DC6  0EF8               	movlw	248
  4430   000DC8  2601               	addwf	digitalWrite@pin^0,f,c
  4431   000DCA  0EFF               	movlw	255
  4432   000DCC  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  4433                           
  4434                           ;io.c: 21:         if (value){ ((PORTB) |= (1<<(pin)));}
  4435   000DCE  5003               	movf	digitalWrite@value^0,w,c
  4436   000DD0  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  4437   000DD2  B4D8               	btfsc	status,2,c
  4438   000DD4  EFEE  F006         	goto	u1681
  4439   000DD8  EFF0  F006         	goto	u1680
  4440   000DDC                     u1681:
  4441   000DDC  EF00  F007         	goto	l2035
  4442   000DE0                     u1680:
  4443   000DE0  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4444   000DE4  0E01               	movlw	1
  4445   000DE6  6E06               	movwf	(??_digitalWrite+1)^0,c
  4446   000DE8  2A05               	incf	??_digitalWrite^0,f,c
  4447   000DEA  EFF9  F006         	goto	u1694
  4448   000DEE                     u1695:
  4449   000DEE  90D8               	bcf	status,0,c
  4450   000DF0  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4451   000DF2                     u1694:
  4452   000DF2  2E05               	decfsz	??_digitalWrite^0,f,c
  4453   000DF4  EFF7  F006         	goto	u1695
  4454   000DF8  5006               	movf	(??_digitalWrite+1)^0,w,c
  4455   000DFA  1281               	iorwf	129,f,c	;volatile
  4456   000DFC  EFC3  F007         	goto	l297
  4457   000E00                     l2035:
  4458   000E00  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4459   000E04  0E01               	movlw	1
  4460   000E06  6E06               	movwf	(??_digitalWrite+1)^0,c
  4461   000E08  2A05               	incf	??_digitalWrite^0,f,c
  4462   000E0A  EF09  F007         	goto	u1704
  4463   000E0E                     u1705:
  4464   000E0E  90D8               	bcf	status,0,c
  4465   000E10  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4466   000E12                     u1704:
  4467   000E12  2E05               	decfsz	??_digitalWrite^0,f,c
  4468   000E14  EF07  F007         	goto	u1705
  4469   000E18  5006               	movf	(??_digitalWrite+1)^0,w,c
  4470   000E1A  0AFF               	xorlw	255
  4471   000E1C  1681               	andwf	129,f,c	;volatile
  4472   000E1E  EFC3  F007         	goto	l297
  4473   000E22                     l2037:
  4474   000E22  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  4475   000E24  EF1F  F007         	goto	u1710
  4476   000E28  5002               	movf	(digitalWrite@pin+1)^0,w,c
  4477   000E2A  E107               	bnz	u1711
  4478   000E2C  0E18               	movlw	24
  4479   000E2E  5C01               	subwf	digitalWrite@pin^0,w,c
  4480   000E30  B0D8               	btfsc	status,0,c
  4481   000E32  EF1D  F007         	goto	u1711
  4482   000E36  EF1F  F007         	goto	u1710
  4483   000E3A                     u1711:
  4484   000E3A  EF4D  F007         	goto	l2045
  4485   000E3E                     u1710:
  4486   000E3E                     
  4487                           ;io.c: 24:         pin -=16;
  4488   000E3E  0EF0               	movlw	240
  4489   000E40  2601               	addwf	digitalWrite@pin^0,f,c
  4490   000E42  0EFF               	movlw	255
  4491   000E44  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  4492                           
  4493                           ;io.c: 25:         if (value){ ((PORTC) |= (1<<(pin)));}
  4494   000E46  5003               	movf	digitalWrite@value^0,w,c
  4495   000E48  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  4496   000E4A  B4D8               	btfsc	status,2,c
  4497   000E4C  EF2A  F007         	goto	u1721
  4498   000E50  EF2C  F007         	goto	u1720
  4499   000E54                     u1721:
  4500   000E54  EF3C  F007         	goto	l2043
  4501   000E58                     u1720:
  4502   000E58  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4503   000E5C  0E01               	movlw	1
  4504   000E5E  6E06               	movwf	(??_digitalWrite+1)^0,c
  4505   000E60  2A05               	incf	??_digitalWrite^0,f,c
  4506   000E62  EF35  F007         	goto	u1734
  4507   000E66                     u1735:
  4508   000E66  90D8               	bcf	status,0,c
  4509   000E68  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4510   000E6A                     u1734:
  4511   000E6A  2E05               	decfsz	??_digitalWrite^0,f,c
  4512   000E6C  EF33  F007         	goto	u1735
  4513   000E70  5006               	movf	(??_digitalWrite+1)^0,w,c
  4514   000E72  1282               	iorwf	130,f,c	;volatile
  4515   000E74  EFC3  F007         	goto	l297
  4516   000E78                     l2043:
  4517   000E78  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4518   000E7C  0E01               	movlw	1
  4519   000E7E  6E06               	movwf	(??_digitalWrite+1)^0,c
  4520   000E80  2A05               	incf	??_digitalWrite^0,f,c
  4521   000E82  EF45  F007         	goto	u1744
  4522   000E86                     u1745:
  4523   000E86  90D8               	bcf	status,0,c
  4524   000E88  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4525   000E8A                     u1744:
  4526   000E8A  2E05               	decfsz	??_digitalWrite^0,f,c
  4527   000E8C  EF43  F007         	goto	u1745
  4528   000E90  5006               	movf	(??_digitalWrite+1)^0,w,c
  4529   000E92  0AFF               	xorlw	255
  4530   000E94  1682               	andwf	130,f,c	;volatile
  4531   000E96  EFC3  F007         	goto	l297
  4532   000E9A                     l2045:
  4533   000E9A  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  4534   000E9C  EF5B  F007         	goto	u1750
  4535   000EA0  5002               	movf	(digitalWrite@pin+1)^0,w,c
  4536   000EA2  E107               	bnz	u1751
  4537   000EA4  0E20               	movlw	32
  4538   000EA6  5C01               	subwf	digitalWrite@pin^0,w,c
  4539   000EA8  B0D8               	btfsc	status,0,c
  4540   000EAA  EF59  F007         	goto	u1751
  4541   000EAE  EF5B  F007         	goto	u1750
  4542   000EB2                     u1751:
  4543   000EB2  EF89  F007         	goto	l2053
  4544   000EB6                     u1750:
  4545   000EB6                     
  4546                           ;io.c: 28:         pin -=24;
  4547   000EB6  0EE8               	movlw	232
  4548   000EB8  2601               	addwf	digitalWrite@pin^0,f,c
  4549   000EBA  0EFF               	movlw	255
  4550   000EBC  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  4551                           
  4552                           ;io.c: 29:         if (value){ ((PORTD) |= (1<<(pin)));}
  4553   000EBE  5003               	movf	digitalWrite@value^0,w,c
  4554   000EC0  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  4555   000EC2  B4D8               	btfsc	status,2,c
  4556   000EC4  EF66  F007         	goto	u1761
  4557   000EC8  EF68  F007         	goto	u1760
  4558   000ECC                     u1761:
  4559   000ECC  EF78  F007         	goto	l2051
  4560   000ED0                     u1760:
  4561   000ED0  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4562   000ED4  0E01               	movlw	1
  4563   000ED6  6E06               	movwf	(??_digitalWrite+1)^0,c
  4564   000ED8  2A05               	incf	??_digitalWrite^0,f,c
  4565   000EDA  EF71  F007         	goto	u1774
  4566   000EDE                     u1775:
  4567   000EDE  90D8               	bcf	status,0,c
  4568   000EE0  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4569   000EE2                     u1774:
  4570   000EE2  2E05               	decfsz	??_digitalWrite^0,f,c
  4571   000EE4  EF6F  F007         	goto	u1775
  4572   000EE8  5006               	movf	(??_digitalWrite+1)^0,w,c
  4573   000EEA  1283               	iorwf	131,f,c	;volatile
  4574   000EEC  EFC3  F007         	goto	l297
  4575   000EF0                     l2051:
  4576   000EF0  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4577   000EF4  0E01               	movlw	1
  4578   000EF6  6E06               	movwf	(??_digitalWrite+1)^0,c
  4579   000EF8  2A05               	incf	??_digitalWrite^0,f,c
  4580   000EFA  EF81  F007         	goto	u1784
  4581   000EFE                     u1785:
  4582   000EFE  90D8               	bcf	status,0,c
  4583   000F00  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4584   000F02                     u1784:
  4585   000F02  2E05               	decfsz	??_digitalWrite^0,f,c
  4586   000F04  EF7F  F007         	goto	u1785
  4587   000F08  5006               	movf	(??_digitalWrite+1)^0,w,c
  4588   000F0A  0AFF               	xorlw	255
  4589   000F0C  1683               	andwf	131,f,c	;volatile
  4590   000F0E  EFC3  F007         	goto	l297
  4591   000F12                     l2053:
  4592   000F12  BE02               	btfsc	(digitalWrite@pin+1)^0,7,c
  4593   000F14  EF97  F007         	goto	u1790
  4594   000F18  5002               	movf	(digitalWrite@pin+1)^0,w,c
  4595   000F1A  E107               	bnz	u1791
  4596   000F1C  0E28               	movlw	40
  4597   000F1E  5C01               	subwf	digitalWrite@pin^0,w,c
  4598   000F20  B0D8               	btfsc	status,0,c
  4599   000F22  EF95  F007         	goto	u1791
  4600   000F26  EF97  F007         	goto	u1790
  4601   000F2A                     u1791:
  4602   000F2A  EFC3  F007         	goto	l297
  4603   000F2E                     u1790:
  4604   000F2E                     
  4605                           ;io.c: 32:         pin -=32;
  4606   000F2E  0EE0               	movlw	224
  4607   000F30  2601               	addwf	digitalWrite@pin^0,f,c
  4608   000F32  0EFF               	movlw	255
  4609   000F34  2202               	addwfc	(digitalWrite@pin+1)^0,f,c
  4610                           
  4611                           ;io.c: 33:         if (value){ ((PORTE) |= (1<<(pin)));}
  4612   000F36  5003               	movf	digitalWrite@value^0,w,c
  4613   000F38  1004               	iorwf	(digitalWrite@value+1)^0,w,c
  4614   000F3A  B4D8               	btfsc	status,2,c
  4615   000F3C  EFA2  F007         	goto	u1801
  4616   000F40  EFA4  F007         	goto	u1800
  4617   000F44                     u1801:
  4618   000F44  EFB4  F007         	goto	l2059
  4619   000F48                     u1800:
  4620   000F48  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4621   000F4C  0E01               	movlw	1
  4622   000F4E  6E06               	movwf	(??_digitalWrite+1)^0,c
  4623   000F50  2A05               	incf	??_digitalWrite^0,f,c
  4624   000F52  EFAD  F007         	goto	u1814
  4625   000F56                     u1815:
  4626   000F56  90D8               	bcf	status,0,c
  4627   000F58  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4628   000F5A                     u1814:
  4629   000F5A  2E05               	decfsz	??_digitalWrite^0,f,c
  4630   000F5C  EFAB  F007         	goto	u1815
  4631   000F60  5006               	movf	(??_digitalWrite+1)^0,w,c
  4632   000F62  1284               	iorwf	132,f,c	;volatile
  4633   000F64  EFC3  F007         	goto	l297
  4634   000F68                     l2059:
  4635   000F68  C001  F005         	movff	digitalWrite@pin,??_digitalWrite
  4636   000F6C  0E01               	movlw	1
  4637   000F6E  6E06               	movwf	(??_digitalWrite+1)^0,c
  4638   000F70  2A05               	incf	??_digitalWrite^0,f,c
  4639   000F72  EFBD  F007         	goto	u1824
  4640   000F76                     u1825:
  4641   000F76  90D8               	bcf	status,0,c
  4642   000F78  3606               	rlcf	(??_digitalWrite+1)^0,f,c
  4643   000F7A                     u1824:
  4644   000F7A  2E05               	decfsz	??_digitalWrite^0,f,c
  4645   000F7C  EFBB  F007         	goto	u1825
  4646   000F80  5006               	movf	(??_digitalWrite+1)^0,w,c
  4647   000F82  0AFF               	xorlw	255
  4648   000F84  1684               	andwf	132,f,c	;volatile
  4649   000F86                     l297:
  4650   000F86  0012               	return		;funcret
  4651   000F88                     __end_of_digitalWrite:
  4652                           	callstack 0
  4653                           
  4654 ;; *************** function _I2C_delay *****************
  4655 ;; Defined at:
  4656 ;;		line 22 in file "i2c.c"
  4657 ;; Parameters:    Size  Location     Type
  4658 ;;		None
  4659 ;; Auto vars:     Size  Location     Type
  4660 ;;  i               2    0        int 
  4661 ;;  v               2    0        volatile int 
  4662 ;; Return value:  Size  Location     Type
  4663 ;;                  1    wreg      void 
  4664 ;; Registers used:
  4665 ;;		None
  4666 ;; Tracked objects:
  4667 ;;		On entry : 0/0
  4668 ;;		On exit  : 0/0
  4669 ;;		Unchanged: 0/0
  4670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4671 ;;      Params:         0       0       0       0       0       0       0       0       0
  4672 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4673 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4674 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4675 ;;Total ram usage:        0 bytes
  4676 ;; Hardware stack levels used: 1
  4677 ;; This function calls:
  4678 ;;		Nothing
  4679 ;; This function is called by:
  4680 ;;		_i2c_start
  4681 ;;		_i2c_stop
  4682 ;;		_i2c_write_bit
  4683 ;;		_i2c_read_bit
  4684 ;; This function uses a non-reentrant model
  4685 ;;
  4686                           
  4687                           	psect	text36
  4688   001E06                     __ptext36:
  4689                           	callstack 0
  4690   001E06                     _I2C_delay:
  4691                           	callstack 25
  4692   001E06  0012               	return		;funcret
  4693   001E08                     __end_of_I2C_delay:
  4694                           	callstack 0
  4695                           
  4696 ;; *************** function _serialRead *****************
  4697 ;; Defined at:
  4698 ;;		line 33 in file "serial.c"
  4699 ;; Parameters:    Size  Location     Type
  4700 ;;		None
  4701 ;; Auto vars:     Size  Location     Type
  4702 ;;  resp            1    0[COMRAM] unsigned char 
  4703 ;; Return value:  Size  Location     Type
  4704 ;;                  1    wreg      unsigned char 
  4705 ;; Registers used:
  4706 ;;		wreg, status,2, status,0
  4707 ;; Tracked objects:
  4708 ;;		On entry : 0/0
  4709 ;;		On exit  : 0/0
  4710 ;;		Unchanged: 0/0
  4711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4712 ;;      Params:         0       0       0       0       0       0       0       0       0
  4713 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4714 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4715 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4716 ;;Total ram usage:        1 bytes
  4717 ;; Hardware stack levels used: 1
  4718 ;; This function calls:
  4719 ;;		Nothing
  4720 ;; This function is called by:
  4721 ;;		_eventRead
  4722 ;; This function uses a non-reentrant model
  4723 ;;
  4724                           
  4725                           	psect	text37
  4726   001C0C                     __ptext37:
  4727                           	callstack 0
  4728   001C0C                     _serialRead:
  4729                           	callstack 28
  4730   001C0C                     
  4731                           ;serial.c: 34:     char resp = 0;
  4732   001C0C  0E00               	movlw	0
  4733   001C0E  6E01               	movwf	serialRead@resp^0,c
  4734   001C10                     
  4735                           ;serial.c: 36:     if (((RCSTA) & (1<<1)))
  4736   001C10  A2AB               	btfss	171,1,c	;volatile
  4737   001C12  EF0D  F00E         	goto	u2211
  4738   001C16  EF0F  F00E         	goto	u2210
  4739   001C1A                     u2211:
  4740   001C1A  EF11  F00E         	goto	l2355
  4741   001C1E                     u2210:
  4742   001C1E                     
  4743                           ;serial.c: 37:     {;serial.c: 38:         ((RCSTA) &= ~(1<<4));
  4744   001C1E  98AB               	bcf	171,4,c	;volatile
  4745                           
  4746                           ;serial.c: 39:         ((RCSTA) |= (1<<4));
  4747   001C20  88AB               	bsf	171,4,c	;volatile
  4748   001C22                     l2355:
  4749                           
  4750                           ;serial.c: 42:     if (((PIR1) & (1<<5)))
  4751   001C22  AA9E               	btfss	158,5,c	;volatile
  4752   001C24  EF16  F00E         	goto	u2221
  4753   001C28  EF18  F00E         	goto	u2220
  4754   001C2C                     u2221:
  4755   001C2C  EF1A  F00E         	goto	l2359
  4756   001C30                     u2220:
  4757   001C30                     
  4758                           ;serial.c: 43:     {;serial.c: 44:         resp = RCREG;
  4759   001C30  CFAE F001          	movff	4014,serialRead@resp	;volatile
  4760   001C34                     l2359:
  4761                           
  4762                           ;serial.c: 46:     return resp;
  4763   001C34  5001               	movf	serialRead@resp^0,w,c
  4764   001C36  0012               	return		;funcret
  4765   001C38                     __end_of_serialRead:
  4766                           	callstack 0
  4767                           
  4768 ;; *************** function _kpRead *****************
  4769 ;; Defined at:
  4770 ;;		line 21 in file "keypad.c"
  4771 ;; Parameters:    Size  Location     Type
  4772 ;;		None
  4773 ;; Auto vars:     Size  Location     Type
  4774 ;;		None
  4775 ;; Return value:  Size  Location     Type
  4776 ;;                  1    wreg      unsigned char 
  4777 ;; Registers used:
  4778 ;;		wreg, status,2
  4779 ;; Tracked objects:
  4780 ;;		On entry : 0/0
  4781 ;;		On exit  : 0/0
  4782 ;;		Unchanged: 0/0
  4783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4784 ;;      Params:         0       0       0       0       0       0       0       0       0
  4785 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4786 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4787 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4788 ;;Total ram usage:        0 bytes
  4789 ;; Hardware stack levels used: 1
  4790 ;; This function calls:
  4791 ;;		Nothing
  4792 ;; This function is called by:
  4793 ;;		_eventRead
  4794 ;; This function uses a non-reentrant model
  4795 ;;
  4796                           
  4797                           	psect	text38
  4798   001E02                     __ptext38:
  4799                           	callstack 0
  4800   001E02                     _kpRead:
  4801                           	callstack 28
  4802   001E02                     
  4803                           ;keypad.c: 22:     return tecla;
  4804   001E02  504B               	movf	_tecla^0,w,c
  4805   001E04  0012               	return		;funcret
  4806   001E06                     __end_of_kpRead:
  4807                           	callstack 0
  4808                           
  4809 ;; *************** function ___wmul *****************
  4810 ;; Defined at:
  4811 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
  4812 ;; Parameters:    Size  Location     Type
  4813 ;;  multiplier      2    0[COMRAM] unsigned int 
  4814 ;;  multiplicand    2    2[COMRAM] unsigned int 
  4815 ;; Auto vars:     Size  Location     Type
  4816 ;;  product         2    4[COMRAM] unsigned int 
  4817 ;; Return value:  Size  Location     Type
  4818 ;;                  2    0[COMRAM] unsigned int 
  4819 ;; Registers used:
  4820 ;;		wreg, status,2, status,0, prodl, prodh
  4821 ;; Tracked objects:
  4822 ;;		On entry : 0/0
  4823 ;;		On exit  : 0/0
  4824 ;;		Unchanged: 0/0
  4825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4826 ;;      Params:         4       0       0       0       0       0       0       0       0
  4827 ;;      Locals:         2       0       0       0       0       0       0       0       0
  4828 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4829 ;;      Totals:         6       0       0       0       0       0       0       0       0
  4830 ;;Total ram usage:        6 bytes
  4831 ;; Hardware stack levels used: 1
  4832 ;; This function calls:
  4833 ;;		Nothing
  4834 ;; This function is called by:
  4835 ;;		_eventRead
  4836 ;;		_bcd2dec
  4837 ;; This function uses a non-reentrant model
  4838 ;;
  4839                           
  4840                           	psect	text39
  4841   001D04                     __ptext39:
  4842                           	callstack 0
  4843   001D04                     ___wmul:
  4844                           	callstack 28
  4845   001D04  5001               	movf	___wmul@multiplier^0,w,c
  4846   001D06  0203               	mulwf	___wmul@multiplicand^0,c
  4847   001D08  CFF3 F005          	movff	prodl,___wmul@product
  4848   001D0C  CFF4 F006          	movff	prodh,___wmul@product+1
  4849   001D10  5001               	movf	___wmul@multiplier^0,w,c
  4850   001D12  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  4851   001D14  50F3               	movf	243,w,c
  4852   001D16  2606               	addwf	(___wmul@product+1)^0,f,c
  4853   001D18  5002               	movf	(___wmul@multiplier+1)^0,w,c
  4854   001D1A  0203               	mulwf	___wmul@multiplicand^0,c
  4855   001D1C  50F3               	movf	243,w,c
  4856   001D1E  2606               	addwf	(___wmul@product+1)^0,f,c
  4857   001D20  C005  F001         	movff	___wmul@product,?___wmul
  4858   001D24  C006  F002         	movff	___wmul@product+1,?___wmul+1
  4859   001D28  0012               	return		;funcret
  4860   001D2A                     __end_of___wmul:
  4861                           	callstack 0
  4862                           
  4863 ;; *************** function _serialInit *****************
  4864 ;; Defined at:
  4865 ;;		line 51 in file "serial.c"
  4866 ;; Parameters:    Size  Location     Type
  4867 ;;		None
  4868 ;; Auto vars:     Size  Location     Type
  4869 ;;		None
  4870 ;; Return value:  Size  Location     Type
  4871 ;;                  1    wreg      void 
  4872 ;; Registers used:
  4873 ;;		wreg, status,2, status,0
  4874 ;; Tracked objects:
  4875 ;;		On entry : 0/0
  4876 ;;		On exit  : 0/0
  4877 ;;		Unchanged: 0/0
  4878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4879 ;;      Params:         0       0       0       0       0       0       0       0       0
  4880 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4881 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4882 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4883 ;;Total ram usage:        0 bytes
  4884 ;; Hardware stack levels used: 1
  4885 ;; This function calls:
  4886 ;;		Nothing
  4887 ;; This function is called by:
  4888 ;;		_main
  4889 ;; This function uses a non-reentrant model
  4890 ;;
  4891                           
  4892                           	psect	text40
  4893   001D6A                     __ptext40:
  4894                           	callstack 0
  4895   001D6A                     _serialInit:
  4896                           	callstack 30
  4897   001D6A                     
  4898                           ;serial.c: 52:     TXSTA = 0b00101100;
  4899   001D6A  0E2C               	movlw	44
  4900   001D6C  6EAC               	movwf	172,c	;volatile
  4901                           
  4902                           ;serial.c: 53:     RCSTA = 0b10010000;
  4903   001D6E  0E90               	movlw	144
  4904   001D70  6EAB               	movwf	171,c	;volatile
  4905                           
  4906                           ;serial.c: 54:     BAUDCON = 0b00001000;
  4907   001D72  0E08               	movlw	8
  4908   001D74  6EB8               	movwf	184,c	;volatile
  4909                           
  4910                           ;serial.c: 55:     SPBRGH = 0b00000000;
  4911   001D76  0E00               	movlw	0
  4912   001D78  6EB0               	movwf	176,c	;volatile
  4913                           
  4914                           ;serial.c: 56:     SPBRG = 0b00100010;
  4915   001D7A  0E22               	movlw	34
  4916   001D7C  6EAF               	movwf	175,c	;volatile
  4917   001D7E                     
  4918                           ;serial.c: 57:     ((TRISC) |= (1<<6));
  4919   001D7E  8C94               	bsf	148,6,c	;volatile
  4920   001D80                     
  4921                           ;serial.c: 58:     ((TRISC) |= (1<<7));
  4922   001D80  8E94               	bsf	148,7,c	;volatile
  4923   001D82  0012               	return		;funcret
  4924   001D84                     __end_of_serialInit:
  4925                           	callstack 0
  4926                           
  4927 ;; *************** function _outputInit *****************
  4928 ;; Defined at:
  4929 ;;		line 16 in file "output.c"
  4930 ;; Parameters:    Size  Location     Type
  4931 ;;		None
  4932 ;; Auto vars:     Size  Location     Type
  4933 ;;		None
  4934 ;; Return value:  Size  Location     Type
  4935 ;;                  1    wreg      void 
  4936 ;; Registers used:
  4937 ;;		wreg, status,2, status,0, cstack
  4938 ;; Tracked objects:
  4939 ;;		On entry : 0/0
  4940 ;;		On exit  : 0/0
  4941 ;;		Unchanged: 0/0
  4942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4943 ;;      Params:         0       0       0       0       0       0       0       0       0
  4944 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4945 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4946 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4947 ;;Total ram usage:        0 bytes
  4948 ;; Hardware stack levels used: 1
  4949 ;; Hardware stack levels required when called: 4
  4950 ;; This function calls:
  4951 ;;		_lcdInit
  4952 ;; This function is called by:
  4953 ;;		_main
  4954 ;; This function uses a non-reentrant model
  4955 ;;
  4956                           
  4957                           	psect	text41
  4958   001DF2                     __ptext41:
  4959                           	callstack 0
  4960   001DF2                     _outputInit:
  4961                           	callstack 26
  4962   001DF2                     
  4963                           ;output.c: 17:     lcdInit();
  4964   001DF2  EC37  F00B         	call	_lcdInit	;wreg free
  4965   001DF6  0012               	return		;funcret
  4966   001DF8                     __end_of_outputInit:
  4967                           	callstack 0
  4968                           
  4969 ;; *************** function _lcdInit *****************
  4970 ;; Defined at:
  4971 ;;		line 110 in file "lcd.c"
  4972 ;; Parameters:    Size  Location     Type
  4973 ;;		None
  4974 ;; Auto vars:     Size  Location     Type
  4975 ;;  i               1    3[COMRAM] unsigned char 
  4976 ;; Return value:  Size  Location     Type
  4977 ;;                  1    wreg      void 
  4978 ;; Registers used:
  4979 ;;		wreg, status,2, status,0, cstack
  4980 ;; Tracked objects:
  4981 ;;		On entry : 0/0
  4982 ;;		On exit  : 0/0
  4983 ;;		Unchanged: 0/0
  4984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4985 ;;      Params:         0       0       0       0       0       0       0       0       0
  4986 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4987 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4988 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4989 ;;Total ram usage:        1 bytes
  4990 ;; Hardware stack levels used: 1
  4991 ;; Hardware stack levels required when called: 3
  4992 ;; This function calls:
  4993 ;;		_Delay2ms
  4994 ;;		_lcdCommand
  4995 ;;		_lcdCommand4bits
  4996 ;; This function is called by:
  4997 ;;		_main
  4998 ;;		_outputInit
  4999 ;; This function uses a non-reentrant model
  5000 ;;
  5001                           
  5002                           	psect	text42
  5003   00166E                     __ptext42:
  5004                           	callstack 0
  5005   00166E                     _lcdInit:
  5006                           	callstack 26
  5007   00166E                     
  5008                           ;lcd.c: 111:     unsigned char i;;lcd.c: 113:     ((TRISD) &= ~(1<<(0)));
  5009   00166E  9095               	bcf	149,0,c	;volatile
  5010                           
  5011                           ;lcd.c: 114:     ((TRISD) &= ~(1<<(7)));
  5012   001670  9E95               	bcf	149,7,c	;volatile
  5013                           
  5014                           ;lcd.c: 115:     ((TRISD) &= ~(1<<(6)));
  5015   001672  9C95               	bcf	149,6,c	;volatile
  5016                           
  5017                           ;lcd.c: 116:     ((TRISD) &= ~(1<<(5)));
  5018   001674  9A95               	bcf	149,5,c	;volatile
  5019                           
  5020                           ;lcd.c: 117:     ((TRISD) &= ~(1<<(4)));
  5021   001676  9895               	bcf	149,4,c	;volatile
  5022                           
  5023                           ;lcd.c: 118:     ((TRISD) &= ~(1<<(2)));
  5024   001678  9495               	bcf	149,2,c	;volatile
  5025   00167A                     
  5026                           ;lcd.c: 121:     for (i = 0; i < 7; i++)
  5027   00167A  0E00               	movlw	0
  5028   00167C  6E04               	movwf	lcdInit@i^0,c
  5029   00167E                     l2441:
  5030                           
  5031                           ;lcd.c: 122:         Delay2ms();
  5032   00167E  ECEF  F00D         	call	_Delay2ms	;wreg free
  5033   001682  2A04               	incf	lcdInit@i^0,f,c
  5034   001684  0E06               	movlw	6
  5035   001686  6404               	cpfsgt	lcdInit@i^0,c
  5036   001688  EF48  F00B         	goto	u2271
  5037   00168C  EF4A  F00B         	goto	u2270
  5038   001690                     u2271:
  5039   001690  EF3F  F00B         	goto	l2441
  5040   001694                     u2270:
  5041   001694                     
  5042                           ;lcd.c: 125:     lcdCommand4bits(0x30, 0);
  5043   001694  0E00               	movlw	0
  5044   001696  6E01               	movwf	lcdCommand4bits@data^0,c
  5045   001698  0E30               	movlw	48
  5046   00169A  EC73  F00B         	call	_lcdCommand4bits
  5047                           
  5048                           ;lcd.c: 126:     Delay2ms();
  5049   00169E  ECEF  F00D         	call	_Delay2ms	;wreg free
  5050                           
  5051                           ;lcd.c: 128:     lcdCommand4bits(0x30, 0);
  5052   0016A2  0E00               	movlw	0
  5053   0016A4  6E01               	movwf	lcdCommand4bits@data^0,c
  5054   0016A6  0E30               	movlw	48
  5055   0016A8  EC73  F00B         	call	_lcdCommand4bits
  5056                           
  5057                           ;lcd.c: 129:     Delay2ms();
  5058   0016AC  ECEF  F00D         	call	_Delay2ms	;wreg free
  5059                           
  5060                           ;lcd.c: 131:     lcdCommand4bits(0x30, 0);
  5061   0016B0  0E00               	movlw	0
  5062   0016B2  6E01               	movwf	lcdCommand4bits@data^0,c
  5063   0016B4  0E30               	movlw	48
  5064   0016B6  EC73  F00B         	call	_lcdCommand4bits
  5065                           
  5066                           ;lcd.c: 132:     Delay2ms();
  5067   0016BA  ECEF  F00D         	call	_Delay2ms	;wreg free
  5068                           
  5069                           ;lcd.c: 134:     lcdCommand4bits(0x20, 0);
  5070   0016BE  0E00               	movlw	0
  5071   0016C0  6E01               	movwf	lcdCommand4bits@data^0,c
  5072   0016C2  0E20               	movlw	32
  5073   0016C4  EC73  F00B         	call	_lcdCommand4bits
  5074                           
  5075                           ;lcd.c: 135:     Delay2ms();
  5076   0016C8  ECEF  F00D         	call	_Delay2ms	;wreg free
  5077                           
  5078                           ;lcd.c: 137:     lcdCommand(0x28);
  5079   0016CC  0E28               	movlw	40
  5080   0016CE  ECCF  F00C         	call	_lcdCommand
  5081                           
  5082                           ;lcd.c: 138:     lcdCommand(0x06);
  5083   0016D2  0E06               	movlw	6
  5084   0016D4  ECCF  F00C         	call	_lcdCommand
  5085                           
  5086                           ;lcd.c: 140:     lcdCommand(0x0C);
  5087   0016D8  0E0C               	movlw	12
  5088   0016DA  ECCF  F00C         	call	_lcdCommand
  5089                           
  5090                           ;lcd.c: 141:     lcdCommand(0x01);
  5091   0016DE  0E01               	movlw	1
  5092   0016E0  ECCF  F00C         	call	_lcdCommand
  5093   0016E4  0012               	return		;funcret
  5094   0016E6                     __end_of_lcdInit:
  5095                           	callstack 0
  5096                           
  5097 ;; *************** function _lcdCommand *****************
  5098 ;; Defined at:
  5099 ;;		line 89 in file "lcd.c"
  5100 ;; Parameters:    Size  Location     Type
  5101 ;;  cmd             1    wreg     unsigned char 
  5102 ;; Auto vars:     Size  Location     Type
  5103 ;;  cmd             1    2[COMRAM] unsigned char 
  5104 ;; Return value:  Size  Location     Type
  5105 ;;                  1    wreg      void 
  5106 ;; Registers used:
  5107 ;;		wreg, status,2, status,0, cstack
  5108 ;; Tracked objects:
  5109 ;;		On entry : 0/0
  5110 ;;		On exit  : 0/0
  5111 ;;		Unchanged: 0/0
  5112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5113 ;;      Params:         0       0       0       0       0       0       0       0       0
  5114 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5115 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5116 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5117 ;;Total ram usage:        1 bytes
  5118 ;; Hardware stack levels used: 1
  5119 ;; Hardware stack levels required when called: 2
  5120 ;; This function calls:
  5121 ;;		_Delay2ms
  5122 ;;		_Delay40us
  5123 ;;		_lcdCommand4bits
  5124 ;; This function is called by:
  5125 ;;		_lcdInit
  5126 ;;		_outputPrint
  5127 ;;		_getAlarmLevel
  5128 ;; This function uses a non-reentrant model
  5129 ;;
  5130                           
  5131                           	psect	text43
  5132   00199E                     __ptext43:
  5133                           	callstack 0
  5134   00199E                     _lcdCommand:
  5135                           	callstack 26
  5136                           
  5137                           ;incstack = 0
  5138                           ;lcdCommand@cmd stored from wreg
  5139   00199E  6E03               	movwf	lcdCommand@cmd^0,c
  5140   0019A0                     
  5141                           ;lcd.c: 91:     lcdCommand4bits(cmd, 0);
  5142   0019A0  0E00               	movlw	0
  5143   0019A2  6E01               	movwf	lcdCommand4bits@data^0,c
  5144   0019A4  5003               	movf	lcdCommand@cmd^0,w,c
  5145   0019A6  EC73  F00B         	call	_lcdCommand4bits
  5146                           
  5147                           ;lcd.c: 92:     lcdCommand4bits(cmd << 4, 0);
  5148   0019AA  0E00               	movlw	0
  5149   0019AC  6E01               	movwf	lcdCommand4bits@data^0,c
  5150   0019AE  3803               	swapf	lcdCommand@cmd^0,w,c
  5151   0019B0  0BF0               	andlw	240
  5152   0019B2  EC73  F00B         	call	_lcdCommand4bits
  5153   0019B6                     
  5154                           ;lcd.c: 95:     if ((cmd == 0x02) || (cmd == 0x01)) {
  5155   0019B6  0E02               	movlw	2
  5156   0019B8  1803               	xorwf	lcdCommand@cmd^0,w,c
  5157   0019BA  B4D8               	btfsc	status,2,c
  5158   0019BC  EFE2  F00C         	goto	u2231
  5159   0019C0  EFE4  F00C         	goto	u2230
  5160   0019C4                     u2231:
  5161   0019C4  EFEC  F00C         	goto	l2369
  5162   0019C8                     u2230:
  5163   0019C8  0403               	decf	lcdCommand@cmd^0,w,c
  5164   0019CA  A4D8               	btfss	status,2,c
  5165   0019CC  EFEA  F00C         	goto	u2241
  5166   0019D0  EFEC  F00C         	goto	u2240
  5167   0019D4                     u2241:
  5168   0019D4  EFF0  F00C         	goto	l2371
  5169   0019D8                     u2240:
  5170   0019D8                     l2369:
  5171                           
  5172                           ;lcd.c: 96:         Delay2ms();
  5173   0019D8  ECEF  F00D         	call	_Delay2ms	;wreg free
  5174                           
  5175                           ;lcd.c: 97:     } else {
  5176   0019DC  EFF2  F00C         	goto	l94
  5177   0019E0                     l2371:
  5178                           
  5179                           ;lcd.c: 98:         Delay40us();
  5180   0019E0  ECCE  F00E         	call	_Delay40us	;wreg free
  5181   0019E4                     l94:
  5182   0019E4  0012               	return		;funcret
  5183   0019E6                     __end_of_lcdCommand:
  5184                           	callstack 0
  5185                           
  5186 ;; *************** function _lcdCommand4bits *****************
  5187 ;; Defined at:
  5188 ;;		line 51 in file "lcd.c"
  5189 ;; Parameters:    Size  Location     Type
  5190 ;;  cmd             1    wreg     unsigned char 
  5191 ;;  data            1    0[COMRAM] unsigned char 
  5192 ;; Auto vars:     Size  Location     Type
  5193 ;;  cmd             1    1[COMRAM] unsigned char 
  5194 ;; Return value:  Size  Location     Type
  5195 ;;                  1    wreg      void 
  5196 ;; Registers used:
  5197 ;;		wreg, status,2, status,0, cstack
  5198 ;; Tracked objects:
  5199 ;;		On entry : 0/0
  5200 ;;		On exit  : 0/0
  5201 ;;		Unchanged: 0/0
  5202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5203 ;;      Params:         1       0       0       0       0       0       0       0       0
  5204 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5205 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5206 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5207 ;;Total ram usage:        2 bytes
  5208 ;; Hardware stack levels used: 1
  5209 ;; Hardware stack levels required when called: 1
  5210 ;; This function calls:
  5211 ;;		_pulseEnable
  5212 ;; This function is called by:
  5213 ;;		_lcdCommand
  5214 ;;		_lcdData
  5215 ;;		_lcdInit
  5216 ;; This function uses a non-reentrant model
  5217 ;;
  5218                           
  5219                           	psect	text44
  5220   0016E6                     __ptext44:
  5221                           	callstack 0
  5222   0016E6                     _lcdCommand4bits:
  5223                           	callstack 25
  5224                           
  5225                           ;incstack = 0
  5226                           ;lcdCommand4bits@cmd stored from wreg
  5227   0016E6  6E02               	movwf	lcdCommand4bits@cmd^0,c
  5228   0016E8                     
  5229                           ;lcd.c: 53:     if (data) {
  5230   0016E8  5001               	movf	lcdCommand4bits@data^0,w,c
  5231   0016EA  B4D8               	btfsc	status,2,c
  5232   0016EC  EF7A  F00B         	goto	u1951
  5233   0016F0  EF7C  F00B         	goto	u1950
  5234   0016F4                     u1951:
  5235   0016F4  EF7F  F00B         	goto	l2159
  5236   0016F8                     u1950:
  5237   0016F8                     
  5238                           ;lcd.c: 54:         ((PORTD) |= (1<<(0)));
  5239   0016F8  8083               	bsf	131,0,c	;volatile
  5240                           
  5241                           ;lcd.c: 55:     } else {
  5242   0016FA  EF80  F00B         	goto	l2161
  5243   0016FE                     l2159:
  5244                           
  5245                           ;lcd.c: 56:         ((PORTD) &= ~(1<<(0)));
  5246   0016FE  9083               	bcf	131,0,c	;volatile
  5247   001700                     l2161:
  5248                           
  5249                           ;lcd.c: 59:     if (((cmd) & (1<<(7)))) {
  5250   001700  AE02               	btfss	lcdCommand4bits@cmd^0,7,c
  5251   001702  EF85  F00B         	goto	u1961
  5252   001706  EF87  F00B         	goto	u1960
  5253   00170A                     u1961:
  5254   00170A  EF8A  F00B         	goto	l2165
  5255   00170E                     u1960:
  5256   00170E                     
  5257                           ;lcd.c: 60:         ((PORTD) |= (1<<(2)));
  5258   00170E  8483               	bsf	131,2,c	;volatile
  5259                           
  5260                           ;lcd.c: 61:     } else {
  5261   001710  EF8B  F00B         	goto	l2167
  5262   001714                     l2165:
  5263                           
  5264                           ;lcd.c: 62:         ((PORTD) &= ~(1<<(2)));
  5265   001714  9483               	bcf	131,2,c	;volatile
  5266   001716                     l2167:
  5267                           
  5268                           ;lcd.c: 66:     if (((cmd) & (1<<(6)))) {
  5269   001716  AC02               	btfss	lcdCommand4bits@cmd^0,6,c
  5270   001718  EF90  F00B         	goto	u1971
  5271   00171C  EF92  F00B         	goto	u1970
  5272   001720                     u1971:
  5273   001720  EF95  F00B         	goto	l2171
  5274   001724                     u1970:
  5275   001724                     
  5276                           ;lcd.c: 67:         ((PORTD) |= (1<<(4)));
  5277   001724  8883               	bsf	131,4,c	;volatile
  5278                           
  5279                           ;lcd.c: 68:     } else {
  5280   001726  EF96  F00B         	goto	l2173
  5281   00172A                     l2171:
  5282                           
  5283                           ;lcd.c: 69:         ((PORTD) &= ~(1<<(4)));
  5284   00172A  9883               	bcf	131,4,c	;volatile
  5285   00172C                     l2173:
  5286                           
  5287                           ;lcd.c: 73:     if (((cmd) & (1<<(5)))) {
  5288   00172C  AA02               	btfss	lcdCommand4bits@cmd^0,5,c
  5289   00172E  EF9B  F00B         	goto	u1981
  5290   001732  EF9D  F00B         	goto	u1980
  5291   001736                     u1981:
  5292   001736  EFA0  F00B         	goto	l2177
  5293   00173A                     u1980:
  5294   00173A                     
  5295                           ;lcd.c: 74:         ((PORTD) |= (1<<(5)));
  5296   00173A  8A83               	bsf	131,5,c	;volatile
  5297                           
  5298                           ;lcd.c: 75:     } else {
  5299   00173C  EFA1  F00B         	goto	l2179
  5300   001740                     l2177:
  5301                           
  5302                           ;lcd.c: 76:         ((PORTD) &= ~(1<<(5)));
  5303   001740  9A83               	bcf	131,5,c	;volatile
  5304   001742                     l2179:
  5305                           
  5306                           ;lcd.c: 80:     if (((cmd) & (1<<(4)))) {
  5307   001742  A802               	btfss	lcdCommand4bits@cmd^0,4,c
  5308   001744  EFA6  F00B         	goto	u1991
  5309   001748  EFA8  F00B         	goto	u1990
  5310   00174C                     u1991:
  5311   00174C  EFAB  F00B         	goto	l2183
  5312   001750                     u1990:
  5313   001750                     
  5314                           ;lcd.c: 81:         ((PORTD) |= (1<<(6)));
  5315   001750  8C83               	bsf	131,6,c	;volatile
  5316                           
  5317                           ;lcd.c: 82:     } else {
  5318   001752  EFAC  F00B         	goto	l2185
  5319   001756                     l2183:
  5320                           
  5321                           ;lcd.c: 83:         ((PORTD) &= ~(1<<(6)));
  5322   001756  9C83               	bcf	131,6,c	;volatile
  5323   001758                     l2185:
  5324                           
  5325                           ;lcd.c: 86:     pulseEnable();
  5326   001758  ECFC  F00E         	call	_pulseEnable	;wreg free
  5327   00175C  0012               	return		;funcret
  5328   00175E                     __end_of_lcdCommand4bits:
  5329                           	callstack 0
  5330                           
  5331 ;; *************** function _pulseEnable *****************
  5332 ;; Defined at:
  5333 ;;		line 46 in file "lcd.c"
  5334 ;; Parameters:    Size  Location     Type
  5335 ;;		None
  5336 ;; Auto vars:     Size  Location     Type
  5337 ;;		None
  5338 ;; Return value:  Size  Location     Type
  5339 ;;                  1    wreg      void 
  5340 ;; Registers used:
  5341 ;;		status,2, status,0
  5342 ;; Tracked objects:
  5343 ;;		On entry : 0/0
  5344 ;;		On exit  : 0/0
  5345 ;;		Unchanged: 0/0
  5346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5347 ;;      Params:         0       0       0       0       0       0       0       0       0
  5348 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5349 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5350 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5351 ;;Total ram usage:        0 bytes
  5352 ;; Hardware stack levels used: 1
  5353 ;; This function calls:
  5354 ;;		Nothing
  5355 ;; This function is called by:
  5356 ;;		_lcdCommand4bits
  5357 ;; This function uses a non-reentrant model
  5358 ;;
  5359                           
  5360                           	psect	text45
  5361   001DF8                     __ptext45:
  5362                           	callstack 0
  5363   001DF8                     _pulseEnable:
  5364                           	callstack 25
  5365   001DF8                     
  5366                           ;lcd.c: 47:     ((PORTD) |= (1<<(7)));
  5367   001DF8  8E83               	bsf	131,7,c	;volatile
  5368                           
  5369                           ;lcd.c: 48:     ((PORTD) &= ~(1<<(7)));
  5370   001DFA  9E83               	bcf	131,7,c	;volatile
  5371   001DFC  0012               	return		;funcret
  5372   001DFE                     __end_of_pulseEnable:
  5373                           	callstack 0
  5374                           
  5375 ;; *************** function _Delay40us *****************
  5376 ;; Defined at:
  5377 ;;		line 35 in file "lcd.c"
  5378 ;; Parameters:    Size  Location     Type
  5379 ;;		None
  5380 ;; Auto vars:     Size  Location     Type
  5381 ;;  j               1    0[COMRAM] unsigned char 
  5382 ;; Return value:  Size  Location     Type
  5383 ;;                  1    wreg      void 
  5384 ;; Registers used:
  5385 ;;		wreg, status,2, status,0
  5386 ;; Tracked objects:
  5387 ;;		On entry : 0/0
  5388 ;;		On exit  : 0/0
  5389 ;;		Unchanged: 0/0
  5390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5391 ;;      Params:         0       0       0       0       0       0       0       0       0
  5392 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5393 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5394 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5395 ;;Total ram usage:        1 bytes
  5396 ;; Hardware stack levels used: 1
  5397 ;; This function calls:
  5398 ;;		Nothing
  5399 ;; This function is called by:
  5400 ;;		_lcdCommand
  5401 ;;		_lcdData
  5402 ;; This function uses a non-reentrant model
  5403 ;;
  5404                           
  5405                           	psect	text46
  5406   001D9C                     __ptext46:
  5407                           	callstack 0
  5408   001D9C                     _Delay40us:
  5409                           	callstack 26
  5410   001D9C                     
  5411                           ;lcd.c: 36:     unsigned char j;;lcd.c: 37:     for (j = 0; j < 68; j++);
  5412   001D9C  0E00               	movlw	0
  5413   001D9E  6E01               	movwf	Delay40us@j^0,c
  5414   001DA0                     l2151:
  5415   001DA0  2A01               	incf	Delay40us@j^0,f,c
  5416   001DA2  0E43               	movlw	67
  5417   001DA4  6401               	cpfsgt	Delay40us@j^0,c
  5418   001DA6  EFD7  F00E         	goto	u1941
  5419   001DAA  EFD9  F00E         	goto	u1940
  5420   001DAE                     u1941:
  5421   001DAE  EFD0  F00E         	goto	l2151
  5422   001DB2                     u1940:
  5423   001DB2  0012               	return		;funcret
  5424   001DB4                     __end_of_Delay40us:
  5425                           	callstack 0
  5426                           
  5427 ;; *************** function _Delay2ms *****************
  5428 ;; Defined at:
  5429 ;;		line 40 in file "lcd.c"
  5430 ;; Parameters:    Size  Location     Type
  5431 ;;		None
  5432 ;; Auto vars:     Size  Location     Type
  5433 ;;  k               1    1[COMRAM] unsigned char 
  5434 ;;  j               1    0[COMRAM] unsigned char 
  5435 ;; Return value:  Size  Location     Type
  5436 ;;                  1    wreg      void 
  5437 ;; Registers used:
  5438 ;;		wreg, status,2, status,0
  5439 ;; Tracked objects:
  5440 ;;		On entry : 0/0
  5441 ;;		On exit  : 0/0
  5442 ;;		Unchanged: 0/0
  5443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5444 ;;      Params:         0       0       0       0       0       0       0       0       0
  5445 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5446 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5447 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5448 ;;Total ram usage:        2 bytes
  5449 ;; Hardware stack levels used: 1
  5450 ;; This function calls:
  5451 ;;		Nothing
  5452 ;; This function is called by:
  5453 ;;		_lcdCommand
  5454 ;;		_lcdInit
  5455 ;; This function uses a non-reentrant model
  5456 ;;
  5457                           
  5458                           	psect	text47
  5459   001BDE                     __ptext47:
  5460                           	callstack 0
  5461   001BDE                     _Delay2ms:
  5462                           	callstack 27
  5463   001BDE                     
  5464                           ;lcd.c: 41:     unsigned char j, k;;lcd.c: 42:     for (j = 0; j < 20; j++)
  5465   001BDE  0E00               	movlw	0
  5466   001BE0  6E01               	movwf	Delay2ms@j^0,c
  5467   001BE2                     l2321:
  5468                           
  5469                           ;lcd.c: 43:         for (k = 0; k < 178; k++);
  5470   001BE2  0E00               	movlw	0
  5471   001BE4  6E02               	movwf	Delay2ms@k^0,c
  5472   001BE6                     l2327:
  5473   001BE6  2A02               	incf	Delay2ms@k^0,f,c
  5474   001BE8  0EB1               	movlw	177
  5475   001BEA  6402               	cpfsgt	Delay2ms@k^0,c
  5476   001BEC  EFFA  F00D         	goto	u2191
  5477   001BF0  EFFC  F00D         	goto	u2190
  5478   001BF4                     u2191:
  5479   001BF4  EFF3  F00D         	goto	l2327
  5480   001BF8                     u2190:
  5481   001BF8  2A01               	incf	Delay2ms@j^0,f,c
  5482   001BFA  0E13               	movlw	19
  5483   001BFC  6401               	cpfsgt	Delay2ms@j^0,c
  5484   001BFE  EF03  F00E         	goto	u2201
  5485   001C02  EF05  F00E         	goto	u2200
  5486   001C06                     u2201:
  5487   001C06  EFF1  F00D         	goto	l2321
  5488   001C0A                     u2200:
  5489   001C0A  0012               	return		;funcret
  5490   001C0C                     __end_of_Delay2ms:
  5491                           	callstack 0
  5492                           
  5493 ;; *************** function _kpDebounce *****************
  5494 ;; Defined at:
  5495 ;;		line 25 in file "keypad.c"
  5496 ;; Parameters:    Size  Location     Type
  5497 ;;		None
  5498 ;; Auto vars:     Size  Location     Type
  5499 ;;  j               1    0        unsigned char 
  5500 ;;  i               1    0        unsigned char 
  5501 ;; Return value:  Size  Location     Type
  5502 ;;                  1    wreg      void 
  5503 ;; Registers used:
  5504 ;;		wreg, status,2, status,0
  5505 ;; Tracked objects:
  5506 ;;		On entry : 0/0
  5507 ;;		On exit  : 0/0
  5508 ;;		Unchanged: 0/0
  5509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5510 ;;      Params:         0       0       0       0       0       0       0       0       0
  5511 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5512 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5513 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5514 ;;Total ram usage:        0 bytes
  5515 ;; Hardware stack levels used: 1
  5516 ;; This function calls:
  5517 ;;		Nothing
  5518 ;; This function is called by:
  5519 ;;		_main
  5520 ;; This function uses a non-reentrant model
  5521 ;;
  5522                           
  5523                           	psect	text48
  5524   0015CA                     __ptext48:
  5525                           	callstack 0
  5526   0015CA                     _kpDebounce:
  5527                           	callstack 30
  5528   0015CA                     
  5529                           ;keypad.c: 26:     unsigned char i, j;;keypad.c: 27:     static unsigned char tempo;;key
      +                          pad.c: 28:     static unsigned char teclaNew = 0x0000;;keypad.c: 29:     static unsigned
      +                           char teclaOld = 0x0001;;keypad.c: 31:     if (!((PORTB) & (1<<(2)))) ((teclaNew) |= (1<
      +                          <(0)));
  5530   0015CA  B481               	btfsc	129,2,c	;volatile
  5531   0015CC  EFEA  F00A         	goto	u1151
  5532   0015D0  EFEC  F00A         	goto	u1150
  5533   0015D4                     u1151:
  5534   0015D4  EFEF  F00A         	goto	l1835
  5535   0015D8                     u1150:
  5536   0015D8  8049               	bsf	kpDebounce@teclaNew^0,0,c
  5537   0015DA  EFF0  F00A         	goto	l1837
  5538   0015DE                     l1835:
  5539   0015DE  9049               	bcf	kpDebounce@teclaNew^0,0,c
  5540   0015E0                     l1837:
  5541                           
  5542                           ;keypad.c: 34:     if (!((PORTB) & (1<<(3)))) ((teclaNew) |= (1<<(1)));
  5543   0015E0  B681               	btfsc	129,3,c	;volatile
  5544   0015E2  EFF5  F00A         	goto	u1161
  5545   0015E6  EFF7  F00A         	goto	u1160
  5546   0015EA                     u1161:
  5547   0015EA  EFFA  F00A         	goto	l1841
  5548   0015EE                     u1160:
  5549   0015EE  8249               	bsf	kpDebounce@teclaNew^0,1,c
  5550   0015F0  EFFB  F00A         	goto	l1843
  5551   0015F4                     l1841:
  5552   0015F4  9249               	bcf	kpDebounce@teclaNew^0,1,c
  5553   0015F6                     l1843:
  5554                           
  5555                           ;keypad.c: 37:     if (!((PORTB) & (1<<(5)))) ((teclaNew) |= (1<<(2)));
  5556   0015F6  BA81               	btfsc	129,5,c	;volatile
  5557   0015F8  EF00  F00B         	goto	u1171
  5558   0015FC  EF02  F00B         	goto	u1170
  5559   001600                     u1171:
  5560   001600  EF05  F00B         	goto	l1847
  5561   001604                     u1170:
  5562   001604  8449               	bsf	kpDebounce@teclaNew^0,2,c
  5563   001606  EF06  F00B         	goto	l1849
  5564   00160A                     l1847:
  5565   00160A  9449               	bcf	kpDebounce@teclaNew^0,2,c
  5566   00160C                     l1849:
  5567                           
  5568                           ;keypad.c: 40:     if (!((PORTB) & (1<<(4)))) ((teclaNew) |= (1<<(3)));
  5569   00160C  B881               	btfsc	129,4,c	;volatile
  5570   00160E  EF0B  F00B         	goto	u1181
  5571   001612  EF0D  F00B         	goto	u1180
  5572   001616                     u1181:
  5573   001616  EF10  F00B         	goto	l1853
  5574   00161A                     u1180:
  5575   00161A  8649               	bsf	kpDebounce@teclaNew^0,3,c
  5576   00161C  EF11  F00B         	goto	l1855
  5577   001620                     l1853:
  5578   001620  9649               	bcf	kpDebounce@teclaNew^0,3,c
  5579   001622                     l1855:
  5580                           
  5581                           ;keypad.c: 43:     if (!((PORTE) & (1<<(1)))) ((teclaNew) |= (1<<(4)));
  5582   001622  B284               	btfsc	132,1,c	;volatile
  5583   001624  EF16  F00B         	goto	u1191
  5584   001628  EF18  F00B         	goto	u1190
  5585   00162C                     u1191:
  5586   00162C  EF1B  F00B         	goto	l1859
  5587   001630                     u1190:
  5588   001630  8849               	bsf	kpDebounce@teclaNew^0,4,c
  5589   001632  EF1C  F00B         	goto	l1861
  5590   001636                     l1859:
  5591   001636  9849               	bcf	kpDebounce@teclaNew^0,4,c
  5592   001638                     l1861:
  5593                           
  5594                           ;keypad.c: 46:     if (teclaOld == teclaNew) tempo--;
  5595   001638  5049               	movf	kpDebounce@teclaNew^0,w,c
  5596   00163A  1852               	xorwf	kpDebounce@teclaOld^0,w,c
  5597   00163C  A4D8               	btfss	status,2,c
  5598   00163E  EF23  F00B         	goto	u1201
  5599   001642  EF25  F00B         	goto	u1200
  5600   001646                     u1201:
  5601   001646  EF28  F00B         	goto	l1865
  5602   00164A                     u1200:
  5603   00164A  064A               	decf	kpDebounce@tempo^0,f,c
  5604   00164C  EF2C  F00B         	goto	l184
  5605   001650                     l1865:
  5606                           
  5607                           ;keypad.c: 48:         tempo = 10;
  5608   001650  0E0A               	movlw	10
  5609   001652  6E4A               	movwf	kpDebounce@tempo^0,c
  5610   001654                     
  5611                           ;keypad.c: 49:         teclaOld = teclaNew;
  5612   001654  C049  F052         	movff	kpDebounce@teclaNew,kpDebounce@teclaOld
  5613   001658                     l184:
  5614                           
  5615                           ;keypad.c: 52:     if (tempo == 0) tecla = teclaOld;
  5616   001658  504A               	movf	kpDebounce@tempo^0,w,c
  5617   00165A  A4D8               	btfss	status,2,c
  5618   00165C  EF32  F00B         	goto	u1211
  5619   001660  EF34  F00B         	goto	u1210
  5620   001664                     u1211:
  5621   001664  EF36  F00B         	goto	l186
  5622   001668                     u1210:
  5623   001668  C052  F04B         	movff	kpDebounce@teclaOld,_tecla
  5624   00166C                     l186:
  5625   00166C  0012               	return		;funcret
  5626   00166E                     __end_of_kpDebounce:
  5627                           	callstack 0
  5628                           
  5629 ;; *************** function _eventInit *****************
  5630 ;; Defined at:
  5631 ;;		line 12 in file "event.c"
  5632 ;; Parameters:    Size  Location     Type
  5633 ;;		None
  5634 ;; Auto vars:     Size  Location     Type
  5635 ;;		None
  5636 ;; Return value:  Size  Location     Type
  5637 ;;                  1    wreg      void 
  5638 ;; Registers used:
  5639 ;;		wreg, status,2, status,0, cstack
  5640 ;; Tracked objects:
  5641 ;;		On entry : 0/0
  5642 ;;		On exit  : 0/0
  5643 ;;		Unchanged: 0/0
  5644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5645 ;;      Params:         0       0       0       0       0       0       0       0       0
  5646 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5647 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5648 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5649 ;;Total ram usage:        0 bytes
  5650 ;; Hardware stack levels used: 1
  5651 ;; Hardware stack levels required when called: 1
  5652 ;; This function calls:
  5653 ;;		_kpInit
  5654 ;; This function is called by:
  5655 ;;		_main
  5656 ;; This function uses a non-reentrant model
  5657 ;;
  5658                           
  5659                           	psect	text49
  5660   001DC4                     __ptext49:
  5661                           	callstack 0
  5662   001DC4                     _eventInit:
  5663                           	callstack 29
  5664   001DC4                     
  5665                           ;event.c: 13:     kpInit();
  5666   001DC4  ECE9  F00E         	call	_kpInit	;wreg free
  5667   001DC8                     
  5668                           ;event.c: 14:     key_ant = 0;
  5669   001DC8  0E00               	movlw	0
  5670   001DCA  6E3B               	movwf	(_key_ant+1)^0,c
  5671   001DCC  0E00               	movlw	0
  5672   001DCE  6E3A               	movwf	_key_ant^0,c
  5673   001DD0  0012               	return		;funcret
  5674   001DD2                     __end_of_eventInit:
  5675                           	callstack 0
  5676                           
  5677 ;; *************** function _kpInit *****************
  5678 ;; Defined at:
  5679 ;;		line 7 in file "keypad.c"
  5680 ;; Parameters:    Size  Location     Type
  5681 ;;		None
  5682 ;; Auto vars:     Size  Location     Type
  5683 ;;		None
  5684 ;; Return value:  Size  Location     Type
  5685 ;;                  1    wreg      void 
  5686 ;; Registers used:
  5687 ;;		wreg, status,2, status,0
  5688 ;; Tracked objects:
  5689 ;;		On entry : 0/0
  5690 ;;		On exit  : 0/0
  5691 ;;		Unchanged: 0/0
  5692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5693 ;;      Params:         0       0       0       0       0       0       0       0       0
  5694 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5695 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5696 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5697 ;;Total ram usage:        0 bytes
  5698 ;; Hardware stack levels used: 1
  5699 ;; This function calls:
  5700 ;;		Nothing
  5701 ;; This function is called by:
  5702 ;;		_main
  5703 ;;		_eventInit
  5704 ;; This function uses a non-reentrant model
  5705 ;;
  5706                           
  5707                           	psect	text50
  5708   001DD2                     __ptext50:
  5709                           	callstack 0
  5710   001DD2                     _kpInit:
  5711                           	callstack 30
  5712   001DD2                     
  5713                           ;keypad.c: 16:     TRISB = 0xff;
  5714   001DD2  6893               	setf	147,c	;volatile
  5715   001DD4                     
  5716                           ;keypad.c: 17:     ADCON1 = 0b00001110;
  5717   001DD4  0E0E               	movlw	14
  5718   001DD6  6EC1               	movwf	193,c	;volatile
  5719   001DD8                     
  5720                           ;keypad.c: 18:     ((TRISE) |= (1<<(1)));
  5721   001DD8  8296               	bsf	150,1,c	;volatile
  5722   001DDA  0012               	return		;funcret
  5723   001DDC                     __end_of_kpInit:
  5724                           	callstack 0
  5725                           
  5726                           	psect	rparam
  5727   000000                     
  5728                           	psect	config
  5729                           
  5730                           ;Config register CONFIG1L @ 0x300000
  5731                           ;	unspecified, using default values
  5732                           ;	PLL Prescaler Selection bits
  5733                           ;	PLLDIV = 0x0, unprogrammed default
  5734                           ;	System Clock Postscaler Selection bits
  5735                           ;	CPUDIV = 0x0, unprogrammed default
  5736                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  5737                           ;	USBDIV = 0x0, unprogrammed default
  5738   300000                     	org	3145728
  5739   300000  00                 	db	0
  5740                           
  5741                           ;Config register CONFIG1H @ 0x300001
  5742                           ;	Oscillator Selection bits
  5743                           ;	FOSC = HS, HS oscillator (HS)
  5744                           ;	Fail-Safe Clock Monitor Enable bit
  5745                           ;	FCMEN = 0x0, unprogrammed default
  5746                           ;	Internal/External Oscillator Switchover bit
  5747                           ;	IESO = 0x0, unprogrammed default
  5748   300001                     	org	3145729
  5749   300001  0C                 	db	12
  5750                           
  5751                           ;Config register CONFIG2L @ 0x300002
  5752                           ;	unspecified, using default values
  5753                           ;	Power-up Timer Enable bit
  5754                           ;	PWRT = 0x1, unprogrammed default
  5755                           ;	Brown-out Reset Enable bits
  5756                           ;	BOR = 0x3, unprogrammed default
  5757                           ;	Brown-out Reset Voltage bits
  5758                           ;	BORV = 0x3, unprogrammed default
  5759                           ;	USB Voltage Regulator Enable bit
  5760                           ;	VREGEN = 0x0, unprogrammed default
  5761   300002                     	org	3145730
  5762   300002  1F                 	db	31
  5763                           
  5764                           ;Config register CONFIG2H @ 0x300003
  5765                           ;	Watchdog Timer Enable bit
  5766                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  5767                           ;	Watchdog Timer Postscale Select bits
  5768                           ;	WDTPS = 0xF, unprogrammed default
  5769   300003                     	org	3145731
  5770   300003  1E                 	db	30
  5771                           
  5772                           ; Padding undefined space
  5773   300004                     	org	3145732
  5774   300004  FF                 	db	255
  5775                           
  5776                           ;Config register CONFIG3H @ 0x300005
  5777                           ;	CCP2 MUX bit
  5778                           ;	CCP2MX = 0x1, unprogrammed default
  5779                           ;	PORTB A/D Enable bit
  5780                           ;	PBADEN = 0x1, unprogrammed default
  5781                           ;	Low-Power Timer 1 Oscillator Enable bit
  5782                           ;	LPT1OSC = 0x0, unprogrammed default
  5783                           ;	MCLR Pin Enable bit
  5784                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  5785   300005                     	org	3145733
  5786   300005  83                 	db	131
  5787                           
  5788                           ;Config register CONFIG4L @ 0x300006
  5789                           ;	Stack Full/Underflow Reset Enable bit
  5790                           ;	STVREN = 0x1, unprogrammed default
  5791                           ;	Single-Supply ICSP Enable bit
  5792                           ;	LVP = OFF, Single-Supply ICSP disabled
  5793                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  5794                           ;	ICPRT = 0x0, unprogrammed default
  5795                           ;	Extended Instruction Set Enable bit
  5796                           ;	XINST = 0x0, unprogrammed default
  5797                           ;	Background Debugger Enable bit
  5798                           ;	DEBUG = 0x1, unprogrammed default
  5799   300006                     	org	3145734
  5800   300006  81                 	db	129
  5801                           
  5802                           ; Padding undefined space
  5803   300007                     	org	3145735
  5804   300007  FF                 	db	255
  5805                           tosu	equ	0xFFF
  5806                           tosh	equ	0xFFE
  5807                           tosl	equ	0xFFD
  5808                           stkptr	equ	0xFFC
  5809                           pclatu	equ	0xFFB
  5810                           pclath	equ	0xFFA
  5811                           pcl	equ	0xFF9
  5812                           tblptru	equ	0xFF8
  5813                           tblptrh	equ	0xFF7
  5814                           tblptrl	equ	0xFF6
  5815                           tablat	equ	0xFF5
  5816                           prodh	equ	0xFF4
  5817                           prodl	equ	0xFF3
  5818                           indf0	equ	0xFEF
  5819                           postinc0	equ	0xFEE
  5820                           postdec0	equ	0xFED
  5821                           preinc0	equ	0xFEC
  5822                           plusw0	equ	0xFEB
  5823                           fsr0h	equ	0xFEA
  5824                           fsr0l	equ	0xFE9
  5825                           wreg	equ	0xFE8
  5826                           indf1	equ	0xFE7
  5827                           postinc1	equ	0xFE6
  5828                           postdec1	equ	0xFE5
  5829                           preinc1	equ	0xFE4
  5830                           plusw1	equ	0xFE3
  5831                           fsr1h	equ	0xFE2
  5832                           fsr1l	equ	0xFE1
  5833                           bsr	equ	0xFE0
  5834                           indf2	equ	0xFDF
  5835                           postinc2	equ	0xFDE
  5836                           postdec2	equ	0xFDD
  5837                           preinc2	equ	0xFDC
  5838                           plusw2	equ	0xFDB
  5839                           fsr2h	equ	0xFDA
  5840                           fsr2l	equ	0xFD9
  5841                           status	equ	0xFD8

Data Sizes:
    Strings     142
    Constant    0
    Data        7
    BSS         27
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     48      82
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    lcdString@msg	PTR unsigned char  size(1) Largest target is 17
		 -> STR_1(CODE[16]), STR_2(CODE[16]), STR_3(CODE[16]), STR_4(CODE[16]), 
		 -> STR_5(CODE[16]), STR_6(CODE[16]), STR_7(CODE[12]), STR_8(CODE[17]), 
		 -> STR_9(CODE[17]), 

    msgs	PTR unsigned char [2][3] size(1) Largest target is 16
		 -> STR_1(CODE[16]), STR_2(CODE[16]), STR_3(CODE[16]), STR_4(CODE[16]), 
		 -> STR_5(CODE[16]), STR_6(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->_smLoop
    _varInit->_setAlarmLevel
    _i2cInit->_pinMode
    _smLoop->_eventRead
    _outputPrint->_lcdInt
    _lcdString->_lcdData
    _getTime->_dsReadData
    _getLanguage->_dsReadData
    _getAlarmLevel->_lcdInt
    _lcdInt->_getTime
    _lcdData->_lcdCommand4bits
    _dsReadData->_i2cReadByte
    _i2cReadByte->_i2c_read_bit
    _i2cReadByte->_i2c_write_bit
    _eventRead->_setAlarmLevel
    _setTime->_getTime
    _dec2bcd->___awmod
    ___awmod->___awdiv
    _setLanguage->_dsWriteData
    _setAlarmLevel->_getAlarmLevel
    _dsWriteData->_i2cWriteByte
    _i2cWriteByte->_i2c_read_bit
    _i2cWriteByte->_i2c_write_bit
    _clear_SDA->_digitalWrite
    _clear_SDA->_pinMode
    _read_SDA->_pinMode
    _read_SCL->_pinMode
    _clear_SCL->_digitalWrite
    _clear_SCL->_pinMode
    _outputInit->_lcdInit
    _lcdInit->_lcdCommand
    _lcdCommand->_Delay2ms
    _lcdCommand->_lcdCommand4bits

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  486672
                          _eventInit
                         _kpDebounce
                             _kpInit
                            _lcdInit
                         _outputInit
                         _serialInit
                             _smLoop
                            _varInit
 ---------------------------------------------------------------------------------
 (1) _varInit                                              0     0      0   60646
                             _dsInit
                      _setAlarmLevel
                            _setTime
 ---------------------------------------------------------------------------------
 (2) _dsInit                                               0     0      0    1352
                            _i2cInit
 ---------------------------------------------------------------------------------
 (3) _i2cInit                                              0     0      0    1352
                            _pinMode
 ---------------------------------------------------------------------------------
 (1) _smLoop                                               4     4      0  422426
                                             44 COMRAM     4     4      0
                          _eventRead
                      _getAlarmLevel
                        _getLanguage
                           _getState
                            _getTime
                        _outputPrint
                      _setAlarmLevel
                        _setLanguage
                           _setState
                            _setTime
 ---------------------------------------------------------------------------------
 (2) _setState                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _outputPrint                                          4     0      4  100289
                                             24 COMRAM     4     0      4
                        _getLanguage
                           _getState (ARG)
                            _getTime
                         _lcdCommand
                             _lcdInt
                          _lcdString
 ---------------------------------------------------------------------------------
 (3) _lcdString                                            4     3      1    1354
                                              3 COMRAM     4     3      1
                            _lcdData
 ---------------------------------------------------------------------------------
 (3) _getTime                                              4     2      2   47015
                                             18 COMRAM     4     2      2
                         _dsReadData
 ---------------------------------------------------------------------------------
 (3) _getLanguage                                          0     0      0   47015
                         _dsReadData
 ---------------------------------------------------------------------------------
 (2) _getState                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getAlarmLevel                                        4     2      2   51570
                                             24 COMRAM     4     2      2
                         _dsReadData
                         _lcdCommand
                             _lcdInt
 ---------------------------------------------------------------------------------
 (3) _lcdInt                                               2     0      2    3611
                                             22 COMRAM     2     0      2
                            ___awdiv
                            ___awmod
                            _getTime (ARG)
                            _lcdData
 ---------------------------------------------------------------------------------
 (4) _lcdData                                              1     1      0     808
                                              2 COMRAM     1     1      0
                          _Delay40us
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (4) _dsReadData                                           5     3      2   47015
                                             13 COMRAM     5     3      2
                        _i2cReadByte
                       _i2cWriteByte
 ---------------------------------------------------------------------------------
 (5) _i2cReadByte                                          6     5      1   19023
                                              7 COMRAM     6     5      1
                       _i2c_read_bit
                           _i2c_stop
                      _i2c_write_bit
 ---------------------------------------------------------------------------------
 (2) _eventRead                                           14    12      2   88986
                                             30 COMRAM    14    12      2
                             ___wmul
                             _kpRead
                         _serialRead
                      _setAlarmLevel
                        _setLanguage
                            _setTime
 ---------------------------------------------------------------------------------
 (2) _setTime                                              2     0      2   30955
                                             22 COMRAM     2     0      2
                             ___wmul (ARG)
                            _dec2bcd
                        _dsWriteData
                            _getTime (ARG)
 ---------------------------------------------------------------------------------
 (3) _dec2bcd                                              4     2      2    2616
                                             14 COMRAM     4     2      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1208
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1212
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _setLanguage                                          1     1      0   28013
                                             14 COMRAM     1     1      0
                        _dsWriteData
 ---------------------------------------------------------------------------------
 (2) _setAlarmLevel                                        2     0      2   28339
                                             28 COMRAM     2     0      2
                             ___wmul (ARG)
                        _dsWriteData
                      _getAlarmLevel (ARG)
 ---------------------------------------------------------------------------------
 (3) _dsWriteData                                          3     1      2   27991
                                             11 COMRAM     3     1      2
                       _i2cWriteByte
 ---------------------------------------------------------------------------------
 (4) _i2cWriteByte                                         5     3      2   27491
                                              7 COMRAM     4     2      2
                       _i2c_read_bit
                          _i2c_start
                           _i2c_stop
                      _i2c_write_bit
 ---------------------------------------------------------------------------------
 (5) _i2c_write_bit                                        1     1      0    7692
                                              6 COMRAM     1     1      0
                          _I2C_delay
                          _clear_SCL
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (5) _i2c_stop                                             0     0      0    5548
                          _I2C_delay
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (5) _i2c_start                                            0     0      0    7648
                          _I2C_delay
                          _clear_SCL
                          _clear_SDA
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (6) _clear_SDA                                            0     0      0    2100
                       _digitalWrite
                            _pinMode
 ---------------------------------------------------------------------------------
 (5) _i2c_read_bit                                         1     1      0    5571
                                              6 COMRAM     1     1      0
                          _I2C_delay
                          _clear_SCL
                           _read_SCL
                           _read_SDA
 ---------------------------------------------------------------------------------
 (6) _read_SDA                                             0     0      0    1724
                        _digitalRead
                            _pinMode
 ---------------------------------------------------------------------------------
 (6) _read_SCL                                             0     0      0    1724
                        _digitalRead
                            _pinMode
 ---------------------------------------------------------------------------------
 (7) _digitalRead                                          5     3      2     372
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (6) _clear_SCL                                            0     0      0    2100
                       _digitalWrite
                            _pinMode
 ---------------------------------------------------------------------------------
 (7) _pinMode                                              6     2      4    1352
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) _digitalWrite                                         6     2      4     748
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _I2C_delay                                            4     4      0       0
 ---------------------------------------------------------------------------------
 (3) _serialRead                                           1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _kpRead                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1515
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _serialInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _outputInit                                           0     0      0    1800
                            _lcdInit
 ---------------------------------------------------------------------------------
 (2) _lcdInit                                              1     1      0    1800
                                              3 COMRAM     1     1      0
                           _Delay2ms
                         _lcdCommand
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (3) _lcdCommand                                           1     1      0     944
                                              2 COMRAM     1     1      0
                           _Delay2ms
                          _Delay40us
                    _lcdCommand4bits
 ---------------------------------------------------------------------------------
 (5) _lcdCommand4bits                                      2     1      1     718
                                              0 COMRAM     2     1      1
                        _pulseEnable
 ---------------------------------------------------------------------------------
 (6) _pulseEnable                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Delay40us                                            1     1      0      46
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Delay2ms                                             2     2      0      92
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _kpDebounce                                           2     2      0       0
 ---------------------------------------------------------------------------------
 (1) _eventInit                                            0     0      0       0
                             _kpInit
 ---------------------------------------------------------------------------------
 (1) _kpInit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _eventInit
     _kpInit
   _kpDebounce
   _kpInit
   _lcdInit
     _Delay2ms
     _lcdCommand
       _Delay2ms
       _Delay40us
       _lcdCommand4bits
         _pulseEnable
     _lcdCommand4bits
   _outputInit
     _lcdInit
   _serialInit
   _smLoop
     _eventRead
       ___wmul
       _kpRead
       _serialRead
       _setAlarmLevel
         ___wmul (ARG)
         _dsWriteData (ARG)
           _i2cWriteByte
             _i2c_read_bit
               _I2C_delay
               _clear_SCL
                 _digitalWrite
                 _pinMode
               _read_SCL
                 _digitalRead
                 _pinMode
               _read_SDA
                 _digitalRead
                 _pinMode
             _i2c_start
               _I2C_delay
               _clear_SCL
               _clear_SDA
                 _digitalWrite
                 _pinMode
               _read_SCL
               _read_SDA
             _i2c_stop
               _I2C_delay
               _clear_SDA
               _read_SCL
               _read_SDA
             _i2c_write_bit
               _I2C_delay
               _clear_SCL
               _clear_SDA
               _read_SCL
               _read_SDA
         _getAlarmLevel (ARG)
           _dsReadData
             _i2cReadByte
               _i2c_read_bit
               _i2c_stop
               _i2c_write_bit
             _i2cWriteByte
           _lcdCommand
           _lcdInt
             ___awdiv
             ___awmod
               ___awdiv (ARG)
             _getTime (ARG)
               _dsReadData
             _lcdData (ARG)
               _Delay40us
               _lcdCommand4bits
       _setLanguage
         _dsWriteData
       _setTime
         ___wmul (ARG)
         _dec2bcd (ARG)
           ___awdiv
           ___awmod
         _dsWriteData (ARG)
         _getTime (ARG)
     _getAlarmLevel
     _getLanguage
       _dsReadData
     _getState
     _getTime
     _outputPrint
       _getLanguage
       _getState (ARG)
       _getTime (ARG)
       _lcdCommand (ARG)
       _lcdInt (ARG)
       _lcdString (ARG)
         _lcdData
     _setAlarmLevel
     _setLanguage
     _setState
     _setTime
   _varInit
     _dsInit
       _i2cInit
         _pinMode
     _setAlarmLevel
     _setTime

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      28        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     30      52       1       86.3%
BITBIGSFRhhhh       3E      0       0      20        0.0%
BITBIGSFRllll       20      0       0      26        0.0%
BITBIGSFRllh         D      0       0      25        0.0%
BITBIGSFRhll         C      0       0      23        0.0%
BITBIGSFRhhhl        8      0       0      21        0.0%
BITBIGSFRlh          7      0       0      24        0.0%
BITBIGSFRhhlh        7      0       0      22        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      52      27        0.0%
DATA                 0      0      52       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Wed Jun 05 08:24:47 2024

     __end_of_setAlarmLevel 1D04                lcdString@msg 0004                          l21 1CCE  
                        l52 1C36                          l71 1C0A                          l55 1D82  
                        l64 1DB2                          l74 1DFC              setTime@newTime 0017  
                        l94 19E4                          l87 175C                          l97 1D68  
              ___awdiv@sign 0006         ___wmul@multiplicand 0003               ??_i2cReadByte 0009  
     i2cWriteByte@send_stop 0008              i2cReadByte@bit 000B                         l102 16E4  
                       l201 1B18                         l210 1C8A                         l114 1954  
                       l131 190A                         l204 1AE0                         l220 1A70  
                       l301 126A                         l302 1266                         l118 1364  
                       l207 1CB4                         l143 1BAE                         l161 1DDA  
                       l137 1DF0                         l306 1266                         l242 1B80  
                       l146 1A2A                         l331 0D38                         l227 1BDC  
                       l164 1E04                         l236 1814                         l501 1D02  
                       l350 1DD0                         l510 1D28                         l255 1868  
                       l415 1100                         l184 1658                         l432 1DF6  
                       l504 1DC2                         l440 1454                         l249 17BC  
                       l186 166C                         l507 1D9A                         l195 1C60  
                       l365 0998                         l198 1E06                         l470 1E00  
                       l375 0AEA                         l480 1AA8                         l297 0F86  
                       l369 0AE2                         l473 1DE2                         l467 1D4A  
                       l741 1518                         l494 18BA                         l487 199C  
                       l754 15C8                ___awmod@sign 000E                         wreg 0FE8  
          i2c_write_bit@bit 0007               ?_i2cWriteByte 0008      i2cWriteByte@send_start 000A  
           i2cReadByte@nack 000A             i2cReadByte@byte 000D                        l2001 11AA  
                      l2021 0D3A                        l2101 1BCC                        l2031 0DC6  
                      l2023 0D56                        l2015 121E                        l2007 11D6  
                      l2103 1BD0                        l2111 17D0                        l2041 0E58  
                      l2033 0DE0                        l2025 0D68                        l2017 123A  
                      l2009 11F2                        l2105 1BD4                        l2121 1804  
                      l2113 17D8                        l2201 1792                        l2051 0EF0  
                      l2043 0E78                        l2035 0E00                        l2027 0D88  
                      l2131 1B54                        l2107 1BD8                        l2123 1808  
                      l2115 17DC                        l2203 1794                        l2053 0F12  
                      l2045 0E9A                        l2037 0E22                        l2029 0DAA  
                      l2061 1AE2                        l2141 1B7E                        l2133 1B58  
                      l2125 180C                        l2117 17E0                        l2109 17C0  
                      l2205 17A4                        l2301 1594                        l2221 1832  
                      l2213 1818                        l2151 1DA0                        l2055 0F2E  
                      l2047 0EB6                        l2039 0E3E                        l2135 1B6C  
                      l2071 1C62                        l2127 1810                        l2119 17F4  
                      l2207 17A8                        l2311 15C0                        l2303 159C  
                      l2231 1866                        l2223 1836                        l2321 1BE2  
                      l2153 1DA2                        l2145 1D9C                        l2073 1DF8  
                      l2161 1700                        l2057 0F48                        l2049 0ED0  
                      l2065 1AAA                        l2137 1B72                        l2129 1B50  
                      l2081 1A44                        l2209 17B8                        l2241 1470  
                      l2305 15A2                        l2225 184C                        l2331 1BF8  
                      l2315 1BDE                        l2171 172A                        l2163 170E  
                      l2155 16E8                        l2059 0F68                        l2139 1B76  
                      l2091 1A68                        l2083 1A58                        l2075 1A2C  
                      l2411 1CE2                        l2251 1496                        l2243 1474  
                      l2235 1456                        l2307 15A8                        l2403 1956  
                      l2227 1852                        l2219 1824                        l2333 1BFA  
                      l2181 1750                        l2173 172C                        l2165 1714  
                      l2157 16F8                        l2069 1C8C                        l2093 1A6C  
                      l2077 1A3C                        l2085 1A5C                        l2413 1CE6  
                      l2405 1D86                        l2261 14CC                        l2253 14A8  
                      l2245 1482                        l2237 145A                        l2309 15B8  
                      l2501 09C6                        l2229 1862                        l2341 19E6  
                      l2327 1BE6                        l2183 1756                        l2175 173A  
                      l2167 1716                        l2159 16FE                        l2351 1C10  
                      l2087 1A60                        l2079 1A40                        l2095 1BB0  
                      l2191 1774                        l2415 1CF4                        l2407 1D8C  
                      l2263 14E2                        l2255 14B0                        l2271 14F8  
                      l2247 148A                        l2239 1468                        l2511 0A84  
                      l2503 09D8                        l2343 1A22                        l2335 1D4E  
                      l2423 1DB4                        l2329 1BE8                        l2185 1758  
                      l2177 1740                        l2169 1724                        l2441 167E  
                      l2433 166E                        l2353 1C1E                        l2089 1A64  
                      l2097 1BB4                        l2409 1CDE                        l2273 1508  
                      l2265 14EA                        l2257 14B8                        l2249 148E  
                      l2281 151E                        l2337 18BC                        l2505 0A32  
                      l2513 0AE2                        l2521 18A4                        l2417 1A72  
                      l2601 1064                        l2179 1742                        l2371 19E0  
                      l2363 19A0                        l2443 1682                        l2435 167A  
                      l1811 1D6A                        l2427 1D04                        l2355 1C22  
                      l2099 1BB8                        l2187 1760                        l2347 1B84  
                      l2275 1510                        l2267 14EC                        l2259 14C6  
                      l2291 154E                        l2283 152C                        l2507 0A44  
                      l2451 0890                        l2419 1A92                        l2531 1378  
                      l2611 10B2                        l2603 1076                        l2365 19B6  
                      l2445 1684                        l1813 1D7E                        l2429 1D20  
                      l2357 1C30                        l2349 1C0C                        l2197 1778  
                      l2189 1770                        l2269 14F2                        l2293 1560  
                      l2285 1534                        l2509 0A72                        l2461 08D2  
                      l2453 0898                        l2381 126C                        l2525 1DFE  
                      l2373 190C                        l2533 137E                        l2541 13B2  
                      l2517 1DDE                        l2605 1082                        l2621 1CB6  
                      l1831 15CA                        l2367 19C8                        l2447 1694  
                      l1815 1D80                        l2359 1C34                        l2199 178E  
                      l2295 1568                        l2287 1538                        l2279 151A  
                      l2471 0906                        l2463 08E0                        l2455 08A4  
                      l2391 12E8                        l2383 127A                        l2519 186A  
                      l2375 1918                        l2551 13FA                        l2543 13C4  
                      l2535 1394                        l2607 1094                        l2615 10BC  
                      l2623 1CD2                        l1673 1DD2                        l1825 1DC4  
                      l1841 15F4                        l1833 15D8                        l2369 19D8  
                      l2297 1570                        l2289 1546                        l2481 093E  
                      l2473 090C                        l2465 08E8                        l2457 08BC  
                      l2393 1318                        l2385 1282                        l2377 192E  
                      l2561 1438                        l2553 1400                        l2545 13CA  
                      l2537 139A                        l2529 1366                        l2609 10A0  
                      l2617 10DC                        l2449 1DEC                        l1675 1DD4  
                      l1827 1DC8                        l1851 161A                        l1843 15F6  
                      l1835 15DE                        l2299 157E                        l2491 098C  
                      l2483 0950                        l2475 091C                        l2467 08F6  
                      l2459 08CA                        l2395 1348                        l2387 1288  
                      l2379 1932                        l2563 144C                        l2555 1416  
                      l2547 13E0                        l2539 13AA                        l2619 10E8  
                      l2571 1D3E                        l1677 1DD8                        l1861 1638  
                      l1853 1620                        l1845 1604                        l1837 15E0  
                      l2573 1DF2                        l2485 095C                        l2493 0998  
                      l2477 092C                        l2469 08FE                        l2389 12B8  
                      l2557 141C                        l2549 13E6                        l2581 0FBA  
                      l2397 1C38                        l2565 1D2A                        l1863 164A  
                      l1855 1622                        l1847 160A                        l1839 15EE  
                      l2399 1E02                        l1951 0B5C                        l1943 0AEC  
                      l2495 09AA                        l2487 096E                        l2479 0938  
                      l2559 1430                        l2591 100E                        l2583 0FCC  
                      l2575 0F88                        l2567 1D2E                        l1865 1650  
                      l1857 1630                        l1849 160C                        l1961 0BF0  
                      l1953 0B78                        l1945 0B08                        l2497 09BA  
                      l2489 097A                        l2593 1022                        l2585 0FE0  
                      l2577 0F94                        l2569 1D32                        l1867 1654  
                      l1859 1636                        l1971 0C7A                        l1963 0C02  
                      l1955 0B8A                        l1947 0B1A                        l2499 09C2  
                      l2595 1034                        l2587 0FF2                        l2579 0FA6  
                      l1869 1668                        l1981 0D16                        l1973 0C9E  
                      l1965 0C26                        l1957 0BAE                        l1949 0B3A  
                      l2597 1048                        l2589 0FFC                        l1975 0CC4  
                      l1967 0C4C                        l1959 0BD4                        l1991 1146  
                      l1983 1102                        l2599 105A                        l1977 0CE0  
                      l1969 0C68                        l1993 1162                        l1985 111E  
                      l1979 0CF2                        l1999 118E                        STR_1 0863  
                      STR_2 0833                        STR_3 0843                        STR_4 0823  
                      STR_5 0853                        STR_6 0873                        STR_7 0883  
                      STR_8 0812                        STR_9 0801                        u1200 164A  
                      u2000 1770                        u1201 1646                        u2001 176C  
                      u1210 1668                        u2010 1788                        u1211 1664  
                      u2011 1782                        u2020 178A                        u2100 14C6  
                      u2101 14C2                        u1150 15D8                        u2030 17A4  
                      u2110 14E2                        u1151 15D4                        u2031 17A0  
                      u2111 14DE                        u1160 15EE                        u2200 1C0A  
                      u2040 17B8                        u2120 1508                        u1161 15EA  
                      u2201 1C06                        u2041 17B4                        u2121 1504  
                      u1170 1604                        u2210 1C1E                        u1410 0BF0  
                      u1330 0B08                        u2130 152C                        u2050 184C  
                      u1171 1600                        u2211 1C1A                        u1411 0BEC  
                      u1331 0B04                        u2131 1528                        u2051 1848  
                      u1180 161A                        u2220 1C30                        u1500 0CF2  
                      u1420 0C02                        u1404 0BC4                        u1340 0B1A  
                      u2140 1546                        u2300 08E0                        u2060 1862  
                      u1181 1616                        u2221 1C2C                        u1501 0CEE  
                      u1421 0BFE                        u1405 0BC0                        u1341 0B16  
                      u2141 1542                        u2301 08DC                        u2061 185E  
                      u1190 1630                        u2230 19C8                        u2070 1468  
                      u2150 1560                        u2310 08F6                        u1191 162C  
                      u2231 19C4                        u2071 1464                        u2151 155C  
                      u2311 08F2                        u2240 19D8                        u2080 1482  
                      u2160 157E                        u2400 0A44                        u2320 091C  
                      u2241 19D4                        u2081 147E                        u2161 157A  
                      u2401 0A40                        u2321 0918                        u1514 0D08  
                      u1450 0C68                        u1434 0C18                        u1370 0B78  
                      u1354 0B2C                        u1610 123A                        u1530 111E  
                      u2090 14A8                        u2170 1594                        u2410 0A84  
                      u2330 092C                        u2250 1954                        u1515 0D04  
                      u1451 0C64                        u1435 0C14                        u1371 0B74  
                      u1355 0B28                        u1611 1236                        u1531 111A  
                      u2091 14A4                        u2171 1590                        u2411 0A80  
                      u2331 0928                        u2251 1950                        u1524 0D2C  
                      u1460 0C7A                        u1444 0C3C                        u1380 0B8A  
                      u1364 0B4C                        u1604 1208                        u2180 15B8  
                      u2340 0950                        u2260 127A                        u2420 1378  
                      u2500 100E                        u1525 0D28                        u1461 0C76  
                      u1445 0C38                        u1381 0B86                        u1365 0B48  
                      u1605 1204                        u2181 15B4                        u2341 094C  
                      u2261 1276                        u2421 1374                        u2501 100A  
                      u2190 1BF8                        u2270 1694                        u1710 0E3E  
                      u1630 0D56                        u1550 1162                        u2350 096E  
                      u2430 13C4                        u2510 1034                        u2191 1BF4  
                      u2271 1690                        u1711 0E3A                        u1631 0D52  
                      u1551 115E                        u2351 096A                        u2431 13C0  
                      u2511 1030                        u1800 0F48                        u1720 0E58  
                      u1704 0E12                        u1640 0D68                        u1624 1250  
                      u1544 1130                        u2360 098C                        u2280 08BC  
                      u2440 13FA                        u2520 105A                        u1801 0F44  
                      u1721 0E54                        u1705 0E0E                        u1641 0D64  
                      u1625 124C                        u1545 112C                        u2361 0988  
                      u2281 08B8                        u2441 13F6                        u2521 1056  
                      u1490 0CE0                        u1474 0C90                        u1394 0BA0  
                      u1570 11AA                        u2370 09AA                        u2290 08CA  
                      u2450 1430                        u2530 1076                        u1491 0CDC  
                      u1475 0C8C                        u1395 0B9C                        u1571 11A6  
                      u2371 09A6                        u2291 08C6                        u2451 142C  
                      u2531 1072                        u1484 0CB4                        u1564 1178  
                      u1900 17D0                        u2380 09BA                        u2460 144C  
                      u2540 1094                        u1485 0CB0                        u1565 1174  
                      u1901 17CC                        u2381 09B6                        u2461 1448  
                      u2541 1090                        u1814 0F5A                        u1750 0EB6  
                      u1734 0E6A                        u1670 0DC6                        u1654 0D7A  
                      u1590 11F2                        u1830 1B16                        u1910 17F4  
                      u2390 09D8                        u2550 10B2                        u2470 0FA6  
                      u1815 0F56                        u1751 0EB2                        u1735 0E66  
                      u1671 0DC2                        u1655 0D76                        u1591 11EE  
                      u1831 1B10                        u1911 17F0                        u2391 09D4  
                      u2551 10AE                        u2471 0FA2                        u1824 0F7A  
                      u1760 0ED0                        u1744 0E8A                        u1680 0DE0  
                      u1664 0D9A                        u1584 11C0                        u1840 1B18  
                      u1920 1804                        u2480 0FCC                        u1825 0F76  
                      u1761 0ECC                        u1745 0E86                        u1681 0DDC  
                      u1665 0D96                        u1585 11BC                        u1921 1800  
                      u2481 0FC8                        u1850 1ADE                        u1930 1B6C  
                      u2490 0FF2                        u1851 1AD8                        u1931 1B68  
                      u2491 0FEE                        u1940 1DB2                        u1860 1AE0  
                      u1941 1DAE                        u1950 16F8                        u1790 0F2E  
                      u1774 0EE2                        u1694 0DF2                        u1870 1A3C  
                      u1951 16F4                        u1791 0F2A                        u1775 0EDE  
                      u1695 0DEE                        u1871 1A38                        u1960 170E  
                      u1784 0F02                        u1880 1A58                        u1961 170A  
                      u1785 0EFE                        u1881 1A54                        u1970 1724  
                      u1890 1BCC                        u1971 1720                        u1891 1BC8  
                      u1980 173A                        u1981 1736                        u1990 1750  
                      u1991 174C                        _PIR1 0F9E                 _outputPrint 1366  
                      _main 1CB6                        _msgs 004C                        _time 0038  
                      fsr2h 0FDA                        indf2 0FDF                        fsr1l 0FE1  
                      fsr2l 0FD9               ?_i2c_read_bit 0001                        prodh 0FF4  
                      prodl 0FF3                        start 0000                ___param_bank 0000  
           __end_of_i2cInit 1C62                       ?_main 0001             __end_of_dec2bcd 190C  
           __end_of___awdiv 151A            ?_lcdCommand4bits 0001             __end_of___awmod 15CA  
           ___awdiv@divisor 0003             ___awdiv@counter 0005                       _RCREG 0FAE  
                     _RCSTA 0FAB                       _SPBRG 0FAF                       _PORTA 0F80  
                     _PORTB 0F81                       _PORTC 0F82                       _PORTD 0F83  
                     _PORTE 0F84                       _TRISA 0F92                       _TRISB 0F93  
                     _TRISC 0F94                       _TRISD 0F95                       _TRISE 0F96  
                     _TXREG 0FAD                       _TXSTA 0FAC             __end_of_lcdData 1D6A  
           __end_of_lcdInit 16E6              ??_i2cWriteByte 000A             __end_of_getTime 1AAA  
          _reading_protocol 0047         __end_of_i2cReadByte 186A          outputPrint@numTela 0019  
                     _tecla 004B             __end_of_pinMode 0D3A                       _state 0045  
           __end_of_varInit 1D4C                dec2bcd@value 000F             __end_of_setTime 199E  
                     tablat 0FF5           __end_of_I2C_delay 1E08               _i2c_write_bit 17BE  
                     status 0FD8              ??_i2c_read_bit 0007            __end_of_Delay2ms 1C0C  
      __end_of_digitalWrite 0F88             __initialization 1B1A                __end_of_main 1CDE  
           i2cWriteByte@bit 000B            __end_of_i2c_stop 1BDE                ?_setLanguage 0001  
                    ??_main 0031               __activetblptr 0002                      _ADCON1 0FC1  
               eventRead@ev 0029            ___awdiv@dividend 0001              ?_i2c_write_bit 0001  
            getAlarmLevel@a 003F              getAlarmLevel@b 003E                      _SPBRGH 0FB0  
                 ??_i2cInit 0007       __end_of_getAlarmLevel 18BC          dsWriteData@address 000C  
          __end_of_getState 1E02                   ??_dec2bcd 0011                      ___wmul 1D04  
                 ??___awdiv 0005                   ??___awmod 000D                      _dsInit 1DEC  
                    _lcdInt 126C                      _kpInit 1DD2                      _kpRead 1E02  
          __end_of_read_SDA 1AE2            __end_of_read_SCL 1B1A          kpDebounce@teclaOld 0052  
        kpDebounce@teclaNew 0049                      clear_0 1B40                      _smLoop 0F88  
          ___awdiv@quotient 0007             ___awmod@divisor 000B                   ??_lcdData 0003  
                    isa$std 0001                 _i2cReadByte 1816                   ??_lcdInit 0004  
           ___awmod@counter 000D                   ??_getTime 0015            __end_of_setState 1DE4  
              __pdataCOMRAM 004C                   ??_pinMode 0005                __mediumconst 0000  
                 ??_varInit 001F                   ??_setTime 0019                      tblptrh 0FF7  
                    tblptrl 0FF6                      tblptru 0FF8           __end_of_Delay40us 1DB4  
                __accesstop 0060     __end_of__initialization 1B46               ___rparam_used 0001  
              ?_pulseEnable 0001                 pinMode@type 0003        __end_of_i2cWriteByte 17BE  
            __pcstackCOMRAM 0001            i2cWriteByte@byte 0009           __end_of_i2c_start 1A72  
      __end_of_i2c_read_bit 1B82                   ?_Delay2ms 0001             ??_i2c_write_bit 0007  
              ?_outputPrint 0019                  _alarmLevel 0036                   ?_i2c_stop 0001  
                _dsReadData 19E6            dsReadData@result 0011                  _lcdCommand 199E  
                   ?___wmul 0001                     ?_dsInit 0001                     ?_lcdInt 0017  
                   ?_kpInit 0001                     ?_kpRead 0001                eventRead@key 002B  
              eventRead@msg 0031                     _BAUDCON 0FB8                     ?_smLoop 0001  
                _kpDebounce 15CA                  ??_Delay2ms 0001        i2cReadByte@send_stop 0008  
              _digitalWrite 0D3A                   ?_getState 0001           __end_of_clear_SDA 1C8C  
         __end_of_clear_SCL 1CB6                   ?_read_SDA 0001                   ?_read_SCL 0001  
                ??_i2c_stop 0007                     _i2cInit 1C38                   _I2C_delay 1E06  
                   __Hparam 0000                   ?_setState 0001                     __Lparam 0000  
         __end_of_lcdString 1956             kpDebounce@tempo 004A                     _dec2bcd 18BC  
                   ___awdiv 1456                     ___awmod 151A                __psmallconst 0800  
                   __pcinit 1B1A              serialRead@resp 0001                     _lcdData 1D4C  
                   __ramtop 0800                     _lcdInit 166E                     __ptext0 1CB6  
                   __ptext1 1D2A                     __ptext2 1DEC                     __ptext3 1C38  
                   _getTime 1A72                     __ptext4 0F88                     __ptext5 1DDC  
                   __ptext6 1366                     __ptext7 190C                     __ptext8 1A72  
                   __ptext9 1DB4           __end_of_eventInit 1DD2           __end_of_eventRead 0AEC  
                   _key_ant 003A                     _pinMode 0AEC            ___awmod@dividend 0009  
                   _varInit 1D2A                     _setTime 1956              setAlarmLevel@a 003D  
            setAlarmLevel@b 003C                  ??_getState 0001                   Delay2ms@j 0001  
                 Delay2ms@k 0002                     _started 0048        end_of_initialization 1B46  
                ??_read_SDA 0007                  ??_read_SCL 0007               __Lmediumconst 0000  
               ?_dsReadData 000E              digitalRead@pin 0001                  ?_I2C_delay 0001  
                ??_setState 0001                  _serialInit 1D6A                  _serialRead 1C0C  
                   postdec1 0FE5                 ?_lcdCommand 0001                     postinc0 0FEE  
             _setAlarmLevel 1CDE               ??_digitalRead 0003               ??_getLanguage 0013  
               ?_kpDebounce 0001                ?_i2cReadByte 0008             i2c_read_bit@bit 0007  
                lcdString@i 0006                _i2cWriteByte 175E               ??_dsWriteData 000E  
                 _Delay40us 1D9C                  _outputInit 1DF2                _i2c_read_bit 1B50  
            ?_setAlarmLevel 001D           outputPrint@idioma 001B              __end_of___wmul 1D2A  
            __end_of_dsInit 1DF2               __pidataCOMRAM 1DE4              __end_of_lcdInt 1366  
            __end_of_kpInit 1DDC              __end_of_kpRead 1E06              __end_of_smLoop 1102  
       start_initialization 1B1A         __end_of_digitalRead 126C         __end_of_getLanguage 1DC4  
                 _i2c_start 1A2C                  ?_Delay40us 0001                smLoop@evento 0030  
         ??_lcdCommand4bits 0002                 ??_I2C_delay 0001         __end_of_dsWriteData 1BB0  
               ?_serialInit 0001                 ?_serialRead 0001                    ??___wmul 0005  
                  ??_dsInit 0007                    ??_lcdInt 0019                    ??_kpInit 0001  
                  ??_kpRead 0001                    ??_smLoop 002D           dsReadData@address 000E  
               __pbssCOMRAM 0031                  pinMode@pin 0001                  ?_i2c_start 0001  
          setState@newState 0001       __end_of_i2c_write_bit 1816                    ?_i2cInit 0001  
               ?_outputInit 0001               _getAlarmLevel 186A             ??_setAlarmLevel 001F  
                 _clear_SDA 1C62                   _clear_SCL 1C8C                    ?_dec2bcd 000F  
                  ?___awdiv 0001                    ?___awmod 0009                   _lcdString 190C  
               _digitalRead 1102                 _getLanguage 1DB4                    ?_lcdData 0001  
             ??_setLanguage 000F                    ?_lcdInit 0001                    ?_getTime 0013  
             lcdCommand@cmd 0003               eventRead@data 0046                 __smallconst 0800  
                  ?_pinMode 0001                    ?_varInit 0001                    ?_setTime 0017  
                 _eventInit 1DC4                   _eventRead 0890                 _dsWriteData 1B82  
setAlarmLevel@newAlarmLevel 001D                 ??_Delay40us 0001              ___wmul@product 0005  
              ??_dsReadData 0010              ?_getAlarmLevel 0019                  ?_clear_SDA 0001  
                ?_clear_SCL 0001                   lcdInt@val 0017                ??_lcdCommand 0003  
                ?_lcdString 0004                ??_kpDebounce 0001           ___wmul@multiplier 0001  
                  _Delay2ms 1BDE          __end_of_dsReadData 1A2C                  ?_eventInit 0001  
                ?_eventRead 001F                 ??_i2c_start 0007         __end_of_setLanguage 1D9C  
                 copy_data0 1B2E          __end_of_lcdCommand 19E6                lcdData@valor 0003  
                  _i2c_stop 1BB0          __end_of_kpDebounce 166E                    __Hrparam 0000  
             ??_pulseEnable 0001                    __Lrparam 0000            dsWriteData@value 000E  
           _lcdCommand4bits 16E6                    __ptext10 1DFE                    __ptext11 186A  
                  __ptext20 1456                    __ptext12 126C                    __ptext21 1D84  
                  __ptext13 1D4C                    __ptext30 1AAA                    __ptext22 1CDE  
                  __ptext14 19E6                    __ptext31 1AE2                    __ptext23 1B82  
                  __ptext15 1816                    __ptext40 1D6A                    __ptext32 1102  
                  __ptext24 175E                    __ptext16 0890                    __ptext41 1DF2  
                  __ptext33 1C8C                    __ptext25 17BE                    __ptext17 1956  
                  __ptext50 1DD2                    __ptext42 166E                    __ptext34 0AEC  
                  __ptext26 1BB0                    __ptext18 18BC                    __ptext43 199E  
                  __ptext35 0D3A                    __ptext27 1A2C                    __ptext19 151A  
                  __ptext44 16E6                    __ptext36 1E06                    __ptext28 1C62  
                  __ptext45 1DF8                    __ptext37 1C0C                    __ptext29 1B50  
                  __ptext46 1D9C                    __ptext38 1E02                    __ptext47 1BDE  
                  __ptext39 1D04                    __ptext48 15CA                    __ptext49 1DC4  
                  _getState 1DFE                 _smLoop$1081 002E               ??_outputPrint 001D  
                  _language 0044             ??_getAlarmLevel 001B                    _read_SDA 1AAA  
                  _read_SCL 1AE2                 ??_clear_SDA 0007                 ??_clear_SCL 0007  
              ??_serialInit 0001                ??_serialRead 0001                    _setState 1DDC  
                Delay40us@j 0001                    lcdInit@i 0004                    isa$xinst 0000  
                  getTime@a 0043                    getTime@b 0042                 ??_lcdString 0005  
       __end_of_pulseEnable 1DFE                 _setLanguage 1D84      setLanguage@newLanguage 000F  
               ??_eventInit 0001                 ??_eventRead 0021               ?_digitalWrite 0001  
        __end_of_serialInit 1D84          __end_of_serialRead 1C38           digitalWrite@value 0003  
                  setTime@a 0041                    setTime@b 0040                ??_outputInit 0005  
       __end_of_outputPrint 1456                ?_digitalRead 0001                ?_getLanguage 0001  
   __end_of_lcdCommand4bits 175E              ??_digitalWrite 0005          __end_of_outputInit 1DF8  
           digitalWrite@pin 0001                ?_dsWriteData 000C         lcdCommand4bits@data 0001  
        lcdCommand4bits@cmd 0002                 _pulseEnable 1DF8  
